run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-gcc10.2-native.json -DCMAKE_CXX_FLAGS=-march=native
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DCMAKE_CXX_FLAGS=-march=native ..
-- The CXX compiler identification is GNU 10.2.0
-- The C compiler identification is GNU 10.2.0
-- Check for working CXX compiler: /usr/bin/g++-10
-- Check for working CXX compiler: /usr/bin/g++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/gcc-10
-- Check for working C compiler: /usr/bin/gcc-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Failed
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Failed
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-gcc10.2-native.json --benchmark_out_format=json
2021-01-23 04:35:29
Running benchmark/bench_ondemand
Run on (32 X 3300 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x32)
  L1 Instruction 32 KiB (x32)
  L2 Unified 256 KiB (x16)
Load Average: 1.01, 1.00, 0.72
simdjson::dom implementation:      arm64
simdjson::ondemand implementation: arm64

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                 1574550 ns      1642334 ns          445          17.002k           402.027M         25.942k       905.258k     5.0287M              7.96292           636.607       3.20131G          3.92139M                    6.20949                    0.779801           63.6607k    17.2611k   631.515k       382.496M/s   25.9398k   905.889k   5.03496M         7.97283    635.102/s 3.19771G/s     3.92139M               6.20949               0.778831        100       63.5102k/s [BEST: throughput=  0.40 GB/s doc_throughput=   636 docs/s instructions=     3921387 cycles=     5028701 branch_miss=   17002 cache_miss=   25942 cache_ref=    905258 items=       100 avg_time=   1574550 ns]
partial_tweets<simdjson_ondemand>/manual_time            1068240 ns      1135936 ns          655           6.987k           592.435M         22.789k       402.906k    3.41274M              5.40406           938.117       3.20155G          2.75757M                    4.36659                     0.80802           93.8117k    7.08971k   631.515k       563.787M/s   22.7919k   403.132k   3.41672M         5.41035    936.119/s 3.19845G/s     2.75756M               4.36659                0.80708        100       93.6119k/s [BEST: throughput=  0.59 GB/s doc_throughput=   938 docs/s instructions=     2757566 cycles=     3412744 branch_miss=    6987 cache_miss=   22789 cache_ref=    402906 items=       100 avg_time=   1068240 ns]
partial_tweets<yyjson>/manual_time                       1316885 ns      1306262 ns          567          48.313k           567.338M         24.424k       1.48999M    3.51845M              5.57145           898.376       3.16089G          3.54891M                    5.61968                     1.00866           89.8376k    47.9899k   631.515k       457.336M/s   24.3973k   1.49164M   3.73262M         5.91058    759.368/s 2.83443G/s     3.54899M                5.6198               0.950803        100       75.9368k/s [BEST: throughput=  0.57 GB/s doc_throughput=   898 docs/s instructions=     3548911 cycles=     3518455 branch_miss=   48313 cache_miss=   24424 cache_ref=   1489986 items=       100 avg_time=   1316885 ns]
partial_tweets<yyjson_insitu>/manual_time                1156596 ns      1227173 ns          605          48.011k           601.705M         14.507k       1.33167M      3.361M              5.32213           952.796       3.20235G          3.44977M                    5.46269                     1.02641           95.2796k    47.9796k   631.515k       520.718M/s   14.4937k   1.33238M   3.59014M         5.68497    864.606/s 3.10406G/s     3.44993M               5.46294               0.960943        100       86.4606k/s [BEST: throughput=  0.60 GB/s doc_throughput=   952 docs/s instructions=     3449773 cycles=     3361003 branch_miss=   48011 cache_miss=   14507 cache_ref=   1331669 items=       100 avg_time=   1156595 ns]
partial_tweets<sajson>/manual_time                       1483714 ns      1553280 ns          472          68.641k           426.634M         12.742k       1.87524M    4.73897M              7.50414           675.572       3.20152G          5.31238M                    8.41212                       1.121           67.5572k    69.0992k   631.515k       405.914M/s   12.7499k   1.87612M   4.74468M         7.51317    673.984/s 3.19784G/s     5.31238M               8.41213                1.11965        100       67.3984k/s [BEST: throughput=  0.43 GB/s doc_throughput=   675 docs/s instructions=     5312383 cycles=     4738975 branch_miss=   68641 cache_miss=   12742 cache_ref=   1875243 items=       100 avg_time=   1483713 ns]
partial_tweets<rapidjson>/manual_time                    2820185 ns      2891837 ns          249          75.569k           228.919M         13.024k       6.27263M    8.77227M              13.8908           362.492       3.17988G          13.3643M                    21.1623                     1.52347           36.2492k    75.4203k   631.515k       213.553M/s   13.2297k   6.26736M   8.81362M         13.9563    354.587/s 3.12519G/s     13.3649M               21.1633                 1.5164        100       35.4587k/s [BEST: throughput=  0.23 GB/s doc_throughput=   362 docs/s instructions=    13364327 cycles=     8772269 branch_miss=   75569 cache_miss=   13024 cache_ref=   6272632 items=       100 avg_time=   2820185 ns]
partial_tweets<rapidjson_insitu>/manual_time             2130888 ns      2202824 ns          329          59.229k           304.972M         13.652k       3.42953M    6.62834M              10.4959           482.921       3.20096G          9.76611M                    15.4646                     1.47339           48.2921k    59.4611k   631.515k       282.633M/s   13.8507k   3.43056M   6.66628M          10.556    469.288/s  3.1284G/s     9.76655M               15.4653                1.46507        100       46.9288k/s [BEST: throughput=  0.30 GB/s doc_throughput=   482 docs/s instructions=     9766110 cycles=     6628337 branch_miss=   59229 cache_miss=   13652 cache_ref=   3429534 items=       100 avg_time=   2130888 ns]
partial_tweets<nlohmann_json>/manual_time               16974239 ns     17067679 ns           41         362.339k           40.0143M        197.695k       38.6678M    50.4446M              79.8787           63.3624       3.19629G          68.9882M                    109.242                      1.3676           6.33624k    383.954k   631.515k       35.4808M/s    252.33k   38.7314M   54.2567M         85.9152    58.9128/s 3.19642G/s     68.9052M               109.111                1.26998        100       5.89128k/s [BEST: throughput=  0.04 GB/s doc_throughput=    63 docs/s instructions=    68988185 cycles=    50444620 branch_miss=  362339 cache_miss=  197695 cache_ref=  38667805 items=       100 avg_time=  16974238 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 310770770 ns    314351790 ns            2         1.92249M           148.025M        3.98121M       246.817M    993.236M              21.5927           3.21803       3.19626G          1.10647G                    24.0544                     1.11401           3.21803M     1.9229M   45.9988M       141.158M/s   3.98117M   246.817M   993.458M         21.5975    3.21781/s 3.19676G/s     1.10647G               24.0544                1.11376      1000k       3.21781M/s [BEST: throughput=  0.15 GB/s doc_throughput=     3 docs/s instructions=  1106473020 cycles=   993236394 branch_miss= 1922489 cache_miss= 3981210 cache_ref= 246817141 items=   1000000 avg_time= 310770770 ns]
large_random<simdjson_ondemand>/manual_time            182687734 ns    186281257 ns            4         1.17454M           251.849M        2.31764M       134.427M    584.001M               12.696           5.47512       3.19748G          689.959M                    14.9995                     1.18143           5.47512M    1.17485M   45.9988M       240.125M/s   2.31762M   134.427M   584.021M         12.6965    5.47382/s 3.19683G/s     689.959M               14.9995                1.18139      1000k       5.47382M/s [BEST: throughput=  0.25 GB/s doc_throughput=     5 docs/s instructions=   689958571 cycles=   584001162 branch_miss= 1174542 cache_miss= 2317635 cache_ref= 134426671 items=   1000000 avg_time= 182687734 ns]
large_random<simdjson_ondemand_unordered>/manual_time  185502823 ns    189110556 ns            4          1.2066M           248.096M        2.31757M       138.382M    592.814M              12.8876           5.39353       3.19736G          694.959M                    15.1082                      1.1723           5.39353M    1.20681M   45.9988M       236.481M/s   2.31763M   138.382M   592.894M         12.8893    5.39075/s 3.19615G/s     694.959M               15.1082                1.17215      1000k       5.39075M/s [BEST: throughput=  0.25 GB/s doc_throughput=     5 docs/s instructions=   694958569 cycles=   592814263 branch_miss= 1206599 cache_miss= 2317572 cache_ref= 138381861 items=   1000000 avg_time= 185502823 ns]
large_random<yyjson>/manual_time                       202880297 ns    206469993 ns            3         1.55279M           226.739M        4.91216M       234.772M    623.443M              13.5535           4.92925       3.07311G          908.191M                    19.7438                     1.45673           4.92925M    1.55263M   45.9988M       216.225M/s   4.91213M   234.783M   623.418M         13.5529    4.92901/s 3.07284G/s     908.191M               19.7438                1.45679      1000k       4.92901M/s [BEST: throughput=  0.23 GB/s doc_throughput=     4 docs/s instructions=   908191218 cycles=   623443238 branch_miss= 1552792 cache_miss= 4912156 cache_ref= 234771854 items=   1000000 avg_time= 202880296 ns]
large_random<yyjson_insitu>/manual_time                196809169 ns    200390356 ns            4         1.55113M            233.78M         4.1953M       223.244M    610.905M              13.2809           5.08231        3.1048G          901.004M                    19.5876                     1.47487           5.08231M    1.55254M   45.9988M       222.895M/s   4.19523M   223.248M   610.908M          13.281    5.08106/s 3.10406G/s     901.004M               19.5876                1.47486      1000k       5.08106M/s [BEST: throughput=  0.23 GB/s doc_throughput=     5 docs/s instructions=   901003551 cycles=   610904576 branch_miss= 1551135 cache_miss= 4195304 cache_ref= 223243959 items=   1000000 avg_time= 196809169 ns]
large_random<sajson>/manual_time                       191596274 ns    195173506 ns            4            1.66M           243.974M        3.44459M       222.126M    602.483M              13.0978           5.30392       3.19552G          955.996M                    20.7831                     1.58676           5.30392M    1.66188M   45.9988M        228.96M/s   3.44457M   222.129M   612.428M          13.314    5.21931/s 3.19645G/s     955.996M               20.7831                1.56099      1000k       5.21931M/s [BEST: throughput=  0.24 GB/s doc_throughput=     5 docs/s instructions=   955995643 cycles=   602482895 branch_miss= 1659996 cache_miss= 3444595 cache_ref= 222126137 items=   1000000 avg_time= 191596274 ns]
large_random<rapidjson>/manual_time                    351335820 ns    354917735 ns            2         1.94365M           131.217M        4.95191M       755.991M    1094.21M              23.7879           2.85262       3.12137G          1.65551G                    35.9902                     1.51297           2.85262M    1.95925M   45.9988M        124.86M/s   4.95298M   756.004M   1094.52M         23.7946    2.84628/s 3.11532G/s     1.65551G               35.9904                1.51254      1000k       2.84628M/s [BEST: throughput=  0.13 GB/s doc_throughput=     2 docs/s instructions=  1655507403 cycles=  1094212315 branch_miss= 1943645 cache_miss= 4951910 cache_ref= 755990966 items=   1000000 avg_time= 351335819 ns]
large_random<rapidjson_lossless>/manual_time           389724372 ns    393289091 ns            2         2.29323M           118.248M         4.9542M       953.126M    1.21653G              26.4471           2.57067       3.12731G          1.97048G                    42.8377                     1.61975           2.57067M     2.2982M   45.9988M       112.561M/s   4.95527M   953.127M   1.21651G         26.4466    2.56592/s 3.12147G/s     1.97049G               42.8378                1.61978      1000k       2.56592M/s [BEST: throughput=  0.12 GB/s doc_throughput=     2 docs/s instructions=  1970483171 cycles=  1216533163 branch_miss= 2293227 cache_miss= 4954200 cache_ref= 953125515 items=   1000000 avg_time= 389724372 ns]
large_random<rapidjson_insitu>/manual_time             329611318 ns    333211901 ns            2         1.98487M           139.859M        5.67129M       734.322M    1025.09M              22.2852           3.04049       3.11678G          1.55051G                    33.7076                     1.51255           3.04049M    1.99348M   45.9988M        133.09M/s   5.67214M    734.31M   1025.17M         22.2868    3.03388/s 3.11023G/s     1.55051G               33.7077                1.51245      1000k       3.03388M/s [BEST: throughput=  0.14 GB/s doc_throughput=     3 docs/s instructions=  1550507244 cycles=  1025091566 branch_miss= 1984868 cache_miss= 5671288 cache_ref= 734322425 items=   1000000 avg_time= 329611317 ns]
large_random<nlohmann_json>/manual_time               2692811065 ns   2696327258 ns            1         14.6296M           17.0821M         27.269M       5.84046G    8.60456G              187.061          0.371359       3.19538G          12.0941G                    262.922                     1.40554           371.359k    14.6296M   45.9988M       16.2907M/s    27.269M   5.84046G   8.60456G         187.061   0.371359/s 3.19538G/s     12.0941G               262.922                1.40554      1000k       371.359k/s [BEST: throughput=  0.02 GB/s doc_throughput=     0 docs/s instructions= 12094072927 cycles=  8604557456 branch_miss=14629618 cache_miss=27269020 cache_ref=5840457348 items=   1000000 avg_time=2692811065 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                       379146474 ns    389824469 ns            2         1.10392M           362.145M        6.94647M       246.889M    1.21207G               8.8276           2.63752       3.19687G          1.14604G                    8.34671                    0.945524           1.38282M    1.10424M   137.305M       345.366M/s   6.94649M   246.891M   1.21199G           8.827     2.6375/s 3.19663G/s     1.14604G               8.34671               0.945588   524.288k       1.38281M/s [BEST: throughput=  0.36 GB/s doc_throughput=     2 docs/s instructions=  1146044372 cycles=  1212073158 branch_miss= 1103918 cache_miss= 6946474 cache_ref= 246889107 items=    524288 avg_time= 379146474 ns]
kostya<simdjson_ondemand>/manual_time                  260091482 ns    270746461 ns            3         1.32733M           528.904M        5.28212M       138.125M    829.741M              6.04305           3.85204        3.1962G          796.596M                    5.80166                    0.960054           2.01958M    1.38667M   137.305M       503.455M/s   5.28215M   138.304M   831.329M         6.05462     3.8448/s  3.1963G/s     796.596M               5.80166                0.95822   524.288k       2.01578M/s [BEST: throughput=  0.53 GB/s doc_throughput=     3 docs/s instructions=   796596295 cycles=   829741195 branch_miss= 1327331 cache_miss= 5282123 cache_ref= 138125068 items=    524288 avg_time= 260091482 ns]
kostya<yyjson>/manual_time                             292388640 ns    303078112 ns            2         1012.94k           469.688M        7.98781M       344.643M    892.659M              6.50129           3.42076       3.05357G          1052.15M                    7.66289                     1.17867           1.79346M    1007.86k   137.305M       447.843M/s   7.98868M    344.63M   892.833M         6.50255    3.42011/s 3.05358G/s     1052.15M               7.66289                1.17844   524.288k       1.79312M/s [BEST: throughput=  0.47 GB/s doc_throughput=     3 docs/s instructions=  1052152414 cycles=   892659438 branch_miss= 1012938 cache_miss= 7987814 cache_ref= 344642863 items=    524288 avg_time= 292388639 ns]
kostya<yyjson_insitu>/manual_time                      274751416 ns    285455498 ns            3         1004.67k           499.766M        5.84956M       310.309M    856.951M              6.24122           3.63983       3.11915G           1030.7M                    7.50663                     1.20275           1.90832M    994.395k   137.305M       476.592M/s   5.85132M   310.281M   856.922M         6.24101    3.63965/s  3.1189G/s      1030.7M               7.50663                1.20279   524.288k       1.90823M/s [BEST: throughput=  0.50 GB/s doc_throughput=     3 docs/s instructions=  1030698164 cycles=   856951284 branch_miss= 1004674 cache_miss= 5849558 cache_ref= 310309117 items=    524288 avg_time= 274751415 ns]
kostya<sajson>/manual_time                             400140707 ns    410799535 ns            2          7.3334M           343.533M         4.6437M       425.066M    1.27745G              9.30374           2.50197       3.19615G          1.38919G                    10.1176                     1.08747           1.31175M    7.38634M   137.305M       327.246M/s    4.6437M   425.183M   1.27901G         9.31509    2.49912/s  3.1964G/s     1.38919G               10.1176                1.08615   524.288k       1.31026M/s [BEST: throughput=  0.34 GB/s doc_throughput=     2 docs/s instructions=  1389192347 cycles=  1277450342 branch_miss= 7333401 cache_miss= 4643702 cache_ref= 425065609 items=    524288 avg_time= 400140707 ns]
kostya<rapidjson>/manual_time                          565584259 ns    576236114 ns            1         7.81323M           242.767M        5.38887M       973.716M    1.77381G              12.9187           1.76808       3.13624G          2.37304G                     17.283                     1.33782           926.985k    7.81323M   137.305M        231.52M/s   5.38887M   973.716M   1.77381G         12.9187    1.76808/s 3.13624G/s     2.37304G                17.283                1.33782   524.288k       926.985k/s [BEST: throughput=  0.24 GB/s doc_throughput=     1 docs/s instructions=  2373037342 cycles=  1773806804 branch_miss= 7813228 cache_miss= 5388867 cache_ref= 973716111 items=    524288 avg_time= 565584259 ns]
kostya<rapidjson_lossless>/manual_time                 636197369 ns    597106869 ns            1         7.23697M           215.821M        5.38732M       1092.98M    1.83997G              13.4006           1.57184       2.89213G          2.55706G                    18.6232                     1.38973           824.096k    7.23697M   137.305M       205.823M/s   5.38732M   1092.98M   1.83997G         13.4006    1.57184/s 2.89213G/s     2.55706G               18.6232                1.38973   524.288k       824.096k/s [BEST: throughput=  0.22 GB/s doc_throughput=     1 docs/s instructions=  2557055786 cycles=  1839965011 branch_miss= 7236973 cache_miss= 5387321 cache_ref=1092982717 items=    524288 avg_time= 636197369 ns]
kostya<rapidjson_insitu>/manual_time                   540175065 ns    550852269 ns            1         6.57455M           254.186M        6.35788M       861.883M    1.69288G              12.3293           1.85125       3.13395G          2.17212G                    15.8197                     1.28309           970.589k    6.57455M   137.305M       242.411M/s   6.35788M   861.883M   1.69288G         12.3293    1.85125/s 3.13395G/s     2.17212G               15.8197                1.28309   524.288k       970.589k/s [BEST: throughput=  0.25 GB/s doc_throughput=     1 docs/s instructions=  2172119150 cycles=  1692880794 branch_miss= 6574550 cache_miss= 6357884 cache_ref= 861882932 items=    524288 avg_time= 540175065 ns]
kostya<nlohmann_json>/manual_time                     4087816932 ns   4098434066 ns            1         28.0268M           33.5888M        38.5623M        7.8731G    13.0671G              95.1685          0.244629        3.1966G          15.0753G                    109.794                     1.15368           128.256k    28.0268M   137.305M       32.0328M/s   38.5623M    7.8731G   13.0671G         95.1685   0.244629/s  3.1966G/s     15.0753G               109.794                1.15368   524.288k       128.256k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 15075319272 cycles= 13067116698 branch_miss=28026751 cache_miss=38562259 cache_ref=7873103309 items=    524288 avg_time=4087816932 ns]
distinct_user_id<simdjson_dom>/manual_time               1563041 ns      1645959 ns          448          16.826k           404.937M         26.523k       889.421k    4.99255M              7.90567           641.216        3.2013G          3.85168M                    6.09911                    0.771485           73.7398k    17.0694k   631.515k       385.313M/s   26.5291k   890.263k   4.99803M         7.91435    639.778/s 3.19763G/s     3.85168M               6.09911               0.770639        115       73.5745k/s [BEST: throughput=  0.40 GB/s doc_throughput=   641 docs/s instructions=     3851677 cycles=     4992550 branch_miss=   16826 cache_miss=   26523 cache_ref=    889421 items=       115 avg_time=   1563041 ns]
distinct_user_id<simdjson_ondemand>/manual_time          1055638 ns      1138451 ns          663           6.788k           599.622M         22.401k       400.455k    3.37199M              5.33953           949.498        3.2017G          2.73848M                    4.33636                    0.812124           109.192k    6.91905k   631.515k       570.517M/s   22.4139k   400.666k   3.37615M         5.34611    947.294/s  3.1982G/s     2.73848M               4.33636               0.811126        115       108.939k/s [BEST: throughput=  0.60 GB/s doc_throughput=   949 docs/s instructions=     2738478 cycles=     3371993 branch_miss=    6788 cache_miss=   22401 cache_ref=    400455 items=       115 avg_time=   1055638 ns]
distinct_user_id<yyjson>/manual_time                     1187101 ns      1273092 ns          610           47.86k           585.008M         24.214k       1.47598M    3.45666M              5.47361           926.357        3.2021G          3.51486M                    5.56576                     1.01684           106.531k    47.7861k   631.515k       507.337M/s   24.2043k    1.4767M   3.67241M         5.81524    842.388/s  3.0936G/s     3.51474M               5.56556               0.957066        115       96.8747k/s [BEST: throughput=  0.59 GB/s doc_throughput=   926 docs/s instructions=     3514864 cycles=     3456664 branch_miss=   47860 cache_miss=   24214 cache_ref=   1475976 items=       115 avg_time=   1187100 ns]
distinct_user_id<yyjson_insitu>/manual_time              1135029 ns      1221785 ns          616           47.78k           610.232M         14.283k        1.3176M    3.31377M              5.24733           966.298       3.20209G          3.41573M                    5.40878                     1.03077           111.124k    47.7928k   631.515k       530.612M/s   14.3143k    1.3178M   3.52085M         5.57524    881.035/s 3.10199G/s     3.41572M               5.40877               0.970141        115       101.319k/s [BEST: throughput=  0.61 GB/s doc_throughput=   966 docs/s instructions=     3415726 cycles=     3313770 branch_miss=   47780 cache_miss=   14283 cache_ref=   1317605 items=       115 avg_time=   1135028 ns]
distinct_user_id<sajson>/manual_time                     1468782 ns      1554172 ns          476          68.841k            431.21M         12.804k        1.8604M    4.68851M              7.42423           682.819        3.2014G          5.24709M                    8.30873                     1.11914           78.5242k    69.2761k   631.515k        410.04M/s    12.803k   1.86125M   4.69702M          7.4377    680.836/s  3.1979G/s     5.24709M               8.30874                1.11711        115       78.2962k/s [BEST: throughput=  0.43 GB/s doc_throughput=   682 docs/s instructions=     5247090 cycles=     4688512 branch_miss=   68841 cache_miss=   12804 cache_ref=   1860405 items=       115 avg_time=   1468781 ns]
distinct_user_id<rapidjson>/manual_time                  2787770 ns      2876367 ns          251          75.122k           232.816M         13.736k       6.25942M    8.68234M              13.7484           368.663       3.20086G          13.3287M                    21.1058                     1.53515           42.3963k    75.2859k   631.515k       216.036M/s   13.9757k   6.24995M   8.73289M         13.8285     358.71/s 3.13257G/s     13.3292M               21.1067                1.52632        115       41.2516k/s [BEST: throughput=  0.23 GB/s doc_throughput=   368 docs/s instructions=    13328651 cycles=     8682338 branch_miss=   75122 cache_miss=   13736 cache_ref=   6259417 items=       115 avg_time=   2787770 ns]
distinct_user_id<rapidjson_insitu>/manual_time           2117879 ns      2205995 ns          335          59.396k           306.677M         14.157k       3.41837M    6.59165M              10.4378           485.621       3.20104G          9.72905M                    15.4059                     1.47597           55.8464k     59.516k   631.515k       284.369M/s   14.3257k   3.41929M   6.62411M         10.4892     472.17/s 3.12771G/s     9.72953M               15.4066                1.46881        115       54.2996k/s [BEST: throughput=  0.31 GB/s doc_throughput=   485 docs/s instructions=     9729050 cycles=     6591646 branch_miss=   59396 cache_miss=   14157 cache_ref=   3418369 items=       115 avg_time=   2117879 ns]
distinct_user_id<nlohmann_json>/manual_time             15905126 ns     15997826 ns           45         335.817k           42.9506M        160.391k        36.348M     47.023M              74.4607            68.012       3.19813G          64.3568M                    101.909                     1.36862           7.82138k    348.901k   631.515k       37.8658M/s   219.961k   35.8263M   50.8415M         80.5071    62.8728/s 3.19655G/s     62.8315M               99.4933                1.23583        115       7.23037k/s [BEST: throughput=  0.04 GB/s doc_throughput=    68 docs/s instructions=    64356778 cycles=    47023025 branch_miss=  335817 cache_miss=  160391 cache_ref=  36348034 items=       115 avg_time=  15905126 ns]
find_tweet<simdjson_dom>/manual_time                     1518439 ns      1605446 ns          461          16.584k           416.761M          23.46k       873.446k    4.85079M              7.68119           659.938       3.20122G          3.76236M                    5.95767                    0.775618            659.938    16.7589k   631.515k       396.631M/s   23.4597k   874.058k   4.85578M          7.6891    658.571/s 3.19788G/s     3.76236M               5.95767                0.77482          1        658.571/s [BEST: throughput=  0.42 GB/s doc_throughput=   659 docs/s instructions=     3762357 cycles=     4850789 branch_miss=   16584 cache_miss=   23460 cache_ref=    873446 items=         1 avg_time=   1518438 ns]
find_tweet<simdjson_ondemand>/manual_time                 915065 ns      1002364 ns          765           3.968k           691.616M         11.556k       194.105k    2.92388M              4.62994           1095.17       3.20214G          2.05905M                    3.26049                    0.704219            1095.17    4.11125k   631.515k        658.16M/s   11.5561k   194.154k   2.92688M          4.6347    1092.82/s 3.19855G/s     2.05905M               3.26049               0.703496          1        1092.82/s [BEST: throughput=  0.69 GB/s doc_throughput=  1095 docs/s instructions=     2059051 cycles=     2923877 branch_miss=    3968 cache_miss=   11556 cache_ref=    194105 items=         1 avg_time=    915065 ns]
find_tweet<yyjson>/manual_time                           1336889 ns      1275563 ns          595           47.67k           605.357M         21.711k       1.45869M    3.34008M                5.289           958.579       3.20173G           3.4593M                    5.47779                     1.03569            958.579    47.5599k   631.515k       450.493M/s   21.7098k   1.46046M    3.5627M         5.64152    748.005/s 2.66492G/s     3.45952M               5.47813               0.971038          1        748.005/s [BEST: throughput=  0.61 GB/s doc_throughput=   958 docs/s instructions=     3459305 cycles=     3340082 branch_miss=   47670 cache_miss=   21711 cache_ref=   1458687 items=         1 avg_time=   1336888 ns]
find_tweet<yyjson_insitu>/manual_time                    1101702 ns      1194161 ns          637          47.147k           632.999M         11.818k       1.30011M    3.19476M              5.05889           1002.35       3.20227G          3.36031M                    5.32103                     1.05182            1002.35    47.5328k   631.515k       546.663M/s   11.8117k    1.3014M   3.41337M         5.40505    907.686/s 3.09827G/s     3.36046M               5.32127               0.984499          1        907.686/s [BEST: throughput=  0.63 GB/s doc_throughput=  1002 docs/s instructions=     3360309 cycles=     3194765 branch_miss=   47147 cache_miss=   11818 cache_ref=   1300111 items=         1 avg_time=   1101702 ns]
find_tweet<sajson>/manual_time                           1427136 ns      1521565 ns          490          68.711k           443.762M          10.18k       1.83911M    4.55595M              7.21433           702.694       3.20144G          5.16187M                    8.17379                     1.13299            702.694    69.1634k   631.515k       422.006M/s   10.1879k   1.84007M   4.56336M         7.22605    700.704/s 3.19756G/s     5.16187M               8.17379                1.13116          1        700.704/s [BEST: throughput=  0.44 GB/s doc_throughput=   702 docs/s instructions=     5161871 cycles=     4555955 branch_miss=   68711 cache_miss=   10180 cache_ref=   1839114 items=         1 avg_time=   1427136 ns]
find_tweet<rapidjson>/manual_time                        2781559 ns      2878408 ns          252          75.234k           233.187M         10.987k       6.24344M    8.66846M              13.7265            369.25       3.20083G           13.284M                    21.0351                     1.53245             369.25    75.3763k   631.515k       216.519M/s   11.2383k    6.2395M     8.711M         13.7938    359.511/s  3.1317G/s     13.2846M               21.0361                1.52504          1        359.511/s [BEST: throughput=  0.23 GB/s doc_throughput=   369 docs/s instructions=    13283962 cycles=     8668464 branch_miss=   75234 cache_miss=   10987 cache_ref=   6243439 items=         1 avg_time=   2781558 ns]
find_tweet<rapidjson_insitu>/manual_time                 2095006 ns      2194851 ns          339           59.26k            309.63M         10.823k       3.40518M    6.52868M              10.3381           490.298         3.201G          9.68515M                    15.3364                     1.48348            490.298    59.4031k   631.515k       287.474M/s   11.0077k   3.40713M   6.55063M         10.3729    477.326/s 3.12678G/s     9.68575M               15.3373                 1.4786          1        477.326/s [BEST: throughput=  0.31 GB/s doc_throughput=   490 docs/s instructions=     9685153 cycles=     6528679 branch_miss=   59260 cache_miss=   10823 cache_ref=   3405176 items=         1 avg_time=   2095005 ns]
find_tweet<nlohmann_json>/manual_time                   12939193 ns     13041857 ns           55         258.074k           52.9139M         88.907k       30.9822M    38.1298M              60.3783           83.7888       3.19485G          54.4242M                    86.1804                     1.42734            83.7888    272.356k   631.515k       46.5454M/s   139.714k   30.4341M   41.3578M         65.4898    77.2846/s 3.19632G/s     52.8601M               83.7036                1.27812          1        77.2846/s [BEST: throughput=  0.05 GB/s doc_throughput=    83 docs/s instructions=    54424191 cycles=    38129808 branch_miss=  258074 cache_miss=   88907 cache_ref=  30982164 items=         1 avg_time=  12939192 ns]
top_tweet<simdjson_dom>/manual_time                      1549756 ns      1652585 ns          452          16.805k             408.5M         25.556k       881.271k    4.94912M               7.8369           646.856       3.20137G          3.80074M                    6.01845                    0.767963            646.856    16.9793k   631.515k       388.616M/s   25.5559k   881.589k   4.95577M         7.84744    645.263/s 3.19778G/s     3.80074M               6.01845               0.766932          1        645.263/s [BEST: throughput=  0.41 GB/s doc_throughput=   646 docs/s instructions=     3800741 cycles=     4949118 branch_miss=   16805 cache_miss=   25556 cache_ref=    881271 items=         1 avg_time=   1549756 ns]
top_tweet<simdjson_ondemand>/manual_time                 1052473 ns      1156141 ns          665           6.495k           601.896M         22.423k       379.826k    3.35952M              5.31978           953.098       3.20195G          2.70591M                    4.28479                    0.805445            953.098    6.71415k   631.515k       572.233M/s   22.4285k   380.324k   3.36588M         5.32985    950.143/s 3.19807G/s     2.70591M               4.28479               0.803922          1        950.143/s [BEST: throughput=  0.60 GB/s doc_throughput=   953 docs/s instructions=     2705909 cycles=     3359522 branch_miss=    6495 cache_miss=   22423 cache_ref=    379826 items=         1 avg_time=   1052473 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time    1066637 ns      1173956 ns          656           6.679k           593.585M         22.725k       393.926k    3.40638M              5.39398           939.939       3.20179G          2.73439M                    4.32989                    0.802727            939.939    6.80034k   631.515k       564.634M/s   22.7113k   394.112k   3.41101M         5.40131    937.526/s 3.19791G/s     2.73439M               4.32989               0.801638          1        937.526/s [BEST: throughput=  0.59 GB/s doc_throughput=   939 docs/s instructions=     2734392 cycles=     3406379 branch_miss=    6679 cache_miss=   22725 cache_ref=    393926 items=         1 avg_time=   1066636 ns]
top_tweet<yyjson>/manual_time                            1202357 ns      1311331 ns          586          48.397k           591.991M         23.324k       1.46773M    3.41554M              5.40849           937.414       3.20178G          3.48273M                    5.51488                     1.01967            937.414    47.8212k   631.515k       500.899M/s    23.399k   1.46843M   3.62737M         5.74392      831.7/s 3.01689G/s     3.48294M               5.51522               0.960183          1          831.7/s [BEST: throughput=  0.59 GB/s doc_throughput=   937 docs/s instructions=     3482730 cycles=     3415543 branch_miss=   48397 cache_miss=   23324 cache_ref=   1467729 items=         1 avg_time=   1202357 ns]
top_tweet<yyjson_insitu>/manual_time                     1124711 ns      1236439 ns          624          47.855k           619.058M         13.502k       1.30817M    3.26644M              5.17239           980.275       3.20201G          3.38373M                    5.35812                     1.03591            980.275    47.8041k   631.515k       535.479M/s   13.5072k     1.309M   3.48758M         5.52256    889.117/s 3.10087G/s     3.38388M               5.35836               0.970266          1        889.117/s [BEST: throughput=  0.62 GB/s doc_throughput=   980 docs/s instructions=     3383734 cycles=     3266444 branch_miss=   47855 cache_miss=   13502 cache_ref=   1308172 items=         1 avg_time=   1124711 ns]
top_tweet<sajson>/manual_time                            1446088 ns      1557528 ns          484           68.87k           437.976M         11.776k       1.84777M     4.6157M              7.30894           693.532       3.20114G          5.18707M                     8.2137                     1.12379            693.532     69.272k   631.515k       416.475M/s   11.7815k   1.84902M   4.62437M         7.32265    691.521/s 3.19784G/s     5.18707M                8.2137                1.12168          1        691.521/s [BEST: throughput=  0.44 GB/s doc_throughput=   693 docs/s instructions=     5187073 cycles=     4615704 branch_miss=   68870 cache_miss=   11776 cache_ref=   1847768 items=         1 avg_time=   1446088 ns]
top_tweet<rapidjson>/manual_time                         2782067 ns      2897260 ns          251          75.434k           233.507M         12.837k       6.25167M    8.65664M              13.7077           369.757       3.20085G          13.3177M                    21.0884                     1.53843            369.757    75.4681k   631.515k       216.479M/s   13.0762k   6.24333M   8.71213M         13.7956    359.445/s 3.13153G/s     13.3183M               21.0894                 1.5287          1        359.445/s [BEST: throughput=  0.23 GB/s doc_throughput=   369 docs/s instructions=    13317669 cycles=     8656636 branch_miss=   75434 cache_miss=   12837 cache_ref=   6251666 items=         1 avg_time=   2782067 ns]
top_tweet<rapidjson_insitu>/manual_time                  2111729 ns      2229837 ns          336          59.421k           307.327M         13.048k       3.41562M    6.57751M              10.4154            486.65       3.20094G          9.71697M                    15.3868                      1.4773             486.65    59.4921k   631.515k       285.197M/s   13.2098k   3.41639M     6.604M         10.4574    473.546/s  3.1273G/s     9.71757M               15.3877                1.47147          1        473.546/s [BEST: throughput=  0.31 GB/s doc_throughput=   486 docs/s instructions=     9716975 cycles=     6577505 branch_miss=   59421 cache_miss=   13048 cache_ref=   3415620 items=         1 avg_time=   2111728 ns]
top_tweet<nlohmann_json>/manual_time                    18446326 ns     18568208 ns           38         424.621k           34.3236M        338.702k       42.3596M    58.8199M              93.1409           54.3512       3.19693G          76.6988M                    121.452                     1.30396            54.3512    430.509k   631.515k       32.6493M/s   338.477k   42.3214M   58.9606M         93.3637    54.2113/s 3.19633G/s     76.6029M                 121.3                1.29922          1        54.2113/s [BEST: throughput=  0.03 GB/s doc_throughput=    54 docs/s instructions=    76698839 cycles=    58819870 branch_miss=  424621 cache_miss=  338702 cache_ref=  42359563 items=         1 avg_time=  18446326 ns]
