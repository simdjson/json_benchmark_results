run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-clang11-native.json -DCMAKE_CXX_FLAGS=-march=native
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DCMAKE_CXX_FLAGS=-march=native ..
-- The CXX compiler identification is Clang 11.0.0
-- The C compiler identification is Clang 11.0.0
-- Check for working CXX compiler: /usr/bin/clang++-11
-- Check for working CXX compiler: /usr/bin/clang++-11 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/clang-11
-- Check for working C compiler: /usr/bin/clang-11 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Success
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Success
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES -- failed to compile
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-clang11-native.json --benchmark_out_format=json
2021-01-23 04:14:45
Running benchmark/bench_ondemand
Run on (4 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 256 KiB (x4)
  L3 Unified 8192 KiB (x1)
Load Average: 1.00, 0.82, 0.46
simdjson::dom implementation:      haswell
simdjson::ondemand implementation: haswell

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                  272149 ns       300434 ns         2523           3.523k           2.33342G               0         87.71k    999.358k              1.58248          3.69496k       3.69259G          2.99337M                    4.73999                     2.99529           369.496k    3.68252k   631.515k       2.16111G/s      1.239   87.7596k   1004.42k         1.59049   3.67446k/s 3.69069G/s     2.99337M               4.73999                2.98021        100       367.446k/s [BEST: throughput=  2.33 GB/s doc_throughput=  3694 docs/s instructions=     2993372 cycles=      999358 branch_miss=    3523 cache_miss=       0 cache_ref=     87710 items=       100 avg_time=    272148 ns]
partial_tweets<simdjson_ondemand>/manual_time             174660 ns       202721 ns         4003           1.738k           3.64208G               0        55.388k     640.44k              1.01413          5.76721k       3.69355G          1.94668M                    3.08256                      3.0396           576.721k    1.88543k   631.515k       3.36736G/s   0.163377   55.3474k   644.751k         1.02096    5.7254k/s 3.69146G/s     1.94668M               3.08256                3.01927        100        572.54k/s [BEST: throughput=  3.64 GB/s doc_throughput=  5767 docs/s instructions=     1946680 cycles=      640440 branch_miss=    1738 cache_miss=       0 cache_ref=     55388 items=       100 avg_time=    174660 ns]
partial_tweets<yyjson>/manual_time                        637619 ns       668348 ns         1101          10.124k           1.79756G             421        74.574k    1.29743M              2.05448          2.84642k       3.69305G           2.9196M                    4.62317                     2.25029           284.642k     7.4002k   631.515k       944.545M/s    917.734   49.2101k   1.49378M         2.36539   1.56834k/s 2.34274G/s     2.92009M               4.62394                1.95484        100       156.834k/s [BEST: throughput=  1.80 GB/s doc_throughput=  2846 docs/s instructions=     2919603 cycles=     1297435 branch_miss=   10124 cache_miss=     421 cache_ref=     74574 items=       100 avg_time=    637618 ns]
partial_tweets<yyjson_insitu>/manual_time                 423765 ns       452713 ns         1653           6.702k           2.07237G             990        45.475k    1.11907M              1.77204          3.28158k       3.67232G          2.91929M                    4.62268                     2.60868           328.158k     7.2137k   631.515k        1.3879G/s    166.154   31.7608k   1.22167M          1.9345    2.3598k/s 2.88289G/s     2.91955M               4.62309                2.38981        100        235.98k/s [BEST: throughput=  2.07 GB/s doc_throughput=  3281 docs/s instructions=     2919289 cycles=     1119069 branch_miss=    6702 cache_miss=     990 cache_ref=     45475 items=       100 avg_time=    423764 ns]
partial_tweets<sajson>/manual_time                        597378 ns       625679 ns         1166          10.558k           1068.99M               0        45.594k    2.18102M              3.45363          1.69275k       3.69191G          5.87691M                    9.30604                     2.69457           169.275k    10.8898k   631.515k       1008.17M/s    1.36792   45.7016k   2.20431M         3.49052   1.67398k/s 3.68998G/s     5.87691M               9.30604                2.66609        100       167.398k/s [BEST: throughput=  1.07 GB/s doc_throughput=  1692 docs/s instructions=     5876906 cycles=     2181018 branch_miss=   10558 cache_miss=       0 cache_ref=     45594 items=       100 avg_time=    597378 ns]
partial_tweets<rapidjson>/manual_time                    2365388 ns      2394276 ns          296            30.6k           291.539M             502        52.198k    7.98281M              12.6407            461.65       3.68526G          21.8946M                    34.6699                     2.74272            46.165k    30.9661k   631.515k       254.613M/s    623.409   33.2729k   8.13997M         12.8896    422.764/s 3.44128G/s     21.8954M               34.6712                2.68986        100       42.2764k/s [BEST: throughput=  0.29 GB/s doc_throughput=   461 docs/s instructions=    21894589 cycles=     7982811 branch_miss=   30600 cache_miss=     502 cache_ref=     52198 items=       100 avg_time=   2365388 ns]
partial_tweets<rapidjson_insitu>/manual_time             1548837 ns      1577406 ns          452          25.106k           440.683M              21        42.924k     5.2903M              8.37716           697.818       3.69167G          13.3202M                    21.0925                     2.51786           69.7818k    25.8601k   631.515k       388.846M/s    281.332   33.8517k   5.36847M         8.50093    645.646/s 3.46613G/s     13.3208M               21.0935                2.48131        100       64.5646k/s [BEST: throughput=  0.44 GB/s doc_throughput=   697 docs/s instructions=    13320245 cycles=     5290301 branch_miss=   25106 cache_miss=      21 cache_ref=     42924 items=       100 avg_time=   1548836 ns]
partial_tweets<nlohmann_json>/manual_time                9529649 ns      9564198 ns           82         150.817k           76.2697M               0        224.79k    30.5495M              48.3749           120.773       3.68954G          80.3004M                    127.155                     2.62854           12.0773k    278.536k   631.515k       63.1985M/s     61.122   364.567k   35.1584M         55.6731    104.936/s 3.68937G/s     80.7473M               127.863                2.29667        100       10.4936k/s [BEST: throughput=  0.08 GB/s doc_throughput=   120 docs/s instructions=    80300450 cycles=    30549474 branch_miss=  150817 cache_miss=       0 cache_ref=    224790 items=       100 avg_time=   9529649 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                  87766398 ns     91148490 ns            8         928.295k           524.795M        10.9036M       15.2035M    323.352M              7.02958           11.4089       3.68909G          1035.69M                    22.5155                     3.20297           11.4089M     930.36k   45.9988M       499.825M/s   10.9393M   15.2104M   323.759M         7.03842    11.3939/s 3.68887G/s     1035.69M               22.5155                3.19894      1000k       11.3939M/s [BEST: throughput=  0.52 GB/s doc_throughput=    11 docs/s instructions=  1035686042 cycles=   323352214 branch_miss=  928295 cache_miss=10903631 cache_ref=  15203532 items=   1000000 avg_time=  87766397 ns]
large_random<simdjson_ondemand>/manual_time             65646972 ns     69001673 ns           11         916.751k           701.436M        5.68985M        7.9006M    241.909M              5.25904            15.249       3.68888G          670.142M                    14.5687                     2.77022            15.249M    922.795k   45.9988M       668.239M/s   5.69782M   7.89938M   242.164M         5.26457     15.233/s 3.68888G/s     670.142M               14.5687                2.76731      1000k        15.233M/s [BEST: throughput=  0.70 GB/s doc_throughput=    15 docs/s instructions=   670141948 cycles=   241909464 branch_miss=  916751 cache_miss= 5689853 cache_ref=   7900601 items=   1000000 avg_time=  65646971 ns]
large_random<simdjson_ondemand_unordered>/manual_time   66418577 ns     69772606 ns           11         897.413k           693.036M        5.66705M       7.89735M     244.87M               5.3234           15.0664       3.68931G          674.142M                    14.6556                     2.75306           15.0664M    897.567k   45.9988M       660.476M/s   5.70519M   7.90005M   245.014M         5.32653     15.056/s 3.68893G/s     674.142M               14.6556                2.75145      1000k        15.056M/s [BEST: throughput=  0.69 GB/s doc_throughput=    15 docs/s instructions=   674141946 cycles=   244869882 branch_miss=  897413 cache_miss= 5667050 cache_ref=   7897347 items=   1000000 avg_time=  66418577 ns]
large_random<yyjson>/manual_time                       115278332 ns    118699432 ns            6         675.992k           399.176M        5.76036M       8.92475M    306.533M              6.66395           8.67796       2.66009G          855.681M                    18.6023                     2.79148           8.67796M    676.822k   45.9988M       380.539M/s   5.75805M   8.91847M   306.689M         6.66732    8.67466/s 2.66042G/s     855.681M               18.6023                2.79006      1000k       8.67466M/s [BEST: throughput=  0.40 GB/s doc_throughput=     8 docs/s instructions=   855680744 cycles=   306533466 branch_miss=  675992 cache_miss= 5760359 cache_ref=   8924748 items=   1000000 avg_time= 115278332 ns]
large_random<yyjson_insitu>/manual_time                 97557443 ns    100972567 ns            7         673.694k            472.12M        4.87995M       7.57279M    274.906M              5.97638           10.2638       2.82157G           849.56M                    18.4692                     3.09036           10.2638M    676.441k   45.9988M       449.662M/s   4.88534M   7.58324M   275.107M         5.98074    10.2504/s 2.81995G/s      849.56M               18.4692                3.08811      1000k       10.2504M/s [BEST: throughput=  0.47 GB/s doc_throughput=    10 docs/s instructions=   849559979 cycles=   274906107 branch_miss=  673694 cache_miss= 4879948 cache_ref=   7572786 items=   1000000 avg_time=  97557443 ns]
large_random<sajson>/manual_time                        88227329 ns     91616644 ns            8         577.826k           523.239M        8.24122M        12.192M    324.323M               7.0507           11.3751        3.6892G             1087M                     23.631                     3.35158           11.3751M    577.764k   45.9988M       497.214M/s   8.28043M   12.0723M   325.489M         7.07603    11.3344/s 3.68921G/s        1087M                23.631                3.33958      1000k       11.3344M/s [BEST: throughput=  0.52 GB/s doc_throughput=    11 docs/s instructions=  1086995282 cycles=   324323479 branch_miss=  577826 cache_miss= 8241222 cache_ref=  12191953 items=   1000000 avg_time=  88227328 ns]
large_random<rapidjson>/manual_time                    216782879 ns    220197220 ns            3         593.402k           217.671M        7.04751M       10.6901M    721.508M              15.6854            4.7321       3.41425G          2.01014G                    43.6999                     2.78603            4.7321M    587.652k   45.9988M       202.358M/s   6.53607M   10.0462M   723.022M         15.7183    4.61291/s 3.33524G/s     2.01015G               43.7001                2.78021      1000k       4.61291M/s [BEST: throughput=  0.22 GB/s doc_throughput=     4 docs/s instructions=  2010143783 cycles=   721508134 branch_miss=  593402 cache_miss= 7047514 cache_ref=  10690131 items=   1000000 avg_time= 216782878 ns]
large_random<rapidjson_lossless>/manual_time           248703610 ns    252119404 ns            3         580.347k           189.314M        7.02297M       10.6953M    838.559M                18.23           4.11562       3.45119G          2.47511G                    53.8082                     2.95162           4.11562M    580.556k   45.9988M       176.386M/s   6.52233M   10.0424M   841.078M         18.2848    4.02085/s 3.38185G/s     2.47512G               53.8084                 2.9428      1000k       4.02085M/s [BEST: throughput=  0.19 GB/s doc_throughput=     4 docs/s instructions=  2475111074 cycles=   838559303 branch_miss=  580347 cache_miss= 7022966 cache_ref=  10695314 items=   1000000 avg_time= 248703609 ns]
large_random<rapidjson_insitu>/manual_time             238215933 ns    241620810 ns            3         586.236k           197.693M        8.11894M       12.2676M    800.659M              17.4061           4.29779       3.44107G          1.72014G                    37.3954                     2.14841           4.29779M     583.24k   45.9988M       184.152M/s   7.64331M   11.6037M   802.426M         17.4445    4.19787/s 3.36848G/s     1.72015G               37.3956                2.14369      1000k       4.19787M/s [BEST: throughput=  0.20 GB/s doc_throughput=     4 docs/s instructions=  1720143798 cycles=   800659218 branch_miss=  586236 cache_miss= 8118943 cache_ref=  12267588 items=   1000000 avg_time= 238215932 ns]
large_random<nlohmann_json>/manual_time               1282741312 ns   1286150689 ns            1          4.1145M           35.8597M        47.1477M       60.8363M    4.71983G              102.608           0.77958       3.67949G          12.7456G                    277.085                     2.70043            779.58k     4.1145M   45.9988M       34.1985M/s   47.1477M   60.8363M   4.71983G         102.608    0.77958/s 3.67949G/s     12.7456G               277.085                2.70043      1000k        779.58k/s [BEST: throughput=  0.04 GB/s doc_throughput=     0 docs/s instructions= 12745550485 cycles=  4719827544 branch_miss= 4114502 cache_miss=47147726 cache_ref=  60836258 items=   1000000 avg_time=1282741312 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                        93615968 ns    103769361 ns            7         1.11382M           1.46852G        15.9002M       22.2924M    344.935M              2.51218           10.6953        3.6892G          985.796M                    7.17961                     2.85792           5.60744M    1.11423M   137.305M       1.36596G/s   15.9109M   22.2067M   345.359M         2.51527    10.6819/s 3.68911G/s     985.796M               7.17961                2.85441   524.288k       5.60041M/s [BEST: throughput=  1.47 GB/s doc_throughput=    10 docs/s instructions=   985795975 cycles=   344935282 branch_miss= 1113818 cache_miss=15900232 cache_ref=  22292384 items=    524288 avg_time=  93615967 ns]
kostya<simdjson_ondemand>/manual_time                   62645900 ns     72756999 ns           11         555.291k           2.19331G        10.1218M       13.9306M    230.942M              1.68196            15.974       3.68907G          652.062M                      4.749                     2.82349           8.37498M    554.524k   137.305M       2.04124G/s   10.1392M   13.8739M   231.091M         1.68305    15.9627/s 3.68884G/s     652.062M                 4.749                2.82167   524.288k       8.36907M/s [BEST: throughput=  2.19 GB/s doc_throughput=    15 docs/s instructions=   652061660 cycles=   230942012 branch_miss=  555291 cache_miss=10121765 cache_ref=  13930599 items=    524288 avg_time=  62645899 ns]
kostya<yyjson>/manual_time                             173692185 ns    183880075 ns            4         415.258k           791.405M        11.2127M       16.2758M    444.968M              3.24073           5.76385       2.56473G          974.184M                    7.09504                     2.18934           3.02192M    415.272k   137.305M       753.887M/s   11.2129M   16.2439M    444.96M         3.24067    5.75731/s 2.56178G/s     974.185M               7.09504                2.18937   524.288k       3.01849M/s [BEST: throughput=  0.79 GB/s doc_throughput=     5 docs/s instructions=   974184477 cycles=   444968136 branch_miss=  415258 cache_miss=11212745 cache_ref=  16275802 items=    524288 avg_time= 173692184 ns]
kostya<yyjson_insitu>/manual_time                      119971243 ns    130172160 ns            6         416.779k           1.14505G         8.7053M       12.4051M    348.667M              2.53936           8.33945       2.90769G          955.915M                    6.96198                     2.74163           4.37227M    417.195k   137.305M       1091.46M/s   8.70541M   12.3867M   348.629M         2.53909    8.33533/s 2.90594G/s     955.915M               6.96198                2.74192   524.288k       4.37011M/s [BEST: throughput=  1.15 GB/s doc_throughput=     8 docs/s instructions=   955915125 cycles=   348667340 branch_miss=  416779 cache_miss= 8705299 cache_ref=  12405137 items=    524288 avg_time= 119971243 ns]
kostya<sajson>/manual_time                             136900488 ns    147085951 ns            5         356.338k            1004.1M         12.346M       17.1442M    504.478M              3.67414           7.31291        3.6892G          1.51716G                    11.0496                     3.00739           3.83407M    356.516k   137.305M       956.492M/s   12.3672M   17.1755M   505.022M          3.6781    7.30458/s 3.68897G/s     1.51716G               11.0496                3.00415   524.288k        3.8297M/s [BEST: throughput=  1.00 GB/s doc_throughput=     7 docs/s instructions=  1517163295 cycles=   504477888 branch_miss=  356338 cache_miss=12345980 cache_ref=  17144212 items=    524288 avg_time= 136900487 ns]
kostya<rapidjson>/manual_time                          278672162 ns    288886889 ns            3         985.619k           498.664M        8.32645M        12.088M    934.663M               6.8072            3.6318        3.3945G          2.73767G                    19.9386                     2.92905           1.90411M    982.428k   137.305M       469.886M/s   8.02334M   11.7403M   937.466M         6.82762    3.58845/s 3.36405G/s     2.73768G               19.9386                2.92029   524.288k       1.88138M/s [BEST: throughput=  0.50 GB/s doc_throughput=     3 docs/s instructions=  2737673304 cycles=   934662729 branch_miss=  985619 cache_miss= 8326455 cache_ref=  12088016 items=    524288 avg_time= 278672162 ns]
kostya<rapidjson_lossless>/manual_time                 304172622 ns    314383609 ns            2         965.676k           455.042M        8.32352M       12.1087M    1031.77M              7.51441            3.3141       3.41937G          3.00662G                    21.8974                     2.91406           1.73754M    965.537k   137.305M       430.493M/s   8.09598M    11.843M   1033.58M         7.52765    3.28761/s 3.39802G/s     3.00663G               21.8974                2.90893   524.288k       1.72365M/s [BEST: throughput=  0.46 GB/s doc_throughput=     3 docs/s instructions=  3006623743 cycles=  1031765613 branch_miss=  965676 cache_miss= 8323522 cache_ref=  12108653 items=    524288 avg_time= 304172622 ns]
kostya<rapidjson_insitu>/manual_time                   275942592 ns    286172940 ns            3         959.827k           503.231M        12.0021M       16.0753M    925.441M              6.74004           3.66506        3.3918G          2.21153G                    16.1067                      2.3897           1.92155M    962.232k   137.305M       474.534M/s   11.7001M   15.6769M   927.348M         6.75393    3.62394/s 3.36065G/s     2.21153G               16.1067                2.38479   524.288k       1.89999M/s [BEST: throughput=  0.50 GB/s doc_throughput=     3 docs/s instructions=  2211525004 cycles=   925441083 branch_miss=  959827 cache_miss=12002082 cache_ref=  16075332 items=    524288 avg_time= 275942591 ns]
kostya<nlohmann_json>/manual_time                     1939392026 ns   1949616761 ns            1         13.8023M            70.798M        69.9836M       87.7252M    7.15536G              52.1129          0.515626       3.68949G          17.7606G                    129.351                     2.48214           270.336k    13.8023M   137.305M       67.5182M/s   69.9836M   87.7252M   7.15536G         52.1129   0.515626/s 3.68949G/s     17.7606G               129.351                2.48214   524.288k       270.336k/s [BEST: throughput=  0.07 GB/s doc_throughput=     0 docs/s instructions= 17760586962 cycles=  7155364294 branch_miss=13802273 cache_miss=69983637 cache_ref=  87725214 items=    524288 avg_time=1939392026 ns]
distinct_user_id<simdjson_dom>/manual_time                271884 ns       301812 ns         2572           3.699k           2.33503G               0        89.095k    998.851k              1.58167           3.6975k       3.69325G          2.92855M                    4.63734                     2.93192           425.213k    3.82872k   631.515k       2.16322G/s   0.938569   89.1465k   1003.52k         1.58906   3.67804k/s 3.69097G/s     2.92855M               4.63734                2.91828        115       422.974k/s [BEST: throughput=  2.34 GB/s doc_throughput=  3697 docs/s instructions=     2928548 cycles=      998851 branch_miss=    3699 cache_miss=       0 cache_ref=     89095 items=       115 avg_time=    271884 ns]
distinct_user_id<simdjson_ondemand>/manual_time           161637 ns       190832 ns         4329            2.13k           3.93556G               0        53.374k    592.624k             0.938416          6.23193k       3.69319G          1.89587M                    3.00209                     3.19911           716.672k    2.24568k   631.515k       3.63868G/s    0.01386   53.2315k   596.672k        0.944827   6.18671k/s 3.69144G/s     1.89587M               3.00209                 3.1774        115       711.471k/s [BEST: throughput=  3.94 GB/s doc_throughput=  6231 docs/s instructions=     1895867 cycles=      592624 branch_miss=    2130 cache_miss=       0 cache_ref=     53374 items=       115 avg_time=    161636 ns]
distinct_user_id<yyjson>/manual_time                      544623 ns       577638 ns         1000           6.509k           1.92887G         21.877k        73.925k    1.20882M              1.91415          3.05435k       3.69215G            2.878M                     4.5573                     2.38084            351.25k    7.29843k   631.515k       1105.83M/s   7.39114k   55.6525k   1.41795M         2.24531   1.83613k/s 2.60354G/s     2.87828M               4.55774                2.02989        115       211.155k/s [BEST: throughput=  1.93 GB/s doc_throughput=  3054 docs/s instructions=     2878002 cycles=     1208817 branch_miss=    6509 cache_miss=   21877 cache_ref=     73925 items=       115 avg_time=    544623 ns]
distinct_user_id<yyjson_insitu>/manual_time               416641 ns       448823 ns         1681           6.857k           2.10288G             333        44.225k    1.10549M              1.75053           3.3299k       3.68117G          2.87759M                    4.55665                     2.60301           382.939k    7.32009k   631.515k       1.41163G/s     44.981   30.4536k    1.2053M         1.90859   2.40015k/s  2.8929G/s     2.87785M               4.55707                2.38767        115       276.017k/s [BEST: throughput=  2.10 GB/s doc_throughput=  3329 docs/s instructions=     2877592 cycles=     1105487 branch_miss=    6857 cache_miss=     333 cache_ref=     44225 items=       115 avg_time=    416640 ns]
distinct_user_id<sajson>/manual_time                      593625 ns       623877 ns         1177          10.517k           1074.88M               0        45.657k      2.169M               3.4346          1.70206k       3.69178G          5.81547M                    9.20876                     2.68117           195.737k    10.8512k   631.515k       1014.55M/s   0.661003   45.5648k   2.19031M         3.46834   1.68457k/s 3.68972G/s     5.81547M               9.20876                2.65509        115       193.725k/s [BEST: throughput=  1.07 GB/s doc_throughput=  1702 docs/s instructions=     5815469 cycles=     2169003 branch_miss=   10517 cache_miss=       0 cache_ref=     45657 items=       115 avg_time=    593624 ns]
distinct_user_id<rapidjson>/manual_time                  2347857 ns      2378162 ns          300          30.624k           292.276M              86        52.385k    7.96436M              12.6115           462.817       3.68604G          21.8232M                    34.5568                      2.7401           53.2239k    30.7199k   631.515k       256.515M/s   1.27894k   34.7096k   8.11162M         12.8447     425.92/s 3.45491G/s      21.824M               34.5581                2.69046        115       48.9808k/s [BEST: throughput=  0.29 GB/s doc_throughput=   462 docs/s instructions=    21823167 cycles=     7964359 branch_miss=   30624 cache_miss=      86 cache_ref=     52385 items=       115 avg_time=   2347856 ns]
distinct_user_id<rapidjson_insitu>/manual_time           1551747 ns      1581925 ns          451          25.033k           442.213M              76        42.974k    5.27179M              8.34785           700.242       3.69153G          13.2539M                    20.9875                     2.51412           80.5278k    30.8685k   631.515k       388.117M/s   2.84433k    36.558k   5.45871M         8.64383    644.435/s 3.51779G/s     13.2544M               20.9883                2.42812        115         74.11k/s [BEST: throughput=  0.44 GB/s doc_throughput=   700 docs/s instructions=    13253907 cycles=     5271791 branch_miss=   25033 cache_miss=      76 cache_ref=     42974 items=       115 avg_time=   1551746 ns]
distinct_user_id<nlohmann_json>/manual_time              8403001 ns      8436529 ns           90         124.667k           81.8822M          1.553k       221.788k     28.446M               45.044            129.66        3.6883G          75.7196M                    119.901                     2.66187           14.9109k    188.525k   631.515k        71.672M/s    30.9667    411.22k    31.001M         49.0899    119.005/s 3.68928G/s     74.3674M                117.76                2.39887        115       13.6856k/s [BEST: throughput=  0.08 GB/s doc_throughput=   129 docs/s instructions=    75719560 cycles=    28445964 branch_miss=  124667 cache_miss=    1553 cache_ref=    221788 items=       115 avg_time=   8403000 ns]
find_tweet<simdjson_dom>/manual_time                      260971 ns       289740 ns         2682           3.456k           2.43091G               0        78.687k    959.261k              1.51898          3.84934k       3.69252G          2.84337M                    4.50246                     2.96413           3.84934k     3.5466k   631.515k       2.25368G/s   0.319911   78.7848k   963.098k         1.52506   3.83185k/s 3.69044G/s     2.84337M               4.50246                2.95232          1       3.83185k/s [BEST: throughput=  2.43 GB/s doc_throughput=  3849 docs/s instructions=     2843374 cycles=      959261 branch_miss=    3456 cache_miss=       0 cache_ref=     78687 items=         1 avg_time=    260970 ns]
find_tweet<simdjson_ondemand>/manual_time                 117597 ns       145625 ns         5948           1.178k           5.39807G              17        30.801k    432.083k             0.684201          8.54781k       3.69336G          1.38727M                    2.19673                     3.21064           8.54781k    1.22734k   631.515k       5.00137G/s     5.9346   30.8452k    434.15k        0.687474   8.50365k/s 3.69186G/s     1.38727M               2.19673                3.19536          1       8.50365k/s [BEST: throughput=  5.40 GB/s doc_throughput=  8547 docs/s instructions=     1387265 cycles=      432083 branch_miss=    1178 cache_miss=      17 cache_ref=     30801 items=         1 avg_time=    117596 ns]
find_tweet<yyjson>/manual_time                            608003 ns       638647 ns         1159           9.185k            1.9071G             153        65.663k    1.22268M               1.9361          3.01988k       3.69233G          2.81715M                    4.46093                     2.30408           3.01988k    7.26763k   631.515k       990.554M/s    1050.49   39.4945k   1.44299M         2.28497   1.64473k/s 2.37333G/s     2.81763M                4.4617                1.95263          1       1.64473k/s [BEST: throughput=  1.91 GB/s doc_throughput=  3019 docs/s instructions=     2817146 cycles=     1222676 branch_miss=    9185 cache_miss=     153 cache_ref=     65663 items=         1 avg_time=    608002 ns]
find_tweet<yyjson_insitu>/manual_time                     406117 ns       436012 ns         1723           6.565k           2.17468G             534        35.756k    1068.96k               1.6927          3.44359k       3.68107G          2.81704M                    4.46076                      2.6353           3.44359k    7.03464k   631.515k       1.44821G/s    17.6837   21.7873k   1.16709M         1.84808   2.46235k/s 2.87379G/s      2.8173M               4.46118                2.41395          1       2.46235k/s [BEST: throughput=  2.17 GB/s doc_throughput=  3443 docs/s instructions=     2817038 cycles=     1068963 branch_miss=    6565 cache_miss=     534 cache_ref=     35756 items=         1 avg_time=    406116 ns]
find_tweet<sajson>/manual_time                            581094 ns       610549 ns         1204          10.312k           1099.03M               0        36.108k    2.12137M              3.35917          1.74031k       3.69184G          5.72035M                    9.05813                     2.69654           1.74031k    10.6625k   631.515k       1036.42M/s    1.24751   36.1522k   2.14408M         3.39514   1.72089k/s 3.68974G/s     5.72035M               9.05814                2.66797          1       1.72089k/s [BEST: throughput=  1.10 GB/s doc_throughput=  1740 docs/s instructions=     5720348 cycles=     2121367 branch_miss=   10312 cache_miss=       0 cache_ref=     36108 items=         1 avg_time=    581094 ns]
find_tweet<rapidjson>/manual_time                        2338213 ns      2366831 ns          301          29.798k           294.635M          9.114k        46.256k    7.91229M              12.5291           466.552        3.6915G          21.7398M                    34.4249                      2.7476            466.552    30.6421k   631.515k       257.573M/s    994.279   27.3594k   8.07615M         12.7885    427.677/s 3.45398G/s     21.7405M                34.426                2.69194          1        427.677/s [BEST: throughput=  0.29 GB/s doc_throughput=   466 docs/s instructions=    21739823 cycles=     7912293 branch_miss=   29798 cache_miss=    9114 cache_ref=     46256 items=         1 avg_time=   2338212 ns]
find_tweet<rapidjson_insitu>/manual_time                 1543548 ns      1573042 ns          440          25.013k            445.22M              11        34.981k    5.22669M              8.27643           705.002       3.68483G          13.1758M                    20.8638                     2.52087            705.002    31.1944k   631.515k       390.179M/s   2.70086k   27.5828k   5.43062M         8.59935    647.858/s 3.51827G/s     13.1761M               20.8642                2.42626          1        647.858/s [BEST: throughput=  0.45 GB/s doc_throughput=   705 docs/s instructions=    13175782 cycles=     5226690 branch_miss=   25013 cache_miss=      11 cache_ref=     34981 items=         1 avg_time=   1543547 ns]
find_tweet<nlohmann_json>/manual_time                    7202312 ns      7232200 ns          104         101.016k           95.0384M              21       163.166k    24.5145M              38.8185           150.493       3.68925G           65.867M                      104.3                     2.68686            150.493    151.836k   631.515k       83.6203M/s    23.1923   327.008k   26.5713M         42.0754    138.844/s 3.68927G/s     64.4817M               102.106                2.42675          1        138.844/s [BEST: throughput=  0.10 GB/s doc_throughput=   150 docs/s instructions=    65866964 cycles=    24514460 branch_miss=  101016 cache_miss=      21 cache_ref=    163166 items=         1 avg_time=   7202311 ns]
top_tweet<simdjson_dom>/manual_time                       275550 ns       303747 ns         2535           3.562k            2.3037G               0        86.291k    1012.27k              1.60292          3.64789k       3.69264G          2.88026M                    4.56088                     2.84536           3.64789k    3.67519k   631.515k       2.13444G/s   0.308876   86.4708k   1016.94k         1.61032   3.62911k/s 3.69058G/s     2.88026M               4.56088                2.83228          1       3.62911k/s [BEST: throughput=  2.30 GB/s doc_throughput=  3647 docs/s instructions=     2880261 cycles=     1012267 branch_miss=    3562 cache_miss=       0 cache_ref=     86291 items=         1 avg_time=    275549 ns]
top_tweet<simdjson_ondemand>/manual_time                  178039 ns       205846 ns         3931           1.625k           3.57467G               0         53.64k    652.392k              1.03306          5.66046k       3.69284G          1.91005M                    3.02456                     2.92777           5.66046k    1.75201k   631.515k       3.30345G/s   0.402188    53.549k    657.13k         1.04056   5.61674k/s 3.69093G/s     1.91005M               3.02456                2.90666          1       5.61674k/s [BEST: throughput=  3.57 GB/s doc_throughput=  5660 docs/s instructions=     1910054 cycles=      652392 branch_miss=    1625 cache_miss=       0 cache_ref=     53640 items=         1 avg_time=    178039 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time     171966 ns       199862 ns         4070           1.839k            3.7137G               0        54.369k    627.945k             0.994347          5.88062k       3.69271G          1.92496M                    3.04817                      3.0655           5.88062k     2.0167k   631.515k       3.42012G/s  0.0665848    54.236k   634.744k         1.00511    5.8151k/s  3.6911G/s     1.92497M               3.04817                3.03266          1        5.8151k/s [BEST: throughput=  3.71 GB/s doc_throughput=  5880 docs/s instructions=     1924965 cycles=      627945 branch_miss=    1839 cache_miss=       0 cache_ref=     54369 items=         1 avg_time=    171966 ns]
top_tweet<yyjson>/manual_time                             612479 ns       642347 ns         1149           9.457k           1.86723G             225        70.598k    1.24894M              1.97769          2.95674k        3.6928G          2.84443M                    4.50414                     2.27747           2.95674k    7.33218k   631.515k       983.315M/s    954.974   44.6351k   1.45966M         2.31136   1.63271k/s  2.3832G/s     2.84491M               4.50489                1.94902          1       1.63271k/s [BEST: throughput=  1.87 GB/s doc_throughput=  2956 docs/s instructions=     2844430 cycles=     1248943 branch_miss=    9457 cache_miss=     225 cache_ref=     70598 items=         1 avg_time=    612478 ns]
top_tweet<yyjson_insitu>/manual_time                      412044 ns       441121 ns         1699           6.762k           2.13144G             549         40.41k    1090.73k              1.72716          3.37512k       3.68133G          2.84431M                    4.50395                     2.60772           3.37512k    7.18781k   631.515k       1.42738G/s    44.3867   27.0398k   1.18862M         1.88217   2.42692k/s 2.88469G/s     2.84458M               4.50437                2.39318          1       2.42692k/s [BEST: throughput=  2.13 GB/s doc_throughput=  3375 docs/s instructions=     2844313 cycles=     1090727 branch_miss=    6762 cache_miss=     549 cache_ref=     40410 items=         1 avg_time=    412044 ns]
top_tweet<sajson>/manual_time                             585196 ns       613674 ns         1194          10.351k           1091.14M               0        41.415k    2.13672M              3.38348          1.72781k       3.69184G          5.75034M                    9.10563                      2.6912           1.72781k    10.7235k   631.515k       1029.16M/s    2.96231   41.3031k   2.15927M         3.41919   1.70883k/s 3.68982G/s     5.75034M               9.10563                2.66309          1       1.70883k/s [BEST: throughput=  1.09 GB/s doc_throughput=  1727 docs/s instructions=     5750340 cycles=     2136719 branch_miss=   10351 cache_miss=       0 cache_ref=     41415 items=         1 avg_time=    585195 ns]
top_tweet<rapidjson>/manual_time                         2347617 ns      2376211 ns          299          30.135k           292.296M         22.585k        51.712k    7.97568M              12.6294           462.849       3.69154G          21.7981M                    34.5171                     2.73307            462.849    30.8954k   631.515k       256.541M/s   1.13485k   31.6392k   8.11222M         12.8457    425.964/s 3.45551G/s     21.7987M               34.5181                2.68715          1        425.964/s [BEST: throughput=  0.29 GB/s doc_throughput=   462 docs/s instructions=    21798095 cycles=     7975679 branch_miss=   30135 cache_miss=   22585 cache_ref=     51712 items=         1 avg_time=   2347616 ns]
top_tweet<rapidjson_insitu>/manual_time                  1566215 ns      1594842 ns          436          26.607k           434.053M         13.206k         42.08k    5.37103M                8.505           687.321       3.69162G          13.2309M                     20.951                     2.46338            687.321    31.8908k   631.515k       384.532M/s   2.86558k   33.3852k   5.51527M         8.73339    638.482/s  3.5214G/s       13.23M               20.9496                 2.3988          1        638.482/s [BEST: throughput=  0.43 GB/s doc_throughput=   687 docs/s instructions=    13230886 cycles=     5371033 branch_miss=   26607 cache_miss=   13206 cache_ref=     42080 items=         1 avg_time=   1566215 ns]
top_tweet<nlohmann_json>/manual_time                     9458323 ns      9488258 ns           74         190.712k           67.2815M              12       391.403k    34.6323M                54.84            106.54       3.68972G           87.852M                    139.113                     2.53671             106.54    195.574k   631.515k       63.6751M/s    45.0946   405.449k   34.8953M         55.2565    105.727/s 3.68938G/s     88.1511M               139.587                2.52616          1        105.727/s [BEST: throughput=  0.07 GB/s doc_throughput=   106 docs/s instructions=    87851980 cycles=    34632314 branch_miss=  190712 cache_miss=      12 cache_ref=    391403 items=         1 avg_time=   9458323 ns]
