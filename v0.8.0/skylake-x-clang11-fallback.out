run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-x-clang11-fallback.json -DSIMDJSON_IMPLEMENTATION=fallback
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DSIMDJSON_IMPLEMENTATION=fallback ..
-- The CXX compiler identification is Clang 11.0.0
-- The C compiler identification is Clang 11.0.0
-- Check for working CXX compiler: /usr/bin/clang++-11
-- Check for working CXX compiler: /usr/bin/clang++-11 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/clang-11
-- Check for working C compiler: /usr/bin/clang-11 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Including implementation fallback due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation westmere due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation haswell due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation arm64 due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation ppc64 due to SIMDJSON_IMPLEMENTATION=fallback
-- Selected implementation fallback as builtin implementation based on fallback.
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Success
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Success
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES -- failed to compile
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-x-clang11-fallback.json --benchmark_out_format=json
2021-01-23 05:31:57
Running benchmark/bench_ondemand
Run on (4 X 3200 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 1024 KiB (x4)
  L3 Unified 8448 KiB (x1)
Load Average: 1.00, 0.66, 0.70
***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.
simdjson::dom implementation:      fallback
simdjson::ondemand implementation: fallback

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                 1809509 ns      1880487 ns          386          39.104k           351.379M               0        32.644k    5.73824M              9.08647           556.406       3.19279G           15.297M                    24.2228                     2.66581           55.6406k    39.9563k   631.515k        332.83M/s    4.03109   32.7388k   5.77147M         9.13909    552.636/s 3.18952G/s      15.297M               24.2228                2.65045        100       55.2636k/s [BEST: throughput=  0.35 GB/s doc_throughput=   556 docs/s instructions=    15297032 cycles=     5738240 branch_miss=   39104 cache_miss=       0 cache_ref=     32644 items=       100 avg_time=   1809509 ns]
partial_tweets<simdjson_ondemand>/manual_time            1446674 ns      1504610 ns          483          33.058k           438.861M               1          9.87k    4.59451M              7.27538           694.934       3.19288G          10.9869M                    17.3977                     2.39131           69.4934k    33.5922k   631.515k       416.306M/s    1.12836   10.0914k   4.61464M         7.30726    691.241/s 3.18983G/s     10.9869M               17.3977                2.38088        100       69.1241k/s [BEST: throughput=  0.44 GB/s doc_throughput=   694 docs/s instructions=    10986911 cycles=     4594509 branch_miss=   33058 cache_miss=       1 cache_ref=      9870 items=       100 avg_time=   1446673 ns]
partial_tweets<yyjson>/manual_time                        798806 ns       878696 ns          879           9.683k           1.39135G             204        27.672k    1.42233M              2.25225          2.20319k       3.13365G          2.91991M                    4.62366                     2.05291           220.319k    7.56057k   631.515k       753.949M/s    525.344   24.9783k   1.58559M         2.51076   1.25187k/s 1.98494G/s      2.9206M               4.62476                1.84197        100       125.187k/s [BEST: throughput=  1.39 GB/s doc_throughput=  2203 docs/s instructions=     2919911 cycles=     1422327 branch_miss=    9683 cache_miss=     204 cache_ref=     27672 items=       100 avg_time=    798806 ns]
partial_tweets<yyjson_insitu>/manual_time                 520608 ns       584912 ns         1357           7.429k           1.73647G             143        15.299k    1.16166M              1.83949          2.74969k       3.19422G          2.91959M                    4.62316                     2.51329           274.969k    7.34642k   631.515k       1.12973G/s    101.125   11.4254k   1.26285M         1.99972   1.92083k/s 2.42573G/s     2.91986M               4.62358                2.31211        100       192.083k/s [BEST: throughput=  1.74 GB/s doc_throughput=  2749 docs/s instructions=     2919594 cycles=     1161664 branch_miss=    7429 cache_miss=     143 cache_ref=     15299 items=       100 avg_time=    520607 ns]
partial_tweets<sajson>/manual_time                        690386 ns       755100 ns         1013          10.201k           921.407M               1         13.91k    2.18842M              3.46534          1.45904k       3.19299G          5.87949M                    9.31014                     2.68664           145.904k    10.6199k   631.515k       872.353M/s    2.98618   13.9975k   2.20233M         3.48737   1.44847k/s    3.19G/s      5.8795M               9.31014                2.66967        100       144.847k/s [BEST: throughput=  0.92 GB/s doc_throughput=  1459 docs/s instructions=     5879495 cycles=     2188416 branch_miss=   10201 cache_miss=       1 cache_ref=     13910 items=       100 avg_time=    690385 ns]
partial_tweets<rapidjson>/manual_time                    2807944 ns      2876140 ns          249          30.576k           249.343M             998        22.814k    8.08626M              12.8045           394.832       3.19272G           21.895M                    34.6706                     2.70768           39.4832k    31.7171k   631.515k       214.484M/s     469.04   15.9348k   8.27027M         13.0959    356.132/s 2.94531G/s      21.896M               34.6722                2.64756        100       35.6132k/s [BEST: throughput=  0.25 GB/s doc_throughput=   394 docs/s instructions=    21894992 cycles=     8086261 branch_miss=   30576 cache_miss=     998 cache_ref=     22814 items=       100 avg_time=   2807944 ns]
partial_tweets<rapidjson_insitu>/manual_time             1785924 ns      1848925 ns          389          25.758k           370.213M          1.191k        13.422k    5.26531M              8.33759           586.231       3.08669G          13.3565M                      21.15                     2.53671           58.6231k    26.5224k   631.515k       337.226M/s    239.026   10.7062k   5.29797M          8.3893    559.934/s 2.96651G/s     13.3569M               21.1506                2.52114        100       55.9934k/s [BEST: throughput=  0.37 GB/s doc_throughput=   586 docs/s instructions=    13356544 cycles=     5265312 branch_miss=   25758 cache_miss=    1191 cache_ref=     13422 items=       100 avg_time=   1785923 ns]
partial_tweets<nlohmann_json>/manual_time               10157911 ns     10246904 ns           69         151.565k           64.5723M               9        98.683k    31.1975M               49.401            102.25       3.18993G          80.3011M                    127.156                     2.57396            10.225k    160.039k   631.515k       59.2897M/s    199.493   143.865k   32.3966M         51.2998    98.4454/s  3.1893G/s     81.0615M                128.36                2.50216        100       9.84454k/s [BEST: throughput=  0.06 GB/s doc_throughput=   102 docs/s instructions=    80301136 cycles=    31197452 branch_miss=  151565 cache_miss=       9 cache_ref=     98683 items=       100 avg_time=  10157910 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 161428117 ns    167536488 ns            4          1.2333M            285.25M        6.82969M       6.89462M    514.262M              11.1799           6.20124       3.18906G          1.62266G                    35.2761                     3.15531           6.20124M    1.23371M   45.9988M       271.749M/s   6.84194M   6.89465M   514.762M         11.1908    6.19471/s  3.1888G/s     1.62266G               35.2761                3.15224      1000k       6.19471M/s [BEST: throughput=  0.29 GB/s doc_throughput=     6 docs/s instructions=  1622655153 cycles=   514261639 branch_miss= 1233295 cache_miss= 6829686 cache_ref=   6894618 items=   1000000 avg_time= 161428116 ns]
large_random<simdjson_ondemand>/manual_time            127347576 ns    133508715 ns            5         1.20851M           361.402M        3.50988M       3.57334M    405.916M              8.82449           7.85677       3.18918G          1.22298G                    26.5871                     3.01288           7.85677M    1.20585M   45.9988M       344.473M/s   3.53484M   3.57355M   406.122M         8.82897    7.85252/s 3.18908G/s     1.22298G               26.5871                3.01135      1000k       7.85252M/s [BEST: throughput=  0.36 GB/s doc_throughput=     7 docs/s instructions=  1222976311 cycles=   405915636 branch_miss= 1208508 cache_miss= 3509876 cache_ref=   3573335 items=   1000000 avg_time= 127347575 ns]
large_random<simdjson_ondemand_unordered>/manual_time  127523442 ns    133629602 ns            5         1.28347M           361.152M        3.51043M       3.57321M    406.197M               8.8306           7.85134       3.18919G          1.21998G                    26.5219                     3.00341           7.85134M    1.28252M   45.9988M       343.998M/s   3.53133M   3.57339M   406.675M           8.841     7.8417/s 3.18902G/s     1.21998G               26.5219                2.99988      1000k        7.8417M/s [BEST: throughput=  0.36 GB/s doc_throughput=     7 docs/s instructions=  1219976324 cycles=   406196701 branch_miss= 1283474 cache_miss= 3510432 cache_ref=   3573212 items=   1000000 avg_time= 127523442 ns]
large_random<yyjson>/manual_time                       154310860 ns    160383542 ns            5         733.348k           298.328M        4.20469M       4.94148M    352.227M              7.65731           6.48557       2.28439G          855.681M                    18.6023                     2.42935           6.48557M    733.262k   45.9988M       284.282M/s   4.20548M   4.93021M   352.663M          7.6668    6.48043/s 2.28541G/s     855.681M               18.6023                2.42634      1000k       6.48043M/s [BEST: throughput=  0.30 GB/s doc_throughput=     6 docs/s instructions=   855680964 cycles=   352226722 branch_miss=  733348 cache_miss= 4204689 cache_ref=   4941476 items=   1000000 avg_time= 154310860 ns]
large_random<yyjson_insitu>/manual_time                128333489 ns    134452091 ns            5         724.671k           358.786M        3.48252M       3.60748M    309.421M              6.72673           7.79991       2.41346G           849.56M                    18.4692                     2.74564           7.79991M    725.973k   45.9988M       341.827M/s   3.48706M   3.61116M   309.789M         6.73473     7.7922/s 2.41394G/s      849.56M               18.4692                2.74238      1000k        7.7922M/s [BEST: throughput=  0.36 GB/s doc_throughput=     7 docs/s instructions=   849560196 cycles=   309421381 branch_miss=  724671 cache_miss= 3482521 cache_ref=   3607478 items=   1000000 avg_time= 128333489 ns]
large_random<sajson>/manual_time                       109037402 ns    115182135 ns            6         590.608k           422.275M        5.43257M       5.57714M    347.374M              7.55181           9.18013       3.18894G          1.12599G                    24.4787                     3.24143           9.18013M    590.366k   45.9988M       402.319M/s   5.47423M   5.57717M   347.703M         7.55896    9.17116/s 3.18884G/s     1.12599G               24.4787                3.23837      1000k       9.17116M/s [BEST: throughput=  0.42 GB/s doc_throughput=     9 docs/s instructions=  1125990578 cycles=   347374186 branch_miss=  590608 cache_miss= 5432567 cache_ref=   5577142 items=   1000000 avg_time= 109037402 ns]
large_random<rapidjson>/manual_time                    255401668 ns    261550659 ns            3         765.495k           186.058M        4.36016M       5.07398M    719.663M              15.6453           4.04485       2.91093G          2.01413G                    43.7865                     2.79871           4.04485M    747.969k   45.9988M        171.76M/s   4.10079M   4.94825M   723.657M         15.7321     3.9154/s 2.83341G/s     2.01414G               43.7867                2.78327      1000k        3.9154M/s [BEST: throughput=  0.19 GB/s doc_throughput=     4 docs/s instructions=  2014126236 cycles=   719663475 branch_miss=  765495 cache_miss= 4360161 cache_ref=   5073981 items=   1000000 avg_time= 255401668 ns]
large_random<rapidjson_lossless>/manual_time           287304446 ns    293435447 ns            2         583.775k           163.585M        4.35304M       5.18067M    828.475M              18.0108           3.55628       2.94629G          2.47909G                    53.8948                     2.99236           3.55628M    582.816k   45.9988M       152.688M/s   4.15863M   5.11258M   831.597M         18.0787    3.48063/s 2.89448G/s      2.4791G               53.8949                2.98113      1000k       3.48063M/s [BEST: throughput=  0.16 GB/s doc_throughput=     3 docs/s instructions=  2479093368 cycles=   828475424 branch_miss=  583775 cache_miss= 4353038 cache_ref=   5180666 items=   1000000 avg_time= 287304446 ns]
large_random<rapidjson_insitu>/manual_time             269688232 ns    275848095 ns            3         825.569k           175.605M        5.07209M       5.74171M    767.199M              16.6787            3.8176       2.92886G          1.73613G                    37.7429                     2.26294            3.8176M    923.485k   45.9988M       162.661M/s   4.81699M   5.57429M   770.204M          16.744    3.70799/s 2.85591G/s     1.73614G               37.7431                2.25412      1000k       3.70799M/s [BEST: throughput=  0.18 GB/s doc_throughput=     3 docs/s instructions=  1736126089 cycles=   767198619 branch_miss=  825569 cache_miss= 5072091 cache_ref=   5741708 items=   1000000 avg_time= 269688231 ns]
large_random<nlohmann_json>/manual_time               1470862528 ns   1476963801 ns            1           4.117M           31.2733M         30.432M       30.9187M    4.67608G              101.657          0.679873       3.17914G          12.7486G                     277.15                     2.72634           679.873k      4.117M   45.9988M       29.8246M/s    30.432M   30.9187M   4.67608G         101.657   0.679873/s 3.17914G/s     12.7486G                277.15                2.72634      1000k       679.873k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 12748550967 cycles=  4676075164 branch_miss= 4116998 cache_miss=30432002 cache_ref=  30918725 items=   1000000 avg_time=1470862528 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                       268851829 ns    287803361 ns            3         708.759k           510.898M        10.2383M       10.3172M    857.191M              6.24297            3.7209       3.18952G          2.67049G                    19.4494                      3.1154           1.95082M    707.965k   137.305M        487.05M/s   10.2663M   10.3168M   857.487M         6.24513    3.71952/s 3.18944G/s     2.67049G               19.4494                3.11432   524.288k        1.9501M/s [BEST: throughput=  0.51 GB/s doc_throughput=     3 docs/s instructions=  2670493593 cycles=   857191275 branch_miss=  708759 cache_miss=10238323 cache_ref=  10317237 items=    524288 avg_time= 268851828 ns]
kostya<simdjson_ondemand>/manual_time                  229293053 ns    248251860 ns            3          674.28k           610.379M        6.45681M       6.47261M    717.498M              5.22558           4.44542       3.18958G          2.21354G                    16.1213                     3.08508           2.33068M     1054.3k   137.305M       571.078M/s   6.44598M   6.47342M   731.332M         5.32633    4.36123/s 3.18951G/s     2.21354G               16.1213                3.02672   524.288k       2.28654M/s [BEST: throughput=  0.61 GB/s doc_throughput=     4 docs/s instructions=  2213540953 cycles=   717498281 branch_miss=  674280 cache_miss= 6456805 cache_ref=   6472607 items=    524288 avg_time= 229293053 ns]
kostya<yyjson>/manual_time                             229862627 ns    248839188 ns            3         417.559k            597.51M         8.4956M       8.66167M    500.385M              3.64434            4.3517       2.17753G          974.185M                    7.09504                     1.94687           2.28154M    417.046k   137.305M       569.663M/s   8.49705M   8.67261M   500.311M         3.64379    4.35042/s 2.17657G/s     974.185M               7.09504                1.94716   524.288k       2.28088M/s [BEST: throughput=  0.60 GB/s doc_throughput=     4 docs/s instructions=   974184820 cycles=   500385423 branch_miss=  417559 cache_miss= 8495599 cache_ref=   8661673 items=    524288 avg_time= 229862626 ns]
kostya<yyjson_insitu>/manual_time                      151881568 ns    170916710 ns            5         420.559k           904.172M        6.35714M       6.50395M    372.195M              2.71072           6.58513       2.45095G          955.915M                    6.96198                     2.56832           3.45251M    420.629k   137.305M       862.147M/s   6.36023M   6.52587M   372.177M         2.71058    6.58408/s 2.45044G/s     955.915M               6.96198                2.56845   524.288k       3.45195M/s [BEST: throughput=  0.90 GB/s doc_throughput=     6 docs/s instructions=   955915147 cycles=   372195028 branch_miss=  420559 cache_miss= 6357141 cache_ref=   6503947 items=    524288 avg_time= 151881568 ns]
kostya<sajson>/manual_time                             173697889 ns    192652276 ns            4         400.434k           793.428M        8.51791M       8.54015M    551.877M              4.01935           5.77858       3.18907G          1.53761G                    11.1985                     2.78614           3.02964M    399.447k   137.305M       753.862M/s   8.48571M   8.54074M   553.923M         4.03425    5.75712/s   3.189G/s     1.53761G               11.1985                2.77585   524.288k       3.01839M/s [BEST: throughput=  0.79 GB/s doc_throughput=     5 docs/s instructions=  1537609243 cycles=   551877037 branch_miss=  400434 cache_miss= 8517910 cache_ref=   8540148 items=    524288 avg_time= 173697889 ns]
kostya<rapidjson>/manual_time                          331656770 ns    350666075 ns            2         1052.17k           418.145M        5.21985M       6.31979M    948.947M              6.91123           3.04537        2.8899G          2.73711G                    19.9346                     2.88437           1.59665M    1046.71k   137.305M       394.819M/s   5.09074M   6.27365M   950.746M         6.92434    3.01517/s 2.86666G/s     2.73712G               19.9346                2.87891   524.288k       1.58082M/s [BEST: throughput=  0.42 GB/s doc_throughput=     3 docs/s instructions=  2737114503 cycles=   948946952 branch_miss= 1052168 cache_miss= 5219853 cache_ref=   6319787 items=    524288 avg_time= 331656770 ns]
kostya<rapidjson_lossless>/manual_time                 346960576 ns    365961129 ns            2          989.89k           399.553M        5.23408M        6.3598M    998.381M              7.27127           2.90997       2.90526G          3.00606G                    21.8933                     3.01094           1.52566M    991.542k   137.305M       377.404M/s   5.10048M   6.31481M   1000.19M         7.28448    2.88217/s 2.88273G/s     3.00607G               21.8934                3.00548   524.288k       1.51109M/s [BEST: throughput=  0.40 GB/s doc_throughput=     2 docs/s instructions=  3006064938 cycles=   998381007 branch_miss=  989890 cache_miss= 5234083 cache_ref=   6359798 items=    524288 avg_time= 346960576 ns]
kostya<rapidjson_insitu>/manual_time                   309741997 ns    328776698 ns            2         1058.87k           447.544M        7.36359M       8.45981M    881.577M              6.42058           3.25949       2.87349G          2.21988G                    16.1675                     2.51808           1.70891M    1019.01k   137.305M       422.753M/s   7.24553M   8.40622M    882.45M         6.42693    3.22849/s 2.84898G/s     2.21988G               16.1675                2.51559   524.288k       1.69266M/s [BEST: throughput=  0.45 GB/s doc_throughput=     3 docs/s instructions=  2219879097 cycles=   881577430 branch_miss= 1058869 cache_miss= 7363589 cache_ref=   8459806 items=    524288 avg_time= 309741997 ns]
kostya<nlohmann_json>/manual_time                     2328301237 ns   2347229070 ns            1         15.2597M           58.9722M        45.3242M       45.9589M    7.42592G              54.0834          0.429498       3.18942G          17.7632G                     129.37                     2.39205            225.18k    15.2597M   137.305M       56.2403M/s   45.3242M   45.9589M   7.42592G         54.0834   0.429498/s 3.18942G/s     17.7632G                129.37                2.39205   524.288k        225.18k/s [BEST: throughput=  0.06 GB/s doc_throughput=     0 docs/s instructions= 17763206758 cycles=  7425923068 branch_miss=15259681 cache_miss=45324244 cache_ref=  45958929 items=    524288 avg_time=2328301237 ns]
distinct_user_id<simdjson_dom>/manual_time               1802603 ns      1882434 ns          388          39.175k           352.272M               6        34.076k    5.72365M              9.06336            557.82       3.19277G          15.2321M                    24.1199                     2.66125           64.1493k    39.9819k   631.515k       334.106M/s    6.53608   34.1721k   5.74962M         9.10449    554.753/s 3.18962G/s     15.2321M               24.1199                2.64923        115       63.7966k/s [BEST: throughput=  0.35 GB/s doc_throughput=   557 docs/s instructions=    15232055 cycles=     5723645 branch_miss=   39175 cache_miss=       6 cache_ref=     34076 items=       115 avg_time=   1802602 ns]
distinct_user_id<simdjson_ondemand>/manual_time          1400347 ns      1463823 ns          500           32.79k           453.266M               2        10.855k    4.44849M              7.04416           717.744       3.19288G          10.6052M                    16.7932                     2.38399           82.5406k    33.2394k   631.515k       430.079M/s       2.85   11.0089k   4.46659M         7.07281    714.109/s 3.18963G/s     10.6052M               16.7932                2.37433        115       82.1225k/s [BEST: throughput=  0.45 GB/s doc_throughput=   717 docs/s instructions=    10605164 cycles=     4448493 branch_miss=   32790 cache_miss=       2 cache_ref=     10855 items=       115 avg_time=   1400346 ns]
distinct_user_id<yyjson>/manual_time                      693923 ns       783413 ns         1000           6.528k           1.53292G          7.099k        27.359k     1.3156M              2.08325          2.42737k       3.19346G          2.87805M                    4.55738                     2.18763           279.148k    7.40756k   631.515k       867.906M/s   2.22969k   25.5523k   1.50715M         2.38656   1.44108k/s 2.17193G/s     2.87825M               4.55769                1.90973        115       165.724k/s [BEST: throughput=  1.53 GB/s doc_throughput=  2427 docs/s instructions=     2878054 cycles=     1315603 branch_miss=    6528 cache_miss=    7099 cache_ref=     27359 items=       115 avg_time=    693923 ns]
distinct_user_id<yyjson_insitu>/manual_time               516073 ns       590344 ns         1369           6.853k            1.7739G          1.687k        14.464k     1.1313M              1.79141          2.80897k       3.17778G          2.87774M                    4.55689                     2.54375           323.031k     7.4306k   631.515k       1.13965G/s    100.316   11.3477k   1.24879M         1.97744   1.93771k/s 2.41978G/s     2.87801M               4.55731                2.30465        115       222.837k/s [BEST: throughput=  1.77 GB/s doc_throughput=  2808 docs/s instructions=     2877745 cycles=     1131300 branch_miss=    6853 cache_miss=    1687 cache_ref=     14464 items=       115 avg_time=    516072 ns]
distinct_user_id<sajson>/manual_time                      686912 ns       758697 ns         1018          10.294k           925.953M               2        13.985k    2.17777M              3.44848          1.46624k       3.19313G          5.81793M                    9.21266                     2.67151           168.618k    10.6571k   631.515k       876.763M/s    3.71218   13.8977k   2.19131M         3.46993   1.45579k/s 3.19009G/s     5.81793M               9.21266                  2.655        115       167.416k/s [BEST: throughput=  0.93 GB/s doc_throughput=  1466 docs/s instructions=     5817932 cycles=     2177769 branch_miss=   10294 cache_miss=       2 cache_ref=     13985 items=       115 avg_time=    686912 ns]
distinct_user_id<rapidjson>/manual_time                  2798072 ns      2874138 ns          251          29.833k            249.67M          7.608k        23.021k    8.06301M              12.7677           395.351       3.18772G          21.8229M                    34.5564                     2.70654           45.4654k    31.5106k   631.515k       215.241M/s    929.693   16.9477k   8.25915M         13.0783    357.389/s 2.95173G/s     21.8235M               34.5574                2.64234        115       41.0997k/s [BEST: throughput=  0.25 GB/s doc_throughput=   395 docs/s instructions=    21822889 cycles=     8063011 branch_miss=   29833 cache_miss=    7608 cache_ref=     23021 items=       115 avg_time=   2798071 ns]
distinct_user_id<rapidjson_insitu>/manual_time           1800864 ns      1873107 ns          384           25.48k           391.486M           3.98k        15.152k    5.15029M              8.15545           619.915       3.19274G          13.2899M                    21.0445                     2.58042           71.2902k    36.3525k   631.515k       334.428M/s   2.69574k   13.1576k   5.48607M         8.68716    555.289/s 3.04636G/s     13.2903M               21.0451                2.42256        115       63.8582k/s [BEST: throughput=  0.39 GB/s doc_throughput=   619 docs/s instructions=    13289889 cycles=     5150291 branch_miss=   25480 cache_miss=    3980 cache_ref=     15152 items=       115 avg_time=   1800863 ns]
distinct_user_id<nlohmann_json>/manual_time              9750173 ns      9841477 ns           76         126.559k           70.5188M              43         97.48k    28.5643M              45.2314           111.666       3.18966G          75.7427M                    119.938                     2.65166           12.8416k     173.62k   631.515k       61.7691M/s    132.382   107.248k   31.0959M         49.2402    102.562/s 3.18927G/s      74.413M               117.833                2.39301        115       11.7947k/s [BEST: throughput=  0.07 GB/s doc_throughput=   111 docs/s instructions=    75742701 cycles=    28564311 branch_miss=  126559 cache_miss=      43 cache_ref=     97480 items=       115 avg_time=   9750173 ns]
find_tweet<simdjson_dom>/manual_time                     1788339 ns      1864473 ns          392          39.139k           354.818M               0        30.447k    5.68254M              8.99826           561.852       3.19274G          15.1467M                    23.9848                     2.66549            561.852    39.9124k   631.515k        336.77M/s   0.390306   30.5069k   5.70416M          9.0325    559.178/s 3.18964G/s     15.1467M               23.9848                2.65538          1        559.178/s [BEST: throughput=  0.35 GB/s doc_throughput=   561 docs/s instructions=    15146735 cycles=     5682539 branch_miss=   39139 cache_miss=       0 cache_ref=     30447 items=         1 avg_time=   1788338 ns]
find_tweet<simdjson_ondemand>/manual_time                1346757 ns      1412155 ns          520          31.721k           471.559M               0         7.977k    4.27603M              6.77106           746.711       3.19295G          10.0993M                    15.9922                     2.36184            746.711    32.3631k   631.515k       447.193M/s  0.0884615   8.05058k    4.2961M         6.80285    742.525/s 3.18996G/s     10.0993M               15.9922                 2.3508          1        742.525/s [BEST: throughput=  0.47 GB/s doc_throughput=   746 docs/s instructions=    10099295 cycles=     4276027 branch_miss=   31721 cache_miss=       0 cache_ref=      7977 items=         1 avg_time=   1346756 ns]
find_tweet<yyjson>/manual_time                            781980 ns       869356 ns          979           9.322k           1.46596G             198        27.234k    1.37587M              2.17868          2.32133k       3.19386G          2.81716M                    4.46096                     2.04755           2.32133k    7.39002k   631.515k       770.173M/s    383.991   23.1622k   1.53436M         2.42966    1.2788k/s 1.96215G/s     2.81785M               4.46204                1.83649          1        1.2788k/s [BEST: throughput=  1.47 GB/s doc_throughput=  2321 docs/s instructions=     2817163 cycles=     1375872 branch_miss=    9322 cache_miss=     198 cache_ref=     27234 items=         1 avg_time=    781980 ns]
find_tweet<yyjson_insitu>/manual_time                     503257 ns       571998 ns         1000           6.817k           1.81178G          2.131k        13.411k    1.10787M               1.7543          2.86895k       3.17841G          2.81705M                    4.46077                     2.54277           2.86895k    7.19702k   631.515k       1.16867G/s      8.726   9.14025k   1.20849M         1.91364   1.98705k/s 2.40134G/s     2.81731M               4.46119                2.33126          1       1.98705k/s [BEST: throughput=  1.81 GB/s doc_throughput=  2868 docs/s instructions=     2817046 cycles=     1107866 branch_miss=    6817 cache_miss=    2131 cache_ref=     13411 items=         1 avg_time=    503257 ns]
find_tweet<sajson>/manual_time                            674474 ns       744434 ns         1038          10.057k           943.657M               1        13.068k    2.13689M              3.38375          1.49427k        3.1931G          5.72274M                    9.06192                     2.67807           1.49427k     10.489k   631.515k       892.932M/s    4.40366   13.0763k   2.15168M         3.40716   1.48264k/s 3.19015G/s     5.72274M               9.06192                2.65967          1       1.48264k/s [BEST: throughput=  0.94 GB/s doc_throughput=  1494 docs/s instructions=     5722739 cycles=     2136891 branch_miss=   10057 cache_miss=       1 cache_ref=     13068 items=         1 avg_time=    674474 ns]
find_tweet<rapidjson>/manual_time                        2775667 ns      2847970 ns          253          29.825k           251.203M         11.918k        21.203k    8.02624M              12.7095           397.778       3.19266G          21.7391M                    34.4237                      2.7085            397.778    30.9999k   631.515k       216.978M/s    654.775   13.9803k   8.18971M         12.9684    360.274/s 2.95054G/s     21.7397M               34.4246                2.65451          1        360.274/s [BEST: throughput=  0.25 GB/s doc_throughput=   397 docs/s instructions=    21739061 cycles=     8026238 branch_miss=   29825 cache_miss=   11918 cache_ref=     21203 items=         1 avg_time=   2775666 ns]
find_tweet<rapidjson_insitu>/manual_time                 1777760 ns      1845781 ns          397          25.366k           392.878M          6.832k        14.009k    5.13211M              8.12666            622.12       3.19279G          13.2116M                    20.9205                     2.57431             622.12     33.045k   631.515k       338.774M/s   1.64775k   10.2316k   5.36358M         8.49319    562.506/s 3.01704G/s     13.2119M                20.921                2.46327          1        562.506/s [BEST: throughput=  0.39 GB/s doc_throughput=   622 docs/s instructions=    13211634 cycles=     5132108 branch_miss=   25366 cache_miss=    6832 cache_ref=     14009 items=         1 avg_time=   1777760 ns]
find_tweet<nlohmann_json>/manual_time                    8735243 ns      8824245 ns           89          98.893k           82.0849M             839        76.783k    24.5282M              38.8402           129.981       3.18819G          65.8464M                    104.267                     2.68452            129.981    174.878k   631.515k       68.9459M/s    112.056   82.0405k   27.8605M          44.117    114.479/s 3.18944G/s     64.4866M               102.114                2.31462          1        114.479/s [BEST: throughput=  0.08 GB/s doc_throughput=   129 docs/s instructions=    65846360 cycles=    24528163 branch_miss=   98893 cache_miss=     839 cache_ref=     76783 items=         1 avg_time=   8735243 ns]
top_tweet<simdjson_dom>/manual_time                      1796508 ns      1877798 ns          389          39.136k           353.529M               3        32.537k    5.70338M              9.03126           559.811       3.19281G          15.1836M                    24.0432                     2.66222            559.811    39.9466k   631.515k       335.239M/s    1.09512   32.7443k   5.73068M          9.0745    556.635/s  3.1899G/s     15.1836M               24.0432                2.64953          1        556.635/s [BEST: throughput=  0.35 GB/s doc_throughput=   559 docs/s instructions=    15183622 cycles=     5703376 branch_miss=   39136 cache_miss=       3 cache_ref=     32537 items=         1 avg_time=   1796507 ns]
top_tweet<simdjson_ondemand>/manual_time                 1396870 ns      1463386 ns          501           32.59k           454.257M               1        11.253k    4.43907M              7.02924           719.314       3.19308G          10.6259M                     16.826                     2.39372            719.314    33.0387k   631.515k       431.149M/s      1.501   11.4191k   4.45572M          7.0556    715.886/s 3.18979G/s     10.6259M                16.826                2.38478          1        715.886/s [BEST: throughput=  0.45 GB/s doc_throughput=   719 docs/s instructions=    10625891 cycles=     4439069 branch_miss=   32590 cache_miss=       1 cache_ref=     11253 items=         1 avg_time=   1396869 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time    1418056 ns      1485311 ns          494          32.775k           447.689M               5        12.157k    4.50404M              7.13212           708.912       3.19297G          10.8513M                     17.183                     2.40925            708.912    33.3384k   631.515k       424.708M/s     4.3583   12.3348k   4.52353M         7.16298    705.191/s 3.18995G/s     10.8513M                17.183                2.39887          1        705.191/s [BEST: throughput=  0.45 GB/s doc_throughput=   708 docs/s instructions=    10851349 cycles=     4504040 branch_miss=   32775 cache_miss=       5 cache_ref=     12157 items=         1 avg_time=   1418056 ns]
top_tweet<yyjson>/manual_time                             789684 ns       879546 ns          993           9.474k           1.44811G             214        27.447k    1.39293M              2.20569          2.29307k       3.19407G          2.84444M                    4.50415                     2.04206           2.29307k    7.54748k   631.515k       762.659M/s     418.91   24.4135k   1.55821M         2.46741   1.26633k/s  1.9732G/s     2.84492M                4.5049                1.82576          1       1.26633k/s [BEST: throughput=  1.45 GB/s doc_throughput=  2293 docs/s instructions=     2844438 cycles=     1392926 branch_miss=    9474 cache_miss=     214 cache_ref=     27447 items=         1 avg_time=    789683 ns]
top_tweet<yyjson_insitu>/manual_time                      513154 ns       584317 ns         1383           6.774k           1.79231G          2.453k        14.019k    1.12024M               1.7739          2.83811k       3.17938G          2.84432M                    4.50396                     2.53902           2.83811k     7.3284k   631.515k       1.14614G/s    55.3933   8.33085k   1.23861M         1.96132   1.94873k/s 2.41371G/s     2.84458M               4.50438                 2.2966          1       1.94873k/s [BEST: throughput=  1.79 GB/s doc_throughput=  2838 docs/s instructions=     2844321 cycles=     1120245 branch_miss=    6774 cache_miss=    2453 cache_ref=     14019 items=         1 avg_time=    513154 ns]
top_tweet<sajson>/manual_time                             678405 ns       751824 ns         1030          10.225k            936.78M               0        13.702k    2.15253M              3.40853          1.48338k       3.19304G          5.75273M                    9.10941                     2.67254           1.48338k    10.5572k   631.515k       887.758M/s    2.28835   13.6622k   2.16413M         3.42688   1.47405k/s 3.19002G/s     5.75273M               9.10941                2.65822          1       1.47405k/s [BEST: throughput=  0.94 GB/s doc_throughput=  1483 docs/s instructions=     5752730 cycles=     2152535 branch_miss=   10225 cache_miss=       0 cache_ref=     13702 items=         1 avg_time=    678405 ns]
top_tweet<rapidjson>/manual_time                         2783443 ns      2857363 ns          252           29.86k            250.47M          7.533k        22.088k    8.04967M              12.7466           396.618       3.19265G           21.798M                     34.517                     2.70794            396.618    31.0353k   631.515k       216.372M/s    759.143   12.3004k   8.21467M         13.0079    359.267/s 2.95126G/s     21.7986M                34.518                2.65362          1        359.267/s [BEST: throughput=  0.25 GB/s doc_throughput=   396 docs/s instructions=    21798014 cycles=     8049673 branch_miss=   29860 cache_miss=    7533 cache_ref=     22088 items=         1 avg_time=   2783443 ns]
top_tweet<rapidjson_insitu>/manual_time                  1799204 ns      1871339 ns          380          25.868k           390.981M          7.093k        14.475k    5.15702M              8.16611           619.116       3.19279G           13.266M                    21.0067                     2.57242            619.116    37.2527k   631.515k       334.737M/s   2.66251k    11.687k   5.48514M         8.68568    555.801/s 3.04864G/s     13.2662M                21.007                2.41858          1        555.801/s [BEST: throughput=  0.39 GB/s doc_throughput=   619 docs/s instructions=    13266019 cycles=     5157021 branch_miss=   25868 cache_miss=    7093 cache_ref=     14475 items=         1 avg_time=   1799204 ns]
top_tweet<nlohmann_json>/manual_time                    11180918 ns     11271859 ns           63         192.197k           56.8798M             163       166.492k    35.4074M              56.0673           90.0688        3.1891G          87.7618M                     138.97                     2.47863            90.0688    196.905k   631.515k        53.865M/s    191.857   165.047k   35.6571M         56.4628    89.4381/s  3.1891G/s     88.2249M               139.704                2.47426          1        89.4381/s [BEST: throughput=  0.06 GB/s doc_throughput=    90 docs/s instructions=    87761791 cycles=    35407367 branch_miss=  192197 cache_miss=     163 cache_ref=    166492 items=         1 avg_time=  11180918 ns]
