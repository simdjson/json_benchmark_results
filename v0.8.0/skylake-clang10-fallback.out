run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-clang10-fallback.json -DSIMDJSON_IMPLEMENTATION=fallback
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DSIMDJSON_IMPLEMENTATION=fallback ..
-- The CXX compiler identification is Clang 10.0.1
-- The C compiler identification is Clang 10.0.1
-- Check for working CXX compiler: /usr/bin/clang++-10
-- Check for working CXX compiler: /usr/bin/clang++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/clang-10
-- Check for working C compiler: /usr/bin/clang-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Including implementation fallback due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation westmere due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation haswell due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation arm64 due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation ppc64 due to SIMDJSON_IMPLEMENTATION=fallback
-- Selected implementation fallback as builtin implementation based on fallback.
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Success
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Success
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES -- failed to compile
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-clang10-fallback.json --benchmark_out_format=json
2021-01-23 05:05:06
Running benchmark/bench_ondemand
Run on (4 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 256 KiB (x4)
  L3 Unified 8192 KiB (x1)
Load Average: 0.59, 0.62, 0.83
simdjson::dom implementation:      fallback
simdjson::ondemand implementation: fallback

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                 1450891 ns      1479747 ns          481          37.758k           437.231M               0        95.135k    5.33185M              8.44295           692.352       3.69152G          15.3669M                    24.3333                     2.88209           69.2352k    38.4452k   631.515k       415.096M/s     10.711   95.4283k    5.3532M         8.47676    689.232/s 3.68959G/s     15.3669M               24.3333                 2.8706        100       68.9232k/s [BEST: throughput=  0.44 GB/s doc_throughput=   692 docs/s instructions=    15366873 cycles=     5331850 branch_miss=   37758 cache_miss=       0 cache_ref=     95135 items=       100 avg_time=   1450890 ns]
partial_tweets<simdjson_ondemand>/manual_time            1130659 ns      1159359 ns          619          32.264k           561.677M               0        59.993k    4.15071M              6.57263           889.412        3.6917G          11.0591M                    17.5121                     2.66439           88.9412k    32.9071k   631.515k       532.662M/s   0.436187   59.8754k   4.17198M          6.6063     884.44/s 3.68986G/s     11.0591M               17.5121                2.65081        100        88.444k/s [BEST: throughput=  0.56 GB/s doc_throughput=   889 docs/s instructions=    11059126 cycles=     4150715 branch_miss=   32264 cache_miss=       0 cache_ref=     59993 items=       100 avg_time=   1130659 ns]
partial_tweets<yyjson>/manual_time                        641857 ns       672688 ns         1095           9.555k           1.81821G             504        79.314k    1.28261M                2.031          2.87912k       3.69279G          2.90333M                    4.59741                     2.26362           287.912k    7.50905k   631.515k       938.309M/s    954.025   51.5477k   1.50517M         2.38342   1.55798k/s 2.34502G/s     2.90382M               4.59818                1.92923        100       155.798k/s [BEST: throughput=  1.82 GB/s doc_throughput=  2879 docs/s instructions=     2903333 cycles=     1282608 branch_miss=    9555 cache_miss=     504 cache_ref=     79314 items=       100 avg_time=    641856 ns]
partial_tweets<yyjson_insitu>/manual_time                 426771 ns       456370 ns         1642           7.292k           2.05029G              16        48.738k    1.13742M               1.8011          3.24663k       3.69278G          2.90323M                    4.59724                     2.55246           324.663k    7.31486k   631.515k       1.37813G/s    152.612    33.886k   1.23035M         1.94825   2.34318k/s 2.88293G/s     2.90349M               4.59766                2.35989        100       234.318k/s [BEST: throughput=  2.05 GB/s doc_throughput=  3246 docs/s instructions=     2903227 cycles=     1137422 branch_miss=    7292 cache_miss=      16 cache_ref=     48738 items=       100 avg_time=    426771 ns]
partial_tweets<sajson>/manual_time                        589482 ns       618412 ns         1187          10.314k           1081.66M               0         48.57k    2.15551M              3.41324          1.71281k       3.69198G          5.87178M                    9.29793                     2.72408           171.281k     10.756k   631.515k       1021.68M/s    1.42039   48.5199k   2.17518M         3.44438   1.69641k/s 3.68999G/s     5.87178M               9.29793                2.69945        100       169.641k/s [BEST: throughput=  1.08 GB/s doc_throughput=  1712 docs/s instructions=     5871783 cycles=     2155512 branch_miss=   10314 cache_miss=       0 cache_ref=     48570 items=       100 avg_time=    589481 ns]
partial_tweets<rapidjson>/manual_time                    2427631 ns      2457157 ns          288          30.081k           284.141M          9.565k         54.93k    8.20441M              12.9916           449.935       3.69145G          21.9156M                    34.7032                      2.6712           44.9935k     30.354k   631.515k       248.085M/s    632.611   34.7694k   8.36601M         13.2475    411.924/s 3.44616G/s     21.9163M               34.7043                2.61969        100       41.1924k/s [BEST: throughput=  0.28 GB/s doc_throughput=   449 docs/s instructions=    21915575 cycles=     8204405 branch_miss=   30081 cache_miss=    9565 cache_ref=     54930 items=       100 avg_time=   2427631 ns]
partial_tweets<rapidjson_insitu>/manual_time             1537677 ns      1566869 ns          451          26.194k           441.657M          8.264k        46.469k    5.27865M              8.35871           699.361       3.69168G          13.3441M                    21.1303                     2.52794           69.9361k    26.4978k   631.515k       391.669M/s    291.583   36.1824k   5.32835M         8.43741    650.332/s 3.46519G/s     13.3445M               21.1309                2.50443        100       65.0332k/s [BEST: throughput=  0.44 GB/s doc_throughput=   699 docs/s instructions=    13344106 cycles=     5278651 branch_miss=   26194 cache_miss=    8264 cache_ref=     46469 items=       100 avg_time=   1537676 ns]
partial_tweets<nlohmann_json>/manual_time                8082965 ns      8118182 ns           87         153.966k           80.4208M             120       232.358k    28.9778M              45.8861           127.346        3.6902G          78.2496M                    123.908                     2.70033           12.7346k     162.75k   631.515k       74.5097M/s    101.609   371.348k   29.8219M         47.2228    123.717/s 3.68947G/s      78.912M               124.957                2.64611        100       12.3717k/s [BEST: throughput=  0.08 GB/s doc_throughput=   127 docs/s instructions=    78249632 cycles=    28977791 branch_miss=  153966 cache_miss=     120 cache_ref=    232358 items=       100 avg_time=   8082964 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 135980369 ns    139376659 ns            5         1.32724M           339.189M        11.0762M        15.632M    500.299M              10.8763           7.37387       3.68914G          1.60866G                    34.9717                     3.21539           7.37387M    1.33921M   45.9988M       322.604M/s   11.1359M    15.632M   501.618M          10.905      7.354/s  3.6889G/s     1.60866G               34.9717                3.20693      1000k         7.354M/s [BEST: throughput=  0.34 GB/s doc_throughput=     7 docs/s instructions=  1608656367 cycles=   500298758 branch_miss= 1327238 cache_miss=11076224 cache_ref=  15631987 items=   1000000 avg_time= 135980368 ns]
large_random<simdjson_ondemand>/manual_time            104932174 ns    108321730 ns            7         1.31133M           439.448M        5.80015M       8.12285M    386.151M              8.39481           9.55347       3.68908G          1.21498G                    26.4133                     3.14638           9.55347M    1.32396M   45.9988M       418.059M/s   5.79213M   8.12381M   387.085M         8.41512    9.52997/s 3.68891G/s     1.21498G               26.4133                3.13878      1000k       9.52997M/s [BEST: throughput=  0.44 GB/s doc_throughput=     9 docs/s instructions=  1214977531 cycles=   386150937 branch_miss= 1311331 cache_miss= 5800149 cache_ref=   8122850 items=   1000000 avg_time= 104932174 ns]
large_random<simdjson_ondemand_unordered>/manual_time  105457108 ns    108848777 ns            7         1.35705M           437.713M        5.78659M       8.12643M     387.69M              8.42827           9.51575       3.68916G          1.21398G                    26.3915                     3.13131           9.51575M    1.36404M   45.9988M       415.978M/s   5.79381M   8.12636M   389.019M         8.45715    9.48253/s 3.68888G/s     1.21398G               26.3915                3.12062      1000k       9.48253M/s [BEST: throughput=  0.44 GB/s doc_throughput=     9 docs/s instructions=  1213977530 cycles=   387690165 branch_miss= 1357052 cache_miss= 5786586 cache_ref=   8126429 items=   1000000 avg_time= 105457107 ns]
large_random<yyjson>/manual_time                       121086526 ns    124517008 ns            6          661.89k           380.171M        5.99455M       9.25556M    327.329M              7.11603            8.2648       2.70531G           866.68M                    18.8414                     2.64774            8.2648M    664.099k   45.9988M       362.285M/s   5.96681M   9.24614M   327.371M         7.11694    8.25856/s 2.70361G/s      866.68M               18.8414                 2.6474      1000k       8.25856M/s [BEST: throughput=  0.38 GB/s doc_throughput=     8 docs/s instructions=   866679882 cycles=   327328573 branch_miss=  661890 cache_miss= 5994548 cache_ref=   9255558 items=   1000000 avg_time= 121086525 ns]
large_random<yyjson_insitu>/manual_time                103406914 ns    106835767 ns            7         662.097k           444.904M        5.05133M       7.85232M    296.018M              6.43534           9.67207        2.8631G          860.559M                    18.7083                     2.90712           9.67207M    664.266k   45.9988M       424.226M/s   5.05372M   7.84858M   296.152M         6.43826    9.67053/s 2.86395G/s     860.559M               18.7083                 2.9058      1000k       9.67053M/s [BEST: throughput=  0.44 GB/s doc_throughput=     9 docs/s instructions=   860559122 cycles=   296017681 branch_miss=  662097 cache_miss= 5051331 cache_ref=   7852316 items=   1000000 avg_time= 103406914 ns]
large_random<sajson>/manual_time                        91738688 ns     95137626 ns            8         582.199k           503.333M        8.48767M       12.3537M    337.153M              7.32961           10.9423       3.68924G          1.13399G                    24.6526                     3.36343           10.9423M    582.282k   45.9988M       478.183M/s   8.55257M   12.4338M    338.43M         7.35737    10.9005/s 3.68906G/s     1.13399G               24.6526                3.35074      1000k       10.9005M/s [BEST: throughput=  0.50 GB/s doc_throughput=    10 docs/s instructions=  1133989143 cycles=   337153030 branch_miss=  582199 cache_miss= 8487675 cache_ref=  12353717 items=   1000000 avg_time=  91738688 ns]
large_random<rapidjson>/manual_time                    212548073 ns    215981225 ns            3         584.455k           222.382M        7.12003M       10.9858M    705.003M              15.3266           4.83452       3.40835G          2.02114G                    43.9391                     2.86686           4.83452M    584.053k   45.9988M        206.39M/s    6.6065M   10.3179M   707.282M         15.3761    4.70482/s 3.32763G/s     2.02115G               43.9393                2.85763      1000k       4.70482M/s [BEST: throughput=  0.22 GB/s doc_throughput=     4 docs/s instructions=  2021143763 cycles=   705002650 branch_miss=  584455 cache_miss= 7120026 cache_ref=  10985792 items=   1000000 avg_time= 212548073 ns]
large_random<rapidjson_lossless>/manual_time           246692326 ns    250118943 ns            3         585.345k            190.93M        7.23076M       11.0275M    830.498M              18.0548           4.15077       3.44721G          2.48311G                    53.9821                     2.98991           4.15077M    585.448k   45.9988M       177.824M/s   6.65383M   10.3453M   833.034M         18.1099    4.05363/s 3.37681G/s     2.48312G               53.9823                2.98081      1000k       4.05363M/s [BEST: throughput=  0.19 GB/s doc_throughput=     4 docs/s instructions=  2483110716 cycles=   830497844 branch_miss=  585345 cache_miss= 7230765 cache_ref=  11027468 items=   1000000 avg_time= 246692325 ns]
large_random<rapidjson_insitu>/manual_time             235995832 ns    239422773 ns            3         588.891k           199.425M        8.23582M       12.6288M    792.733M              17.2338           4.33544       3.43685G          1.75214G                    38.0911                     2.21026           4.33544M    586.301k   45.9988M       185.884M/s   7.77574M   11.9487M   793.768M         17.2563    4.23736/s 3.36348G/s     1.75215G               38.0913                2.20739      1000k       4.23736M/s [BEST: throughput=  0.20 GB/s doc_throughput=     4 docs/s instructions=  1752143453 cycles=   792732986 branch_miss=  588891 cache_miss= 8235822 cache_ref=  12628805 items=   1000000 avg_time= 235995832 ns]
large_random<nlohmann_json>/manual_time               1243152032 ns   1246585813 ns            1         4.11402M           37.0017M        48.2928M       62.4919M    4.57382G              99.4336          0.804407       3.67922G          12.3806G                     269.15                     2.70683           804.407k    4.11402M   45.9988M       35.2876M/s   48.2928M   62.4919M   4.57382G         99.4336   0.804407/s 3.67922G/s     12.3806G                269.15                2.70683      1000k       804.407k/s [BEST: throughput=  0.04 GB/s doc_throughput=     0 docs/s instructions= 12380551946 cycles=  4573824827 branch_miss= 4114021 cache_miss=48292763 cache_ref=  62491938 items=   1000000 avg_time=1243152032 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                       208659647 ns    218935933 ns            3         741.777k           658.965M        16.3294M       22.8334M    768.723M              5.59865           4.79928       3.68931G          2.66735G                    19.4264                     3.46984            2.5162M    743.484k   137.305M       627.549M/s   16.3421M   22.8595M   769.771M         5.60628    4.79249/s 3.68912G/s     2.66735G               19.4264                3.46512   524.288k       2.51265M/s [BEST: throughput=  0.66 GB/s doc_throughput=     4 docs/s instructions=  2667347904 cycles=   768722576 branch_miss=  741777 cache_miss=16329432 cache_ref=  22833411 items=    524288 avg_time= 208659647 ns]
kostya<simdjson_ondemand>/manual_time                  175841242 ns    186115961 ns            4         712.469k           781.033M        10.4541M       14.3699M    648.598M              4.72377           5.68831       3.68942G          2.21354G                    16.1213                     3.41281           2.98231M    714.403k   137.305M       744.673M/s   10.4754M   14.4573M   648.731M         4.72475    5.68695/s  3.6893G/s     2.21354G               16.1213                3.41211   524.288k        2.9816M/s [BEST: throughput=  0.78 GB/s doc_throughput=     5 docs/s instructions=  2213540998 cycles=   648597721 branch_miss=  712469 cache_miss=10454073 cache_ref=  14369897 items=    524288 avg_time= 175841241 ns]
kostya<yyjson>/manual_time                             177177057 ns    187479192 ns            4         416.617k           775.994M        11.5643M       16.7616M    457.103M              3.32911           5.65161       2.58337G          978.903M                     7.1294                     2.14154           2.96307M    416.187k   137.305M       739.059M/s    11.568M   16.7274M   457.206M         3.32985    5.64407/s  2.5805G/s     978.903M                7.1294                2.14106   524.288k       2.95912M/s [BEST: throughput=  0.78 GB/s doc_throughput=     5 docs/s instructions=   978902793 cycles=   457102746 branch_miss=  416617 cache_miss=11564298 cache_ref=  16761564 items=    524288 avg_time= 177177056 ns]
kostya<yyjson_insitu>/manual_time                      123446448 ns    133769539 ns            6         416.077k            1.1126G        8.99456M       12.7552M    361.144M              2.63023           8.10311       2.92639G          960.633M                    6.99634                     2.65997           4.24836M    416.439k   137.305M       1060.74M/s   8.99364M    12.739M   361.117M         2.63003    8.10068/s 2.92529G/s     960.633M               6.99634                2.66017   524.288k       4.24709M/s [BEST: throughput=  1.11 GB/s doc_throughput=     8 docs/s instructions=   960632917 cycles=   361144122 branch_miss=  416077 cache_miss= 8994561 cache_ref=  12755229 items=    524288 avg_time= 123446447 ns]
kostya<sajson>/manual_time                             137945195 ns    148243551 ns            5         355.449k             996.2M        12.5973M       17.5616M    508.387M              3.70261           7.25538       3.68855G          1.54442G                    11.2481                     3.03789           3.80391M    355.535k   137.305M       949.248M/s   12.6253M   17.5606M   508.876M         3.70618    7.24926/s 3.68898G/s     1.54442G               11.2481                3.03497   524.288k        3.8007M/s [BEST: throughput=  1.00 GB/s doc_throughput=     7 docs/s instructions=  1544424210 cycles=   508387443 branch_miss=  355449 cache_miss=12597344 cache_ref=  17561594 items=    524288 avg_time= 137945195 ns]
kostya<rapidjson>/manual_time                          280955721 ns    291284863 ns            3         1009.26k           494.071M        8.50111M       12.4126M      944.2M              6.87667           3.59834       3.39756G          2.74501G                    19.9921                     2.90724           1.88657M    1004.65k   137.305M       466.067M/s   8.20221M    12.049M   946.011M         6.88985    3.55928/s 3.36712G/s     2.74502G               19.9921                2.90167   524.288k       1.86609M/s [BEST: throughput=  0.49 GB/s doc_throughput=     3 docs/s instructions=  2745013270 cycles=   944200484 branch_miss= 1009263 cache_miss= 8501113 cache_ref=  12412603 items=    524288 avg_time= 280955721 ns]
kostya<rapidjson_lossless>/manual_time                 302266048 ns    312591564 ns            2         965.493k           458.023M        8.50019M       12.4286M    1024.23M              7.45953           3.33581       3.41663G          3.01187G                    21.9356                     2.94061           1.74892M    965.771k   137.305M       433.209M/s    8.2773M   12.2073M   1026.25M         7.47423    3.30834/s 3.39519G/s     3.01187G               21.9356                2.93483   524.288k       1.73452M/s [BEST: throughput=  0.46 GB/s doc_throughput=     3 docs/s instructions=  3011866557 cycles=  1024230518 branch_miss=  965493 cache_miss= 8500186 cache_ref=  12428598 items=    524288 avg_time= 302266048 ns]
kostya<rapidjson_insitu>/manual_time                   270128470 ns    280438086 ns            3         1054.85k           514.025M        12.3056M       16.4672M    904.035M              6.58414           3.74367       3.38441G          2.22935G                    16.2365                       2.466           1.96276M    1050.13k   137.305M       484.748M/s    12.003M   16.1518M   905.567M         6.59529    3.70194/s 3.35236G/s     2.22935G               16.2365                2.46183   524.288k       1.94088M/s [BEST: throughput=  0.51 GB/s doc_throughput=     3 docs/s instructions=  2229350708 cycles=   904034971 branch_miss= 1054852 cache_miss=12305627 cache_ref=  16467242 items=    524288 avg_time= 270128469 ns]
kostya<nlohmann_json>/manual_time                     1850728988 ns   1861055349 ns            1         14.8392M           74.1897M        70.9657M       88.8996M    6.82799G              49.7287          0.540328       3.68935G          17.2831G                    125.874                     2.53121           283.287k    14.8392M   137.305M       70.7528M/s   70.9657M   88.8996M   6.82799G         49.7287   0.540328/s 3.68935G/s     17.2831G               125.874                2.53121   524.288k       283.287k/s [BEST: throughput=  0.07 GB/s doc_throughput=     0 docs/s instructions= 17283075127 cycles=  6827992845 branch_miss=14839164 cache_miss=70965694 cache_ref=  88899631 items=    524288 avg_time=1850728988 ns]
distinct_user_id<simdjson_dom>/manual_time               1446904 ns      1477359 ns          483          38.078k           438.615M               0        96.728k    5.31506M              8.41637           694.544       3.69154G           15.301M                     24.229                      2.8788           79.8725k     38.803k   631.515k        416.24M/s    4.96066    96.987k   5.33839M         8.45331    691.131/s 3.68953G/s      15.301M                24.229                2.86622        115       79.4801k/s [BEST: throughput=  0.44 GB/s doc_throughput=   694 docs/s instructions=    15300995 cycles=     5315061 branch_miss=   38078 cache_miss=       0 cache_ref=     96728 items=       115 avg_time=   1446903 ns]
distinct_user_id<simdjson_ondemand>/manual_time          1120015 ns      1149816 ns          625          31.968k           566.511M               0        57.892k    4.11523M              6.51645           897.067       3.69164G          10.6781M                    16.9087                     2.59477           103.163k    32.4898k   631.515k       537.725M/s     0.5248   58.0305k   4.13263M         6.54399    892.845/s  3.6898G/s     10.6781M               16.9087                2.58385        115       102.677k/s [BEST: throughput=  0.57 GB/s doc_throughput=   897 docs/s instructions=    10678075 cycles=     4115234 branch_miss=   31968 cache_miss=       0 cache_ref=     57892 items=       115 avg_time=   1120014 ns]
distinct_user_id<yyjson>/manual_time                      547722 ns       581280 ns         1000           6.941k            1.9332G         15.501k        77.033k    1.20617M              1.90996           3.0612k       3.69233G          2.86148M                    4.53113                     2.37237           352.038k    7.34488k   631.515k       1099.57M/s   7.54551k   58.2937k   1.42795M         2.26114   1.82574k/s 2.60706G/s     2.86167M               4.53144                2.00405        115       209.961k/s [BEST: throughput=  1.93 GB/s doc_throughput=  3061 docs/s instructions=     2861478 cycles=     1206169 branch_miss=    6941 cache_miss=   15501 cache_ref=     77033 items=       115 avg_time=    547721 ns]
distinct_user_id<yyjson_insitu>/manual_time               419043 ns       451932 ns         1670           6.793k           2.09981G             407        46.977k    1.10702M              1.75296          3.32504k       3.68089G          2.86097M                    4.53032                     2.58438            382.38k    7.36355k   631.515k       1.40354G/s    52.2629   32.2814k   1.21309M         1.92092   2.38639k/s 2.89491G/s     2.86123M               4.53074                2.35862        115       274.435k/s [BEST: throughput=  2.10 GB/s doc_throughput=  3325 docs/s instructions=     2860965 cycles=     1107020 branch_miss=    6793 cache_miss=     407 cache_ref=     46977 items=       115 avg_time=    419042 ns]
distinct_user_id<sajson>/manual_time                      584388 ns       615067 ns         1196            10.1k           1090.53M               0        48.049k    2.13788M              3.38533          1.72685k       3.69181G          5.81022M                    9.20044                     2.71774           198.588k    10.6054k   631.515k       1030.58M/s    1.10033   48.0302k   2.15634M         3.41454   1.71119k/s  3.6899G/s     5.81022M               9.20045                2.69449        115       196.787k/s [BEST: throughput=  1.09 GB/s doc_throughput=  1726 docs/s instructions=     5810219 cycles=     2137884 branch_miss=   10100 cache_miss=       0 cache_ref=     48049 items=       115 avg_time=    584388 ns]
distinct_user_id<rapidjson>/manual_time                  2411820 ns      2442993 ns          291          30.087k           284.557M          8.929k        56.341k    8.18294M              12.9576           450.594       3.68718G          21.8427M                    34.5878                      2.6693           51.8183k    30.3774k   631.515k       249.712M/s   1.31593k   36.5484k   8.34637M         13.2164    414.625/s 3.46061G/s     21.8433M               34.5888                2.61711        115       47.6818k/s [BEST: throughput=  0.28 GB/s doc_throughput=   450 docs/s instructions=    21842711 cycles=     8182938 branch_miss=   30087 cache_miss=    8929 cache_ref=     56341 items=       115 avg_time=   2411820 ns]
distinct_user_id<rapidjson_insitu>/manual_time           1525118 ns      1555631 ns          478           26.36k           444.108M              13        45.916k    5.24938M              8.31236           703.242       3.69158G          13.2773M                    21.0246                     2.52931           80.8728k    28.9549k   631.515k       394.894M/s   2.68874k   38.4905k   5.35822M          8.4847    655.687/s 3.51331G/s     13.2778M               21.0254                2.47803        115        75.404k/s [BEST: throughput=  0.44 GB/s doc_throughput=   703 docs/s instructions=    13277333 cycles=     5249382 branch_miss=   26360 cache_miss=      13 cache_ref=     45916 items=       115 avg_time=   1525118 ns]
distinct_user_id<nlohmann_json>/manual_time              8312176 ns      8346520 ns           96         129.854k           87.8033M          3.163k       221.068k    26.5254M              42.0028           139.036       3.68799G          73.6679M                    116.653                     2.77726           15.9891k    238.786k   631.515k       72.4551M/s    82.4583   496.287k   30.6678M         48.5623    120.305/s 3.68951G/s     72.2519M                114.41                2.35595        115       13.8351k/s [BEST: throughput=  0.09 GB/s doc_throughput=   139 docs/s instructions=    73667860 cycles=    26525415 branch_miss=  129854 cache_miss=    3163 cache_ref=    221068 items=       115 avg_time=   8312176 ns]
find_tweet<simdjson_dom>/manual_time                     1435454 ns      1464699 ns          487           37.91k           442.255M               0        86.163k    5.27141M              8.34724           700.309       3.69161G          15.2157M                    24.0939                     2.88645            700.309    38.7081k   631.515k       419.561M/s    1.04312   86.2197k   5.29631M         8.38667    696.644/s 3.68964G/s     15.2157M               24.0939                2.87288          1        696.644/s [BEST: throughput=  0.44 GB/s doc_throughput=   700 docs/s instructions=    15215675 cycles=     5271406 branch_miss=   37910 cache_miss=       0 cache_ref=     86163 items=         1 avg_time=   1435453 ns]
find_tweet<simdjson_ondemand>/manual_time                1066033 ns      1094724 ns          657          30.939k            596.49M               0        33.714k    3.90836M              6.18887           944.538        3.6916G          10.1723M                    16.1078                      2.6027            944.538    31.8076k   631.515k       564.954M/s   0.214612   33.8566k   3.93349M         6.22865    938.057/s 3.68983G/s     10.1723M               16.1078                2.58608          1        938.057/s [BEST: throughput=  0.60 GB/s doc_throughput=   944 docs/s instructions=    10172306 cycles=     3908363 branch_miss=   30939 cache_miss=       0 cache_ref=     33714 items=         1 avg_time=   1066033 ns]
find_tweet<yyjson>/manual_time                            611246 ns       642188 ns         1152           9.557k           1.88527G              90        68.334k    1.23699M              1.95877          2.98532k       3.69282G          2.80059M                    4.43472                     2.26403           2.98532k    7.32005k   631.515k       985.298M/s    1.1114k    41.685k   1.45305M          2.3009     1.636k/s 2.37719G/s     2.80107M               4.43547                1.92771          1         1.636k/s [BEST: throughput=  1.89 GB/s doc_throughput=  2985 docs/s instructions=     2800590 cycles=     1236995 branch_miss=    9557 cache_miss=      90 cache_ref=     68334 items=         1 avg_time=    611246 ns]
find_tweet<yyjson_insitu>/manual_time                     408621 ns       438961 ns         1714           6.687k           2.15765G             552        38.126k    1077.46k              1.70615          3.41662k       3.68126G          2.80027M                    4.43421                     2.59896           3.41662k    7.14682k   631.515k       1.43934G/s    15.2386    23.515k   1.17534M         1.86114   2.44726k/s 2.87635G/s     2.80053M               4.43462                2.38275          1       2.44726k/s [BEST: throughput=  2.16 GB/s doc_throughput=  3416 docs/s instructions=     2800269 cycles=     1077457 branch_miss=    6687 cache_miss=     552 cache_ref=     38126 items=         1 avg_time=    408620 ns]
find_tweet<sajson>/manual_time                            572415 ns       602417 ns         1222           10.08k           1.11385G               0         38.31k    2.09321M              3.31459          1.76377k       3.69195G          5.71503M                    9.04971                     2.73027           1.76377k    10.4417k   631.515k       1052.14M/s    1.09002   38.4459k   2.11212M         3.34452   1.74699k/s 3.68984G/s     5.71503M               9.04971                2.70583          1       1.74699k/s [BEST: throughput=  1.11 GB/s doc_throughput=  1763 docs/s instructions=     5715026 cycles=     2093212 branch_miss=   10080 cache_miss=       0 cache_ref=     38310 items=         1 avg_time=    572414 ns]
find_tweet<rapidjson>/manual_time                        2396510 ns      2425660 ns          293          29.767k            286.98M             245        47.867k    8.11388M              12.8483           454.431        3.6872G          21.7591M                    34.4554                     2.68172            454.431    30.0935k   631.515k       251.307M/s    1012.34   28.8152k   8.29021M         13.1275    417.273/s 3.45928G/s     21.7599M               34.4567                2.62477          1        417.273/s [BEST: throughput=  0.29 GB/s doc_throughput=   454 docs/s instructions=    21759116 cycles=     8113879 branch_miss=   29767 cache_miss=     245 cache_ref=     47867 items=         1 avg_time=   2396510 ns]
find_tweet<rapidjson_insitu>/manual_time                 1480748 ns      1510754 ns          490          26.225k           453.732M              71        36.414k    5.13827M              8.13642           718.481       3.69175G           13.199M                    20.9006                     2.56877            718.481    26.2967k   631.515k       406.727M/s   2.46146k   28.7977k   5.19297M         8.22303    675.334/s 3.50699G/s     13.1996M               20.9014                2.54181          1        675.334/s [BEST: throughput=  0.45 GB/s doc_throughput=   718 docs/s instructions=    13199042 cycles=     5138273 branch_miss=   26225 cache_miss=      71 cache_ref=     36414 items=         1 avg_time=   1480747 ns]
find_tweet<nlohmann_json>/manual_time                    6601173 ns      6631496 ns          114         102.702k           103.888M          2.407k       169.121k    22.4148M              35.4937           164.505       3.68735G          63.6657M                    100.814                     2.84034            164.505    145.668k   631.515k       91.2352M/s    50.9474   393.906k   24.3541M         38.5645    151.488/s 3.68936G/s     62.2838M               98.6261                2.55743          1        151.488/s [BEST: throughput=  0.10 GB/s doc_throughput=   164 docs/s instructions=    63665668 cycles=    22414779 branch_miss=  102702 cache_miss=    2407 cache_ref=    169121 items=         1 avg_time=   6601173 ns]
top_tweet<simdjson_dom>/manual_time                      1800611 ns      1829488 ns          391          83.894k           352.094M               0        95.241k    6.62116M              10.4846           557.539       3.69156G          15.2526M                    24.1523                     2.30361            557.539    84.6808k   631.515k       334.475M/s    1.70588   95.1971k   6.64323M         10.5195    555.367/s 3.68943G/s     15.2526M               24.1523                2.29595          1        555.367/s [BEST: throughput=  0.35 GB/s doc_throughput=   557 docs/s instructions=    15252563 cycles=     6621161 branch_miss=   83894 cache_miss=       0 cache_ref=     95241 items=         1 avg_time=   1800611 ns]
top_tweet<simdjson_ondemand>/manual_time                 1329856 ns      1358706 ns          526          59.511k           477.346M               0        58.056k    4.88395M              7.73371           755.875       3.69166G          10.6981M                    16.9404                     2.19046            755.875    60.1967k   631.515k       452.876M/s   0.334601   58.0728k   4.90688M         7.77001    751.961/s 3.68978G/s     10.6981M               16.9404                2.18023          1        751.961/s [BEST: throughput=  0.48 GB/s doc_throughput=   755 docs/s instructions=    10698106 cycles=     4883951 branch_miss=   59511 cache_miss=       0 cache_ref=     58056 items=         1 avg_time=   1329856 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time    1338683 ns      1367616 ns          523          59.885k           473.988M               0        58.624k    4.91848M              7.78839           750.557        3.6916G          10.9238M                    17.2977                     2.22097            750.557    60.5966k   631.515k        449.89M/s   0.302103   58.6003k    4.9396M         7.82182    747.003/s 3.68989G/s     10.9238M               17.2977                2.21147          1        747.003/s [BEST: throughput=  0.47 GB/s doc_throughput=   750 docs/s instructions=    10923784 cycles=     4918484 branch_miss=   59885 cache_miss=       0 cache_ref=     58624 items=         1 avg_time=   1338683 ns]
top_tweet<yyjson>/manual_time                             616306 ns       646529 ns         1158            9.37k           1.86845G             106        74.238k    1.24823M              1.97656          2.95868k       3.69311G          2.82785M                    4.47789                     2.26549           2.95868k    7.44013k   631.515k       977.208M/s    1041.61   46.9099k   1.47215M         2.33115   1.62257k/s 2.38867G/s     2.82834M               4.47866                1.92123          1       1.62257k/s [BEST: throughput=  1.87 GB/s doc_throughput=  2958 docs/s instructions=     2827852 cycles=     1248230 branch_miss=    9370 cache_miss=     106 cache_ref=     74238 items=         1 avg_time=    616306 ns]
top_tweet<yyjson_insitu>/manual_time                      414384 ns       443947 ns         1690               7k           2.11218G             398        42.988k    1098.57k              1.73958          3.34463k       3.67431G          2.82754M                    4.47739                     2.57383           3.34463k    7.25494k   631.515k       1.41932G/s    47.9775   28.6596k   1.19646M         1.89459   2.41322k/s 2.88733G/s      2.8278M               4.47781                2.36347          1       2.41322k/s [BEST: throughput=  2.11 GB/s doc_throughput=  3344 docs/s instructions=     2827540 cycles=     1098572 branch_miss=    7000 cache_miss=     398 cache_ref=     42988 items=         1 avg_time=    414384 ns]
top_tweet<sajson>/manual_time                             578262 ns       607295 ns         1208          10.151k           1.10332G               0         43.63k    2.11318M               3.3462           1.7471k       3.69193G          5.74502M                     9.0972                     2.71867            1.7471k    10.6598k   631.515k        1041.5M/s   0.903974   43.7019k   2.13377M         3.37881   1.72932k/s 3.68997G/s     5.74502M                9.0972                2.69243          1       1.72932k/s [BEST: throughput=  1.10 GB/s doc_throughput=  1747 docs/s instructions=     5745018 cycles=     2113175 branch_miss=   10151 cache_miss=       0 cache_ref=     43630 items=         1 avg_time=    578262 ns]
top_tweet<rapidjson>/manual_time                         2405729 ns      2435035 ns          292          30.022k           285.406M          8.773k        52.409k    8.16813M              12.9342           451.939       3.69149G          21.8181M                    34.5489                     2.67113            451.939    30.3402k   631.515k       250.344M/s   1.17502k   33.1116k   8.32507M         13.1827    415.674/s 3.46052G/s     21.8188M               34.5499                2.62085          1        415.674/s [BEST: throughput=  0.29 GB/s doc_throughput=   451 docs/s instructions=    21818142 cycles=     8168127 branch_miss=   30022 cache_miss=    8773 cache_ref=     52409 items=         1 avg_time=   2405728 ns]
top_tweet<rapidjson_insitu>/manual_time                  1490441 ns      1519509 ns          483          26.406k             450.5M              15        41.358k    5.17493M              8.19446           713.364       3.69161G          13.2535M                    20.9868                     2.56109            713.364    26.3677k   631.515k       404.081M/s   2.61019k   34.5773k   5.22958M           8.281    670.942/s 3.50874G/s      13.254M               20.9876                2.53443          1        670.942/s [BEST: throughput=  0.45 GB/s doc_throughput=   713 docs/s instructions=    13253469 cycles=     5174926 branch_miss=   26406 cache_miss=      15 cache_ref=     41358 items=         1 avg_time=   1490441 ns]
top_tweet<nlohmann_json>/manual_time                     8852177 ns      8882367 ns           79         190.855k           71.4767M              24       396.983k    32.5894M               51.605           113.183       3.68856G          85.5531M                    135.473                     2.62518            113.183    192.439k   631.515k       68.0352M/s    112.544   402.806k   32.6582M         51.7141    112.967/s 3.68929G/s     85.5632M               135.489                2.61996          1        112.967/s [BEST: throughput=  0.07 GB/s doc_throughput=   113 docs/s instructions=    85553077 cycles=    32589363 branch_miss=  190855 cache_miss=      24 cache_ref=    396983 items=         1 avg_time=   8852176 ns]
