run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-clang10-native.json -DCMAKE_CXX_FLAGS=-march=native
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DCMAKE_CXX_FLAGS=-march=native ..
-- The CXX compiler identification is Clang 10.0.1
-- The C compiler identification is Clang 10.0.1
-- Check for working CXX compiler: /usr/bin/clang++-10
-- Check for working CXX compiler: /usr/bin/clang++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/clang-10
-- Check for working C compiler: /usr/bin/clang-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Success
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Success
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES -- failed to compile
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-clang10-native.json --benchmark_out_format=json
2021-01-23 04:10:44
Running benchmark/bench_ondemand
Run on (4 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 256 KiB (x4)
  L3 Unified 8192 KiB (x1)
Load Average: 0.98, 0.56, 0.29
simdjson::dom implementation:      haswell
simdjson::ondemand implementation: haswell

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                  266143 ns       294788 ns         2572           3.161k           2.38946G               0        92.939k    975.961k              1.54543          3.78369k       3.69274G          2.99617M                    4.74442                     3.06997           378.369k    3.28497k   631.515k       2.20988G/s    1.25194   92.9793k   982.116k         1.55517   3.75738k/s 3.69018G/s     2.99617M               4.74442                3.05073        100       375.738k/s [BEST: throughput=  2.39 GB/s doc_throughput=  3783 docs/s instructions=     2996170 cycles=      975961 branch_miss=    3161 cache_miss=       0 cache_ref=     92939 items=       100 avg_time=    266142 ns]
partial_tweets<simdjson_ondemand>/manual_time             169659 ns       198150 ns         4117           1.693k           3.75801G               0        58.413k     620.56k             0.982653          5.95079k       3.69282G          1.94965M                    3.08726                     3.14176           595.079k    1.87874k   631.515k       3.46662G/s  0.0342482   58.3498k   626.195k        0.991577   5.89417k/s  3.6909G/s     1.94965M               3.08726                3.11348        100       589.417k/s [BEST: throughput=  3.76 GB/s doc_throughput=  5950 docs/s instructions=     1949648 cycles=      620560 branch_miss=    1693 cache_miss=       0 cache_ref=     58413 items=       100 avg_time=    169659 ns]
partial_tweets<yyjson>/manual_time                        651833 ns       683020 ns         1076          10.143k           1.75475G             398        78.425k      1.329M              2.10447          2.77863k       3.69281G          2.90303M                    4.59694                     2.18437           277.863k      7.771k   631.515k       923.947M/s    924.892   51.6853k   1.54094M         2.44007   1.53413k/s 2.36401G/s     2.90373M               4.59803                1.88439        100       153.413k/s [BEST: throughput=  1.75 GB/s doc_throughput=  2778 docs/s instructions=     2903034 cycles=     1329002 branch_miss=   10143 cache_miss=     398 cache_ref=     78425 items=       100 avg_time=    651833 ns]
partial_tweets<yyjson_insitu>/manual_time                 436742 ns       466232 ns         1604           7.055k           2.00425G          1.196k        48.692k    1.15728M              1.83254          3.17372k       3.67288G          2.90273M                    4.59645                     2.50824           317.372k    7.59115k   631.515k       1.34666G/s    178.552    34.039k   1.26624M         2.00509   2.28968k/s 2.89929G/s     2.90299M               4.59686                 2.2926        100       228.968k/s [BEST: throughput=  2.00 GB/s doc_throughput=  3173 docs/s instructions=     2902729 cycles=     1157279 branch_miss=    7055 cache_miss=    1196 cache_ref=     48692 items=       100 avg_time=    436742 ns]
partial_tweets<sajson>/manual_time                        584341 ns       613276 ns         1195           10.91k           1.11747G               0        48.172k    2.08645M              3.30387          1.76951k       3.69198G          5.86951M                    9.29433                     2.81316           176.951k    11.0697k   631.515k       1030.66M/s    1.80753   48.2336k   2.15589M         3.41384   1.71133k/s 3.68943G/s     5.86951M               9.29433                2.72255        100       171.133k/s [BEST: throughput=  1.12 GB/s doc_throughput=  1769 docs/s instructions=     5869509 cycles=     2086445 branch_miss=   10910 cache_miss=       0 cache_ref=     48172 items=       100 avg_time=    584341 ns]
partial_tweets<rapidjson>/manual_time                    2518948 ns      2548526 ns          323          33.071k           297.451M          1.174k        54.986k    7.32102M              11.5928           471.012       3.44829G          21.8987M                    34.6765                     2.99121           47.1012k    31.4179k   631.515k       239.092M/s    625.325   34.6794k   8.70051M         13.7772    396.991/s 3.45403G/s     21.8997M               34.6781                2.51706        100       39.6991k/s [BEST: throughput=  0.30 GB/s doc_throughput=   471 docs/s instructions=    21898702 cycles=     7321016 branch_miss=   33071 cache_miss=    1174 cache_ref=     54986 items=       100 avg_time=   2518947 ns]
partial_tweets<rapidjson_insitu>/manual_time             1518092 ns      1547328 ns          462          25.974k           448.227M              77        45.968k    5.20124M              8.23613           709.765       3.69166G          13.3152M                    21.0845                        2.56           70.9765k    25.8555k   631.515k       396.722M/s    282.652   35.8803k   5.25927M         8.32802    658.722/s  3.4644G/s     13.3155M               21.0851                2.53182        100       65.8722k/s [BEST: throughput=  0.45 GB/s doc_throughput=   709 docs/s instructions=    13315154 cycles=     5201239 branch_miss=   25974 cache_miss=      77 cache_ref=     45968 items=       100 avg_time=   1518091 ns]
partial_tweets<nlohmann_json>/manual_time                8323942 ns      8357437 ns           84         152.694k           78.2997M              17       232.647k     29.757M              47.1201           123.987       3.68949G          78.1917M                    123.816                     2.62767           12.3987k    163.735k   631.515k       72.3527M/s    42.9881   376.377k    30.697M         48.6085    120.135/s 3.68779G/s     78.7701M               124.732                2.56605        100       12.0135k/s [BEST: throughput=  0.08 GB/s doc_throughput=   123 docs/s instructions=    78191666 cycles=    29757023 branch_miss=  152694 cache_miss=      17 cache_ref=    232647 items=       100 avg_time=   8323942 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                  90810913 ns     94209285 ns            8         921.974k           506.975M        10.8763M       15.4254M    334.657M              7.27535           11.0215       3.68842G          1039.39M                    22.5961                     3.10584           11.0215M    923.098k   45.9988M       483.068M/s   10.9069M   15.4276M   334.947M         7.28166    11.0119/s  3.6884G/s     1039.39M               22.5961                3.10315      1000k       11.0119M/s [BEST: throughput=  0.51 GB/s doc_throughput=    11 docs/s instructions=  1039392797 cycles=   334657060 branch_miss=  921974 cache_miss=10876343 cache_ref=  15425420 items=   1000000 avg_time=  90810913 ns]
large_random<simdjson_ondemand>/manual_time             71850272 ns     75207569 ns           10         974.141k             640.7M        5.64719M       8.03267M    264.856M               5.7579           13.9286       3.68909G          689.848M                    14.9971                     2.60461           13.9286M    974.915k   45.9988M       610.545M/s   5.69367M   8.03427M   264.948M         5.75989    13.9178/s  3.6875G/s     689.848M               14.9971                2.60371      1000k       13.9178M/s [BEST: throughput=  0.64 GB/s doc_throughput=    13 docs/s instructions=   689847684 cycles=   264856256 branch_miss=  974141 cache_miss= 5647193 cache_ref=   8032667 items=   1000000 avg_time=  71850272 ns]
large_random<simdjson_ondemand_unordered>/manual_time   66909401 ns     70264795 ns           10         921.361k           688.059M        5.66611M       8.02845M    246.624M              5.36154           14.9582       3.68905G          686.848M                    14.9319                       2.785           14.9582M    921.696k   45.9988M       655.631M/s   5.69667M   8.02898M   246.691M         5.36299    14.9456/s 3.68694G/s     686.848M               14.9319                2.78424      1000k       14.9456M/s [BEST: throughput=  0.69 GB/s doc_throughput=    14 docs/s instructions=   686847927 cycles=   246624103 branch_miss=  921361 cache_miss= 5666111 cache_ref=   8028450 items=   1000000 avg_time=  66909401 ns]
large_random<yyjson>/manual_time                       121844860 ns    125274966 ns            6         673.527k           377.809M        5.87373M       9.08521M    329.997M              7.17404           8.21346       2.71042G           866.68M                    18.8414                     2.62633           8.21346M    676.293k   45.9988M        360.03M/s   5.87188M    9.0718M   330.235M         7.17921    8.20716/s 2.71029G/s      866.68M               18.8414                2.62444      1000k       8.20716M/s [BEST: throughput=  0.38 GB/s doc_throughput=     8 docs/s instructions=   866679877 cycles=   329997115 branch_miss=  673527 cache_miss= 5873732 cache_ref=   9085205 items=   1000000 avg_time= 121844859 ns]
large_random<yyjson_insitu>/manual_time                103831572 ns    107255941 ns            7           674.4k           443.493M        4.98533M       7.73858M     297.91M              6.47648           9.64141       2.87227G          860.559M                    18.7083                     2.88865           9.64141M    676.115k   45.9988M        422.49M/s   5.00587M   7.74201M   298.219M          6.4832    9.63098/s 2.87214G/s     860.559M               18.7083                2.88566      1000k       9.63098M/s [BEST: throughput=  0.44 GB/s doc_throughput=     9 docs/s instructions=   860559122 cycles=   297910265 branch_miss=  674400 cache_miss= 4985328 cache_ref=   7738584 items=   1000000 avg_time= 103831571 ns]
large_random<sajson>/manual_time                        89227685 ns     92604361 ns            8         579.912k           516.215M        8.16402M       12.0335M     328.73M              7.14648           11.2224       3.68912G          1094.99M                    23.8048                     3.33099           11.2224M    580.151k   45.9988M       491.639M/s   8.18509M   12.0686M   329.057M          7.1536    11.2073/s 3.68784G/s     1094.99M               23.8048                3.32767      1000k       11.2073M/s [BEST: throughput=  0.52 GB/s doc_throughput=    11 docs/s instructions=  1094993865 cycles=   328729535 branch_miss=  579912 cache_miss= 8164021 cache_ref=  12033456 items=   1000000 avg_time=  89227684 ns]
large_random<rapidjson>/manual_time                    213414132 ns    216771474 ns            3         589.251k           221.539M        7.03678M        10.906M    707.975M              15.3912           4.81619       3.40974G          2.01614G                    43.8304                     2.84776           4.81619M      589.1k   45.9988M       205.553M/s   6.52731M   10.2522M   710.023M         15.4357    4.68573/s 3.32697G/s     2.01615G               43.8306                2.83956      1000k       4.68573M/s [BEST: throughput=  0.22 GB/s doc_throughput=     4 docs/s instructions=  2016143811 cycles=   707975129 branch_miss=  589251 cache_miss= 7036779 cache_ref=  10905972 items=   1000000 avg_time= 213414132 ns]
large_random<rapidjson_lossless>/manual_time           247323507 ns    250703121 ns            3         583.002k           190.417M        7.02873M        10.941M     833.16M              18.1127            4.1396       3.44895G          2.47511G                    53.8082                     2.97075            4.1396M    582.961k   45.9988M        177.37M/s   6.52246M   10.2672M   835.602M         18.1657    4.04329/s 3.37858G/s     2.47512G               53.8084                2.96208      1000k       4.04329M/s [BEST: throughput=  0.19 GB/s doc_throughput=     4 docs/s instructions=  2475111053 cycles=   833159918 branch_miss=  583002 cache_miss= 7028733 cache_ref=  10941022 items=   1000000 avg_time= 247323507 ns]
large_random<rapidjson_insitu>/manual_time             237404768 ns    240786797 ns            3         590.145k           198.307M        8.10993M       12.5137M    797.908M              17.3463           4.31113       3.43989G          1.74114G                     37.852                     2.18214           4.31113M    589.183k   45.9988M       184.781M/s   7.63304M   11.8486M    799.24M         17.3752    4.21222/s 3.36657G/s     1.74115G               37.8522                2.17851      1000k       4.21222M/s [BEST: throughput=  0.20 GB/s doc_throughput=     4 docs/s instructions=  1741144015 cycles=   797908276 branch_miss=  590145 cache_miss= 8109931 cache_ref=  12513658 items=   1000000 avg_time= 237404768 ns]
large_random<nlohmann_json>/manual_time               1289308411 ns   1292593703 ns            1         5.09881M           35.6771M        46.8044M       60.7925M    4.74316G              103.115           0.77561       3.67884G          12.3636G                     268.78                     2.60661            775.61k    5.09881M   45.9988M       34.0243M/s   46.8044M   60.7925M   4.74316G         103.115    0.77561/s 3.67884G/s     12.3636G                268.78                2.60661      1000k        775.61k/s [BEST: throughput=  0.04 GB/s doc_throughput=     0 docs/s instructions= 12363552227 cycles=  4743160132 branch_miss= 5098810 cache_miss=46804401 cache_ref=  60792502 items=   1000000 avg_time=1289308411 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                        94307473 ns    104715904 ns            7         1060.29k           1.45749G        15.7119M        22.414M    347.541M              2.53116            10.615       3.68915G          985.296M                    7.17596                     2.83505           5.56533M    1060.48k   137.305M       1.35594G/s   15.7499M   22.3314M   347.852M         2.53342    10.6036/s 3.68849G/s     985.296M               7.17596                2.83252   524.288k       5.55935M/s [BEST: throughput=  1.46 GB/s doc_throughput=    10 docs/s instructions=   985295807 cycles=   347540763 branch_miss= 1060290 cache_miss=15711882 cache_ref=  22413968 items=    524288 avg_time=  94307473 ns]
kostya<simdjson_ondemand>/manual_time                   62462894 ns     72836672 ns           11          467.85k           2.19999G        10.0377M       14.0244M    230.226M              1.67675           16.0227       3.68884G          660.998M                    4.81409                     2.87108           8.40049M    468.057k   137.305M       2.04722G/s   10.0615M   14.0094M   230.395M         1.67798    16.0095/s  3.6885G/s     660.998M               4.81409                2.86898   524.288k       8.39359M/s [BEST: throughput=  2.20 GB/s doc_throughput=    16 docs/s instructions=   660998286 cycles=   230226216 branch_miss=  467850 cache_miss=10037664 cache_ref=  14024448 items=    524288 avg_time=  62462894 ns]
kostya<yyjson>/manual_time                             177693800 ns    188136832 ns            4         413.475k           773.458M        11.2087M       16.2686M    458.975M              3.34274           5.63314       2.58547G          978.903M                     7.1294                      2.1328           2.95339M    413.615k   137.305M       736.909M/s   11.2081M   16.2642M   458.897M         3.34217    5.62766/s 2.58251G/s     978.903M                7.1294                2.13317   524.288k       2.95051M/s [BEST: throughput=  0.77 GB/s doc_throughput=     5 docs/s instructions=   978902586 cycles=   458974670 branch_miss=  413475 cache_miss=11208693 cache_ref=  16268641 items=    524288 avg_time= 177693800 ns]
kostya<yyjson_insitu>/manual_time                      124099496 ns    134552393 ns            6         428.482k           1.10679G        8.65873M       12.3895M    363.698M              2.64883            8.0608        2.9317G          960.633M                    6.99635                     2.64129           4.22618M    427.956k   137.305M       1055.16M/s   8.65888M   12.3786M   363.744M         2.64917    8.05805/s 2.93107G/s     960.633M               6.99635                2.64096   524.288k       4.22474M/s [BEST: throughput=  1.11 GB/s doc_throughput=     8 docs/s instructions=   960633228 cycles=   363698017 branch_miss=  428482 cache_miss= 8658734 cache_ref=  12389519 items=    524288 avg_time= 124099496 ns]
kostya<sajson>/manual_time                             139218132 ns    149666574 ns            5         449.582k           986.871M        12.2875M       17.1969M    513.216M              3.73778           7.18743       3.68871G           1.5245G                     11.103                     2.97049           3.76829M     450.32k   137.305M       940.569M/s   12.3109M   17.1768M   513.513M         3.73995    7.18297/s 3.68855G/s      1.5245G                11.103                2.96877   524.288k       3.76595M/s [BEST: throughput=  0.99 GB/s doc_throughput=     7 docs/s instructions=  1524502574 cycles=   513215893 branch_miss=  449582 cache_miss=12287522 cache_ref=  17196924 items=    524288 avg_time= 139218131 ns]
kostya<rapidjson>/manual_time                          277962931 ns    288424700 ns            3         954.056k           500.084M        8.29627M       12.3184M    931.425M              6.78362           3.64214       3.39238G          2.74239G                     19.973                      2.9443           1.90953M    950.561k   137.305M       471.085M/s   7.99605M   11.9187M   934.475M         6.80583     3.5976/s 3.36187G/s     2.74239G                19.973                2.93469   524.288k       1.88618M/s [BEST: throughput=  0.50 GB/s doc_throughput=     3 docs/s instructions=  2742391867 cycles=   931425496 branch_miss=  954056 cache_miss= 8296269 cache_ref=  12318397 items=    524288 avg_time= 277962931 ns]
kostya<rapidjson_lossless>/manual_time                 289087984 ns    299590005 ns            2         945.143k           479.177M        8.30139M       12.2685M    976.104M              7.10902           3.48988       3.40648G          3.00767G                     21.905                      3.0813            1.8297M    957.366k   137.305M       452.956M/s   8.07152M   12.0477M   978.346M         7.12535    3.45915/s 3.38425G/s     3.00767G               21.9051                3.07424   524.288k       1.81359M/s [BEST: throughput=  0.48 GB/s doc_throughput=     3 docs/s instructions=  3007672283 cycles=   976103589 branch_miss=  945143 cache_miss= 8301387 cache_ref=  12268458 items=    524288 avg_time= 289087983 ns]
kostya<rapidjson_insitu>/manual_time                   272813640 ns    283269061 ns            3         1004.24k           509.093M        11.9406M       16.0541M    914.118M              6.65758           3.70775       3.38932G          2.22149G                    16.1792                      2.4302           1.94393M    1002.97k   137.305M       479.977M/s    11.644M   15.7025M   916.038M         6.67156    3.66551/s 3.35774G/s     2.22149G               16.1792                2.42511   524.288k       1.92178M/s [BEST: throughput=  0.51 GB/s doc_throughput=     3 docs/s instructions=  2221486417 cycles=   914118378 branch_miss= 1004239 cache_miss=11940554 cache_ref=  16054053 items=    524288 avg_time= 272813640 ns]
kostya<nlohmann_json>/manual_time                     1866978488 ns   1877324743 ns            1         15.3366M            73.544M        69.5315M       87.1251M    6.88703G              50.1586          0.535625       3.68886G          17.2658G                    125.748                       2.507           280.822k    15.3366M   137.305M        70.137M/s   69.5315M   87.1251M   6.88703G         50.1586   0.535625/s 3.68886G/s     17.2658G               125.748                  2.507   524.288k       280.822k/s [BEST: throughput=  0.07 GB/s doc_throughput=     0 docs/s instructions= 17265773855 cycles=  6887029284 branch_miss=15336583 cache_miss=69531498 cache_ref=  87125118 items=    524288 avg_time=1866978488 ns]
distinct_user_id<simdjson_dom>/manual_time                266293 ns       296702 ns         2629           3.207k           2.38736G               0        94.939k    976.811k              1.54677          3.78038k       3.69271G          2.93045M                    4.64034                     3.00001           434.743k    3.38887k   631.515k       2.20864G/s   0.338912    94.777k   982.511k          1.5558   3.75526k/s 3.68959G/s     2.93045M               4.64034                2.98261        115       431.855k/s [BEST: throughput=  2.39 GB/s doc_throughput=  3780 docs/s instructions=     2930445 cycles=      976811 branch_miss=    3207 cache_miss=       0 cache_ref=     94939 items=       115 avg_time=    266292 ns]
distinct_user_id<simdjson_ondemand>/manual_time           163331 ns       192869 ns         4284           1.502k           3.91552G               0        56.716k    595.733k             0.943339           6.2002k       3.69367G          1.89893M                    3.00695                     3.18755           713.024k    1.71807k   631.515k       3.60093G/s  0.0870682   56.9264k   602.868k        0.954637   6.12253k/s 3.69108G/s     1.89893M               3.00695                3.14983        115       704.091k/s [BEST: throughput=  3.92 GB/s doc_throughput=  6200 docs/s instructions=     1898931 cycles=      595733 branch_miss=    1502 cache_miss=       0 cache_ref=     56716 items=       115 avg_time=    163331 ns]
distinct_user_id<yyjson>/manual_time                      557405 ns       590797 ns         1000            7.16k           1.87085G          15.79k        77.187k    1.24629M              1.97349          2.96247k        3.6921G          2.86133M                     4.5309                     2.29588           340.684k     7.6231k   631.515k       1080.47M/s   7.40461k   58.1158k   1.46143M         2.31416   1.79403k/s 2.62184G/s     2.86153M               4.53121                1.95804        115       206.313k/s [BEST: throughput=  1.87 GB/s doc_throughput=  2962 docs/s instructions=     2861332 cycles=     1246290 branch_miss=    7160 cache_miss=   15790 cache_ref=     77187 items=       115 avg_time=    557404 ns]
distinct_user_id<yyjson_insitu>/manual_time               429552 ns       462306 ns         1628           7.153k           2.03622G             329        47.058k    1.14184M              1.80809          3.22434k       3.68167G          2.86082M                    4.53009                     2.50545           370.799k    7.73072k   631.515k        1.3692G/s    51.2107     32.64k   1.25089M         1.98078   2.32801k/s 2.91208G/s     2.86108M               4.53051                2.28724        115       267.721k/s [BEST: throughput=  2.04 GB/s doc_throughput=  3224 docs/s instructions=     2860819 cycles=     1141838 branch_miss=    7153 cache_miss=     329 cache_ref=     47058 items=       115 avg_time=    429552 ns]
distinct_user_id<sajson>/manual_time                      580780 ns       611334 ns         1203          11.053k           1.12488G               0        48.188k    2.07263M                3.282          1.78125k       3.69187G          5.80807M                    9.19704                     2.80227           204.843k     11.148k   631.515k       1036.98M/s   0.870324   48.1722k   2.14235M          3.3924   1.72182k/s 3.68875G/s     5.80807M               9.19704                2.71107        115        198.01k/s [BEST: throughput=  1.12 GB/s doc_throughput=  1781 docs/s instructions=     5808071 cycles=     2072632 branch_miss=   11053 cache_miss=       0 cache_ref=     48188 items=       115 avg_time=    580779 ns]
distinct_user_id<rapidjson>/manual_time                  2153407 ns      2184259 ns          327          31.576k           321.571M             198        55.444k    7.23963M              11.4639           509.205       3.68646G          21.8279M                    34.5644                     3.01506           58.5586k    31.7578k   631.515k       279.678M/s   1.20112k   36.1722k   7.38994M         11.7019     464.38/s 3.43174G/s     21.8288M               34.5658                2.95386        115       53.4037k/s [BEST: throughput=  0.32 GB/s doc_throughput=   509 docs/s instructions=    21827932 cycles=     7239633 branch_miss=   31576 cache_miss=     198 cache_ref=     55444 items=       115 avg_time=   2153407 ns]
distinct_user_id<rapidjson_insitu>/manual_time           1534643 ns      1564693 ns          440          25.778k           447.754M         12.699k        47.023k    5.20661M              8.24463           709.016       3.69157G          13.2495M                    20.9804                     2.54474           81.5368k    33.5704k   631.515k       392.443M/s   3.77764k   39.5395k   5.42177M         8.58533    651.617/s 3.53292G/s     13.2497M               20.9809                 2.4438        115        74.936k/s [BEST: throughput=  0.45 GB/s doc_throughput=   709 docs/s instructions=    13249464 cycles=     5206609 branch_miss=   25778 cache_miss=   12699 cache_ref=     47023 items=       115 avg_time=   1534643 ns]
distinct_user_id<nlohmann_json>/manual_time              8190305 ns      8224429 ns           93         127.985k           85.4047M          2.581k       232.832k    27.2832M              43.2028           135.238       3.68972G          73.6249M                    116.585                     2.69854           15.5523k     214.02k   631.515k       73.5332M/s    87.7419   364.817k   30.2145M         47.8445    122.096/s 3.68906G/s     72.3026M               114.491                2.39298        115        14.041k/s [BEST: throughput=  0.09 GB/s doc_throughput=   135 docs/s instructions=    73624875 cycles=    27283207 branch_miss=  127985 cache_miss=    2581 cache_ref=    232832 items=       115 avg_time=   8190305 ns]
find_tweet<simdjson_dom>/manual_time                      254510 ns       283660 ns         2751           2.963k           2.49865G               0        84.421k    933.286k              1.47785           3.9566k       3.69264G          2.84527M                    4.50547                     3.04866            3.9566k    3.13125k   631.515k       2.31089G/s    4.56016    84.231k   939.075k         1.48702   3.92912k/s 3.68974G/s     2.84527M               4.50547                3.02986          1       3.92912k/s [BEST: throughput=  2.50 GB/s doc_throughput=  3956 docs/s instructions=     2845271 cycles=      933286 branch_miss=    2963 cache_miss=       0 cache_ref=     84421 items=         1 avg_time=    254509 ns]
find_tweet<simdjson_ondemand>/manual_time                 112484 ns       141008 ns         6208              936           5.64397G               0        32.915k    413.388k             0.654597          8.93719k       3.69453G          1.39044M                    2.20176                     3.36353           8.93719k     995.427   631.515k       5.22868G/s   0.054607    32.884k   415.283k        0.657598   8.89013k/s 3.69192G/s     1.39044M               2.20176                3.34818          1       8.89013k/s [BEST: throughput=  5.64 GB/s doc_throughput=  8937 docs/s instructions=     1390444 cycles=      413388 branch_miss=     936 cache_miss=       0 cache_ref=     32915 items=         1 avg_time=    112484 ns]
find_tweet<yyjson>/manual_time                            621651 ns       652679 ns         1134          10.043k           1.82584G              86        67.943k    1.27728M              2.02256          2.89121k       3.69288G          2.80059M                    4.43472                     2.19262           2.89121k    7.66982k   631.515k       968.806M/s    1050.36    41.857k   1.48997M         2.35935   1.60862k/s 2.39679G/s     2.80107M               4.43547                1.87995          1       1.60862k/s [BEST: throughput=  1.83 GB/s doc_throughput=  2891 docs/s instructions=     2800590 cycles=     1277279 branch_miss=   10043 cache_miss=      86 cache_ref=     67943 items=         1 avg_time=    621651 ns]
find_tweet<yyjson_insitu>/manual_time                     418469 ns       448879 ns         1672           7.095k           2.09263G             382        38.434k    1.11119M              1.75956          3.31367k       3.68212G          2.80027M                    4.43421                     2.52007           3.31367k    7.43516k   631.515k       1.40547G/s    14.7847   23.5712k   1.21037M         1.91661   2.38967k/s 2.89237G/s     2.80053M               4.43462                2.31379          1       2.38967k/s [BEST: throughput=  2.09 GB/s doc_throughput=  3313 docs/s instructions=     2800269 cycles=     1111189 branch_miss=    7095 cache_miss=     382 cache_ref=     38434 items=         1 avg_time=    418468 ns]
find_tweet<sajson>/manual_time                            568692 ns       598545 ns         1228          10.483k           1.12037G               0        38.417k    2.08097M               3.2952           1.7741k       3.69186G          5.71295M                    9.04642                     2.74533            1.7741k    10.9327k   631.515k       1059.03M/s   0.842834   38.3235k   2.09793M         3.32207   1.75842k/s 3.68905G/s     5.71295M               9.04642                2.72313          1       1.75842k/s [BEST: throughput=  1.12 GB/s doc_throughput=  1774 docs/s instructions=     5712951 cycles=     2080970 branch_miss=   10483 cache_miss=       0 cache_ref=     38417 items=         1 avg_time=    568692 ns]
find_tweet<rapidjson>/manual_time                        2147468 ns      2176615 ns          328          31.348k           321.776M         15.216k        48.467k    7.24497M              11.4724            509.53       3.69153G          21.7438M                    34.4312                     3.00123             509.53     31.726k   631.515k       280.451M/s     925.36   29.0039k   7.37265M         11.6746    465.665/s 3.43318G/s     21.7447M               34.4326                2.94937          1        465.665/s [BEST: throughput=  0.32 GB/s doc_throughput=   509 docs/s instructions=    21743826 cycles=     7244968 branch_miss=   31348 cache_miss=   15216 cache_ref=     48467 items=         1 avg_time=   2147467 ns]
find_tweet<rapidjson_insitu>/manual_time                 1533312 ns      1562915 ns          475          26.219k           447.325M              11        36.685k    5.21158M              8.25251           708.336       3.69155G          13.1707M                    20.8557                     2.52719            708.336     32.366k   631.515k       392.783M/s   3.30416k   29.7698k   5.41139M          8.5689    652.183/s 3.52922G/s     13.1711M               20.8564                2.43397          1        652.183/s [BEST: throughput=  0.45 GB/s doc_throughput=   708 docs/s instructions=    13170660 cycles=     5211582 branch_miss=   26219 cache_miss=      11 cache_ref=     36685 items=         1 avg_time=   1533312 ns]
find_tweet<nlohmann_json>/manual_time                    6471343 ns      6501924 ns          110         102.002k           100.328M               8       167.843k    23.2281M              36.7815           158.869       3.69023G          63.6251M                     100.75                     2.73915            158.869    114.089k   631.515k       93.0656M/s    60.3636   295.448k   23.8724M         37.8018    154.527/s 3.68894G/s     62.2836M               98.6257                2.60902          1        154.527/s [BEST: throughput=  0.10 GB/s doc_throughput=   158 docs/s instructions=    63625077 cycles=    23228070 branch_miss=  102002 cache_miss=       8 cache_ref=    167843 items=         1 avg_time=   6471342 ns]
top_tweet<simdjson_dom>/manual_time                       261161 ns       289817 ns         2677           2.987k           2.43416G               0        91.969k    958.002k              1.51699          3.85447k       3.69259G          2.88216M                    4.56388                     3.00851           3.85447k    3.18951k   631.515k       2.25204G/s   0.250654   92.0972k   963.798k         1.52617   3.82906k/s 3.69044G/s     2.88216M               4.56388                2.99042          1       3.82906k/s [BEST: throughput=  2.43 GB/s doc_throughput=  3854 docs/s instructions=     2882159 cycles=      958002 branch_miss=    2987 cache_miss=       0 cache_ref=     91969 items=         1 avg_time=    261160 ns]
top_tweet<simdjson_ondemand>/manual_time                  163607 ns       192013 ns         4269           1.606k           3.89805G               0        57.041k    598.302k             0.947407          6.17253k       3.69304G          1.91452M                    3.03163                     3.19992           6.17253k    1.76156k   631.515k       3.59485G/s  0.0311548   56.9407k   603.857k        0.956204    6.1122k/s 3.69089G/s     1.91452M               3.03163                3.17048          1        6.1122k/s [BEST: throughput=  3.90 GB/s doc_throughput=  6172 docs/s instructions=     1914519 cycles=      598302 branch_miss=    1606 cache_miss=       0 cache_ref=     57041 items=         1 avg_time=    163607 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time     164713 ns       193137 ns         4251           1.902k           3.88278G               0        57.949k    600.666k             0.951151          6.14836k       3.69311G          1.92466M                    3.04768                     3.20421           6.14836k    2.11248k   631.515k       3.57072G/s  0.0428135   57.8902k   607.815k        0.962471   6.07117k/s 3.69015G/s     1.92466M               3.04768                3.16652          1       6.07117k/s [BEST: throughput=  3.88 GB/s doc_throughput=  6148 docs/s instructions=     1924658 cycles=      600666 branch_miss=    1902 cache_miss=       0 cache_ref=     57949 items=         1 avg_time=    164712 ns]
top_tweet<yyjson>/manual_time                             626618 ns       657127 ns         1124          10.104k           1.79535G             140        74.387k    1.29894M              2.05687          2.84292k       3.69279G          2.82786M                     4.4779                     2.17705           2.84292k    7.74203k   631.515k       961.127M/s    990.879   47.0475k   1.50828M         2.38835   1.59587k/s 2.40701G/s     2.82834M               4.47866                1.87521          1       1.59587k/s [BEST: throughput=  1.80 GB/s doc_throughput=  2842 docs/s instructions=     2827861 cycles=     1298944 branch_miss=   10104 cache_miss=     140 cache_ref=     74387 items=         1 avg_time=    626618 ns]
top_tweet<yyjson_insitu>/manual_time                      425041 ns       454534 ns         1647           7.245k           2.05107G             333        43.037k    1.13277M              1.79374          3.24785k       3.67907G          2.82754M                    4.47739                     2.49613           3.24785k    7.61824k   631.515k       1.38374G/s    45.8719   28.8701k   1.23401M         1.95404   2.35272k/s 2.90327G/s      2.8278M               4.47781                2.29156          1       2.35272k/s [BEST: throughput=  2.05 GB/s doc_throughput=  3247 docs/s instructions=     2827540 cycles=     1132771 branch_miss=    7245 cache_miss=     333 cache_ref=     43037 items=         1 avg_time=    425040 ns]
top_tweet<sajson>/manual_time                             573283 ns       602272 ns         1218          10.513k           1.11207G               0        43.922k    2.09659M              3.31994          1.76095k       3.69199G          5.74294M                    9.09391                     2.73918           1.76095k     11.023k   631.515k       1050.55M/s   0.746305   43.8504k   2.11514M         3.34931   1.74434k/s 3.68952G/s     5.74294M               9.09391                2.71516          1       1.74434k/s [BEST: throughput=  1.11 GB/s doc_throughput=  1760 docs/s instructions=     5742943 cycles=     2096589 branch_miss=   10513 cache_miss=       0 cache_ref=     43922 items=         1 avg_time=    573282 ns]
top_tweet<rapidjson>/manual_time                         2150946 ns      2180069 ns          327          31.315k           321.876M          8.848k        51.983k    7.24263M              11.4687           509.689       3.69149G          21.8021M                    34.5235                     3.01025            509.689    31.8794k   631.515k       279.998M/s    1035.43   33.0475k   7.38543M         11.6948    464.912/s 3.43357G/s     21.8027M               34.5245                2.95213          1        464.912/s [BEST: throughput=  0.32 GB/s doc_throughput=   509 docs/s instructions=    21802094 cycles=     7242627 branch_miss=   31315 cache_miss=    8848 cache_ref=     51983 items=         1 avg_time=   2150946 ns]
top_tweet<rapidjson_insitu>/manual_time                  1526334 ns      1555357 ns          439           25.64k           449.383M           9.19k        42.404k    5.18775M              8.21476           711.595       3.69158G          13.2248M                    20.9414                     2.54923            711.595    32.8378k   631.515k       394.579M/s   3.67746k     35.48k   5.39208M         8.53833    655.164/s  3.5327G/s      13.225M               20.9418                2.45268          1        655.164/s [BEST: throughput=  0.45 GB/s doc_throughput=   711 docs/s instructions=    13224783 cycles=     5187747 branch_miss=   25640 cache_miss=    9190 cache_ref=     42404 items=         1 avg_time=   1526334 ns]
top_tweet<nlohmann_json>/manual_time                     9197149 ns      9227280 ns           76         194.209k           69.1778M              40       399.003k    33.6828M              53.3364           109.543        3.6897G          85.7865M                    135.842                      2.5469            109.543    197.668k   631.515k       65.4833M/s    87.0395   444.508k   33.9269M          53.723    108.729/s 3.68884G/s     86.0996M               136.338                 2.5378          1        108.729/s [BEST: throughput=  0.07 GB/s doc_throughput=   109 docs/s instructions=    85786488 cycles=    33682768 branch_miss=  194209 cache_miss=      40 cache_ref=    399003 items=         1 avg_time=   9197148 ns]
