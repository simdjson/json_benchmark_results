run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-clang10-debug.json -DCMAKE_BUILD_TYPE=Debug
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
-- The CXX compiler identification is Clang 10.0.1
-- The C compiler identification is Clang 10.0.1
-- Check for working CXX compiler: /usr/bin/clang++-10
-- Check for working CXX compiler: /usr/bin/clang++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/clang-10
-- Check for working C compiler: /usr/bin/clang-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Success
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Success
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES -- failed to compile
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
make -f CMakeFiles/Makefile2 bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 10
make -f CMakeFiles/Makefile2 benchmark/CMakeFiles/bench_ondemand.dir/all
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/DependInfo.cmake --color=
Scanning dependencies of target benchmark
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_api_internal.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_name.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_name.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_register.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_register.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_runner.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_runner.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/colorprint.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/colorprint.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/commandlineflags.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/commandlineflags.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/complexity.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/complexity.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/console_reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/console_reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/counter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/counter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/csv_reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/csv_reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/json_reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/json_reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/sleep.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/sleep.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/statistics.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/statistics.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/string_util.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/string_util.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/sysinfo.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/sysinfo.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/timers.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/timers.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/cmake -P CMakeFiles/benchmark.dir/cmake_clean_target.cmake
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/benchmark.dir/link.txt --verbose=1
/usr/bin/ar qc libbenchmarkd.a  CMakeFiles/benchmark.dir/benchmark.cc.o CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o CMakeFiles/benchmark.dir/benchmark_name.cc.o CMakeFiles/benchmark.dir/benchmark_register.cc.o CMakeFiles/benchmark.dir/benchmark_runner.cc.o CMakeFiles/benchmark.dir/colorprint.cc.o CMakeFiles/benchmark.dir/commandlineflags.cc.o CMakeFiles/benchmark.dir/complexity.cc.o CMakeFiles/benchmark.dir/console_reporter.cc.o CMakeFiles/benchmark.dir/counter.cc.o CMakeFiles/benchmark.dir/csv_reporter.cc.o CMakeFiles/benchmark.dir/json_reporter.cc.o CMakeFiles/benchmark.dir/reporter.cc.o CMakeFiles/benchmark.dir/sleep.cc.o CMakeFiles/benchmark.dir/statistics.cc.o CMakeFiles/benchmark.dir/string_util.cc.o CMakeFiles/benchmark.dir/sysinfo.cc.o CMakeFiles/benchmark.dir/timers.cc.o
/usr/bin/ranlib libbenchmarkd.a
[ 80%] Built target benchmark
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/CMakeFiles/generated-data.dir/DependInfo.cmake --color=
Scanning dependencies of target generated-data
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated && /usr/bin/ruby genfeaturejson.rb /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
[ 80%] Built target generated-data
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/src/CMakeFiles/simdjson.dir/DependInfo.cmake --color=
Scanning dependencies of target simdjson
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/clang++-10  -DSIMDJSON_THREADS_ENABLED=1 -Dsimdjson_EXPORTS -I/home/jkeiser/simdjson_benchmark_results/simdjson/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/include  -g -fPIC   -fPIC -Werror -Wall -Wextra -Weffc++ -Wsign-compare -Wshadow -Wwrite-strings -Wpointer-arith -Winit-self -Wconversion -Wno-sign-conversion -pthread -std=c++17 -o CMakeFiles/simdjson.dir/simdjson.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/src/simdjson.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/simdjson.dir/link.txt --verbose=1
/usr/bin/clang++-10 -fPIC -g  -shared -Wl,-soname,libsimdjson.so.7 -o ../libsimdjson.so.7.0.0 CMakeFiles/simdjson.dir/simdjson.cpp.o  -pthread 
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_symlink_library ../libsimdjson.so.7.0.0 ../libsimdjson.so.7 ../libsimdjson.so
[ 80%] Built target simdjson
make -f dependencies/CMakeFiles/yyjson.dir/build.make dependencies/CMakeFiles/yyjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies/CMakeFiles/yyjson.dir/DependInfo.cmake --color=
Scanning dependencies of target yyjson
make -f dependencies/CMakeFiles/yyjson.dir/build.make dependencies/CMakeFiles/yyjson.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies && /usr/bin/clang-10  -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/yyjson/src  -g   -o CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o   -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/yyjson/src/yyjson.c
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies && /usr/bin/cmake -P CMakeFiles/yyjson.dir/cmake_clean_target.cmake
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies && /usr/bin/cmake -E cmake_link_script CMakeFiles/yyjson.dir/link.txt --verbose=1
/usr/bin/ar qc libyyjson.a  CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
/usr/bin/ranlib libyyjson.a
[ 90%] Built target yyjson
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark/CMakeFiles/bench_ondemand.dir/DependInfo.cmake --color=
Scanning dependencies of target bench_ondemand
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/clang++-10  -DRAPIDJSON_HAS_STDSTRING -DSAJSON_UNSORTED_OBJECT_KEYS -DSIMDJSON_BENCHMARK_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/\" -DSIMDJSON_COMPETITION_NLOHMANN_JSON -DSIMDJSON_COMPETITION_RAPIDJSON -DSIMDJSON_COMPETITION_SAJSON -DSIMDJSON_COMPETITION_YYJSON -DSIMDJSON_MINEFIELD_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/minefield/\" -DSIMDJSON_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/\" -DSIMDJSON_THREADS_ENABLED=1 -DSIMDJSON_USING_LIBRARY=1 -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/. -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/linux -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/yyjson/src -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/rapidjson/include -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/sajson/include -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/json  -g   -pthread -std=c++17 -o CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/bench_ondemand.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/cmake -E cmake_link_script CMakeFiles/bench_ondemand.dir/link.txt --verbose=1
/usr/bin/clang++-10  -g   CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o  -o bench_ondemand  -Wl,-rpath,/home/jkeiser/simdjson_benchmark_results/simdjson/build ../libsimdjson.so.7.0.0 ../_deps/google_benchmarks/src/libbenchmarkd.a ../dependencies/libyyjson.a -pthread /usr/lib/x86_64-linux-gnu/librt.so 
[100%] Built target bench_ondemand
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 0
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-clang10-debug.json --benchmark_out_format=json
2021-01-24 20:37:08
Running benchmark/bench_ondemand
Run on (4 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 256 KiB (x4)
  L3 Unified 8192 KiB (x1)
Load Average: 0.95, 0.67, 0.39
***WARNING*** Library was built as DEBUG. Timings may be affected.
simdjson::dom implementation:      haswell
simdjson::ondemand implementation: fallback

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
partial_tweets<simdjson_dom>/manual_time                22449670 ns     22480441 ns           31          18.031k           28.1382M               8       5.96263M    82.8101M              131.129           44.5566       3.68974G          78.2256M                     123.87                    0.944639           4.45566k     18.059k   631.515k       26.8271M/s    204.129   5.97085M   82.8267M         131.156    44.5441/s 3.68944G/s     78.2256M                123.87               0.944449        100       4.45441k/s [BEST: throughput=  0.03 GB/s doc_throughput=    44 docs/s instructions=    78225608 cycles=    82810051 branch_miss=   18031 cache_miss=       8 cache_ref=   5962629 items=       100 avg_time=  22449669 ns]
partial_tweets<simdjson_ondemand>/manual_time           17281528 ns     17312611 ns           40           7.986k           36.5576M               0       7.12117M    63.7361M              100.926           57.8887        3.6896G          63.9481M                    101.261                     1.00333           5.78887k     8.0876k   631.515k       34.8499M/s     28.975   7.13056M   63.7581M         100.961    57.8653/s 3.68938G/s     63.9481M               101.261                1.00298        100       5.78653k/s [BEST: throughput=  0.04 GB/s doc_throughput=    57 docs/s instructions=    63948107 cycles=    63736078 branch_miss=    7986 cache_miss=       0 cache_ref=   7121166 items=       100 avg_time=  17281528 ns]
partial_tweets<yyjson>/manual_time                       2308574 ns      2339928 ns          303          12.267k           312.258M             621        78.239k    7.46598M              11.8223           494.458       3.69162G          10.5728M                     16.742                     1.41613           49.4458k    11.3855k   631.515k        260.88M/s    1057.06   53.0463k   7.65329M         12.1189    433.168/s 3.31516G/s     10.5733M               16.7427                1.38154        100       43.3168k/s [BEST: throughput=  0.31 GB/s doc_throughput=   494 docs/s instructions=    10572810 cycles=     7465982 branch_miss=   12267 cache_miss=     621 cache_ref=     78239 items=       100 avg_time=   2308573 ns]
partial_tweets<yyjson_insitu>/manual_time                2092780 ns      2122801 ns          335          10.691k           319.882M              17        48.173k    7.28784M              11.5403           506.532       3.69152G          10.5724M                    16.7414                      1.4507           50.6532k    11.1554k   631.515k        287.78M/s    166.487   35.4536k   7.36999M         11.6703    477.833/s 3.52163G/s     10.5727M               16.7418                1.43456        100       47.7833k/s [BEST: throughput=  0.32 GB/s doc_throughput=   506 docs/s instructions=    10572441 cycles=     7287844 branch_miss=   10691 cache_miss=      17 cache_ref=     48173 items=       100 avg_time=   2092780 ns]
partial_tweets<sajson>/manual_time                       3249115 ns      3278298 ns          215          42.258k           194.684M               0        46.023k    11.9744M              18.9614           308.281       3.69148G          26.9812M                    42.7245                     2.25323           30.8281k    42.3493k   631.515k       185.361M/s     13.014   46.0845k   11.9881M         18.9831    307.776/s 3.68966G/s     26.9812M               42.7245                2.25066        100       30.7776k/s [BEST: throughput=  0.19 GB/s doc_throughput=   308 docs/s instructions=    26981162 cycles=    11974414 branch_miss=   42258 cache_miss=       0 cache_ref=     46023 items=       100 avg_time=   3249114 ns]
partial_tweets<rapidjson>/manual_time                   12562903 ns     12593274 ns           56          67.318k           51.0586M              91        54.763k    45.6278M              72.2513           80.8509       3.68905G          105.145M                    166.497                     2.30441           8.08509k    67.4382k   631.515k       47.9395M/s    356.964   35.9284k   45.7888M         72.5063    79.5994/s 3.64477G/s     105.146M               166.498                2.29633        100       7.95994k/s [BEST: throughput=  0.05 GB/s doc_throughput=    80 docs/s instructions=   105145324 cycles=    45627790 branch_miss=   67318 cache_miss=      91 cache_ref=     54763 items=       100 avg_time=  12562902 ns]
partial_tweets<rapidjson_insitu>/manual_time             9619932 ns      9650003 ns           73          52.689k           66.4868M             123        45.407k    35.0479M              55.4982           105.281        3.6899G          76.8333M                    121.665                     2.19224           10.5281k    52.9453k   631.515k       62.6054M/s    179.192   36.0791k   35.1666M         55.6861    103.951/s  3.6556G/s     76.8336M               121.666                2.18484        100       10.3951k/s [BEST: throughput=  0.07 GB/s doc_throughput=   105 docs/s instructions=    76833316 cycles=    35047929 branch_miss=   52689 cache_miss=     123 cache_ref=     45407 items=       100 avg_time=   9619931 ns]
partial_tweets<nlohmann_json>/manual_time               60278998 ns     60318169 ns           12         422.222k            10.519M             195       279.868k    221.483M              350.717           16.6567       3.68918G          425.801M                    674.253                      1.9225           1.66567k    431.474k   631.515k        9.9912M/s    966.833   407.795k   222.391M         352.155    16.5895/s 3.68936G/s     426.257M               674.975                 1.9167        100       1.65895k/s [BEST: throughput=  0.01 GB/s doc_throughput=    16 docs/s instructions=   425800996 cycles=   221482967 branch_miss=  422222 cache_miss=     195 cache_ref=    279868 items=       100 avg_time=  60278997 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                2924270849 ns   2927692277 ns            1         3.97556M             15.73M         11.267M       18.9999M    10.7897G              234.566          0.341966       3.68972G          14.5491G                    316.294                     1.34843           341.966k    3.97556M   45.9988M       15.0013M/s    11.267M   18.9999M   10.7897G         234.566   0.341966/s 3.68972G/s     14.5491G               316.294                1.34843      1000k       341.966k/s [BEST: throughput=  0.02 GB/s doc_throughput=     0 docs/s instructions= 14549149961 cycles= 10789729897 branch_miss= 3975560 cache_miss=11266965 cache_ref=  18999869 items=   1000000 avg_time=2924270849 ns]
large_random<simdjson_ondemand>/manual_time           1671162669 ns   1674593498 ns            1         903.888k            27.525M        5.62894M       9.68901M    6.16595G              134.046          0.598386       3.68962G          8.52071G                    185.238                      1.3819           598.386k    903.888k   45.9988M       26.2499M/s   5.62894M   9.68901M   6.16595G         134.046   0.598386/s 3.68962G/s     8.52071G               185.238                 1.3819      1000k       598.386k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions=  8520705979 cycles=  6165951350 branch_miss=  903888 cache_miss= 5628938 cache_ref=   9689006 items=   1000000 avg_time=1671162669 ns]
large_random<simdjson_ondemand_unordered>/manual_time 1699991980 ns   1703440228 ns            1         1.90605M           27.0582M         5.6775M       13.0827M    6.27234G              136.359          0.588238       3.68963G          8.58371G                    186.607                      1.3685           588.238k    1.90605M   45.9988M       25.8047M/s    5.6775M   13.0827M   6.27234G         136.359   0.588238/s 3.68963G/s     8.58371G               186.607                 1.3685      1000k       588.238k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions=  8583705989 cycles=  6272335155 branch_miss= 1906049 cache_miss= 5677496 cache_ref=  13082726 items=   1000000 avg_time=1699991980 ns]
large_random<yyjson>/manual_time                       363008024 ns    366418027 ns            2         655.502k           126.719M        6.58117M       9.26793M     1.2172G              26.4615           2.75482       3.35316G          2.93382G                    63.7803                     2.41031           2.75482M    656.683k   45.9988M       120.845M/s   6.57991M   9.25408M   1.21719G         26.4614    2.75476/s 3.35307G/s     2.93382G               63.7803                2.41031      1000k       2.75476M/s [BEST: throughput=  0.13 GB/s doc_throughput=     2 docs/s instructions=  2933817066 cycles=  1217196987 branch_miss=  655502 cache_miss= 6581165 cache_ref=   9267926 items=   1000000 avg_time= 363008024 ns]
large_random<yyjson_insitu>/manual_time                344538940 ns    347969544 ns            2         657.442k           133.541M         5.7129M       7.94943M    1.18436G              25.7477           2.90315       3.43838G           2.9277G                    63.6473                     2.47196           2.90315M    656.178k   45.9988M       127.323M/s   5.71389M   7.92975M   1.18443G         25.7491    2.90243/s 3.43772G/s      2.9277G               63.6473                2.47182      1000k       2.90243M/s [BEST: throughput=  0.13 GB/s doc_throughput=     2 docs/s instructions=  2927696248 cycles=  1184360694 branch_miss=  657442 cache_miss= 5712897 cache_ref=   7949426 items=   1000000 avg_time= 344538940 ns]
large_random<sajson>/manual_time                       798541061 ns    801946102 ns            1         1.67704M           57.6035M        9.15216M       12.3204M    2.94641G              64.0542           1.25228       3.68975G          7.01595G                    152.525                     2.38118           1.25228M    1.67704M   45.9988M        54.935M/s   9.15216M   12.3204M   2.94641G         64.0542    1.25228/s 3.68975G/s     7.01595G               152.525                2.38118      1000k       1.25228M/s [BEST: throughput=  0.06 GB/s doc_throughput=     1 docs/s instructions=  7015953653 cycles=  2946414556 branch_miss= 1677039 cache_miss= 9152158 cache_ref=  12320406 items=   1000000 avg_time= 798541061 ns]
large_random<rapidjson>/manual_time                   1780480315 ns   1783922497 ns            1         6.36174M            25.835M        7.12478M       10.8528M    6.51076G              141.542          0.561646       3.65674G          14.2611G                    310.033                     2.19039           561.646k    6.36174M   45.9988M       24.6382M/s   7.12478M   10.8528M   6.51076G         141.542   0.561646/s 3.65674G/s     14.2611G               310.033                2.19039      1000k       561.646k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 14261124860 cycles=  6510759444 branch_miss= 6361742 cache_miss= 7124781 cache_ref=  10852778 items=   1000000 avg_time=1780480315 ns]
large_random<rapidjson_lossless>/manual_time          2150345359 ns   2153783124 ns            1         7.38165M           21.3913M        7.31302M       10.8953M    7.87498G                171.2          0.465042       3.66219G          17.2369G                    374.725                     2.18882           465.042k    7.38165M   45.9988M       20.4004M/s   7.31302M   10.8953M   7.87498G           171.2   0.465042/s 3.66219G/s     17.2369G               374.725                2.18882      1000k       465.042k/s [BEST: throughput=  0.02 GB/s doc_throughput=     0 docs/s instructions= 17236881382 cycles=  7874977957 branch_miss= 7381647 cache_miss= 7313024 cache_ref=  10895332 items=   1000000 avg_time=2150345359 ns]
large_random<rapidjson_insitu>/manual_time            1710136957 ns   1713547258 ns            1         6.47482M           26.8977M        8.28015M       12.4125M    6.25085G              135.892          0.584748       3.65517G          13.5311G                    294.163                     2.16469           584.748k    6.47482M   45.9988M       25.6517M/s   8.28015M   12.4125M   6.25085G         135.892   0.584748/s 3.65517G/s     13.5311G               294.163                2.16469      1000k       584.748k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 13531127802 cycles=  6250849089 branch_miss= 6474821 cache_miss= 8280151 cache_ref=  12412504 items=   1000000 avg_time=1710136957 ns]
large_random<nlohmann_json>/manual_time               9326170616 ns   9329643346 ns            1         37.8298M           4.93223M        48.1143M       63.1717M    34.3979G              747.799          0.107225       3.68832G          63.4292G                   1.37893k                     1.84399           107.225k    37.8298M   45.9988M       4.70374M/s   48.1143M   63.1717M   34.3979G         747.799   0.107225/s 3.68832G/s     63.4292G              1.37893k                1.84399      1000k       107.225k/s [BEST: throughput=  0.00 GB/s doc_throughput=     0 docs/s instructions= 63429179765 cycles= 34397854998 branch_miss=37829806 cache_miss=48114256 cache_ref=  63171706 items=   1000000 avg_time=9326170616 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                      4095339195 ns   4105735617 ns            1         3.49812M           33.5271M        17.1134M        30.841M    15.1102G              110.049           0.24418       3.68962G          17.1288G                     124.75                     1.13359           128.021k    3.49812M   137.305M        31.974M/s   17.1134M    30.841M   15.1102G         110.049    0.24418/s 3.68962G/s     17.1288G                124.75                1.13359   524.288k       128.021k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 17128811305 cycles= 15110225396 branch_miss= 3498124 cache_miss=17113377 cache_ref=  30841020 items=    524288 avg_time=4095339195 ns]
kostya<simdjson_ondemand>/manual_time                 2923601740 ns   2933999056 ns            1          1.6196M           46.9643M         10.035M       22.2774M    10.7869G              78.5617          0.342044        3.6896G          12.3455G                    89.9129                     1.14449           179.329k     1.6196M   137.305M       44.7887M/s    10.035M   22.2774M   10.7869G         78.5617   0.342044/s  3.6896G/s     12.3455G               89.9129                1.14449   524.288k       179.329k/s [BEST: throughput=  0.05 GB/s doc_throughput=     0 docs/s instructions= 12345496118 cycles= 10786916009 branch_miss= 1619601 cache_miss=10034999 cache_ref=  22277395 items=    524288 avg_time=2923601740 ns]
kostya<yyjson>/manual_time                             461798601 ns    472169277 ns            2         972.803k           297.327M        13.7338M        17.597M    1.50581G              10.9669           2.16545       3.26076G          3.23214G                    23.5398                     2.14644           1.13532M    972.462k   137.305M       283.553M/s   13.7271M    17.609M   1.50582G         10.9669    2.16545/s 3.26076G/s     3.23214G               23.5398                2.14643   524.288k       1.13532M/s [BEST: throughput=  0.30 GB/s doc_throughput=     2 docs/s instructions=  3232136437 cycles=  1505809592 branch_miss=  972803 cache_miss=13733848 cache_ref=  17597046 items=    524288 avg_time= 461798601 ns]
kostya<yyjson_insitu>/manual_time                      408906128 ns    419266386 ns            2          974.39k           335.791M        11.1098M       13.6346M      1.412G              10.2837           2.44559       3.45317G          3.21387G                    23.4068                     2.27611           1.28219M    974.689k   137.305M       320.231M/s   11.1027M   13.5963M   1.41204G          10.284    2.44555/s 3.45322G/s     3.21387G               23.4068                2.27604   524.288k       1.28217M/s [BEST: throughput=  0.34 GB/s doc_throughput=     2 docs/s instructions=  3213866707 cycles=  1412001622 branch_miss=  974390 cache_miss=11109778 cache_ref=  13634570 items=    524288 avg_time= 408906128 ns]
kostya<sajson>/manual_time                            1126079128 ns   1136462384 ns            1         11.7965M           121.932M        14.9949M       17.8365M    4.15498G              30.2609          0.888037       3.68977G          8.77554G                    63.9127                     2.11205           465.587k    11.7965M   137.305M       116.283M/s   14.9949M   17.8365M   4.15498G         30.2609   0.888037/s 3.68977G/s     8.77554G               63.9127                2.11205   524.288k       465.587k/s [BEST: throughput=  0.12 GB/s doc_throughput=     0 docs/s instructions=  8775535643 cycles=  4154977949 branch_miss=11796521 cache_miss=14994922 cache_ref=  17836475 items=    524288 avg_time=1126079128 ns]
kostya<rapidjson>/manual_time                         2279357580 ns   2289737375 ns            1         16.3665M           60.2385M        8.77755M        12.341M    8.32713G               60.647           0.43872       3.65328G          16.8219G                    122.515                     2.02013           230.016k    16.3665M   137.305M       57.4479M/s   8.77755M    12.341M   8.32713G          60.647    0.43872/s 3.65328G/s     16.8219G               122.515                2.02013   524.288k       230.016k/s [BEST: throughput=  0.06 GB/s doc_throughput=     0 docs/s instructions= 16821932147 cycles=  8327132964 branch_miss=16366491 cache_miss= 8777549 cache_ref=  12341012 items=    524288 avg_time=2279357580 ns]
kostya<rapidjson_lossless>/manual_time                2496604344 ns   2506997969 ns            1          16.588M           54.9967M        8.77856M       12.3685M    9.12819G              66.4811          0.400544       3.65624G          18.5468G                    135.077                     2.03181               210k     16.588M   137.305M       52.4489M/s   8.77856M   12.3685M   9.12819G         66.4811   0.400544/s 3.65624G/s     18.5468G               135.077                2.03181   524.288k           210k/s [BEST: throughput=  0.05 GB/s doc_throughput=     0 docs/s instructions= 18546771474 cycles=  9128193752 branch_miss=16588026 cache_miss= 8778560 cache_ref=  12368453 items=    524288 avg_time=2496604344 ns]
kostya<rapidjson_insitu>/manual_time                  2102693708 ns   2113067526 ns            1         15.5007M           65.2996M         12.941M       16.3312M    7.67499G              55.8974           0.47558       3.65008G          15.3741G                     111.97                     2.00314           249.341k    15.5007M   137.305M       62.2745M/s    12.941M   16.3312M   7.67499G         55.8974    0.47558/s 3.65008G/s     15.3741G                111.97                2.00314   524.288k       249.341k/s [BEST: throughput=  0.07 GB/s doc_throughput=     0 docs/s instructions= 15374093252 cycles=  7674991859 branch_miss=15500700 cache_miss=12941034 cache_ref=  16331169 items=    524288 avg_time=2102693708 ns]
kostya<nlohmann_json>/manual_time                     14530488092 ns   14540939071 ns            1         59.6508M           9.44944M        72.3254M       91.4245M     53.613G              390.467         0.0688208       3.68969G          100.394G                    731.177                     1.87257           36.0819k    59.6508M   137.305M       9.01169M/s   72.3254M   91.4245M    53.613G         390.467  0.0688208/s 3.68969G/s     100.394G               731.177                1.87257   524.288k       36.0819k/s [BEST: throughput=  0.01 GB/s doc_throughput=     0 docs/s instructions=100394252382 cycles= 53613032334 branch_miss=59650782 cache_miss=72325423 cache_ref=  91424470 items=    524288 avg_time=14530488092 ns]
distinct_user_id<simdjson_dom>/manual_time              22061360 ns     22116146 ns           32          16.853k           28.6374M               2       5.90217M    81.3591M              128.832           45.3471        3.6894G          76.3621M                    120.919                    0.938581           5.21491k    16.9049k   631.515k       27.2993M/s    166.688   5.90822M    81.396M          128.89    45.3281/s 3.68953G/s     76.3621M               120.919               0.938155        115       5.21273k/s [BEST: throughput=  0.03 GB/s doc_throughput=    45 docs/s instructions=    76362108 cycles=    81359076 branch_miss=   16853 cache_miss=       2 cache_ref=   5902174 items=       115 avg_time=  22061359 ns]
distinct_user_id<simdjson_ondemand>/manual_time         17328519 ns     17382848 ns           40           7.581k           36.4589M               0       7.95512M    63.9097M              101.201           57.7324       3.68966G           62.659M                    99.2202                    0.980431           6.63923k    7.58945k   631.515k       34.7554M/s     43.025   7.97028M   63.9336M         101.238    57.7083/s  3.6895G/s      62.659M               99.2202               0.980065        115       6.63646k/s [BEST: throughput=  0.04 GB/s doc_throughput=    57 docs/s instructions=    62659036 cycles=    63909686 branch_miss=    7581 cache_miss=       0 cache_ref=   7955119 items=       115 avg_time=  17328518 ns]
distinct_user_id<yyjson>/manual_time                     2051500 ns      2106697 ns          354          10.411k           320.902M          19.72k         77.88k    7.26486M              11.5039           508.147       3.69161G          10.3048M                    16.3175                     1.41844           58.4369k    10.8227k   631.515k        293.57M/s   19.3323k   73.6295k   7.36245M         11.6584    487.448/s 3.58881G/s     10.3048M               16.3176                1.39964        115       56.0566k/s [BEST: throughput=  0.32 GB/s doc_throughput=   508 docs/s instructions=    10304750 cycles=     7264860 branch_miss=   10411 cache_miss=   19720 cache_ref=     77880 items=       115 avg_time=   2051499 ns]
distinct_user_id<yyjson_insitu>/manual_time              2058812 ns      2113604 ns          340           10.59k            325.24M            1068        48.148k    7.16409M              11.3443           515.015       3.68961G          10.3042M                    16.3166                     1.43831           59.2267k    11.0907k   631.515k       292.528M/s    183.291   35.3241k   7.24788M          11.477    485.717/s 3.52042G/s     10.3044M                16.317                1.42172        115       55.8575k/s [BEST: throughput=  0.33 GB/s doc_throughput=   515 docs/s instructions=    10304181 cycles=     7164093 branch_miss=   10590 cache_miss=    1068 cache_ref=     48148 items=       115 avg_time=   2058811 ns]
distinct_user_id<sajson>/manual_time                     3255643 ns      3308603 ns          215          42.269k           194.272M               0         46.76k    11.9996M              19.0013           307.629       3.69143G          26.5515M                    42.0441                      2.2127           35.3773k     42.389k   631.515k       184.989M/s    10.5442   47.0224k   12.0119M         19.0208    307.159/s 3.68957G/s     26.5515M               42.0441                2.21043        115       35.3233k/s [BEST: throughput=  0.19 GB/s doc_throughput=   307 docs/s instructions=    26551510 cycles=    11999611 branch_miss=   42269 cache_miss=       0 cache_ref=     46760 items=       115 avg_time=   3255643 ns]
distinct_user_id<rapidjson>/manual_time                 12393342 ns     12447533 ns           57          65.483k             51.65M         12.348k        57.039k    45.1148M               71.439           81.7875       3.68983G          104.008M                    164.696                     2.30541           9.40556k    65.6929k   631.515k       48.5954M/s   2.67877k   39.8316k   45.2373M          71.633    80.6885/s 3.65013G/s     104.009M               164.697                2.29918        115       9.27918k/s [BEST: throughput=  0.05 GB/s doc_throughput=    81 docs/s instructions=   104008290 cycles=    45114810 branch_miss=   65483 cache_miss=   12348 cache_ref=     57039 items=       115 avg_time=  12393341 ns]
distinct_user_id<rapidjson_insitu>/manual_time           9381715 ns      9435308 ns           75          51.958k           67.3929M          8.562k         47.54k    34.5767M               54.752           106.716       3.68989G          75.7259M                    119.912                     2.19009           12.2724k    51.6523k   631.515k        64.195M/s   13.0203k   48.1016k   34.6152M         54.8129     106.59/s 3.68964G/s     75.7259M               119.911                2.18765        115       12.2579k/s [BEST: throughput=  0.07 GB/s doc_throughput=   106 docs/s instructions=    75725929 cycles=    34576686 branch_miss=   51958 cache_miss=    8562 cache_ref=     47540 items=       115 avg_time=   9381715 ns]
distinct_user_id<nlohmann_json>/manual_time             57389613 ns     57449265 ns           12         384.109k           11.0221M             180       339.514k    211.393M              334.739           17.4534       3.68952G          406.392M                     643.52                     1.92245           2.00714k     384.66k   631.515k       10.4942M/s   1.32842k   364.756k   211.738M         335.286    17.4248/s 3.68948G/s     406.515M               643.715                 1.9199        115       2.00385k/s [BEST: throughput=  0.01 GB/s doc_throughput=    17 docs/s instructions=   406392361 cycles=   211392561 branch_miss=  384109 cache_miss=     180 cache_ref=    339514 items=       115 avg_time=  57389612 ns]
find_tweet<simdjson_dom>/manual_time                    21834040 ns     21864395 ns           32          15.281k           28.9357M               5       5.88575M    80.5281M              127.516           45.8195       3.68976G          74.2429M                    117.563                     0.92195            45.8195    15.3983k   631.515k       27.5835M/s    341.344   5.88919M   80.5545M         127.558       45.8/s  3.6894G/s     74.2429M               117.563               0.921648          1           45.8/s [BEST: throughput=  0.03 GB/s doc_throughput=    45 docs/s instructions=    74242939 cycles=    80528144 branch_miss=   15281 cache_miss=       5 cache_ref=   5885749 items=         1 avg_time=  21834040 ns]
find_tweet<simdjson_ondemand>/manual_time               16029607 ns     16060191 ns           44           3.317k           39.4147M               0       6.25218M    59.1152M              93.6086            62.413       3.68956G          54.9617M                    87.0315                    0.929739             62.413    3.31098k   631.515k       37.5717M/s    97.7273   6.24251M   59.1403M         93.6483    62.3846/s 3.68944G/s     54.9617M               87.0315               0.929344          1        62.3846/s [BEST: throughput=  0.04 GB/s doc_throughput=    62 docs/s instructions=    54961722 cycles=    59115231 branch_miss=    3317 cache_miss=       0 cache_ref=   6252176 items=         1 avg_time=  16029606 ns]
find_tweet<yyjson>/manual_time                           2226420 ns      2257907 ns          322          12.264k           323.341M             923        67.741k    7.21022M              11.4173           512.008       3.69169G          10.0177M                     15.863                     1.38938            512.008    11.1456k   631.515k       270.506M/s   1.26375k   42.9219k   7.38849M         11.6996    449.152/s 3.31855G/s     10.0184M               15.8641                1.35595          1        449.152/s [BEST: throughput=  0.32 GB/s doc_throughput=   512 docs/s instructions=    10017742 cycles=     7210221 branch_miss=   12264 cache_miss=     923 cache_ref=     67741 items=         1 avg_time=   2226419 ns]
find_tweet<yyjson_insitu>/manual_time                    2019691 ns      2050206 ns          347           10.46k           331.992M          1.425k         38.53k    7.01078M              11.1015           525.707       3.68561G          10.0174M                    15.8624                     1.42885            525.707    10.8476k   631.515k       298.194M/s    38.9856   25.2718k   7.10493M         11.2506    495.125/s 3.51783G/s     10.0176M               15.8628                1.40995          1        495.125/s [BEST: throughput=  0.33 GB/s doc_throughput=   525 docs/s instructions=    10017366 cycles=     7010779 branch_miss=   10460 cache_miss=    1425 cache_ref=     38530 items=         1 avg_time=   2019690 ns]
find_tweet<sajson>/manual_time                           3139360 ns      3169595 ns          223          42.073k           201.407M               0        36.675k    11.5746M              18.3283           318.927       3.69145G          26.1128M                    41.3495                     2.25605            318.927    42.1741k   631.515k       191.842M/s    15.9686   36.7061k   11.5833M         18.3421    318.536/s 3.68971G/s     26.1128M               41.3495                2.25434          1        318.536/s [BEST: throughput=  0.20 GB/s doc_throughput=   318 docs/s instructions=    26112801 cycles=    11574584 branch_miss=   42073 cache_miss=       0 cache_ref=     36675 items=         1 avg_time=   3139360 ns]
find_tweet<rapidjson>/manual_time                       12218678 ns     12249051 ns           57          64.405k           52.3952M         18.048k        49.909k     44.472M              70.4211           82.9675       3.68973G          102.589M                    162.449                     2.30682            82.9675    64.5805k   631.515k       49.2901M/s   2.03763k   31.5316k   44.5948M         70.6156    81.8419/s 3.64973G/s      102.59M                162.45                2.30048          1        81.8419/s [BEST: throughput=  0.05 GB/s doc_throughput=    82 docs/s instructions=   102588868 cycles=    44471955 branch_miss=   64405 cache_miss=   18048 cache_ref=     49909 items=         1 avg_time=  12218677 ns]
find_tweet<rapidjson_insitu>/manual_time                 9213860 ns      9244481 ns           76          51.552k           68.6661M         12.797k        38.742k    33.9358M              53.7371           108.732       3.68992G          74.3359M                     117.71                     2.19049            108.732    51.5478k   631.515k       65.3645M/s   11.8084k   38.3093k    33.996M         53.8325    108.532/s 3.68966G/s     74.3361M               117.711                2.18661          1        108.532/s [BEST: throughput=  0.07 GB/s doc_throughput=   108 docs/s instructions=    74335895 cycles=    33935812 branch_miss=   51552 cache_miss=   12797 cache_ref=     38742 items=         1 avg_time=   9213859 ns]
find_tweet<nlohmann_json>/manual_time                   49822731 ns     49855169 ns           14          290.55k           12.7074M          1.513k       256.652k    183.353M              290.339           20.1221       3.68945G          356.185M                    564.017                     1.94262            20.1221      293.7k   631.515k        12.088M/s   1.16229k   288.036k   183.814M         291.069    20.0712/s 3.68936G/s     356.314M               564.221                1.93845          1        20.0712/s [BEST: throughput=  0.01 GB/s doc_throughput=    20 docs/s instructions=   356185329 cycles=   183353230 branch_miss=  290550 cache_miss=    1513 cache_ref=    256652 items=         1 avg_time=  49822731 ns]
top_tweet<simdjson_dom>/manual_time                     21962263 ns     21992726 ns           32          15.792k           28.7621M              20       5.94254M    81.0056M              128.272           45.5446       3.68937G          75.0753M                    118.881                    0.926791            45.5446    15.8318k   631.515k       27.4225M/s    199.656   5.94888M   81.0291M         128.309    45.5326/s 3.68947G/s     75.0753M               118.881               0.926522          1        45.5326/s [BEST: throughput=  0.03 GB/s doc_throughput=    45 docs/s instructions=    75075270 cycles=    81005567 branch_miss=   15792 cache_miss=      20 cache_ref=   5942541 items=         1 avg_time=  21962263 ns]
top_tweet<simdjson_ondemand>/manual_time                17106628 ns     17137113 ns           41           7.632k           36.9278M               3       6.50486M    63.0992M              99.9172           58.4749       3.68972G          62.4558M                    98.8984                    0.989803            58.4749    7.69707k   631.515k       35.2062M/s    7.56098   6.49755M   63.1151M         99.9423    58.4569/s 3.68951G/s     62.4558M               98.8984               0.989554          1        58.4569/s [BEST: throughput=  0.04 GB/s doc_throughput=    58 docs/s instructions=    62455801 cycles=    63099216 branch_miss=    7632 cache_miss=       3 cache_ref=   6504858 items=         1 avg_time=  17106627 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time   17140243 ns     17170793 ns           41           7.802k           36.8527M               0        6.5163M    63.2268M              100.119            58.356       3.68966G          63.2369M                    100.135                     1.00016             58.356    7.83966k   631.515k       35.1372M/s    11.8537   6.50643M   63.2385M         100.138    58.3422/s 3.68948G/s     63.2369M               100.135               0.999975          1        58.3422/s [BEST: throughput=  0.04 GB/s doc_throughput=    58 docs/s instructions=    63236940 cycles=    63226789 branch_miss=    7802 cache_miss=       0 cache_ref=   6516304 items=         1 avg_time=  17140242 ns]
top_tweet<yyjson>/manual_time                            2238853 ns      2269810 ns          321          12.136k            321.88M             601        76.216k    7.23198M              11.4518           509.695        3.6861G          10.1204M                    16.0255                     1.39939            509.695    11.1535k   631.515k       269.004M/s   1.18372k   49.4502k   7.43281M         11.7698    446.657/s 3.31992G/s     10.1208M               16.0263                1.36164          1        446.657/s [BEST: throughput=  0.32 GB/s doc_throughput=   509 docs/s instructions=    10120364 cycles=     7231982 branch_miss=   12136 cache_miss=     601 cache_ref=     76216 items=         1 avg_time=   2238852 ns]
top_tweet<yyjson_insitu>/manual_time                     2034208 ns      2064038 ns          344          10.346k           330.221M          1.552k        44.419k    7.05605M              11.1732           522.903       3.68963G            10.12M                    16.0249                     1.43423            522.903    10.9293k   631.515k       296.066M/s    159.924   31.8747k   7.15772M         11.3342    491.592/s 3.51868G/s     10.1202M               16.0253                1.41389          1        491.592/s [BEST: throughput=  0.33 GB/s doc_throughput=   522 docs/s instructions=    10119986 cycles=     7056054 branch_miss=   10346 cache_miss=    1552 cache_ref=     44419 items=         1 avg_time=   2034207 ns]
top_tweet<sajson>/manual_time                            3169403 ns      3198788 ns          221          42.122k           199.548M               0        42.249k    11.6825M              18.4991           315.984       3.69147G          26.3459M                    41.7185                     2.25516            315.984    42.2212k   631.515k       190.023M/s    8.50679   42.3809k   11.6943M         18.5178    315.517/s 3.68975G/s     26.3459M               41.7185                2.25288          1        315.517/s [BEST: throughput=  0.20 GB/s doc_throughput=   315 docs/s instructions=    26345859 cycles=    11682464 branch_miss=   42122 cache_miss=       0 cache_ref=     42249 items=         1 avg_time=   3169403 ns]
top_tweet<rapidjson>/manual_time                        12340529 ns     12370681 ns           57          65.542k           51.8646M         11.404k        54.387k    44.9209M               71.132           82.1273       3.68924G          103.591M                    164.036                     2.30608            82.1273    65.6736k   631.515k       48.8034M/s   2.54489k   36.6872k   45.0476M         71.3325    81.0338/s 3.65037G/s     103.592M               164.037                2.29961          1        81.0338/s [BEST: throughput=  0.05 GB/s doc_throughput=    82 docs/s instructions=   103591364 cycles=    44920929 branch_miss=   65542 cache_miss=   11404 cache_ref=     54387 items=         1 avg_time=  12340529 ns]
top_tweet<rapidjson_insitu>/manual_time                  9329995 ns      9359445 ns           75          51.569k           67.7855M            1059        41.904k    34.3768M              54.4354           107.338       3.68993G          75.3141M                    119.259                     2.19084            107.338    51.9843k   631.515k       64.5509M/s   12.6123k   43.6589k   34.4221M         54.5071    107.181/s  3.6894G/s      75.314M               119.259                2.18796          1        107.181/s [BEST: throughput=  0.07 GB/s doc_throughput=   107 docs/s instructions=    75314075 cycles=    34376793 branch_miss=   51569 cache_miss=    1059 cache_ref=     41904 items=         1 avg_time=   9329995 ns]
top_tweet<nlohmann_json>/manual_time                    63598146 ns     63632693 ns           11         483.189k            9.9349M              79       443.397k    234.519M              371.359           15.7319       3.68942G          449.566M                    711.885                     1.91697            15.7319    483.192k   631.515k       9.46977M/s       1054   451.942k   234.645M         371.559    15.7237/s 3.68949G/s     449.658M                712.03                1.91633          1        15.7237/s [BEST: throughput=  0.01 GB/s doc_throughput=    15 docs/s instructions=   449566330 cycles=   234519062 branch_miss=  483189 cache_miss=      79 cache_ref=    443397 items=         1 avg_time=  63598145 ns]
