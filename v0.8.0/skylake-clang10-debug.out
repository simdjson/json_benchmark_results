run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-clang10-debug.json -DCMAKE_BUILD_TYPE=Debug
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
-- The CXX compiler identification is Clang 10.0.1
-- The C compiler identification is Clang 10.0.1
-- Check for working CXX compiler: /usr/bin/clang++-10
-- Check for working CXX compiler: /usr/bin/clang++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/clang-10
-- Check for working C compiler: /usr/bin/clang-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Success
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Success
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES -- failed to compile
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
make -f CMakeFiles/Makefile2 bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 10
make -f CMakeFiles/Makefile2 benchmark/CMakeFiles/bench_ondemand.dir/all
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/DependInfo.cmake --color=
Scanning dependencies of target benchmark
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_api_internal.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_name.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_name.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_register.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_register.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_runner.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_runner.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/colorprint.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/colorprint.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/commandlineflags.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/commandlineflags.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/complexity.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/complexity.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/console_reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/console_reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/counter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/counter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/csv_reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/csv_reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/json_reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/json_reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/sleep.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/sleep.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/statistics.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/statistics.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/string_util.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/string_util.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/sysinfo.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/sysinfo.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -g   -std=c++17 -o CMakeFiles/benchmark.dir/timers.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/timers.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/cmake -P CMakeFiles/benchmark.dir/cmake_clean_target.cmake
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/benchmark.dir/link.txt --verbose=1
/usr/bin/ar qc libbenchmarkd.a  CMakeFiles/benchmark.dir/benchmark.cc.o CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o CMakeFiles/benchmark.dir/benchmark_name.cc.o CMakeFiles/benchmark.dir/benchmark_register.cc.o CMakeFiles/benchmark.dir/benchmark_runner.cc.o CMakeFiles/benchmark.dir/colorprint.cc.o CMakeFiles/benchmark.dir/commandlineflags.cc.o CMakeFiles/benchmark.dir/complexity.cc.o CMakeFiles/benchmark.dir/console_reporter.cc.o CMakeFiles/benchmark.dir/counter.cc.o CMakeFiles/benchmark.dir/csv_reporter.cc.o CMakeFiles/benchmark.dir/json_reporter.cc.o CMakeFiles/benchmark.dir/reporter.cc.o CMakeFiles/benchmark.dir/sleep.cc.o CMakeFiles/benchmark.dir/statistics.cc.o CMakeFiles/benchmark.dir/string_util.cc.o CMakeFiles/benchmark.dir/sysinfo.cc.o CMakeFiles/benchmark.dir/timers.cc.o
/usr/bin/ranlib libbenchmarkd.a
[ 80%] Built target benchmark
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/CMakeFiles/generated-data.dir/DependInfo.cmake --color=
Scanning dependencies of target generated-data
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated && /usr/bin/ruby genfeaturejson.rb /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
[ 80%] Built target generated-data
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/src/CMakeFiles/simdjson.dir/DependInfo.cmake --color=
Scanning dependencies of target simdjson
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/clang++-10  -DSIMDJSON_THREADS_ENABLED=1 -Dsimdjson_EXPORTS -I/home/jkeiser/simdjson_benchmark_results/simdjson/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/include  -g -fPIC   -fPIC -Werror -Wall -Wextra -Weffc++ -Wsign-compare -Wshadow -Wwrite-strings -Wpointer-arith -Winit-self -Wconversion -Wno-sign-conversion -pthread -std=c++17 -o CMakeFiles/simdjson.dir/simdjson.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/src/simdjson.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/simdjson.dir/link.txt --verbose=1
/usr/bin/clang++-10 -fPIC -g  -shared -Wl,-soname,libsimdjson.so.7 -o ../libsimdjson.so.7.0.0 CMakeFiles/simdjson.dir/simdjson.cpp.o  -pthread 
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_symlink_library ../libsimdjson.so.7.0.0 ../libsimdjson.so.7 ../libsimdjson.so
[ 80%] Built target simdjson
make -f dependencies/CMakeFiles/yyjson.dir/build.make dependencies/CMakeFiles/yyjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies/CMakeFiles/yyjson.dir/DependInfo.cmake --color=
Scanning dependencies of target yyjson
make -f dependencies/CMakeFiles/yyjson.dir/build.make dependencies/CMakeFiles/yyjson.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies && /usr/bin/clang-10  -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/yyjson/src  -g   -o CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o   -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/yyjson/src/yyjson.c
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies && /usr/bin/cmake -P CMakeFiles/yyjson.dir/cmake_clean_target.cmake
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies && /usr/bin/cmake -E cmake_link_script CMakeFiles/yyjson.dir/link.txt --verbose=1
/usr/bin/ar qc libyyjson.a  CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
/usr/bin/ranlib libyyjson.a
[ 90%] Built target yyjson
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark/CMakeFiles/bench_ondemand.dir/DependInfo.cmake --color=
Scanning dependencies of target bench_ondemand
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/clang++-10  -DRAPIDJSON_HAS_STDSTRING -DSAJSON_UNSORTED_OBJECT_KEYS -DSIMDJSON_BENCHMARK_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/\" -DSIMDJSON_COMPETITION_NLOHMANN_JSON -DSIMDJSON_COMPETITION_RAPIDJSON -DSIMDJSON_COMPETITION_SAJSON -DSIMDJSON_COMPETITION_YYJSON -DSIMDJSON_MINEFIELD_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/minefield/\" -DSIMDJSON_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/\" -DSIMDJSON_THREADS_ENABLED=1 -DSIMDJSON_USING_LIBRARY=1 -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/. -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/linux -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/yyjson/src -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/rapidjson/include -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/sajson/include -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/json  -g   -pthread -std=c++17 -o CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/bench_ondemand.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/cmake -E cmake_link_script CMakeFiles/bench_ondemand.dir/link.txt --verbose=1
/usr/bin/clang++-10  -g   CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o  -o bench_ondemand  -Wl,-rpath,/home/jkeiser/simdjson_benchmark_results/simdjson/build ../libsimdjson.so.7.0.0 ../_deps/google_benchmarks/src/libbenchmarkd.a ../dependencies/libyyjson.a -pthread /usr/lib/x86_64-linux-gnu/librt.so 
[100%] Built target bench_ondemand
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 0
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-clang10-debug.json --benchmark_out_format=json
2021-01-25 02:43:21
Running benchmark/bench_ondemand
Run on (4 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 256 KiB (x4)
  L3 Unified 8192 KiB (x1)
Load Average: 1.00, 0.76, 0.58
***WARNING*** Library was built as DEBUG. Timings may be affected.
simdjson::dom implementation:      haswell
simdjson::ondemand implementation: fallback

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                22310024 ns     22341710 ns           31          18.005k           28.3219M              27       6.53547M    82.2689M              130.272           44.8476       3.68957G          78.2256M                     123.87                    0.950852           4.48476k    18.1126k   631.515k        26.995M/s   3.43265k   6.53307M   82.3118M          130.34    44.8229/s 3.68945G/s     78.2256M                123.87               0.950358        100       4.48229k/s [BEST: throughput=  0.03 GB/s doc_throughput=    44 docs/s instructions=    78225608 cycles=    82268936 branch_miss=   18005 cache_miss=      27 cache_ref=   6535467 items=       100 avg_time=  22310024 ns]
partial_tweets<simdjson_ondemand>/manual_time           17286615 ns     17317007 ns           40           8.162k           36.5447M               6       5.51656M    63.7592M              100.962           57.8682       3.68964G          63.9481M                    101.261                     1.00296           5.78682k    8.19235k   631.515k       34.8397M/s       80.7    5.5024M    63.776M         100.989    57.8482/s 3.68933G/s     63.9481M               101.261                 1.0027        100       5.78482k/s [BEST: throughput=  0.04 GB/s doc_throughput=    57 docs/s instructions=    63948107 cycles=    63759248 branch_miss=    8162 cache_miss=       6 cache_ref=   5516557 items=       100 avg_time=  17286615 ns]
partial_tweets<yyjson>/manual_time                       2309003 ns      2340790 ns          304          12.256k           312.582M             692        78.917k    7.44772M              11.7934           494.971       3.68641G          10.5728M                     16.742                      1.4196           49.4971k    11.2945k   631.515k       260.831M/s    1063.31   52.7751k   7.64074M         12.0991    433.087/s 3.30911G/s     10.5733M               16.7427                 1.3838        100       43.3087k/s [BEST: throughput=  0.31 GB/s doc_throughput=   494 docs/s instructions=    10572811 cycles=     7447722 branch_miss=   12256 cache_miss=     692 cache_ref=     78917 items=       100 avg_time=   2309002 ns]
partial_tweets<yyjson_insitu>/manual_time                2096092 ns      2125926 ns          334          10.898k           319.159M             929        48.242k    7.29764M              11.5558           505.386       3.68813G          10.5724M                    16.7414                     1.44875           50.5386k    11.1237k   631.515k       287.325M/s    169.042   35.5921k   7.37255M         11.6744    477.078/s 3.51729G/s     10.5727M               16.7418                1.43406        100       47.7078k/s [BEST: throughput=  0.32 GB/s doc_throughput=   505 docs/s instructions=    10572443 cycles=     7297638 branch_miss=   10898 cache_miss=     929 cache_ref=     48242 items=       100 avg_time=   2096091 ns]
partial_tweets<sajson>/manual_time                       3250077 ns      3279544 ns          215          42.325k           194.575M               0        46.179k    11.9811M              18.9719           308.108       3.69146G          26.9812M                    42.7245                     2.25198           30.8108k     42.371k   631.515k       185.306M/s    205.842   46.2161k    11.991M         18.9877    307.685/s 3.68946G/s     26.9812M               42.7245                2.25011        100       30.7685k/s [BEST: throughput=  0.19 GB/s doc_throughput=   308 docs/s instructions=    26981162 cycles=    11981061 branch_miss=   42325 cache_miss=       0 cache_ref=     46179 items=       100 avg_time=   3250076 ns]
partial_tweets<rapidjson>/manual_time                   12558126 ns     12588685 ns           56          67.075k           51.0627M             104        54.789k     45.625M              72.2469           80.8575       3.68913G          105.145M                    166.497                     2.30455           8.08575k    67.1922k   631.515k       47.9578M/s    399.054    36.759k   45.7602M          72.461    79.6297/s 3.64387G/s     105.146M               166.498                2.29776        100       7.96297k/s [BEST: throughput=  0.05 GB/s doc_throughput=    80 docs/s instructions=   105145058 cycles=    45624999 branch_miss=   67075 cache_miss=     104 cache_ref=     54789 items=       100 avg_time=  12558125 ns]
partial_tweets<rapidjson_insitu>/manual_time             9620828 ns      9651832 ns           73          52.809k           66.4978M             378        45.682k    35.0339M               55.476           105.299       3.68903G          76.8335M                    121.665                     2.19312           10.5299k    52.8264k   631.515k       62.5996M/s    459.068    36.441k   35.1616M         55.6782    103.941/s 3.65474G/s     76.8337M               121.666                2.18516        100       10.3941k/s [BEST: throughput=  0.07 GB/s doc_throughput=   105 docs/s instructions=    76833455 cycles=    35033920 branch_miss=   52809 cache_miss=     378 cache_ref=     45682 items=       100 avg_time=   9620827 ns]
partial_tweets<nlohmann_json>/manual_time               60396757 ns     60436056 ns           12          424.68k           10.5017M              83       296.801k    221.867M              351.326           16.6294       3.68953G          425.806M                    674.261                     1.91919           1.66294k    434.345k   631.515k       9.97172M/s   1.23583k   431.081k   222.823M         352.839    16.5572/s 3.68933G/s     426.158M               674.818                1.91254        100       1.65572k/s [BEST: throughput=  0.01 GB/s doc_throughput=    16 docs/s instructions=   425805795 cycles=   221867466 branch_miss=  424680 cache_miss=      83 cache_ref=    296801 items=       100 avg_time=  60396757 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                2927072273 ns   2930493081 ns            1         3.97263M           15.7149M        11.2319M       174.969M    10.7999G              234.788          0.341638       3.68968G          14.5491G                    316.294                     1.34715           341.638k    3.97263M   45.9988M       14.9869M/s   11.2319M   174.969M   10.7999G         234.788   0.341638/s 3.68968G/s     14.5491G               316.294                1.34715      1000k       341.638k/s [BEST: throughput=  0.02 GB/s doc_throughput=     0 docs/s instructions= 14549149960 cycles= 10799949849 branch_miss= 3972634 cache_miss=11231870 cache_ref= 174969252 items=   1000000 avg_time=2927072273 ns]
large_random<simdjson_ondemand>/manual_time           1672709103 ns   1676113527 ns            1         902.429k           27.4996M        5.65366M       41.5943M    6.17152G              134.167          0.597833       3.68954G          8.52071G                    185.238                     1.38065           597.833k    902.429k   45.9988M       26.2256M/s   5.65366M   41.5943M   6.17152G         134.167   0.597833/s 3.68954G/s     8.52071G               185.238                1.38065      1000k       597.833k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions=  8520705977 cycles=  6171524235 branch_miss=  902429 cache_miss= 5653659 cache_ref=  41594252 items=   1000000 avg_time=1672709103 ns]
large_random<simdjson_ondemand_unordered>/manual_time 1692032275 ns   1695438499 ns            1         902.697k           27.1855M        5.63614M       124.953M    6.24283G              135.717          0.591005       3.68955G          8.58371G                    186.607                     1.37497           591.005k    902.697k   45.9988M       25.9261M/s   5.63614M   124.953M   6.24283G         135.717   0.591005/s 3.68955G/s     8.58371G               186.607                1.37497      1000k       591.005k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions=  8583705984 cycles=  6242831027 branch_miss=  902697 cache_miss= 5636141 cache_ref= 124952544 items=   1000000 avg_time=1692032275 ns]
large_random<yyjson>/manual_time                       364808255 ns    368215985 ns            2         655.867k           126.101M        6.56128M       9.18048M    1.22374G              26.6037           2.74139       3.35475G          2.93382G                    63.7803                     2.39742           2.74139M    657.141k   45.9988M       120.249M/s     6.572M    9.2086M   1.22377G         26.6044    2.74117/s 3.35456G/s     2.93382G               63.7803                2.39736      1000k       2.74117M/s [BEST: throughput=  0.13 GB/s doc_throughput=     2 docs/s instructions=  2933816857 cycles=  1223738939 branch_miss=  655867 cache_miss= 6561284 cache_ref=   9180478 items=   1000000 avg_time= 364808255 ns]
large_random<yyjson_insitu>/manual_time                345947332 ns    349353386 ns            2         659.914k           132.984M        5.71753M        7.8851M    1.18895G              25.8474           2.89104        3.4373G           2.9277G                    63.6473                     2.46242           2.89104M    659.133k   45.9988M       126.805M/s   5.72189M   7.87853M   1.18901G         25.8488    2.89061/s 3.43697G/s      2.9277G               63.6473                2.46229      1000k       2.89061M/s [BEST: throughput=  0.13 GB/s doc_throughput=     2 docs/s instructions=  2927696044 cycles=  1188949910 branch_miss=  659914 cache_miss= 5717527 cache_ref=   7885103 items=   1000000 avg_time= 345947332 ns]
large_random<sajson>/manual_time                       794361830 ns    797758319 ns            1         1.67609M           57.9066M        9.16432M       12.3499M    2.93094G              63.7178           1.25887       3.68968G          7.01595G                    152.525                     2.39375           1.25887M    1.67609M   45.9988M        55.224M/s   9.16432M   12.3499M   2.93094G         63.7178    1.25887/s 3.68968G/s     7.01595G               152.525                2.39375      1000k       1.25887M/s [BEST: throughput=  0.06 GB/s doc_throughput=     1 docs/s instructions=  7015953651 cycles=  2930942941 branch_miss= 1676090 cache_miss= 9164316 cache_ref=  12349932 items=   1000000 avg_time= 794361830 ns]
large_random<rapidjson>/manual_time                   1776243961 ns   1779650886 ns            1         6.34809M           25.8967M        7.18201M       10.8683M    6.49476G              141.194          0.562986       3.65646G          14.2611G                    310.033                     2.19579           562.986k    6.34809M   45.9988M        24.697M/s   7.18201M   10.8683M   6.49476G         141.194   0.562986/s 3.65646G/s     14.2611G               310.033                2.19579      1000k       562.986k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 14261128117 cycles=  6494757201 branch_miss= 6348091 cache_miss= 7182006 cache_ref=  10868322 items=   1000000 avg_time=1776243961 ns]
large_random<rapidjson_lossless>/manual_time          2146526562 ns   2149921827 ns            1         7.42514M           21.4294M        7.20371M       10.9361M    7.86062G              170.888          0.465869       3.66202G          17.2369G                    374.725                     2.19281           465.869k    7.42514M   45.9988M       20.4367M/s   7.20371M   10.9361M   7.86062G         170.888   0.465869/s 3.66202G/s     17.2369G               374.725                2.19281      1000k       465.869k/s [BEST: throughput=  0.02 GB/s doc_throughput=     0 docs/s instructions= 17236881152 cycles=  7860618989 branch_miss= 7425135 cache_miss= 7203713 cache_ref=  10936118 items=   1000000 avg_time=2146526562 ns]
large_random<rapidjson_insitu>/manual_time            1705500106 ns   1708891027 ns            1         6.42544M           26.9708M        8.27897M       12.4627M    6.23356G              135.516          0.586338       3.65498G          13.5311G                    294.163                     2.17069           586.338k    6.42544M   45.9988M       25.7214M/s   8.27897M   12.4627M   6.23356G         135.516   0.586338/s 3.65498G/s     13.5311G               294.163                2.17069      1000k       586.338k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 13531127685 cycles=  6233560290 branch_miss= 6425438 cache_miss= 8278966 cache_ref=  12462745 items=   1000000 avg_time=1705500106 ns]
large_random<nlohmann_json>/manual_time               9297474219 ns   9300855410 ns            1         37.5633M           4.94745M        48.0535M       63.0405M    34.2911G              745.479          0.107556       3.68822G          63.4292G                   1.37893k                     1.84972           107.556k    37.5633M   45.9988M       4.71825M/s   48.0535M   63.0405M   34.2911G         745.479   0.107556/s 3.68822G/s     63.4292G              1.37893k                1.84972      1000k       107.556k/s [BEST: throughput=  0.00 GB/s doc_throughput=     0 docs/s instructions= 63429174316 cycles= 34291141392 branch_miss=37563302 cache_miss=48053534 cache_ref=  63040524 items=   1000000 avg_time=9297474219 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                      4112820977 ns   4123076271 ns            1         3.44534M           33.3846M        16.8282M       494.511M    15.1746G              110.517          0.243142       3.68957G          17.1288G                     124.75                     1.12879           127.476k    3.44534M   137.305M       31.8381M/s   16.8282M   494.511M   15.1746G         110.517   0.243142/s 3.68957G/s     17.1288G                124.75                1.12879   524.288k       127.476k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 17128811284 cycles= 15174551104 branch_miss= 3445344 cache_miss=16828246 cache_ref= 494511213 items=    524288 avg_time=4112820977 ns]
kostya<simdjson_ondemand>/manual_time                 2930965711 ns   2941236404 ns            1         1.61868M           46.8463M        10.0436M       48.2149M     10.814G              78.7587          0.341184       3.68956G          12.3455G                    89.9129                     1.14163           178.879k    1.61868M   137.305M       44.6761M/s   10.0436M   48.2149M    10.814G         78.7587   0.341184/s 3.68956G/s     12.3455G               89.9129                1.14163   524.288k       178.879k/s [BEST: throughput=  0.05 GB/s doc_throughput=     0 docs/s instructions= 12345496114 cycles= 10813962913 branch_miss= 1618683 cache_miss=10043607 cache_ref=  48214881 items=    524288 avg_time=2930965711 ns]
kostya<yyjson>/manual_time                             463663798 ns    473945556 ns            2         971.778k           296.173M        13.5884M       17.5283M    1.51172G                11.01           2.15704       3.26085G          3.23214G                    23.5398                     2.13805           1.13091M    972.077k   137.305M       282.412M/s   13.5878M   17.5592M   1.51154G         11.0086    2.15674/s 3.25999G/s     3.23214G               23.5398                2.13831   524.288k       1.13075M/s [BEST: throughput=  0.30 GB/s doc_throughput=     2 docs/s instructions=  3232136426 cycles=  1511721250 branch_miss=  971778 cache_miss=13588440 cache_ref=  17528318 items=    524288 avg_time= 463663797 ns]
kostya<yyjson_insitu>/manual_time                      409559450 ns    419830876 ns            2         972.488k           335.256M        11.1193M       13.7021M    1.41411G              10.2991           2.44169       3.45282G          3.21387G                    23.4068                     2.27271           1.28015M     972.12k   137.305M        319.72M/s   11.1096M   13.7139M   1.41412G         10.2991    2.44165/s 3.45278G/s     3.21387G               23.4068                 2.2727   524.288k       1.28013M/s [BEST: throughput=  0.34 GB/s doc_throughput=     2 docs/s instructions=  3213866704 cycles=  1414111948 branch_miss=  972488 cache_miss=11119293 cache_ref=  13702144 items=    524288 avg_time= 409559450 ns]
kostya<sajson>/manual_time                            1124681451 ns   1134951181 ns            1           11.84M           122.083M        15.0368M       17.8382M    4.14955G              30.2214          0.889141       3.68953G          8.77554G                    63.9127                     2.11482           466.166k      11.84M   137.305M       116.428M/s   15.0368M   17.8382M   4.14955G         30.2214   0.889141/s 3.68953G/s     8.77554G               63.9127                2.11482   524.288k       466.166k/s [BEST: throughput=  0.12 GB/s doc_throughput=     0 docs/s instructions=  8775535643 cycles=  4149545208 branch_miss=11839980 cache_miss=15036839 cache_ref=  17838158 items=    524288 avg_time=1124681451 ns]
kostya<rapidjson>/manual_time                         2277727441 ns   2287967544 ns            1         16.3514M           60.2816M        8.78117M       12.3192M    8.32078G              60.6007          0.439034       3.65311G          16.8219G                    122.515                     2.02168            230.18k    16.3514M   137.305M        57.489M/s   8.78117M   12.3192M   8.32078G         60.6007   0.439034/s 3.65311G/s     16.8219G               122.515                2.02168   524.288k        230.18k/s [BEST: throughput=  0.06 GB/s doc_throughput=     0 docs/s instructions= 16821932257 cycles=  8320780884 branch_miss=16351404 cache_miss= 8781170 cache_ref=  12319176 items=    524288 avg_time=2277727441 ns]
kostya<rapidjson_lossless>/manual_time                2493682228 ns   2503981835 ns            1         16.4602M           55.0611M        8.80431M       12.4277M    9.11679G              66.3981          0.401013       3.65596G          18.5468G                    135.077                     2.03435           210.247k    16.4602M   137.305M       52.5104M/s   8.80431M   12.4277M   9.11679G         66.3981   0.401013/s 3.65596G/s     18.5468G               135.077                2.03435   524.288k       210.247k/s [BEST: throughput=  0.06 GB/s doc_throughput=     0 docs/s instructions= 18546771591 cycles=  9116794814 branch_miss=16460152 cache_miss= 8804312 cache_ref=  12427739 items=    524288 avg_time=2493682228 ns]
kostya<rapidjson_insitu>/manual_time                  2101391145 ns   2111665780 ns            1         15.4606M             65.34M        12.9164M       16.3666M    7.66981G              55.8597          0.475875       3.64987G          15.3741G                     111.97                     2.00449           249.496k    15.4606M   137.305M       62.3131M/s   12.9164M   16.3666M   7.66981G         55.8597   0.475875/s 3.64987G/s     15.3741G                111.97                2.00449   524.288k       249.496k/s [BEST: throughput=  0.07 GB/s doc_throughput=     0 docs/s instructions= 15374093349 cycles=  7669809929 branch_miss=15460585 cache_miss=12916375 cache_ref=  16366562 items=    524288 avg_time=2101391145 ns]
kostya<nlohmann_json>/manual_time                     14532565518 ns   14542866414 ns            1         57.8595M           9.44809M        72.3372M        97.588M    53.6198G              390.516          0.068811       3.68963G          100.394G                    731.177                     1.87233           36.0768k    57.8595M   137.305M        9.0104M/s   72.3372M    97.588M   53.6198G         390.516   0.068811/s 3.68963G/s     100.394G               731.177                1.87233   524.288k       36.0768k/s [BEST: throughput=  0.01 GB/s doc_throughput=     0 docs/s instructions=100394252207 cycles= 53619823758 branch_miss=57859527 cache_miss=72337227 cache_ref=  97587960 items=    524288 avg_time=14532565518 ns]
distinct_user_id<simdjson_dom>/manual_time              21993721 ns     22047700 ns           32           16.65k           28.7249M               0       6.98205M    81.1192M              128.452           45.4857       3.68976G          76.3621M                    120.919                    0.941356           5.23085k    16.8226k   631.515k       27.3833M/s    324.531   6.97846M   81.1476M         128.497    45.4675/s 3.68958G/s     76.3621M               120.919               0.941027        115       5.22876k/s [BEST: throughput=  0.03 GB/s doc_throughput=    45 docs/s instructions=    76362107 cycles=    81119229 branch_miss=   16650 cache_miss=       0 cache_ref=   6982045 items=       115 avg_time=  21993721 ns]
distinct_user_id<simdjson_ondemand>/manual_time         17233550 ns     17288215 ns           41           7.508k           36.6638M               0       5.70197M    63.5466M              100.626           58.0569       3.68932G           62.659M                    99.2202                    0.986032           6.67654k    7.53876k   631.515k       34.9469M/s    161.366   5.70775M   63.5836M         100.684    58.0263/s 3.68953G/s      62.659M               99.2202               0.985458        115       6.67303k/s [BEST: throughput=  0.04 GB/s doc_throughput=    58 docs/s instructions=    62659037 cycles=    63546628 branch_miss=    7508 cache_miss=       0 cache_ref=   5701965 items=       115 avg_time=  17233550 ns]
distinct_user_id<yyjson>/manual_time                     2049705 ns      2104753 ns          353          10.243k            320.96M         22.277k        78.033k     7.2635M              11.5017           508.239       3.69159G          10.3045M                     16.317                     1.41866           58.4475k     10.748k   631.515k       293.827M/s   19.4211k   73.8436k   7.35472M         11.6461    487.875/s 3.58818G/s     10.3048M               16.3176                1.40111        115       56.1056k/s [BEST: throughput=  0.32 GB/s doc_throughput=   508 docs/s instructions=    10304460 cycles=     7263497 branch_miss=   10243 cache_miss=   22277 cache_ref=     78033 items=       115 avg_time=   2049705 ns]
distinct_user_id<yyjson_insitu>/manual_time              2061398 ns      2115958 ns          340          11.087k           324.185M           1.34k        48.628k    7.18715M              11.3808           513.345       3.68949G          10.3042M                    16.3166                     1.43369           59.0347k    11.2431k   631.515k       292.161M/s    203.741   35.7325k   7.25554M         11.4891    485.108/s 3.51972G/s     10.3044M                16.317                1.42022        115       55.7874k/s [BEST: throughput=  0.32 GB/s doc_throughput=   513 docs/s instructions=    10304181 cycles=     7187155 branch_miss=   11087 cache_miss=    1340 cache_ref=     48628 items=       115 avg_time=   2061398 ns]
distinct_user_id<sajson>/manual_time                     3195864 ns      3248916 ns          219          42.208k           197.861M               0        46.458k    11.7821M              18.6569           313.311       3.69146G          26.5515M                    42.0441                     2.25354           36.0308k    42.2926k   631.515k        188.45M/s    174.219   46.7575k   11.7908M         18.6706    312.904/s 3.68939G/s     26.5515M               42.0441                2.25189        115        35.984k/s [BEST: throughput=  0.20 GB/s doc_throughput=   313 docs/s instructions=    26551510 cycles=    11782113 branch_miss=   42208 cache_miss=       0 cache_ref=     46458 items=       115 avg_time=   3195863 ns]
distinct_user_id<rapidjson>/manual_time                 12395138 ns     12449190 ns           57           66.06k            51.637M          1.789k        56.956k     45.116M              71.4409           81.7669       3.68899G          104.008M                    164.696                     2.30534           9.40319k    65.7376k   631.515k       48.5884M/s   2.85437k   40.9449k   45.2408M         71.6385    80.6768/s 3.64988G/s     104.008M               164.697                  2.299        115       9.27783k/s [BEST: throughput=  0.05 GB/s doc_throughput=    81 docs/s instructions=   104007865 cycles=    45115979 branch_miss=   66060 cache_miss=    1789 cache_ref=     56956 items=       115 avg_time=  12395137 ns]
distinct_user_id<rapidjson_insitu>/manual_time           9386148 ns      9439269 ns           75          51.904k           67.4032M          8.493k        48.096k    34.5714M              54.7436           106.733        3.6899G          75.7255M                    119.911                     2.19041           12.2743k    51.9509k   631.515k       64.1647M/s    13.189k   48.1573k   34.6294M         54.8354     106.54/s 3.68941G/s     75.7255M               119.911                2.18674        115       12.2521k/s [BEST: throughput=  0.07 GB/s doc_throughput=   106 docs/s instructions=    75725525 cycles=    34571419 branch_miss=   51904 cache_miss=    8493 cache_ref=     48096 items=       115 avg_time=   9386147 ns]
distinct_user_id<nlohmann_json>/manual_time             57485603 ns     57544511 ns           12         376.319k           11.0071M          20.19k       280.714k    211.668M              335.175           17.4297       3.68931G          407.825M                    645.788                     1.92672           2.00442k    385.448k   631.515k       10.4767M/s   1.98975k   386.971k    212.08M         335.827    17.3957/s 3.68927G/s     406.474M               643.649                1.91661        115        2.0005k/s [BEST: throughput=  0.01 GB/s doc_throughput=    17 docs/s instructions=   407824932 cycles=   211667840 branch_miss=  376319 cache_miss=   20190 cache_ref=    280714 items=       115 avg_time=  57485602 ns]
find_tweet<simdjson_dom>/manual_time                    21795509 ns     21825046 ns           32          15.406k           28.9855M             142       7.12044M    80.3897M              127.297           45.8983       3.68975G          74.2429M                    117.563                    0.923538            45.8983    15.3985k   631.515k       27.6323M/s    250.656   7.11127M    80.414M         127.335     45.881/s 3.68948G/s     74.2429M               117.563               0.923259          1         45.881/s [BEST: throughput=  0.03 GB/s doc_throughput=    45 docs/s instructions=    74242939 cycles=    80389716 branch_miss=   15406 cache_miss=     142 cache_ref=   7120436 items=         1 avg_time=  21795508 ns]
find_tweet<simdjson_ondemand>/manual_time               16022944 ns     16052318 ns           44           3.305k           39.4255M              13        6.2782M       59.1M              93.5845           62.4301       3.68962G          54.9617M                    87.0315                    0.929978            62.4301    3.34273k   631.515k       37.5873M/s    41.0227   6.27108M   59.1161M         93.6099    62.4105/s 3.68946G/s     54.9617M               87.0315               0.929726          1        62.4105/s [BEST: throughput=  0.04 GB/s doc_throughput=    62 docs/s instructions=    54961722 cycles=    59100001 branch_miss=    3305 cache_miss=      13 cache_ref=   6278199 items=         1 avg_time=  16022944 ns]
find_tweet<yyjson>/manual_time                           2225090 ns      2256494 ns          323          12.151k           323.374M            1051        67.868k    7.20054M               11.402           512.061       3.68712G          10.0177M                     15.863                     1.39125            512.061    10.9908k   631.515k       270.667M/s   1.25366k   42.7186k   7.38111M         11.6879     449.42/s 3.31722G/s     10.0182M               15.8638                1.35728          1         449.42/s [BEST: throughput=  0.32 GB/s doc_throughput=   512 docs/s instructions=    10017743 cycles=     7200545 branch_miss=   12151 cache_miss=    1051 cache_ref=     67868 items=         1 avg_time=   2225090 ns]
find_tweet<yyjson_insitu>/manual_time                    2020345 ns      2050835 ns          347          10.468k           331.941M          1.928k        38.369k    7.01975M              11.1157           525.627       3.68977G          10.0174M                    15.8624                     1.42703            525.627    10.8061k   631.515k       298.097M/s    41.7579   25.1726k   7.10484M         11.2505    494.965/s 3.51665G/s     10.0176M               15.8628                1.40997          1        494.965/s [BEST: throughput=  0.33 GB/s doc_throughput=   525 docs/s instructions=    10017365 cycles=     7019752 branch_miss=   10468 cache_miss=    1928 cache_ref=     38369 items=         1 avg_time=   2020345 ns]
find_tweet<sajson>/manual_time                           3139624 ns      3169933 ns          223          42.112k            201.42M               0        36.539k    11.5739M              18.3271           318.948       3.69146G          26.1128M                    41.3495                     2.25619            318.948    42.1769k   631.515k       191.825M/s    187.879   36.7709k   11.5834M         18.3422    318.509/s 3.68941G/s     26.1128M               41.3495                2.25434          1        318.509/s [BEST: throughput=  0.20 GB/s doc_throughput=   318 docs/s instructions=    26112801 cycles=    11573856 branch_miss=   42112 cache_miss=       0 cache_ref=     36539 items=         1 avg_time=   3139624 ns]
find_tweet<rapidjson>/manual_time                       12217753 ns     12247943 ns           57          64.751k           52.4295M         12.994k        49.786k    44.4423M              70.3741           83.0218       3.68968G          102.589M                    162.449                     2.30836            83.0218     64.773k   631.515k       49.2938M/s   2.06565k   32.3581k   44.5866M         70.6025    81.8481/s 3.64933G/s      102.59M                162.45                2.30091          1        81.8481/s [BEST: throughput=  0.05 GB/s doc_throughput=    83 docs/s instructions=   102589035 cycles=    44442329 branch_miss=   64751 cache_miss=   12994 cache_ref=     49786 items=         1 avg_time=  12217752 ns]
find_tweet<rapidjson_insitu>/manual_time                 9211837 ns      9242231 ns           76          51.275k           68.6815M              97        36.596k    33.9279M              53.7247           108.757       3.68989G          74.3364M                    117.711                     2.19101            108.757    51.3471k   631.515k       65.3789M/s   11.9629k   38.7169k   33.9859M         53.8165    108.556/s 3.68938G/s     74.3363M               117.711                2.18727          1        108.556/s [BEST: throughput=  0.07 GB/s doc_throughput=   108 docs/s instructions=    74336396 cycles=    33927932 branch_miss=   51275 cache_miss=      97 cache_ref=     36596 items=         1 avg_time=   9211836 ns]
find_tweet<nlohmann_json>/manual_time                   49905822 ns     49938359 ns           14         289.224k            12.685M          2.032k       264.605k    183.679M              290.855           20.0867       3.68951G          356.182M                    564.013                     1.93915            20.0867    293.784k   631.515k       12.0679M/s   1.17507k   296.846k   184.116M         291.546    20.0377/s 3.68926G/s     356.315M               564.223                1.93528          1        20.0377/s [BEST: throughput=  0.01 GB/s doc_throughput=    20 docs/s instructions=   356182499 cycles=   183679359 branch_miss=  289224 cache_miss=    2032 cache_ref=    264605 items=         1 avg_time=  49905822 ns]
top_tweet<simdjson_dom>/manual_time                     21901762 ns     21933351 ns           32          15.814k           28.8462M               8        6.8821M    80.7797M              127.914           45.6777       3.68983G          75.0753M                    118.881                    0.929383            45.6777    15.8438k   631.515k       27.4982M/s   3.14266k   6.89995M   80.8062M         127.956    45.6584/s 3.68948G/s     75.0753M               118.881               0.929078          1        45.6584/s [BEST: throughput=  0.03 GB/s doc_throughput=    45 docs/s instructions=    75075269 cycles=    80779721 branch_miss=   15814 cache_miss=       8 cache_ref=   6882098 items=         1 avg_time=  21901761 ns]
top_tweet<simdjson_ondemand>/manual_time                17083700 ns     17113414 ns           41            7.62k           36.9765M               0        6.1523M     63.017M               99.787            58.552       3.68977G          62.4558M                    98.8984                    0.991095             58.552    7.62593k   631.515k       35.2535M/s    28.6829   6.14338M   63.0321M         99.8109    58.5353/s  3.6896G/s     62.4558M               98.8984               0.990858          1        58.5353/s [BEST: throughput=  0.04 GB/s doc_throughput=    58 docs/s instructions=    62455801 cycles=    63016972 branch_miss=    7620 cache_miss=       0 cache_ref=   6152297 items=         1 avg_time=  17083700 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time   17171162 ns     17201794 ns           41           7.705k           36.7999M               5       6.12528M    63.3188M              100.265           58.2725       3.68975G          63.2369M                    100.135                    0.998706            58.2725    7.76339k   631.515k       35.0739M/s   1.31051k   6.13714M   63.3508M         100.316    58.2372/s 3.68937G/s     63.2369M               100.135               0.998203          1        58.2372/s [BEST: throughput=  0.04 GB/s doc_throughput=    58 docs/s instructions=    63236940 cycles=    63318846 branch_miss=    7705 cache_miss=       5 cache_ref=   6125276 items=         1 avg_time=  17171162 ns]
top_tweet<yyjson>/manual_time                            2238547 ns      2269537 ns          321          12.247k           321.596M          1.272k        74.431k    7.24951M              11.4795           509.245       3.69178G          10.1204M                    16.0255                     1.39601            509.245    11.1821k   631.515k        269.04M/s    1.2024k   49.2768k   7.43009M         11.7655    446.718/s 3.31916G/s     10.1208M               16.0263                1.36214          1        446.718/s [BEST: throughput=  0.32 GB/s doc_throughput=   509 docs/s instructions=    10120363 cycles=     7249506 branch_miss=   12247 cache_miss=    1272 cache_ref=     74431 items=         1 avg_time=   2238546 ns]
top_tweet<yyjson_insitu>/manual_time                     2035911 ns      2066022 ns          344          10.634k           329.004M          1.689k        44.632k    7.08227M              11.2147           520.976        3.6897G          10.1202M                    16.0253                     1.42895            520.976    11.0227k   631.515k       295.818M/s    188.235   31.6186k   7.16203M          11.341    491.181/s 3.51785G/s     10.1204M               16.0257                1.41307          1        491.181/s [BEST: throughput=  0.33 GB/s doc_throughput=   520 docs/s instructions=    10120193 cycles=     7082273 branch_miss=   10634 cache_miss=    1689 cache_ref=     44632 items=         1 avg_time=   2035911 ns]
top_tweet<sajson>/manual_time                            3169787 ns      3199124 ns          221          42.056k           199.487M               0        42.403k    11.6861M              18.5048           315.887       3.69147G          26.3459M                    41.7185                     2.25447            315.887    42.2483k   631.515k           190M/s    11.6109   42.6497k   11.6953M         18.5194    315.479/s 3.68961G/s     26.3459M               41.7185                2.25269          1        315.479/s [BEST: throughput=  0.20 GB/s doc_throughput=   315 docs/s instructions=    26345859 cycles=    11686051 branch_miss=   42056 cache_miss=       0 cache_ref=     42403 items=         1 avg_time=   3169786 ns]
top_tweet<rapidjson>/manual_time                        12344537 ns     12375453 ns           57          66.036k           51.8846M             432        52.261k    44.9085M              71.1123            82.159       3.68963G          103.591M                    164.036                     2.30672             82.159    66.1748k   631.515k       48.7875M/s   3.40733k   36.9464k   45.0565M         71.3467    81.0075/s 3.64991G/s     103.592M               164.037                2.29916          1        81.0075/s [BEST: throughput=  0.05 GB/s doc_throughput=    82 docs/s instructions=   103591283 cycles=    44908461 branch_miss=   66036 cache_miss=     432 cache_ref=     52261 items=         1 avg_time=  12344536 ns]
top_tweet<rapidjson_insitu>/manual_time                  9327855 ns      9357683 ns           75          51.961k           67.8279M          7.141k        43.633k    34.3552M              54.4012           107.405       3.68991G          75.3142M                     119.26                     2.19222            107.405    51.7671k   631.515k       64.5657M/s   12.5957k   43.8993k   34.4162M         54.4978    107.206/s 3.68962G/s     75.3141M               119.259                2.18833          1        107.206/s [BEST: throughput=  0.07 GB/s doc_throughput=   107 docs/s instructions=    75314182 cycles=    34355154 branch_miss=   51961 cache_miss=    7141 cache_ref=     43633 items=         1 avg_time=   9327855 ns]
top_tweet<nlohmann_json>/manual_time                    63717674 ns     63757237 ns           11          479.65k           9.92545M             663       445.309k    234.744M              371.715           15.7169       3.68944G          449.154M                    711.233                     1.91338            15.7169    480.187k   631.515k         9.452M/s   12.3936k   467.273k    235.08M         372.247    15.6942/s 3.68939G/s     449.135M               711.203                1.91057          1        15.6942/s [BEST: throughput=  0.01 GB/s doc_throughput=    15 docs/s instructions=   449154177 cycles=   234743671 branch_miss=  479650 cache_miss=     663 cache_ref=    445309 items=         1 avg_time=  63717674 ns]
