run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-gcc10.2-fallback.json -DSIMDJSON_IMPLEMENTATION=fallback
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DSIMDJSON_IMPLEMENTATION=fallback ..
-- The CXX compiler identification is GNU 10.2.0
-- The C compiler identification is GNU 10.2.0
-- Check for working CXX compiler: /usr/bin/g++-10
-- Check for working CXX compiler: /usr/bin/g++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/gcc-10
-- Check for working C compiler: /usr/bin/gcc-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Including implementation fallback due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation westmere due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation haswell due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation arm64 due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation ppc64 due to SIMDJSON_IMPLEMENTATION=fallback
-- Selected implementation fallback as builtin implementation based on fallback.
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Failed
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Failed
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-gcc10.2-fallback.json --benchmark_out_format=json
2021-01-23 05:10:16
Running benchmark/bench_ondemand
Run on (4 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 256 KiB (x4)
  L3 Unified 8192 KiB (x1)
Load Average: 1.00, 0.87, 0.89
simdjson::dom implementation:      fallback
simdjson::ondemand implementation: fallback
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                 1604365 ns      1632753 ns          436          37.783k           395.165M               0        88.381k     5.8995M              9.34182           625.742       3.69156G          14.2136M                    22.5071                     2.40929           62.5742k     38.422k   631.515k       375.388M/s    16.9885   88.6004k   5.91959M         9.37364      623.3/s 3.68968G/s     14.2136M               22.5071                2.40111        100         62.33k/s [BEST: throughput=  0.40 GB/s doc_throughput=   625 docs/s instructions=    14213594 cycles=     5899500 branch_miss=   37783 cache_miss=       0 cache_ref=     88381 items=       100 avg_time=   1604365 ns]
partial_tweets<simdjson_ondemand>/manual_time            1288018 ns      1316186 ns          543          31.144k           492.641M               0        56.079k    4.73229M              7.49355           780.094       3.69163G          10.6838M                    16.9177                     2.25763           78.0094k    31.8389k   631.515k       467.586M/s   0.235727   56.0975k   4.75266M         7.52581    776.387/s  3.6899G/s     10.6838M               16.9177                2.24796        100       77.6387k/s [BEST: throughput=  0.49 GB/s doc_throughput=   780 docs/s instructions=    10683775 cycles=     4732292 branch_miss=   31144 cache_miss=       0 cache_ref=     56079 items=       100 avg_time=   1288017 ns]
partial_tweets<yyjson>/manual_time                        693201 ns       723864 ns         1014            9.76k           1.58743G             266        74.407k    1.46898M              2.32612          2.51368k       3.69255G          2.90845M                    4.60552                     1.97991           251.368k    7.76925k   631.515k        868.81M/s    919.356   49.1724k   1.69597M         2.68555   1.44258k/s 2.44657G/s     2.90894M               4.60629                1.71521        100       144.258k/s [BEST: throughput=  1.59 GB/s doc_throughput=  2513 docs/s instructions=     2908453 cycles=     1468981 branch_miss=    9760 cache_miss=     266 cache_ref=     74407 items=       100 avg_time=    693201 ns]
partial_tweets<yyjson_insitu>/manual_time                 479417 ns       508433 ns         1460           7.076k           1.76877G           1.46k        45.671k    1.31233M              2.07806          2.80083k        3.6756G          2.90834M                    4.60535                     2.21618           280.083k    7.58668k   631.515k       1.22679G/s    148.367   31.6904k   1.42498M         2.25645   2.08587k/s 2.97232G/s     2.90861M               4.60576                2.04116        100       208.587k/s [BEST: throughput=  1.77 GB/s doc_throughput=  2800 docs/s instructions=     2908345 cycles=     1312326 branch_miss=    7076 cache_miss=    1460 cache_ref=     45671 items=       100 avg_time=    479416 ns]
partial_tweets<sajson>/manual_time                        541485 ns       569706 ns         1290          10.941k            1.1802G               0        45.806k    1.97544M              3.12809          1.86884k       3.69178G          6.05184M                    9.58305                     3.06355           186.884k    11.2343k   631.515k       1112.24M/s     1.6938   45.8047k   1.99811M           3.164   1.84677k/s 3.69007G/s     6.05184M               9.58305                3.02877        100       184.677k/s [BEST: throughput=  1.18 GB/s doc_throughput=  1868 docs/s instructions=     6051839 cycles=     1975435 branch_miss=   10941 cache_miss=       0 cache_ref=     45806 items=       100 avg_time=    541484 ns]
partial_tweets<rapidjson>/manual_time                    1627424 ns      1656285 ns          431          26.636k             445.2M          1.497k        51.733k    5.23654M              8.29203           704.971       3.69161G          13.4098M                    21.2343                      2.5608           70.4971k    26.7211k   631.515k       370.069M/s    510.434   33.2024k    5.4178M         8.57905    614.468/s 3.32906G/s     13.4107M               21.2357                 2.4753        100       61.4468k/s [BEST: throughput=  0.45 GB/s doc_throughput=   704 docs/s instructions=    13409752 cycles=     5236540 branch_miss=   26636 cache_miss=    1497 cache_ref=     51733 items=       100 avg_time=   1627424 ns]
partial_tweets<rapidjson_insitu>/manual_time             1181594 ns      1210117 ns          600          25.084k           593.998M              74        43.154k    3.92495M              6.21514           940.592       3.69178G          9.75485M                    15.4468                     2.48534           94.0592k    25.2482k   631.515k       509.701M/s    235.392   33.5755k   4.01437M         6.35674    846.315/s 3.39742G/s     9.75526M               15.4474                2.43008        100       84.6315k/s [BEST: throughput=  0.59 GB/s doc_throughput=   940 docs/s instructions=     9754855 cycles=     3924953 branch_miss=   25084 cache_miss=      74 cache_ref=     43154 items=       100 avg_time=   1181593 ns]
partial_tweets<nlohmann_json>/manual_time                7541442 ns      7576654 ns           93         135.249k           86.7895M               5        227.87k    26.8526M               42.521           137.431       3.69037G           69.402M                    109.898                     2.58455           13.7431k    146.562k   631.515k         79.86M/s    430.882   366.604k   27.8224M         44.0566    132.601/s 3.68927G/s     70.1056M               111.012                2.51975        100       13.2601k/s [BEST: throughput=  0.09 GB/s doc_throughput=   137 docs/s instructions=    69401965 cycles=    26852635 branch_miss=  135249 cache_miss=       5 cache_ref=    227870 items=       100 avg_time=   7541441 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 166331033 ns    169724811 ns            4          2.7264M           277.102M        11.0024M       15.1985M    612.444M              13.3143           6.02412       3.68944G          1.62065G                    35.2325                      2.6462           6.02412M    2.73968M   45.9988M       263.738M/s   11.0032M   15.2057M   613.668M          13.341    6.01211/s 3.68944G/s     1.62065G               35.2325                2.64092      1000k       6.01211M/s [BEST: throughput=  0.28 GB/s doc_throughput=     6 docs/s instructions=  1620650369 cycles=   612443715 branch_miss= 2726395 cache_miss=11002438 cache_ref=  15198540 items=   1000000 avg_time= 166331032 ns]
large_random<simdjson_ondemand>/manual_time            133275519 ns    136652192 ns            5          2.7237M           345.634M        5.74263M       7.90805M     491.03M              10.6749           7.51399        3.6896G          1.28397G                    27.9132                     2.61486           7.51399M    2.74528M   45.9988M       329.152M/s    5.7648M    7.9104M   491.713M         10.6897    7.50325/s 3.68945G/s     1.28397G               27.9132                2.61123      1000k       7.50325M/s [BEST: throughput=  0.35 GB/s doc_throughput=     7 docs/s instructions=  1283973739 cycles=   491030412 branch_miss= 2723704 cache_miss= 5742629 cache_ref=   7908053 items=   1000000 avg_time= 133275519 ns]
large_random<simdjson_ondemand_unordered>/manual_time  138400175 ns    141781694 ns            5         2.75555M           332.808M        5.74456M       7.90566M    509.948M              11.0861           7.23515       3.68955G          1.28797G                    28.0002                     2.52569           7.23515M    2.76056M   45.9988M       316.964M/s   5.76584M   7.90724M   510.602M         11.1003    7.22542/s 3.68932G/s     1.28797G               28.0002                2.52246      1000k       7.22542M/s [BEST: throughput=  0.33 GB/s doc_throughput=     7 docs/s instructions=  1287973745 cycles=   509948432 branch_miss= 2755549 cache_miss= 5744564 cache_ref=   7905664 items=   1000000 avg_time= 138400175 ns]
large_random<yyjson>/manual_time                       127383906 ns    130794608 ns            5         661.801k             361.6M        5.85151M       8.94113M    350.361M              7.61674           7.86107       2.75421G          944.149M                    20.5255                     2.69479           7.86107M     661.19k   45.9988M       344.375M/s   5.85823M   8.95277M   350.262M         7.61459    7.85029/s 2.74966G/s     944.149M               20.5255                2.69555      1000k       7.85029M/s [BEST: throughput=  0.36 GB/s doc_throughput=     7 docs/s instructions=   944149411 cycles=   350360901 branch_miss=  661801 cache_miss= 5851512 cache_ref=   8941130 items=   1000000 avg_time= 127383905 ns]
large_random<yyjson_insitu>/manual_time                109476340 ns    112884290 ns            6          661.78k           420.252M        4.98468M       7.60947M    318.751M              6.92954           9.13616       2.91216G          938.029M                    20.3925                     2.94283           9.13616M    661.312k   45.9988M       400.706M/s   4.98992M   7.62607M   318.658M         6.92753    9.13439/s 2.91075G/s     938.029M               20.3925                2.94369      1000k       9.13439M/s [BEST: throughput=  0.42 GB/s doc_throughput=     9 docs/s instructions=   938028846 cycles=   318750583 branch_miss=  661780 cache_miss= 4984680 cache_ref=   7609472 items=   1000000 avg_time= 109476340 ns]
large_random<sajson>/manual_time                        93396821 ns     96791147 ns            7         582.677k           493.004M        8.33842M       12.1304M    344.219M              7.48322           10.7178       3.68925G          1099.99M                    23.9134                     3.19561           10.7178M    582.803k   45.9988M       469.693M/s   8.36479M   12.0963M   344.547M         7.49035     10.707/s 3.68906G/s     1099.99M               23.9134                3.19256      1000k        10.707M/s [BEST: throughput=  0.49 GB/s doc_throughput=    10 docs/s instructions=  1099987387 cycles=   344218778 branch_miss=  582677 cache_miss= 8338425 cache_ref=  12130357 items=   1000000 avg_time=  93396820 ns]
large_random<rapidjson>/manual_time                    173680956 ns    177090554 ns            4         594.468k           276.807M        6.99758M       10.6676M    555.331M              12.0727           6.01771       3.34182G          1.66014G                     36.091                     2.98947           6.01771M      594.7k   45.9988M       252.577M/s   6.42925M   9.92161M   562.099M         12.2199    5.75768/s 3.23639G/s     1.66015G               36.0912                2.95349      1000k       5.75768M/s [BEST: throughput=  0.28 GB/s doc_throughput=     6 docs/s instructions=  1660143060 cycles=   555331136 branch_miss=  594468 cache_miss= 6997579 cache_ref=  10667633 items=   1000000 avg_time= 173680956 ns]
large_random<rapidjson_lossless>/manual_time           200427043 ns    203836595 ns            4         600.198k           237.697M        6.98602M       10.6496M    656.019M              14.2617           5.16746       3.38995G          2.02311G                    43.9818                     3.08392           5.16746M    602.044k   45.9988M       218.872M/s   6.41669M   9.91572M   660.487M         14.3588    4.98935/s  3.2954G/s     2.02312G                43.982                3.06307      1000k       4.98935M/s [BEST: throughput=  0.24 GB/s doc_throughput=     5 docs/s instructions=  2023109973 cycles=   656019242 branch_miss=  600198 cache_miss= 6986024 cache_ref=  10649587 items=   1000000 avg_time= 200427043 ns]
large_random<rapidjson_insitu>/manual_time             157603486 ns    161020150 ns            5         582.265k           307.347M        8.06232M       12.1837M    494.231M              10.7444           6.68164       3.30227G          1.49214G                    32.4387                     3.01912           6.68164M    581.929k   45.9988M       278.343M/s   7.48601M   11.3868M   501.176M         10.8954    6.34504/s 3.17998G/s     1.49215G               32.4389                 2.9773      1000k       6.34504M/s [BEST: throughput=  0.31 GB/s doc_throughput=     6 docs/s instructions=  1492140532 cycles=   494230622 branch_miss=  582265 cache_miss= 8062318 cache_ref=  12183748 items=   1000000 avg_time= 157603485 ns]
large_random<nlohmann_json>/manual_time               1216406961 ns   1219836596 ns            1         4.55558M           37.8153M        46.8759M       60.8839M    4.47512G              97.2877          0.822093       3.67896G          11.9494G                    259.776                     2.67018           822.093k    4.55558M   45.9988M       36.0635M/s   46.8759M   60.8839M   4.47512G         97.2877   0.822093/s 3.67896G/s     11.9494G               259.776                2.67018      1000k       822.093k/s [BEST: throughput=  0.04 GB/s doc_throughput=     0 docs/s instructions= 11949363971 cycles=  4475116494 branch_miss= 4555579 cache_miss=46875924 cache_ref=  60883896 items=   1000000 avg_time=1216406961 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                       333893559 ns    344225303 ns            2         3.43656M           411.269M        15.9845M       22.2748M    1.23176G              8.97098           2.99529       3.68949G          3.21925G                     23.446                     2.61353            1.5704M    3.43689M   137.305M       392.174M/s   16.0147M   22.2404M   1.23192G         8.97217    2.99497/s 3.68957G/s     3.21925G                23.446                2.61319   524.288k       1.57022M/s [BEST: throughput=  0.41 GB/s doc_throughput=     2 docs/s instructions=  3219247730 cycles=  1231760953 branch_miss= 3436563 cache_miss=15984550 cache_ref=  22274811 items=    524288 avg_time= 333893559 ns]
kostya<simdjson_ondemand>/manual_time                  301419292 ns    311757772 ns            2         3.36754M           455.637M         10.347M       13.9525M    1.11189G              8.09793           3.31843       3.68972G          2.88125G                    20.9843                     2.59132           1.73981M    3.36727M   137.305M       434.426M/s   10.3337M   13.9524M   1.11215G         8.09988    3.31764/s 3.68972G/s     2.88125G               20.9843                 2.5907   524.288k        1.7394M/s [BEST: throughput=  0.46 GB/s doc_throughput=     3 docs/s instructions=  2881251547 cycles=  1111886052 branch_miss= 3367544 cache_miss=10347009 cache_ref=  13952510 items=    524288 avg_time= 301419291 ns]
kostya<yyjson>/manual_time                             205351949 ns    215690979 ns            3         416.007k           669.243M        11.4083M        16.132M    559.564M              4.07534           4.87413       2.72739G          984.045M                    7.16686                     1.75859           2.55545M    414.593k   137.305M       637.658M/s   11.4098M   16.1427M    559.63M         4.07582    4.86969/s 2.72523G/s     984.045M               7.16686                1.75838   524.288k       2.55312M/s [BEST: throughput=  0.67 GB/s doc_throughput=     4 docs/s instructions=   984045258 cycles=   559564393 branch_miss=  416007 cache_miss=11408250 cache_ref=  16131993 items=    524288 avg_time= 205351948 ns]
kostya<yyjson_insitu>/manual_time                      151910208 ns    162260140 ns            5         414.065k           904.225M        8.79954M       12.1815M    465.811M              3.39253           6.58552        3.0676G          965.775M                     7.0338                     2.07332           3.45271M    414.338k   137.305M       861.985M/s   8.79896M   12.1574M   465.794M          3.3924    6.58284/s 3.06624G/s     965.775M                7.0338                 2.0734   524.288k        3.4513M/s [BEST: throughput=  0.90 GB/s doc_throughput=     6 docs/s instructions=   965775265 cycles=   465810673 branch_miss=  414065 cache_miss= 8799535 cache_ref=  12181505 items=    524288 avg_time= 151910208 ns]
kostya<sajson>/manual_time                             135629109 ns    145973135 ns            5         484.425k           1014.85M         12.419M       17.2424M    499.116M              3.63509           7.39117       3.68905G          1.62034G                     11.801                     3.24643            3.8751M    486.646k   137.305M       965.458M/s   12.4423M   17.2436M    500.33M         3.64393    7.37305/s 3.68896G/s     1.62034G                11.801                3.23855   524.288k        3.8656M/s [BEST: throughput=  1.01 GB/s doc_throughput=     7 docs/s instructions=  1620343050 cycles=   499115512 branch_miss=  484425 cache_miss=12418972 cache_ref=  17242362 items=    524288 avg_time= 135629109 ns]
kostya<rapidjson>/manual_time                          247058001 ns    257410239 ns            3         949.711k           563.555M        8.14746M       11.9065M    817.678M              5.95519            4.1044       3.35608G          2.29873G                    16.7418                     2.81129           2.15189M    949.869k   137.305M       530.014M/s   7.86969M   11.5797M   820.733M         5.97744    4.04763/s 3.32203G/s     2.29873G               16.7418                2.80083   524.288k       2.12213M/s [BEST: throughput=  0.56 GB/s doc_throughput=     4 docs/s instructions=  2298729925 cycles=   817677828 branch_miss=  949711 cache_miss= 8147464 cache_ref=  11906505 items=    524288 avg_time= 247058000 ns]
kostya<rapidjson_lossless>/manual_time                 260912397 ns    271401162 ns            3         948.005k           533.319M          8.141M        12.029M    868.644M              6.32639           3.88419       3.37398G          2.50529G                    18.2462                     2.88414           2.03644M    948.855k   137.305M       501.871M/s   7.89464M   11.6743M   871.741M         6.34894     3.8327/s 3.34112G/s     2.50529G               18.2462                 2.8739   524.288k       2.00944M/s [BEST: throughput=  0.53 GB/s doc_throughput=     3 docs/s instructions=  2505290869 cycles=   868644338 branch_miss=  948005 cache_miss= 8141002 cache_ref=  12029030 items=    524288 avg_time= 260912397 ns]
kostya<rapidjson_insitu>/manual_time                   219198781 ns    229553665 ns            3         1044.81k           635.789M        11.2024M       15.6406M    715.596M              5.21173           4.63049       3.31356G          2.03228G                    14.8012                     2.83997           2.42771M    1038.37k   137.305M       597.377M/s   10.9035M   15.2741M    718.15M         5.23033    4.56207/s 3.27625G/s     2.03228G               14.8012                2.82988   524.288k       2.39184M/s [BEST: throughput=  0.64 GB/s doc_throughput=     4 docs/s instructions=  2032275469 cycles=   715596270 branch_miss= 1044805 cache_miss=11202446 cache_ref=  15640616 items=    524288 avg_time= 219198780 ns]
kostya<nlohmann_json>/manual_time                     1536448256 ns   1546820398 ns            1         3.88448M           89.3652M        69.8982M       87.2975M    5.66841G              41.2833          0.650852       3.68929G          15.1471G                    110.317                     2.67219           341.234k    3.88448M   137.305M       85.2253M/s   69.8982M   87.2975M   5.66841G         41.2833   0.650852/s 3.68929G/s     15.1471G               110.317                2.67219   524.288k       341.234k/s [BEST: throughput=  0.09 GB/s doc_throughput=     0 docs/s instructions= 15147051515 cycles=  5668408241 branch_miss= 3884475 cache_miss=69898230 cache_ref=  87297461 items=    524288 avg_time=1536448256 ns]
distinct_user_id<simdjson_dom>/manual_time               1599368 ns      1629604 ns          438          37.953k           396.301M               0        89.734k    5.88263M               9.3151            627.54       3.69158G          14.1544M                    22.4134                     2.40614           72.1671k    38.4727k   631.515k       376.561M/s    32.4863   89.7128k   5.90128M         9.34464    625.247/s 3.68976G/s     14.1544M               22.4134                2.39853        115       71.9034k/s [BEST: throughput=  0.40 GB/s doc_throughput=   627 docs/s instructions=    14154419 cycles=     5882626 branch_miss=   37953 cache_miss=       0 cache_ref=     89734 items=       115 avg_time=   1599367 ns]
distinct_user_id<simdjson_ondemand>/manual_time          1267998 ns      1297797 ns          552          31.126k           500.009M               0        54.117k    4.66253M              7.38308           791.761       3.69161G          10.3775M                    16.4327                     2.22573           91.0525k    31.5734k   631.515k       474.969M/s   0.391304   54.1466k   4.67881M         7.40887    788.644/s 3.68992G/s     10.3775M               16.4327                2.21798        115       90.6941k/s [BEST: throughput=  0.50 GB/s doc_throughput=   791 docs/s instructions=    10377509 cycles=     4662526 branch_miss=   31126 cache_miss=       0 cache_ref=     54117 items=       115 avg_time=   1267998 ns]
distinct_user_id<yyjson>/manual_time                      600379 ns       633791 ns         1000           7.205k            1.6633G         16.206k        73.619k    1.40184M              2.21981          2.63383k       3.69221G          2.87509M                    4.55268                     2.05094           302.891k    7.65006k   631.515k       1003.13M/s   7.48351k   55.3654k   1.62271M         2.56955   1.66562k/s 2.70281G/s     2.87528M               4.55299                1.77191        115       191.546k/s [BEST: throughput=  1.66 GB/s doc_throughput=  2633 docs/s instructions=     2875088 cycles=     1401841 branch_miss=    7205 cache_miss=   16206 cache_ref=     73619 items=       115 avg_time=    600378 ns]
distinct_user_id<yyjson_insitu>/manual_time               474211 ns       506814 ns         1476           7.164k           1.78918G             222        44.217k    1.29978M               2.0582          2.83315k       3.68248G          2.87478M                    4.55219                     2.21174           325.812k    7.73296k   631.515k       1.24026G/s    52.0075   30.2707k   1.41635M         2.24278   2.10877k/s 2.98675G/s     2.87504M               4.55261                 2.0299        115       242.508k/s [BEST: throughput=  1.79 GB/s doc_throughput=  2833 docs/s instructions=     2874778 cycles=     1299784 branch_miss=    7164 cache_miss=     222 cache_ref=     44217 items=       115 avg_time=    474210 ns]
distinct_user_id<sajson>/manual_time                      537043 ns       567490 ns         1302           10.97k           1.19044G               2          45.3k    1.95845M               3.1012          1.88506k        3.6918G           5.9843M                    9.47611                     3.05563           216.782k    11.2712k   631.515k       1121.44M/s   0.644393   45.1503k   1.98175M         3.13809   1.86205k/s 3.69011G/s     5.98431M               9.47611                3.01971        115       214.136k/s [BEST: throughput=  1.19 GB/s doc_throughput=  1885 docs/s instructions=     5984305 cycles=     1958455 branch_miss=   10970 cache_miss=       2 cache_ref=     45300 items=       115 avg_time=    537042 ns]
distinct_user_id<rapidjson>/manual_time                  1614197 ns      1644731 ns          437          26.798k           445.535M          9.034k        53.023k    5.23268M              8.28592           705.501       3.69166G          13.3505M                    21.1404                     2.55136           81.1326k    26.7295k   631.515k       373.102M/s    947.494   33.7454k   5.40126M         8.55286    619.503/s  3.3461G/s     13.3511M               21.1414                2.47185        115       71.2428k/s [BEST: throughput=  0.45 GB/s doc_throughput=   705 docs/s instructions=    13350459 cycles=     5232682 branch_miss=   26798 cache_miss=    9034 cache_ref=     53023 items=       115 avg_time=   1614197 ns]
distinct_user_id<rapidjson_insitu>/manual_time           1157857 ns      1187812 ns          612          24.936k           596.898M              42        42.745k    3.90579M              6.18479           945.184       3.69169G          9.70617M                    15.3697                     2.48507           108.696k    25.1111k   631.515k        520.15M/s   2.09502k   35.4181k   3.98949M         6.31733    863.664/s 3.44558G/s      9.7067M               15.3705                2.43307        115       99.3214k/s [BEST: throughput=  0.60 GB/s doc_throughput=   945 docs/s instructions=     9706166 cycles=     3905790 branch_miss=   24936 cache_miss=      42 cache_ref=     42745 items=       115 avg_time=   1157857 ns]
distinct_user_id<nlohmann_json>/manual_time              6958007 ns      6991917 ns          103         113.324k           94.4116M              45       220.278k    24.6751M              39.0728             149.5       3.68893G          64.8769M                    102.732                     2.62925           17.1925k     129.35k   631.515k       86.5563M/s    38.4078   419.647k     25.67M         40.6482    143.719/s 3.68927G/s     63.4871M               100.531                2.47321        115       16.5277k/s [BEST: throughput=  0.09 GB/s doc_throughput=   149 docs/s instructions=    64876918 cycles=    24675069 branch_miss=  113324 cache_miss=      45 cache_ref=    220278 items=       115 avg_time=   6958007 ns]
find_tweet<simdjson_dom>/manual_time                     1588931 ns      1617747 ns          441          37.645k           399.169M               0        79.716k    5.84042M              9.24826           632.081       3.69162G          14.0734M                    22.2851                     2.40965            632.081    38.3204k   631.515k       379.034M/s    70.0907   79.7266k   5.86239M         9.28306    629.354/s 3.68952G/s     14.0734M               22.2851                2.40062          1        629.354/s [BEST: throughput=  0.40 GB/s doc_throughput=   632 docs/s instructions=    14073379 cycles=     5840418 branch_miss=   37645 cache_miss=       0 cache_ref=     79716 items=         1 avg_time=   1588931 ns]
find_tweet<simdjson_ondemand>/manual_time                1200779 ns      1228971 ns          583          30.236k           527.982M               0        31.357k    4.41554M              6.99198           836.055       3.69164G          9.73045M                    15.4081                     2.20368            836.055    30.7548k   631.515k       501.558M/s   0.432247   31.3887k   4.43061M         7.01585    832.793/s 3.68978G/s     9.73046M               15.4081                2.19619          1        832.793/s [BEST: throughput=  0.53 GB/s doc_throughput=   836 docs/s instructions=     9730455 cycles=     4415540 branch_miss=   30236 cache_miss=       0 cache_ref=     31357 items=         1 avg_time=   1200778 ns]
find_tweet<yyjson>/manual_time                            665025 ns       695756 ns         1059           9.489k           1.64277G             131        64.999k    1.41935M              2.24753          2.60132k       3.69219G          2.82414M                      4.472                     1.98974           2.60132k    7.66274k   631.515k        905.62M/s    1034.88   39.3765k   1.65316M         2.61777    1.5037k/s 2.48587G/s     2.82461M               4.47276                1.70861          1        1.5037k/s [BEST: throughput=  1.64 GB/s doc_throughput=  2601 docs/s instructions=     2824136 cycles=     1419350 branch_miss=    9489 cache_miss=     131 cache_ref=     64999 items=         1 avg_time=    665024 ns]
find_tweet<yyjson_insitu>/manual_time                     464296 ns       494089 ns         1508           7.005k           1.83441G             466         35.95k    1.26772M              2.00743          2.90477k       3.68245G          2.82381M                    4.47149                     2.22747           2.90477k    7.47825k   631.515k       1.26674G/s    15.9178   21.8408k    1.3801M         2.18538    2.1538k/s 2.97246G/s     2.82407M                4.4719                2.04628          1        2.1538k/s [BEST: throughput=  1.83 GB/s doc_throughput=  2904 docs/s instructions=     2823811 cycles=     1267724 branch_miss=    7005 cache_miss=     466 cache_ref=     35950 items=         1 avg_time=    464296 ns]
find_tweet<sajson>/manual_time                            524506 ns       553943 ns         1332          10.592k           1.21576G               0        36.016k    1.91781M              3.03684          1.92515k       3.69207G          5.89219M                    9.33024                     3.07235           1.92515k    11.0253k   631.515k       1.12133G/s    1.86486   36.0067k   1.93542M         3.06472   1.90656k/s 3.68998G/s     5.89219M               9.33024                 3.0444          1       1.90656k/s [BEST: throughput=  1.22 GB/s doc_throughput=  1925 docs/s instructions=     5892186 cycles=     1917809 branch_miss=   10592 cache_miss=       0 cache_ref=     36016 items=         1 avg_time=    524505 ns]
find_tweet<rapidjson>/manual_time                        1604032 ns      1632677 ns          440          26.698k           449.287M              39        44.853k    5.18895M              8.21667           711.442       3.69164G          13.2813M                    21.0309                     2.55954            711.442    26.5771k   631.515k       375.466M/s    687.252   26.4173k   5.36501M         8.49547    623.429/s  3.3447G/s     13.2822M               21.0323                2.47571          1        623.429/s [BEST: throughput=  0.45 GB/s doc_throughput=   711 docs/s instructions=    13281307 cycles=     5188951 branch_miss=   26698 cache_miss=      39 cache_ref=     44853 items=         1 avg_time=   1604032 ns]
find_tweet<rapidjson_insitu>/manual_time                 1149908 ns      1179289 ns          619          24.645k           601.877M               8        34.305k    3.87349M              6.13365           953.068        3.6917G          9.64771M                    15.2771                      2.4907            953.068    25.0648k   631.515k       523.746M/s   1.93261k   26.5102k   3.95923M         6.26941    869.635/s 3.44308G/s     9.64803M               15.2776                2.43685          1        869.635/s [BEST: throughput=  0.60 GB/s doc_throughput=   953 docs/s instructions=     9647707 cycles=     3873489 branch_miss=   24645 cache_miss=       8 cache_ref=     34305 items=         1 avg_time=   1149908 ns]
find_tweet<nlohmann_json>/manual_time                    5907781 ns      5937911 ns          122          89.256k           111.689M          2.205k       162.906k    20.8616M              33.0342           176.858       3.68954G          55.2669M                    87.5148                     2.64922            176.858    106.027k   631.515k       101.943M/s    46.7869   339.488k   21.7963M         34.5143    169.268/s 3.68943G/s     53.9059M               85.3597                2.47317          1        169.268/s [BEST: throughput=  0.11 GB/s doc_throughput=   176 docs/s instructions=    55266926 cycles=    20861602 branch_miss=   89256 cache_miss=    2205 cache_ref=    162906 items=         1 avg_time=   5907780 ns]
top_tweet<simdjson_dom>/manual_time                      1595379 ns      1623667 ns          439           37.75k           397.668M               0        86.989k    5.86241M              9.28309           629.704       3.69159G          14.1074M                    22.3391                     2.40642            629.704    38.4829k   631.515k       377.503M/s     1.3303   87.1612k   5.88647M         9.32119     626.81/s  3.6897G/s     14.1074M               22.3391                2.39659          1         626.81/s [BEST: throughput=  0.40 GB/s doc_throughput=   629 docs/s instructions=    14107447 cycles=     5862412 branch_miss=   37750 cache_miss=       0 cache_ref=     86989 items=         1 avg_time=   1595378 ns]
top_tweet<simdjson_ondemand>/manual_time                 1252416 ns      1280478 ns          559          30.995k           505.789M               0        53.899k    4.60924M              7.29871           800.913        3.6916G          10.3519M                    16.3922                     2.24591            800.913    31.3559k   631.515k       480.878M/s    3.53667   53.9791k   4.62105M         7.31741    798.457/s 3.68971G/s     10.3519M               16.3922                2.24017          1        798.457/s [BEST: throughput=  0.51 GB/s doc_throughput=   800 docs/s instructions=    10351929 cycles=     4609245 branch_miss=   30995 cache_miss=       0 cache_ref=     53899 items=         1 avg_time=   1252415 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time    1272325 ns      1300459 ns          550          31.091k           498.491M               0        54.657k    4.67665M              7.40545           789.358       3.69155G          10.5746M                    16.7448                     2.26114            789.358    31.6586k   631.515k       473.354M/s   0.592727   54.7705k   4.69447M         7.43366    785.963/s 3.68967G/s     10.5746M               16.7448                2.25256          1        785.963/s [BEST: throughput=  0.50 GB/s doc_throughput=   789 docs/s instructions=    10574581 cycles=     4676650 branch_miss=   31091 cache_miss=       0 cache_ref=     54657 items=         1 avg_time=   1272325 ns]
top_tweet<yyjson>/manual_time                             669604 ns       699659 ns         1052           9.533k           1.62244G             234         68.78k    1.43718M              2.27577          2.56912k        3.6923G          2.84502M                    4.50507                     1.97958           2.56912k    7.74842k   631.515k       899.427M/s    1009.51   44.4859k   1.66998M          2.6444   1.49342k/s 2.49398G/s      2.8457M               4.50615                1.70403          1       1.49342k/s [BEST: throughput=  1.62 GB/s doc_throughput=  2569 docs/s instructions=     2845019 cycles=     1437185 branch_miss=    9533 cache_miss=     234 cache_ref=     68780 items=         1 avg_time=    669603 ns]
top_tweet<yyjson_insitu>/manual_time                      469371 ns       498383 ns         1492           7.234k           1.81104G              17        40.149k    1.28755M              2.03882          2.86777k       3.69238G          2.84469M                    4.50455                     2.20939           2.86777k    7.57716k   631.515k       1.25305G/s    47.4357   26.8783k   1.39865M         2.21475   2.13051k/s 2.97984G/s     2.84496M               4.50497                2.03407          1       2.13051k/s [BEST: throughput=  1.81 GB/s doc_throughput=  2867 docs/s instructions=     2844693 cycles=     1287545 branch_miss=    7234 cache_miss=      17 cache_ref=     40149 items=         1 avg_time=    469371 ns]
top_tweet<sajson>/manual_time                             529397 ns       557829 ns         1322           10.66k           1.20684G               0        41.246k    1.93197M              3.05926          1.91102k       3.69204G          5.91933M                    9.37322                     3.06388           1.91102k    11.1255k   631.515k       1.11097G/s    1.47882   41.3234k   1.95339M         3.09318   1.88894k/s 3.68984G/s     5.91933M               9.37322                3.03029          1       1.88894k/s [BEST: throughput=  1.21 GB/s doc_throughput=  1911 docs/s instructions=     5919331 cycles=     1931971 branch_miss=   10660 cache_miss=       0 cache_ref=     41246 items=         1 avg_time=    529396 ns]
top_tweet<rapidjson>/manual_time                         1609041 ns      1637658 ns          439          26.453k           448.674M          8.792k        49.686k    5.19597M              8.22778           710.473        3.6916G          13.3315M                    21.1103                     2.56574            710.473    26.8785k   631.515k       374.297M/s     819.69   30.9896k   5.38183M         8.52209    621.488/s 3.34474G/s     13.3322M               21.1115                2.47727          1        621.488/s [BEST: throughput=  0.45 GB/s doc_throughput=   710 docs/s instructions=    13331499 cycles=     5195968 branch_miss=   26453 cache_miss=    8792 cache_ref=     49686 items=         1 avg_time=   1609040 ns]
top_tweet<rapidjson_insitu>/manual_time                  1154722 ns      1183377 ns          616          24.702k            599.21M              25        39.643k    3.89072M              6.16094           948.845       3.69169G           9.6893M                    15.3429                     2.49036            948.845    25.0309k   631.515k       521.563M/s   2.04357k   31.9158k    3.9772M         6.29787     866.01/s 3.44429G/s     9.68962M               15.3435                2.43629          1         866.01/s [BEST: throughput=  0.60 GB/s doc_throughput=   948 docs/s instructions=     9689296 cycles=     3890725 branch_miss=   24702 cache_miss=      25 cache_ref=     39643 items=         1 avg_time=   1154721 ns]
top_tweet<nlohmann_json>/manual_time                     8438148 ns      8468446 ns           83         179.331k           75.5837M               0       382.399k    30.8275M              48.8151           119.686       3.68962G          76.7252M                    121.494                     2.48886            119.686     185.51k   631.515k       71.3734M/s    262.241   394.475k   31.1318M         49.2971    118.509/s 3.68942G/s     77.0898M               122.071                2.47624          1        118.509/s [BEST: throughput=  0.08 GB/s doc_throughput=   119 docs/s instructions=    76725226 cycles=    30827454 branch_miss=  179331 cache_miss=       0 cache_ref=    382399 items=         1 avg_time=   8438147 ns]
