run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-clang11-native.json -DCMAKE_CXX_FLAGS=-march=native
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DCMAKE_CXX_FLAGS=-march=native ..
-- The CXX compiler identification is Clang 11.0.0
-- The C compiler identification is Clang 11.0.0
-- Check for working CXX compiler: /usr/bin/clang++-11
-- Check for working CXX compiler: /usr/bin/clang++-11 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/clang-11
-- Check for working C compiler: /usr/bin/clang-11 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Success
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Success
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES -- failed to compile
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-clang11-native.json --benchmark_out_format=json
2021-01-23 04:28:45
Running benchmark/bench_ondemand
Run on (4 X 3200 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 1024 KiB (x4)
  L3 Unified 8448 KiB (x1)
Load Average: 1.00, 0.91, 0.55
***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.
simdjson::dom implementation:      haswell
simdjson::ondemand implementation: haswell

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                  321972 ns       389605 ns         2167           3.813k           1.97396G               1        33.354k    1021.77k              1.61796          3.12575k        3.1938G          2.93219M                     4.6431                     2.86972           312.575k    3.92696k   631.515k       1.82669G/s    3.47439   33.3404k   1027.26k         1.62666   3.10586k/s 3.19052G/s     2.93219M                4.6431                2.85438        100       310.586k/s [BEST: throughput=  1.97 GB/s doc_throughput=  3125 docs/s instructions=     2932189 cycles=     1021769 branch_miss=    3813 cache_miss=       1 cache_ref=     33354 items=       100 avg_time=    321972 ns]
partial_tweets<simdjson_ondemand>/manual_time             205002 ns       259248 ns         3416           1.888k           3.10767G               0        12.618k    649.081k              1.02782          4.92097k       3.19411G          1.88084M                     2.9783                     2.89769           492.097k    2.02533k   631.515k       2.86896G/s   0.074356   12.7629k   653.936k          1.0355     4.878k/s  3.1899G/s     1.88084M                2.9783                2.87618        100         487.8k/s [BEST: throughput=  3.11 GB/s doc_throughput=  4920 docs/s instructions=     1880838 cycles=      649081 branch_miss=    1888 cache_miss=       0 cache_ref=     12618 items=       100 avg_time=    205002 ns]
partial_tweets<yyjson>/manual_time                        783653 ns       860017 ns          896           9.692k           1.45846G             146        27.735k    1.38299M              2.18996          2.30946k       3.19397G          2.91951M                    4.62303                     2.11101           230.946k    7.56175k   631.515k       768.529M/s    535.018   23.8435k    1.5449M         2.44634   1.27608k/s 1.97141G/s      2.9202M               4.62412                1.89022        100       127.608k/s [BEST: throughput=  1.46 GB/s doc_throughput=  2309 docs/s instructions=     2919511 cycles=     1382994 branch_miss=    9692 cache_miss=     146 cache_ref=     27735 items=       100 avg_time=    783652 ns]
partial_tweets<yyjson_insitu>/manual_time                 511120 ns       570657 ns         1383           6.922k           1.78458G          1.116k        13.612k    1.11901M              1.77194          2.82587k       3.16217G           2.9194M                    4.62286                     2.60893           282.587k    7.30252k   631.515k        1.1507G/s    75.7289   8.97677k   1.23411M         1.95421   1.95649k/s 2.41453G/s     2.91967M               4.62327                 2.3658        100       195.649k/s [BEST: throughput=  1.78 GB/s doc_throughput=  2825 docs/s instructions=     2919404 cycles=     1119005 branch_miss=    6922 cache_miss=    1116 cache_ref=     13612 items=       100 avg_time=    511119 ns]
partial_tweets<sajson>/manual_time                        690697 ns       751411 ns         1012          10.704k           924.112M               0        13.379k    2.18203M              3.45524          1.46333k       3.19303G          5.87892M                    9.30924                     2.69424           146.333k    10.9707k   631.515k        871.96M/s    1.87648   13.4625k   2.20298M          3.4884   1.44781k/s  3.1895G/s     5.87892M               9.30924                2.66863        100       144.781k/s [BEST: throughput=  0.92 GB/s doc_throughput=  1463 docs/s instructions=     5878924 cycles=     2182034 branch_miss=   10704 cache_miss=       0 cache_ref=     13379 items=       100 avg_time=    690696 ns]
partial_tweets<rapidjson>/manual_time                    2547838 ns      2609634 ns          274          32.612k           276.365M          8.041k        23.019k    7.29557M              11.5525           437.622        3.1927G          21.8954M                    34.6712                     3.00119           43.7622k    34.0496k   631.515k       236.381M/s    391.234   11.5141k    7.4524M         11.8008     392.49/s 2.92499G/s     21.8962M               34.6724                2.93813        100        39.249k/s [BEST: throughput=  0.28 GB/s doc_throughput=   437 docs/s instructions=    21895411 cycles=     7295567 branch_miss=   32612 cache_miss=    8041 cache_ref=     23019 items=       100 avg_time=   2547838 ns]
partial_tweets<rapidjson_insitu>/manual_time             1845179 ns      1904343 ns          378          25.053k           376.847M             160        14.497k    5.35028M              8.47214           596.735        3.1927G          13.3198M                    21.0917                     2.48954           59.6735k    27.8599k   631.515k       326.396M/s    216.743   9.36419k   5.48906M         8.69189    541.953/s 2.97481G/s     13.3203M               21.0927                2.42671        100       54.1953k/s [BEST: throughput=  0.38 GB/s doc_throughput=   596 docs/s instructions=    13319751 cycles=     5350281 branch_miss=   25053 cache_miss=     160 cache_ref=     14497 items=       100 avg_time=   1845178 ns]
partial_tweets<nlohmann_json>/manual_time               10104752 ns     10190277 ns           70         151.794k           65.7624M              30        98.503k     30.635M              48.5104           104.134       3.19016G          80.8831M                    128.078                     2.64022           10.4134k    175.402k   631.515k       59.6016M/s    244.229   137.228k   32.2235M         51.0257    98.9633/s 3.18895G/s     81.4085M                128.91                2.52637        100       9.89633k/s [BEST: throughput=  0.07 GB/s doc_throughput=   104 docs/s instructions=    80883119 cycles=    30635036 branch_miss=  151794 cache_miss=      30 cache_ref=     98503 items=       100 avg_time=  10104751 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 102103131 ns    108141325 ns            7         910.673k           452.252M        6.87475M       6.89597M    323.929M              7.04213           9.83183       3.18482G          1020.45M                    22.1843                     3.15023           9.83183M    910.391k   45.9988M       429.643M/s   6.78079M   6.89581M   325.428M         7.07472    9.79402/s 3.18725G/s     1020.45M               22.1843                3.13572      1000k       9.79402M/s [BEST: throughput=  0.45 GB/s doc_throughput=     9 docs/s instructions=  1020451788 cycles=   323929286 branch_miss=  910673 cache_miss= 6874750 cache_ref=   6895965 items=   1000000 avg_time= 102103131 ns]
large_random<simdjson_ondemand>/manual_time             72245099 ns     78179221 ns           10          920.36k             637.7M        3.49535M        3.5728M    230.029M              5.00076           13.8634       3.18898G          654.908M                    14.2375                     2.84707           13.8634M      924.9k   45.9988M       607.209M/s   3.51403M   3.57286M    230.28M         5.00623    13.8418/s 3.18749G/s     654.908M               14.2375                2.84396      1000k       13.8418M/s [BEST: throughput=  0.64 GB/s doc_throughput=    13 docs/s instructions=   654907679 cycles=   230028701 branch_miss=  920360 cache_miss= 3495353 cache_ref=   3572797 items=   1000000 avg_time=  72245098 ns]
large_random<simdjson_ondemand_unordered>/manual_time   73345517 ns     79265703 ns           10         902.934k           627.714M        3.51413M       3.57275M    233.691M              5.08036           13.6463       3.18902G          658.908M                    14.3245                     2.81957           13.6463M    905.156k   45.9988M       598.099M/s   3.51754M   3.57271M   233.868M         5.08423    13.6341/s 3.18858G/s     658.908M               14.3245                2.81743      1000k       13.6341M/s [BEST: throughput=  0.63 GB/s doc_throughput=    13 docs/s instructions=   658907679 cycles=   233690549 branch_miss=  902934 cache_miss= 3514131 cache_ref=   3572751 items=   1000000 avg_time=  73345517 ns]
large_random<yyjson>/manual_time                       144927043 ns    150862640 ns            5         677.862k           317.584M        4.19795M       4.31962M    323.089M              7.02387           6.90419       2.23067G          855.681M                    18.6023                     2.64843           6.90419M    676.993k   45.9988M       302.689M/s    4.2006M   4.31997M   323.257M          7.0275    6.90002/s 2.23048G/s     855.681M               18.6023                2.64706      1000k       6.90002M/s [BEST: throughput=  0.32 GB/s doc_throughput=     6 docs/s instructions=   855680957 cycles=   323089420 branch_miss=  677862 cache_miss= 4197946 cache_ref=   4319621 items=   1000000 avg_time= 144927043 ns]
large_random<yyjson_insitu>/manual_time                119077057 ns    125027322 ns            6         675.792k           386.805M        3.48374M       3.60155M    280.371M              6.09518           8.40903       2.35765G           849.56M                    18.4692                     3.03013           8.40903M     676.03k   45.9988M       368.399M/s   3.48408M   3.60389M   280.768M         6.10383    8.39792/s 2.35787G/s      849.56M               18.4692                3.02584      1000k       8.39792M/s [BEST: throughput=  0.39 GB/s doc_throughput=     8 docs/s instructions=   849559985 cycles=   280371012 branch_miss=  675792 cache_miss= 3483745 cache_ref=   3601550 items=   1000000 avg_time= 119077057 ns]
large_random<sajson>/manual_time                       105955297 ns    111936858 ns            7         584.378k           434.467M        5.42797M       5.57643M    337.479M              7.33669           9.44518       3.18754G             1093M                    23.7614                     3.23871           9.44518M    584.352k   45.9988M       414.022M/s    5.4708M   5.57649M   337.721M         7.34195    9.43794/s 3.18739G/s        1093M               23.7614                3.23639      1000k       9.43794M/s [BEST: throughput=  0.43 GB/s doc_throughput=     9 docs/s instructions=  1092995864 cycles=   337478586 branch_miss=  584378 cache_miss= 5427966 cache_ref=   5576426 items=   1000000 avg_time= 105955296 ns]
large_random<rapidjson>/manual_time                    251022496 ns    257003418 ns            3         630.739k           189.226M        4.38203M       4.90845M    707.306M              15.3766           4.11371       2.90965G          2.00013G                    43.4822                     2.82781           4.11371M    652.689k   45.9988M       174.757M/s   4.10561M   4.71766M   711.083M         15.4587    3.98371/s 2.83275G/s     2.00014G               43.4824                 2.8128      1000k       3.98371M/s [BEST: throughput=  0.19 GB/s doc_throughput=     4 docs/s instructions=  2000127409 cycles=   707306390 branch_miss=  630739 cache_miss= 4382026 cache_ref=   4908454 items=   1000000 avg_time= 251022496 ns]
large_random<rapidjson_lossless>/manual_time           286674234 ns    292640602 ns            3         581.745k           164.882M        4.35521M       4.91353M    822.284M              17.8762           3.58449       2.94746G           2.4771G                    53.8513                     3.01246           3.58449M    582.037k   45.9988M       153.023M/s   4.09333M   4.72143M   825.119M         17.9378    3.48828/s 2.87824G/s      2.4771G               53.8515                3.00212      1000k       3.48828M/s [BEST: throughput=  0.16 GB/s doc_throughput=     3 docs/s instructions=  2477095116 cycles=   822283531 branch_miss=  581745 cache_miss= 4355208 cache_ref=   4913531 items=   1000000 avg_time= 286674234 ns]
large_random<rapidjson_insitu>/manual_time             276434441 ns    282406963 ns            3         611.267k            171.04M        5.04686M       5.65116M    790.009M              17.1746           3.71837       2.93755G          1.72813G                     37.569                     2.18748           3.71837M    609.983k   45.9988M       158.692M/s   4.80039M   5.44949M   792.309M         17.2246    3.61749/s 2.86617G/s     1.72814G               37.5692                2.18114      1000k       3.61749M/s [BEST: throughput=  0.17 GB/s doc_throughput=     3 docs/s instructions=  1728127200 cycles=   790009037 branch_miss=  611267 cache_miss= 5046865 cache_ref=   5651162 items=   1000000 avg_time= 276434441 ns]
large_random<nlohmann_json>/manual_time               1484347290 ns   1490326499 ns            1         4.04066M           30.9892M        30.4258M       30.9292M    4.71924G              102.595          0.673697       3.17934G          12.7845G                    277.932                     2.70903           673.697k    4.04066M   45.9988M       29.5536M/s   30.4258M   30.9292M   4.71924G         102.595   0.673697/s 3.17934G/s     12.7845G               277.932                2.70903      1000k       673.697k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 12784549483 cycles=  4719238645 branch_miss= 4040663 cache_miss=30425751 cache_ref=  30929193 items=   1000000 avg_time=1484347290 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                       108905031 ns    127351286 ns            6          1033.9k           1.26228G        10.2124M        10.318M    346.859M              2.52619           9.19328       3.18877G          971.996M                     7.0791                     2.80228           4.81992M    1033.57k   137.305M       1.17419G/s   10.2427M   10.3183M    347.21M         2.52875    9.18231/s 3.18819G/s     971.996M                7.0791                2.79944   524.288k       4.81418M/s [BEST: throughput=  1.26 GB/s doc_throughput=     9 docs/s instructions=   971995679 cycles=   346859098 branch_miss= 1033904 cache_miss=10212376 cache_ref=  10318024 items=    524288 avg_time= 108905030 ns]
kostya<simdjson_ondemand>/manual_time                   70687030 ns     89072670 ns           10         467.583k           1.94663G        6.42469M       6.47017M    224.913M              1.63806           14.1774       3.18869G          638.786M                    4.65231                     2.84014           7.43306M    468.015k   137.305M       1.80903G/s   6.43528M   6.47022M   225.367M         1.64136    14.1469/s 3.18824G/s     638.786M               4.65231                2.83442   524.288k       7.41703M/s [BEST: throughput=  1.95 GB/s doc_throughput=    14 docs/s instructions=   638785640 cycles=   224913137 branch_miss=  467583 cache_miss= 6424690 cache_ref=   6470171 items=    524288 avg_time=  70687029 ns]
kostya<yyjson>/manual_time                             225406670 ns    243902303 ns            3         428.494k           609.347M        8.49724M       8.65736M    488.284M               3.5562           4.43791       2.16696G          974.185M                    7.09504                     1.99512           2.32674M    427.889k   137.305M       580.924M/s   8.49271M   8.65985M   488.138M         3.55514    4.43643/s 2.16559G/s     974.185M               7.09504                1.99572   524.288k       2.32596M/s [BEST: throughput=  0.61 GB/s doc_throughput=     4 docs/s instructions=   974184819 cycles=   488284407 branch_miss=  428494 cache_miss= 8497239 cache_ref=   8657363 items=    524288 avg_time= 225406670 ns]
kostya<yyjson_insitu>/manual_time                      147915436 ns    166363165 ns            5         418.827k           928.675M        6.35142M       6.52037M    360.683M              2.62687           6.76359       2.43951G          955.915M                    6.96198                     2.65029           3.54607M    417.719k   137.305M       885.264M/s   6.35267M   6.53141M   360.734M         2.62725    6.76062/s 2.43879G/s     955.915M               6.96198                2.64992   524.288k       3.54451M/s [BEST: throughput=  0.93 GB/s doc_throughput=     6 docs/s instructions=   955915149 cycles=   360682831 branch_miss=  418827 cache_miss= 6351416 cache_ref=   6520368 items=    524288 avg_time= 147915436 ns]
kostya<sajson>/manual_time                             163634376 ns    182083062 ns            4         354.567k           839.718M        8.49704M       8.54002M    521.458M              3.79781           6.11571       3.18909G          1.52083G                    11.0763                      2.9165            3.2064M    354.579k   137.305M       800.225M/s   8.48864M   8.53995M   521.778M         3.80014    6.11119/s 3.18868G/s     1.52083G               11.0763                2.91472   524.288k       3.20402M/s [BEST: throughput=  0.84 GB/s doc_throughput=     6 docs/s instructions=  1520833626 cycles=   521458183 branch_miss=  354567 cache_miss= 8497045 cache_ref=   8540018 items=    524288 avg_time= 163634376 ns]
kostya<rapidjson>/manual_time                          319723032 ns    338278596 ns            2         1057.72k           434.319M        5.23718M       5.81314M      912.1M              6.64288           3.16317       2.88513G          2.73082G                    19.8887                     2.99399           1.65841M    1084.71k   137.305M       409.555M/s   5.11143M   5.70794M   915.065M         6.66447    3.12771/s 2.86205G/s     2.73083G               19.8888                 2.9843   524.288k       1.63982M/s [BEST: throughput=  0.43 GB/s doc_throughput=     3 docs/s instructions=  2730823732 cycles=   912100337 branch_miss= 1057718 cache_miss= 5237180 cache_ref=   5813137 items=    524288 avg_time= 319723032 ns]
kostya<rapidjson_lossless>/manual_time                 336261050 ns    354723649 ns            2         964.922k           412.207M        5.23694M       5.82221M    965.959M              7.03513           3.00212       2.89993G          3.00711G                     21.901                     3.11309           1.57398M    965.136k   137.305M       389.412M/s   5.11225M   5.71111M   967.441M         7.04593    2.97388/s 2.87705G/s     3.00712G                21.901                3.10832   524.288k       1.55917M/s [BEST: throughput=  0.41 GB/s doc_throughput=     3 docs/s instructions=  3007114501 cycles=   965958524 branch_miss=  964922 cache_miss= 5236941 cache_ref=   5822206 items=    524288 avg_time= 336261050 ns]
kostya<rapidjson_insitu>/manual_time                   310974574 ns    329485878 ns            2          515.22k           446.363M        7.37142M       7.93871M    885.017M              6.44563           3.25089       2.87709G          2.21411G                    16.1255                     2.50177            1.7044M    535.005k   137.305M       421.077M/s   7.24757M   7.85861M   887.295M         6.46222     3.2157/s 2.85327G/s     2.21411G               16.1255                2.49535   524.288k       1.68595M/s [BEST: throughput=  0.45 GB/s doc_throughput=     3 docs/s instructions=  2214112599 cycles=   885017278 branch_miss=  515220 cache_miss= 7371416 cache_ref=   7938707 items=    524288 avg_time= 310974574 ns]
kostya<nlohmann_json>/manual_time                     2285655938 ns   2304143058 ns            1         14.2332M           60.0725M        44.8606M       45.5252M    7.29025G              53.0953          0.437511       3.18957G          17.8932G                    130.317                      2.4544           229.382k    14.2332M   137.305M       57.2896M/s   44.8606M   45.5252M   7.29025G         53.0953   0.437511/s 3.18957G/s     17.8932G               130.317                 2.4544   524.288k       229.382k/s [BEST: throughput=  0.06 GB/s doc_throughput=     0 docs/s instructions= 17893171434 cycles=  7290251239 branch_miss=14233196 cache_miss=44860646 cache_ref=  45525188 items=    524288 avg_time=2285655938 ns]
distinct_user_id<simdjson_dom>/manual_time                323364 ns       399721 ns         2168           4.018k           1.96829G               0        34.329k    1024.66k              1.62254          3.11678k       3.19364G          2.86747M                    4.54061                     2.79846            358.43k    4.12521k   631.515k       1.81883G/s    2.73524   34.0809k   1031.49k         1.63335   3.09249k/s 3.18987G/s     2.86747M               4.54061                2.77993        115       355.637k/s [BEST: throughput=  1.97 GB/s doc_throughput=  3116 docs/s instructions=     2867465 cycles=     1024660 branch_miss=    4018 cache_miss=       0 cache_ref=     34329 items=       115 avg_time=    323363 ns]
distinct_user_id<simdjson_ondemand>/manual_time           198871 ns       259498 ns         3515           1.969k           3.21151G               0         8.163k    628.139k             0.994654          5.08541k       3.19434G          1.82938M                    2.89681                     2.91238           584.822k    2.16837k   631.515k       2.95741G/s   0.472262   8.13777k   634.632k         1.00494   5.02838k/s 3.19117G/s     1.82938M               2.89681                2.88259        115       578.264k/s [BEST: throughput=  3.21 GB/s doc_throughput=  5085 docs/s instructions=     1829381 cycles=      628139 branch_miss=    1969 cache_miss=       0 cache_ref=      8163 items=       115 avg_time=    198871 ns]
distinct_user_id<yyjson>/manual_time                      679357 ns       765745 ns         1000           6.576k           1.57723G           7.14k         27.34k    1.27864M              2.02472          2.49754k       3.19346G          2.87762M                    4.55669                     2.25053           287.217k    7.39906k   631.515k       886.514M/s   2.24258k    24.754k   1.46526M         2.32023   1.47198k/s 2.15684G/s     2.87811M               4.55746                1.96423        115       169.278k/s [BEST: throughput=  1.58 GB/s doc_throughput=  2497 docs/s instructions=     2877619 cycles=     1278643 branch_miss=    6576 cache_miss=    7140 cache_ref=     27340 items=       115 avg_time=    679357 ns]
distinct_user_id<yyjson_insitu>/manual_time               506954 ns       576273 ns         1393           6.952k           1.81673G          1.199k        13.327k    1.10501M              1.74978          2.87679k       3.17889G           2.8776M                    4.55666                     2.60413           330.831k    7.43869k   631.515k       1.16015G/s    75.1228   8.98053k   1.22227M         1.93545   1.97256k/s   2.411G/s     2.87786M               4.55708                2.35453        115       226.845k/s [BEST: throughput=  1.82 GB/s doc_throughput=  2876 docs/s instructions=     2877600 cycles=     1105013 branch_miss=    6952 cache_miss=    1199 cache_ref=     13327 items=       115 avg_time=    506954 ns]
distinct_user_id<sajson>/manual_time                      687436 ns       756541 ns         1017          10.827k           927.768M               0        13.518k    2.17335M              3.44149          1.46911k        3.1929G          5.81759M                    9.21211                     2.67678           168.948k     11.056k   631.515k       876.095M/s    1.80039   13.5283k   2.19289M         3.47243   1.45468k/s 3.18995G/s     5.81759M               9.21211                2.65293        115       167.288k/s [BEST: throughput=  0.93 GB/s doc_throughput=  1469 docs/s instructions=     5817587 cycles=     2173352 branch_miss=   10827 cache_miss=       0 cache_ref=     13518 items=       115 avg_time=    687436 ns]
distinct_user_id<rapidjson>/manual_time                  2532256 ns      2603496 ns          278          32.809k           278.251M             663         23.16k    7.24613M              11.4742           440.608        3.1927G          21.8236M                    34.5575                     3.01176           50.6699k    33.8508k   631.515k       237.835M/s    772.076   12.7597k    7.4234M         11.7549    394.905/s 2.93154G/s     21.8245M                34.559                2.93996        115       45.4141k/s [BEST: throughput=  0.28 GB/s doc_throughput=   440 docs/s instructions=    21823595 cycles=     7246128 branch_miss=   32809 cache_miss=     663 cache_ref=     23160 items=       115 avg_time=   2532255 ns]
distinct_user_id<rapidjson_insitu>/manual_time           1846956 ns      1916587 ns          375          24.682k           377.473M          6.902k         14.49k    5.34149M              8.45822           597.725       3.19274G          13.2543M                    20.9881                     2.48139           68.7384k    32.8668k   631.515k       326.082M/s   1.91365k   11.6299k   5.59326M          8.8569    541.432/s 3.02837G/s     13.2546M               20.9886                2.36974        115       62.2646k/s [BEST: throughput=  0.38 GB/s doc_throughput=   597 docs/s instructions=    13254309 cycles=     5341491 branch_miss=   24682 cache_miss=    6902 cache_ref=     14490 items=       115 avg_time=   1846955 ns]
distinct_user_id<nlohmann_json>/manual_time              9765984 ns      9854666 ns           77         125.727k           70.9331M             854        98.915k    28.3941M              44.9619           112.322       3.18929G          76.3294M                    120.867                     2.68821            12.917k    177.096k   631.515k       61.6691M/s    145.481   106.263k   31.1477M         49.3221    102.396/s  3.1894G/s     74.9816M               118.733                2.40729        115       11.7756k/s [BEST: throughput=  0.07 GB/s doc_throughput=   112 docs/s instructions=    76329378 cycles=    28394127 branch_miss=  125727 cache_miss=     854 cache_ref=     98915 items=       115 avg_time=   9765984 ns]
find_tweet<simdjson_dom>/manual_time                      307729 ns       381019 ns         2273           3.584k            2.0674G               3          29.8k    975.626k               1.5449          3.27371k       3.19391G          2.78229M                    4.40574                      2.8518           3.27371k    3.68857k   631.515k       1.91124G/s    2.61945     29.85k   981.914k         1.55485   3.24962k/s 3.19084G/s     2.78229M               4.40574                2.83354          1       3.24962k/s [BEST: throughput=  2.07 GB/s doc_throughput=  3273 docs/s instructions=     2782291 cycles=      975626 branch_miss=    3584 cache_miss=       3 cache_ref=     29800 items=         1 avg_time=    307728 ns]
find_tweet<simdjson_ondemand>/manual_time                 133220 ns       196289 ns         5246             1008           4.78073G               0         7.336k    421.973k             0.668192          7.57025k       3.19444G          1.32079M                    2.09146                     3.13003           7.57025k     1040.49   631.515k       4.41483G/s  0.0772017   7.33989k   425.213k        0.673322   7.50637k/s 3.19181G/s     1.32079M               2.09146                3.10618          1       7.50637k/s [BEST: throughput=  4.78 GB/s doc_throughput=  7570 docs/s instructions=     1320790 cycles=      421973 branch_miss=    1008 cache_miss=       0 cache_ref=      7336 items=         1 avg_time=    133220 ns]
find_tweet<yyjson>/manual_time                            762638 ns       845776 ns          986           9.217k           1.51296G             208        27.239k    1.33337M              2.11138          2.39575k       3.19443G          2.81715M                    4.46095                     2.11281           2.39575k    7.36266k   631.515k       789.706M/s    336.804   19.9892k   1.48017M         2.34384   1.31124k/s 1.94085G/s     2.81764M               4.46171                1.90359          1       1.31124k/s [BEST: throughput=  1.51 GB/s doc_throughput=  2395 docs/s instructions=     2817154 cycles=     1333371 branch_miss=    9217 cache_miss=     208 cache_ref=     27239 items=         1 avg_time=    762638 ns]
find_tweet<yyjson_insitu>/manual_time                     492405 ns       554743 ns         1422           6.673k            1.8705G             762         12.65k    1072.87k              1.69888          2.96192k       3.17775G          2.81705M                    4.46077                     2.62571           2.96192k    7.12865k   631.515k       1.19443G/s    7.54852    5.1043k   1.17584M         1.86194   2.03085k/s 2.38795G/s     2.81731M               4.46119                2.39599          1       2.03085k/s [BEST: throughput=  1.87 GB/s doc_throughput=  2961 docs/s instructions=     2817046 cycles=     1072870 branch_miss=    6673 cache_miss=     762 cache_ref=     12650 items=         1 avg_time=    492405 ns]
find_tweet<sajson>/manual_time                            674845 ns       742309 ns         1034           10.47k           946.573M               0        12.357k     2.1303M              3.37332          1.49889k       3.19309G          5.72247M                    9.06149                     2.68622           1.49889k    10.8039k   631.515k       892.441M/s    2.74371   12.5785k   2.15307M         3.40937   1.48182k/s 3.19047G/s     5.72247M               9.06149                2.65782          1       1.48182k/s [BEST: throughput=  0.95 GB/s doc_throughput=  1498 docs/s instructions=     5722466 cycles=     2130301 branch_miss=   10470 cache_miss=       0 cache_ref=     12357 items=         1 avg_time=    674845 ns]
find_tweet<rapidjson>/manual_time                        2514643 ns      2580788 ns          280          32.379k           279.918M          7.796k        21.306k    7.20295M              11.4058           443.248       3.19269G          21.7397M                    34.4246                     3.01816            443.248    33.8038k   631.515k       239.501M/s    594.079   9.08927k   7.36693M         11.6655    397.671/s 2.92961G/s     21.7404M               34.4257                2.95108          1        397.671/s [BEST: throughput=  0.28 GB/s doc_throughput=   443 docs/s instructions=    21739651 cycles=     7202946 branch_miss=   32379 cache_miss=    7796 cache_ref=     21306 items=         1 avg_time=   2514642 ns]
find_tweet<rapidjson_insitu>/manual_time                 1833859 ns      1898604 ns          384          24.745k           379.674M          6.901k          13.2k    5.31049M              8.40913           601.212       3.19273G          13.1754M                    20.8632                     2.48101            601.212    32.9736k   631.515k       328.411M/s   1.70535k   8.50549k   5.55005M         8.78847    545.298/s 3.02643G/s     13.1757M               20.8636                2.37397          1        545.298/s [BEST: throughput=  0.38 GB/s doc_throughput=   601 docs/s instructions=    13175402 cycles=     5310493 branch_miss=   24745 cache_miss=    6901 cache_ref=     13200 items=         1 avg_time=   1833858 ns]
find_tweet<nlohmann_json>/manual_time                    8942761 ns      9029347 ns           88          99.608k           82.3917M             824         77.67k    24.4383M              38.6979           130.467       3.18838G          66.4584M                    105.236                     2.71943            130.467    199.467k   631.515k        67.346M/s    131.034   82.6846k   28.5229M         45.1659    111.822/s  3.1895G/s     65.1011M               103.087                2.28241          1        111.822/s [BEST: throughput=  0.08 GB/s doc_throughput=   130 docs/s instructions=    66458376 cycles=    24438306 branch_miss=   99608 cache_miss=     824 cache_ref=     77670 items=         1 avg_time=   8942761 ns]
top_tweet<simdjson_dom>/manual_time                       315647 ns       393448 ns         2217           3.763k           2.01652G              46        32.164k    1000.34k              1.58403          3.19315k       3.19424G          2.81918M                    4.46415                     2.81822           3.19315k    3.86171k   631.515k        1.8633G/s    47.9346   32.2754k   1007.21k         1.59491   3.16809k/s 3.19093G/s     2.81918M               4.46415                  2.799          1       3.16809k/s [BEST: throughput=  2.02 GB/s doc_throughput=  3193 docs/s instructions=     2819178 cycles=     1000339 branch_miss=    3763 cache_miss=      46 cache_ref=     32164 items=         1 avg_time=    315647 ns]
top_tweet<simdjson_ondemand>/manual_time                  183941 ns       247604 ns         3804           2.104k           3.46908G               1         7.263k     581.54k             0.920865          5.49327k       3.19456G          1.84358M                     2.9193                     3.17017           5.49327k    2.22676k   631.515k       3.19746G/s    3.91088   7.41263k   587.043k        0.929578   5.43653k/s 3.19147G/s     1.84358M                2.9193                3.14045          1       5.43653k/s [BEST: throughput=  3.47 GB/s doc_throughput=  5493 docs/s instructions=     1843579 cycles=      581540 branch_miss=    2104 cache_miss=       1 cache_ref=      7263 items=         1 avg_time=    183940 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time     187063 ns       251245 ns         3740           2.185k           3.42333G               8         8.203k    589.269k             0.933104          5.42082k       3.19432G          1.85914M                    2.94394                       3.155           5.42082k    2.38998k   631.515k        3.1441G/s     5.7738   8.26445k   596.992k        0.945333   5.34579k/s  3.1914G/s     1.85914M               2.94394                3.11419          1       5.34579k/s [BEST: throughput=  3.42 GB/s doc_throughput=  5420 docs/s instructions=     1859144 cycles=      589269 branch_miss=    2185 cache_miss=       8 cache_ref=      8203 items=         1 avg_time=    187062 ns]
top_tweet<yyjson>/manual_time                             773708 ns       861275 ns          990           9.699k           1.48648G             238        27.451k    1.35723M              2.14917          2.35384k        3.1947G          2.84444M                    4.50415                     2.09577           2.35384k    7.51912k   631.515k       778.407M/s    398.077   22.7431k   1.51466M         2.39846   1.29248k/s 1.95767G/s     2.84512M               4.50523                1.87838          1       1.29248k/s [BEST: throughput=  1.49 GB/s doc_throughput=  2353 docs/s instructions=     2844438 cycles=     1357231 branch_miss=    9699 cache_miss=     238 cache_ref=     27451 items=         1 avg_time=    773707 ns]
top_tweet<yyjson_insitu>/manual_time                      501521 ns       570173 ns         1000           6.739k           1.85007G          1.266k        13.273k    1084.76k              1.71771          2.92957k       3.17788G          2.84432M                    4.50396                     2.62208           2.92957k    7.28838k   631.515k       1.17272G/s     58.042   7.74967k    1.2058M         1.90938   1.99393k/s 2.40429G/s     2.84458M               4.50438                2.35908          1       1.99393k/s [BEST: throughput=  1.85 GB/s doc_throughput=  2929 docs/s instructions=     2844321 cycles=     1084759 branch_miss=    6739 cache_miss=    1266 cache_ref=     13273 items=         1 avg_time=    501521 ns]
top_tweet<sajson>/manual_time                             679721 ns       751237 ns         1029          10.559k           940.824M              70         13.22k    2.14322M              3.39377          1.48979k       3.19294G          5.75246M                    9.10898                     2.68403           1.48979k    10.9493k   631.515k       886.039M/s    81.7191   13.3267k   2.16852M         3.43384   1.47119k/s 3.19031G/s     5.75246M               9.10898                2.65271          1       1.47119k/s [BEST: throughput=  0.94 GB/s doc_throughput=  1489 docs/s instructions=     5752458 cycles=     2143219 branch_miss=   10559 cache_miss=      70 cache_ref=     13220 items=         1 avg_time=    679720 ns]
top_tweet<rapidjson>/manual_time                         2529313 ns      2600247 ns          278          32.631k           278.269M          7.562k        22.026k    7.24567M              11.4735           440.637       3.19271G          21.7977M                    34.5166                     3.00838            440.637    34.2975k   631.515k       238.112M/s    696.381   10.4965k   7.41424M         11.7404    395.364/s 2.93133G/s     21.7983M               34.5175                2.94006          1        395.364/s [BEST: throughput=  0.28 GB/s doc_throughput=   440 docs/s instructions=    21797723 cycles=     7245671 branch_miss=   32631 cache_miss=    7562 cache_ref=     22026 items=         1 avg_time=   2529313 ns]
top_tweet<rapidjson_insitu>/manual_time                  1839433 ns      1909727 ns          377          24.895k           379.128M              77        14.431k     5.3182M              8.42133           600.347       3.19276G          13.2292M                    20.9484                     2.48753            600.347    32.6566k   631.515k       327.416M/s   1.84329k   10.2438k   5.56939M          8.8191    543.646/s 3.02778G/s     13.2297M               20.9491                2.37543          1        543.646/s [BEST: throughput=  0.38 GB/s doc_throughput=   600 docs/s instructions=    13229199 cycles=     5318198 branch_miss=   24895 cache_miss=      77 cache_ref=     14431 items=         1 avg_time=   1839432 ns]
top_tweet<nlohmann_json>/manual_time                    11043767 ns     11133223 ns           63         193.811k           57.4868M             324       165.027k    35.0378M              55.4821             91.03       3.18949G          88.4889M                    140.122                     2.52553              91.03    197.662k   631.515k       54.5339M/s     217.81   165.316k   35.2219M         55.7736    90.5488/s  3.1893G/s     88.8149M               140.638                2.52158          1        90.5488/s [BEST: throughput=  0.06 GB/s doc_throughput=    91 docs/s instructions=    88488935 cycles=    35037779 branch_miss=  193811 cache_miss=     324 cache_ref=    165027 items=         1 avg_time=  11043766 ns]
