run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-x-gcc10.2-fallback.json -DSIMDJSON_IMPLEMENTATION=fallback
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DSIMDJSON_IMPLEMENTATION=fallback ..
-- The CXX compiler identification is GNU 10.2.0
-- The C compiler identification is GNU 10.2.0
-- Check for working CXX compiler: /usr/bin/g++-10
-- Check for working CXX compiler: /usr/bin/g++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/gcc-10
-- Check for working C compiler: /usr/bin/gcc-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Including implementation fallback due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation westmere due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation haswell due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation arm64 due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation ppc64 due to SIMDJSON_IMPLEMENTATION=fallback
-- Selected implementation fallback as builtin implementation based on fallback.
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Failed
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Failed
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-x-gcc10.2-fallback.json --benchmark_out_format=json
2021-01-23 05:35:01
Running benchmark/bench_ondemand
Run on (4 X 3200 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 1024 KiB (x4)
  L3 Unified 8448 KiB (x1)
Load Average: 1.07, 0.84, 0.77
***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.
simdjson::dom implementation:      fallback
simdjson::ondemand implementation: fallback

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                 1857764 ns      1929500 ns          377          37.879k           341.393M              11        33.489k    5.90598M              9.35208           540.593       3.19273G          14.2136M                    22.5071                     2.40665           54.0593k    38.4525k   631.515k       324.185M/s    8.12467   33.6919k   5.92533M         9.38272    538.281/s 3.18949G/s     14.2136M               22.5071                2.39879        100       53.8281k/s [BEST: throughput=  0.34 GB/s doc_throughput=   540 docs/s instructions=    14213602 cycles=     5905980 branch_miss=   37879 cache_miss=      11 cache_ref=     33489 items=       100 avg_time=   1857764 ns]
partial_tweets<simdjson_ondemand>/manual_time            1487871 ns      1545247 ns          471          31.167k           426.119M               0        12.189k    4.73203M              7.49313           674.757       3.19297G          10.6838M                    16.9177                     2.25776           67.4757k    31.6579k   631.515k       404.779M/s   0.271762   12.0786k   4.74603M         7.51532    672.101/s 3.18982G/s     10.6838M               16.9177                 2.2511        100       67.2101k/s [BEST: throughput=  0.43 GB/s doc_throughput=   674 docs/s instructions=    10683783 cycles=     4732027 branch_miss=   31167 cache_miss=       0 cache_ref=     12189 items=       100 avg_time=   1487871 ns]
partial_tweets<yyjson>/manual_time                        855184 ns       934474 ns          821           9.569k           1.27675G             193        28.392k    1.57988M              2.50173          2.02173k       3.19409G          2.90846M                    4.60553                     1.84094           202.173k      7.889k   631.515k       704.246M/s    590.575   23.4738k   1.76487M         2.79466   1.16934k/s 2.06373G/s     2.90915M               4.60663                1.64837        100       116.934k/s [BEST: throughput=  1.28 GB/s doc_throughput=  2021 docs/s instructions=     2908461 cycles=     1579879 branch_miss=    9569 cache_miss=     193 cache_ref=     28392 items=       100 avg_time=    855183 ns]
partial_tweets<yyjson_insitu>/manual_time                 575787 ns       637608 ns         1225           7.002k           1.53792G          1.824k        13.349k    1.30288M               2.0631          2.43529k        3.1729G          2.90815M                    4.60503                     2.23209           243.529k    7.59322k   631.515k       1045.98M/s     69.418   8.89175k   1.43843M         2.27775   1.73675k/s 2.49821G/s     2.90841M               4.60544                2.02193        100       173.675k/s [BEST: throughput=  1.54 GB/s doc_throughput=  2435 docs/s instructions=     2908146 cycles=     1302881 branch_miss=    7002 cache_miss=    1824 cache_ref=     13349 items=       100 avg_time=    575786 ns]
partial_tweets<sajson>/manual_time                        628569 ns       693658 ns         1110          11.155k           1017.81M               0        13.631k    1.98114M              3.13712           1.6117k       3.19301G          6.05185M                    9.58306                     3.05473            161.17k    11.5967k   631.515k       958.144M/s    1.44865   13.5638k   2.00523M         3.17527   1.59092k/s 3.19015G/s     6.05185M               9.58306                3.01803        100       159.092k/s [BEST: throughput=  1.02 GB/s doc_throughput=  1611 docs/s instructions=     6051847 cycles=     1981140 branch_miss=   11155 cache_miss=       0 cache_ref=     13631 items=       100 avg_time=    628568 ns]
partial_tweets<rapidjson>/manual_time                    1906520 ns      1970430 ns          367          26.711k           385.875M             503        22.926k    5.22523M              8.27412           611.031       3.19278G          13.4096M                    21.2341                     2.56632           61.1031k    26.5907k   631.515k       315.895M/s    318.534   11.1716k   5.40041M         8.55152    524.516/s  2.8326G/s     13.4106M               21.2356                2.48326        100       52.4516k/s [BEST: throughput=  0.39 GB/s doc_throughput=   611 docs/s instructions=    13409630 cycles=     5225234 branch_miss=   26711 cache_miss=     503 cache_ref=     22926 items=       100 avg_time=   1906520 ns]
partial_tweets<rapidjson_insitu>/manual_time             1374257 ns      1436256 ns          511           24.24k           518.178M          5.129k         14.37k     3.8912M              6.16169           820.532       3.19285G          9.75483M                    15.4467                      2.5069           82.0532k    24.9253k   631.515k       438.244M/s    168.274   9.38858k   3.98837M         6.31556    727.666/s  2.9022G/s     9.75543M               15.4477                2.44597        100       72.7666k/s [BEST: throughput=  0.52 GB/s doc_throughput=   820 docs/s instructions=     9754833 cycles=     3891199 branch_miss=   24240 cache_miss=    5129 cache_ref=     14370 items=       100 avg_time=   1374257 ns]
partial_tweets<nlohmann_json>/manual_time                8905668 ns      8994790 ns           79         135.937k           74.1251M               1        98.949k    27.1705M              43.0243           117.377       3.18918G          69.4349M                     109.95                     2.55552           11.7377k    147.327k   631.515k       67.6266M/s    33.7342   139.955k   28.3978M         44.9678    112.288/s 3.18874G/s     69.9515M               110.768                2.46327        100       11.2288k/s [BEST: throughput=  0.07 GB/s doc_throughput=   117 docs/s instructions=    69434882 cycles=    27170512 branch_miss=  135937 cache_miss=       1 cache_ref=     98949 items=       100 avg_time=   8905667 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 189624747 ns    195744373 ns            4         2.76709M           242.805M        6.87092M       6.89521M    604.107M              13.1331           5.27852       3.18879G          1.62065G                    35.2325                     2.68272           5.27852M    2.77624M   45.9988M        231.34M/s   6.82721M   6.89524M   604.735M         13.1468    5.27357/s 3.18911G/s     1.62065G               35.2325                2.67993      1000k       5.27357M/s [BEST: throughput=  0.24 GB/s doc_throughput=     5 docs/s instructions=  1620650383 cycles=   604107283 branch_miss= 2767095 cache_miss= 6870919 cache_ref=   6895214 items=   1000000 avg_time= 189624747 ns]
large_random<simdjson_ondemand>/manual_time            151834546 ns    157951434 ns            5         2.77599M           303.281M        3.54499M       3.57276M     483.74M              10.5164           6.59325       3.18942G          1.28397G                    27.9132                     2.65427           6.59325M    2.78076M   45.9988M       288.919M/s   3.53587M   3.57282M   484.225M         10.5269    6.58612/s 3.18916G/s     1.28397G               27.9132                2.65161      1000k       6.58612M/s [BEST: throughput=  0.30 GB/s doc_throughput=     6 docs/s instructions=  1283973751 cycles=   483739776 branch_miss= 2775990 cache_miss= 3544985 cache_ref=   3572758 items=   1000000 avg_time= 151834546 ns]
large_random<simdjson_ondemand_unordered>/manual_time  157583447 ns    163687274 ns            4         2.78636M           292.001M        3.51813M       3.57356M    502.444M               10.923           6.34801       3.18952G          1.28797G                    28.0002                     2.56342           6.34801M    2.78831M   45.9988M       278.379M/s   3.53481M   3.57353M   502.549M         10.9253    6.34584/s  3.1891G/s     1.28797G               28.0002                2.56288      1000k       6.34584M/s [BEST: throughput=  0.29 GB/s doc_throughput=     6 docs/s instructions=  1287973756 cycles=   502444229 branch_miss= 2786362 cache_miss= 3518127 cache_ref=   3573557 items=   1000000 avg_time= 157583447 ns]
large_random<yyjson>/manual_time                       156741930 ns    162845484 ns            4         662.084k           293.695M        4.20102M       4.31554M      359.4M              7.81326           6.38483       2.29471G           944.15M                    20.5255                     2.62701           6.38483M    661.379k   45.9988M       279.873M/s    4.2006M   4.31598M   359.749M         7.82084    6.37991/s 2.29517G/s      944.15M               20.5255                2.62447      1000k       6.37991M/s [BEST: throughput=  0.29 GB/s doc_throughput=     6 docs/s instructions=   944149726 cycles=   359400452 branch_miss=  662084 cache_miss= 4201016 cache_ref=   4315536 items=   1000000 avg_time= 156741929 ns]
large_random<yyjson_insitu>/manual_time                130627704 ns    136744386 ns            5          658.25k           352.412M        3.48576M       3.62066M    316.663M              6.88417           7.66134       2.42606G          938.029M                    20.3925                     2.96223           7.66134M    661.155k   45.9988M       335.823M/s     3.483M   3.60764M    316.93M         6.88996    7.65534/s 2.42621G/s     938.029M               20.3925                2.95974      1000k       7.65534M/s [BEST: throughput=  0.35 GB/s doc_throughput=     7 docs/s instructions=   938028866 cycles=   316663323 branch_miss=  658250 cache_miss= 3485758 cache_ref=   3620655 items=   1000000 avg_time= 130627704 ns]
large_random<sajson>/manual_time                       109524168 ns    115640500 ns            6         582.899k           421.108M        5.43333M       5.57729M     348.35M              7.57304           9.15476       3.18906G          1099.99M                    23.9134                      3.1577           9.15476M    583.248k   45.9988M       400.531M/s   5.47815M   5.57726M   349.248M         7.59254     9.1304/s 3.18877G/s     1099.99M               23.9134                3.14959      1000k        9.1304M/s [BEST: throughput=  0.42 GB/s doc_throughput=     9 docs/s instructions=  1099987399 cycles=   348350478 branch_miss=  582899 cache_miss= 5433332 cache_ref=   5577290 items=   1000000 avg_time= 109524168 ns]
large_random<rapidjson>/manual_time                    206815524 ns    212954454 ns            4         618.556k            233.45M        4.36142M       4.89592M    560.071M              12.1758           5.07514       2.84244G          1.65913G                    36.0689                     2.96235           5.07514M    630.501k   45.9988M       212.111M/s   4.06527M   4.66997M   566.672M         12.3193    4.83523/s 2.73999G/s     1.65914G               36.0691                2.92786      1000k       4.83523M/s [BEST: throughput=  0.23 GB/s doc_throughput=     5 docs/s instructions=  1659125187 cycles=   560070863 branch_miss=  618556 cache_miss= 4361417 cache_ref=   4895924 items=   1000000 avg_time= 206815523 ns]
large_random<rapidjson_lossless>/manual_time           235738022 ns    241838137 ns            3         605.304k           201.999M         4.3577M       4.88029M    658.251M              14.3102            4.3914       2.89064G          2.02209G                    43.9597                     3.07191            4.3914M    606.385k   45.9988M       186.087M/s   4.09499M   4.68654M   661.987M         14.3914      4.242/s 2.80815G/s      2.0221G               43.9599                3.05459      1000k         4.242M/s [BEST: throughput=  0.20 GB/s doc_throughput=     4 docs/s instructions=  2022092094 cycles=   658251381 branch_miss=  605304 cache_miss= 4357702 cache_ref=   4880292 items=   1000000 avg_time= 235738021 ns]
large_random<rapidjson_insitu>/manual_time             186251055 ns    192389223 ns            4         587.089k           260.669M        5.05747M       5.60487M    494.673M               10.754           5.66687       2.80325G          1.49112G                    32.4166                     3.01436           5.66687M    587.669k   45.9988M       235.531M/s   4.77674M   5.37941M   501.289M         10.8979     5.3691/s 2.69147G/s     1.49113G               32.4168                 2.9746      1000k        5.3691M/s [BEST: throughput=  0.26 GB/s doc_throughput=     5 docs/s instructions=  1491122656 cycles=   494672519 branch_miss=  587089 cache_miss= 5057468 cache_ref=   5604871 items=   1000000 avg_time= 186251055 ns]
large_random<nlohmann_json>/manual_time               1449622075 ns   1455715924 ns            1         4.58177M           31.7316M        30.4299M       30.9052M    4.60831G              100.183          0.689835       3.17898G          11.9494G                    259.776                       2.593           689.835k    4.58177M   45.9988M       30.2616M/s   30.4299M   30.9052M   4.60831G         100.183   0.689835/s 3.17898G/s     11.9494G               259.776                  2.593      1000k       689.835k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 11949359866 cycles=  4608313189 branch_miss= 4581766 cache_miss=30429865 cache_ref=  30905155 items=   1000000 avg_time=1449622075 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                       384335762 ns    403335563 ns            2         3.60113M           357.339M        10.2918M       10.3155M    1.22551G              8.92545           2.60252       3.18941G          3.21925G                     23.446                     2.62687           1.36447M    3.61144M   137.305M       340.703M/s   10.2802M   10.3156M   1.22585G         8.92791    2.60189/s 3.18952G/s     3.21925G                23.446                2.62614   524.288k       1.36414M/s [BEST: throughput=  0.36 GB/s doc_throughput=     2 docs/s instructions=  3219247750 cycles=  1225508918 branch_miss= 3601130 cache_miss=10291759 cache_ref=  10315513 items=    524288 avg_time= 384335762 ns]
kostya<simdjson_ondemand>/manual_time                  345679786 ns    364735888 ns            2         3.53531M           397.226M        6.44571M       6.47199M    1.10259G               8.0302           2.89302        3.1898G          2.88125G                    20.9843                     2.61318           1.51677M    3.53518M   137.305M       378.802M/s   6.45418M     6.472M   1.10265G         8.03068    2.89285/s 3.18981G/s     2.88125G               20.9843                2.61302   524.288k       1.51669M/s [BEST: throughput=  0.40 GB/s doc_throughput=     2 docs/s instructions=  2881251565 cycles=  1102586525 branch_miss= 3535311 cache_miss= 6445706 cache_ref=   6471986 items=    524288 avg_time= 345679786 ns]
kostya<yyjson>/manual_time                             263169340 ns    282082670 ns            3          416.22k           521.876M          8.485M       8.63065M    606.612M              4.41799           3.80085       2.30564G          984.045M                    7.16686                      1.6222           1.99274M     415.42k   137.305M       497.566M/s   8.48619M   8.62683M   606.565M         4.41765    3.79983/s 2.30485G/s     984.045M               7.16686                1.62232   524.288k       1.99221M/s [BEST: throughput=  0.52 GB/s doc_throughput=     3 docs/s instructions=   984045279 cycles=   606612158 branch_miss=  416220 cache_miss= 8484998 cache_ref=   8630652 items=    524288 avg_time= 263169340 ns]
kostya<yyjson_insitu>/manual_time                      185192037 ns    204169681 ns            4         410.971k           741.517M        6.34709M       6.48718M    478.253M              3.48315           5.40051       2.58281G          965.775M                     7.0338                     2.01938           2.83142M    412.671k   137.305M       707.073M/s   6.34634M   6.48712M   478.359M         3.48391     5.3998/s 2.58304G/s     965.776M                7.0338                2.01894   524.288k       2.83105M/s [BEST: throughput=  0.74 GB/s doc_throughput=     5 docs/s instructions=   965775483 cycles=   478253463 branch_miss=  410971 cache_miss= 6347090 cache_ref=   6487183 items=    524288 avg_time= 185192036 ns]
kostya<sajson>/manual_time                             160512414 ns    179443659 ns            4         450.998k            858.38M        8.46785M       8.54643M    510.028M              3.71457           6.25163       3.18851G          1.62034G                     11.801                     3.17697           3.27765M    447.498k   137.305M       815.789M/s   8.49405M   8.54637M   511.856M         3.72787    6.23005/s 3.18889G/s     1.62034G                11.801                3.16563   524.288k       3.26634M/s [BEST: throughput=  0.86 GB/s doc_throughput=     6 docs/s instructions=  1620343058 cycles=   510028447 branch_miss=  450998 cache_miss= 8467854 cache_ref=   8546432 items=    524288 avg_time= 160512414 ns]
kostya<rapidjson>/manual_time                          289588432 ns    308606980 ns            2         957.767k           479.821M        5.23759M       5.76232M    814.903M              5.93499           3.49457       2.84773G           2.2966G                    16.7263                     2.81825           1.83216M    962.185k   137.305M       452.174M/s   5.11343M   5.67509M   817.288M         5.95235    3.45318/s 2.82224G/s      2.2966G               16.7263                2.81003   524.288k       1.81046M/s [BEST: throughput=  0.48 GB/s doc_throughput=     3 docs/s instructions=  2296598289 cycles=   814903207 branch_miss=  957767 cache_miss= 5237590 cache_ref=   5762318 items=    524288 avg_time= 289588432 ns]
kostya<rapidjson_lossless>/manual_time                 305277902 ns    324239227 ns            2         985.561k           454.886M        5.24344M       5.74878M    865.593M              6.30417           3.31296       2.86768G          2.50316G                    18.2306                     2.89184           1.73695M    991.188k   137.305M       428.935M/s   5.11912M   5.65212M   868.022M         6.32185     3.2757/s 2.84338G/s     2.50316G               18.2307                2.88375   524.288k       1.71741M/s [BEST: throughput=  0.45 GB/s doc_throughput=     3 docs/s instructions=  2503159224 cycles=   865593451 branch_miss=  985561 cache_miss= 5243440 cache_ref=   5748777 items=    524288 avg_time= 305277902 ns]
kostya<rapidjson_insitu>/manual_time                   261486591 ns    280517757 ns            3         1051.75k           533.917M        7.36689M       7.88957M    723.391M               5.2685           3.88854       2.81294G          2.03014G                    14.7857                     2.80643           2.03872M    1043.76k   137.305M       500.768M/s    7.2043M   7.76337M    725.84M         5.28633    3.82429/s 2.77582G/s     2.03015G               14.7857                2.79696   524.288k       2.00503M/s [BEST: throughput=  0.53 GB/s doc_throughput=     3 docs/s instructions=  2030143830 cycles=   723391363 branch_miss= 1051746 cache_miss= 7366891 cache_ref=   7889571 items=    524288 avg_time= 261486591 ns]
kostya<nlohmann_json>/manual_time                     1893750096 ns   1912737587 ns            1         3.77455M           72.5043M        44.8854M       45.4535M    6.03953G              43.9863          0.528053       3.18919G          15.1471G                    110.317                     2.50798           276.852k    3.77455M   137.305M       69.1455M/s   44.8854M   45.4535M   6.03953G         43.9863   0.528053/s 3.18919G/s     15.1471G               110.317                2.50798   524.288k       276.852k/s [BEST: throughput=  0.07 GB/s doc_throughput=     0 docs/s instructions= 15147051920 cycles=  6039532974 branch_miss= 3774553 cache_miss=44885387 cache_ref=  45453525 items=    524288 avg_time=1893750096 ns]
distinct_user_id<simdjson_dom>/manual_time               1851937 ns      1932921 ns          378          37.814k           342.653M               4        34.162k    5.88438M              9.31788           542.589        3.1928G          14.1544M                    22.4134                     2.40542           62.3978k    38.5121k   631.515k       325.205M/s    2.38095   34.3534k   5.90674M         9.35328    539.975/s 3.18949G/s     14.1544M               22.4134                2.39632        115       62.0971k/s [BEST: throughput=  0.34 GB/s doc_throughput=   542 docs/s instructions=    14154427 cycles=     5884383 branch_miss=   37814 cache_miss=       4 cache_ref=     34162 items=       115 avg_time=   1851937 ns]
distinct_user_id<simdjson_ondemand>/manual_time          1462062 ns      1525239 ns          478          30.836k           433.563M               0         8.757k    4.65086M              7.36461           686.543       3.19302G          10.3775M                    16.4327                     2.23131           78.9525k    31.2258k   631.515k       411.925M/s   0.401674   8.92331k    4.6637M         7.38494    683.966/s 3.18981G/s     10.3775M               16.4327                2.22517        115       78.6561k/s [BEST: throughput=  0.43 GB/s doc_throughput=   686 docs/s instructions=    10377517 cycles=     4650861 branch_miss=   30836 cache_miss=       0 cache_ref=      8757 items=       115 avg_time=   1462061 ns]
distinct_user_id<yyjson>/manual_time                      750164 ns       838675 ns         1000           6.973k           1.36966G          7.133k        26.077k    1.47241M              2.33156          2.16885k       3.19345G           2.8751M                     4.5527                     1.95264           249.418k    7.70058k   631.515k       802.837M/s   2.24259k    24.475k   1.68635M         2.67033   1.33304k/s 2.24798G/s     2.87529M               4.55301                1.70504        115         153.3k/s [BEST: throughput=  1.37 GB/s doc_throughput=  2168 docs/s instructions=     2875096 cycles=     1472413 branch_miss=    6973 cache_miss=    7133 cache_ref=     26077 items=       115 avg_time=    750164 ns]
distinct_user_id<yyjson_insitu>/manual_time               575423 ns       646323 ns         1226           7.294k           1.54472G           1.19k        13.834k    1.30034M              2.05908          2.44606k        3.1807G          2.87489M                    4.55237                     2.21088           281.297k    7.79223k   631.515k       1046.64M/s    69.0628   8.87675k   1.43689M          2.2753   1.73785k/s 2.49709G/s     2.87515M               4.55278                2.00096        115       199.853k/s [BEST: throughput=  1.54 GB/s doc_throughput=  2446 docs/s instructions=     2874888 cycles=     1300337 branch_miss=    7294 cache_miss=    1190 cache_ref=     13834 items=       115 avg_time=    575422 ns]
distinct_user_id<sajson>/manual_time                      622916 ns       694851 ns         1123          11.337k           1025.68M               1        13.493k    1.96605M              3.11322          1.62415k       3.19316G          5.98431M                    9.47612                     3.04383           186.777k    11.5993k   631.515k       966.839M/s    2.35085   13.6202k    1.9872M         3.14672   1.60535k/s 3.19016G/s     5.98431M               9.47612                3.01143        115       184.615k/s [BEST: throughput=  1.03 GB/s doc_throughput=  1624 docs/s instructions=     5984313 cycles=     1966047 branch_miss=   11337 cache_miss=       1 cache_ref=     13493 items=       115 avg_time=    622916 ns]
distinct_user_id<rapidjson>/manual_time                  1898611 ns      1971104 ns          372          26.762k           387.011M             778        22.882k    5.21027M              8.25043           612.829         3.193G            13.35M                    21.1396                     2.56224           70.4753k     26.602k   631.515k       317.211M/s    614.398   12.3749k   5.39058M         8.53596    526.701/s 2.83922G/s     13.3509M                21.141                 2.4767        115       60.5706k/s [BEST: throughput=  0.39 GB/s doc_throughput=   612 docs/s instructions=    13349956 cycles=     5210270 branch_miss=   26762 cache_miss=     778 cache_ref=     22882 items=       115 avg_time=   1898611 ns]
distinct_user_id<rapidjson_insitu>/manual_time           1348891 ns      1419227 ns          546          24.591k           520.032M             106        14.888k    3.87737M              6.13979           823.468       3.19289G          9.70605M                    15.3695                     2.50326           94.6988k    24.8406k   631.515k       446.485M/s   1.33306k   11.1971k   3.97229M          6.2901    741.349/s 2.94486G/s     9.70657M               15.3703                2.44357        115       85.2552k/s [BEST: throughput=  0.52 GB/s doc_throughput=   823 docs/s instructions=     9706046 cycles=     3877367 branch_miss=   24591 cache_miss=     106 cache_ref=     14888 items=       115 avg_time=   1348891 ns]
distinct_user_id<nlohmann_json>/manual_time              8864944 ns      8956563 ns           87         113.424k           80.4194M             670        98.852k    25.0352M              39.6431           127.344       3.18807G          64.8523M                    102.693                     2.59045           14.6445k    169.165k   631.515k       67.9372M/s     16.046   106.467k   28.2679M          44.762    112.804/s 3.18873G/s     63.5081M               100.565                2.24665        115       12.9724k/s [BEST: throughput=  0.08 GB/s doc_throughput=   127 docs/s instructions=    64852326 cycles=    25035192 branch_miss=  113424 cache_miss=     670 cache_ref=     98852 items=       115 avg_time=   8864944 ns]
find_tweet<simdjson_dom>/manual_time                     1837040 ns      1913521 ns          381          37.624k           345.255M               2         30.03k    5.84004M              9.24767           546.709       3.19281G          14.0734M                    22.2851                     2.40981            546.709    38.2593k   631.515k       327.842M/s     2.6378   30.1342k   5.85946M         9.27842    544.354/s 3.18962G/s     14.0734M               22.2851                2.40182          1        544.354/s [BEST: throughput=  0.35 GB/s doc_throughput=   546 docs/s instructions=    14073387 cycles=     5840040 branch_miss=   37624 cache_miss=       2 cache_ref=     30030 items=         1 avg_time=   1837039 ns]
find_tweet<simdjson_ondemand>/manual_time                1387541 ns      1452471 ns          504          30.248k           456.819M               0         7.572k    4.41381M              6.98924            723.37       3.19282G          9.73046M                    15.4081                     2.20455             723.37    30.6397k   631.515k       434.048M/s    1.21429   7.64959k   4.42593M         7.00844      720.7/s 3.18977G/s     9.73046M               15.4081                2.19851          1          720.7/s [BEST: throughput=  0.46 GB/s doc_throughput=   723 docs/s instructions=     9730463 cycles=     4413809 branch_miss=   30248 cache_miss=       0 cache_ref=      7572 items=         1 avg_time=   1387540 ns]
find_tweet<yyjson>/manual_time                            833877 ns       918601 ns          939           9.336k            1.3113G             236        27.204k    1.53816M              2.43567          2.07644k        3.1939G          2.82414M                      4.472                     1.83605           2.07644k     7.6574k   631.515k        722.24M/s    329.435   19.5716k   1.70065M         2.69296   1.19922k/s 2.03944G/s     2.82462M               4.47277                1.66091          1       1.19922k/s [BEST: throughput=  1.31 GB/s doc_throughput=  2076 docs/s instructions=     2824135 cycles=     1538162 branch_miss=    9336 cache_miss=     236 cache_ref=     27204 items=         1 avg_time=    833877 ns]
find_tweet<yyjson_insitu>/manual_time                     559827 ns       622804 ns         1261           7.435k           1.57287G             136        14.276k    1.28232M              2.03055          2.49064k        3.1938G          2.82403M                    4.47183                     2.20227           2.49064k    7.54234k   631.515k        1075.8M/s    7.92704   5.13487k   1.38785M         2.19765   1.78627k/s 2.47906G/s     2.82429M               4.47224                2.03502          1       1.78627k/s [BEST: throughput=  1.57 GB/s doc_throughput=  2490 docs/s instructions=     2824025 cycles=     1282325 branch_miss=    7435 cache_miss=     136 cache_ref=     14276 items=         1 avg_time=    559826 ns]
find_tweet<sajson>/manual_time                            611463 ns       680961 ns         1143           11.02k           1044.79M               0        12.946k    1.93009M              3.05628          1.65442k       3.19318G          5.89219M                    9.33025                     3.05281           1.65442k    11.4904k   631.515k       984.949M/s    2.54156    12.991k   1.95067M         3.08888   1.63542k/s 3.19017G/s     5.89219M               9.33025                 3.0206          1       1.63542k/s [BEST: throughput=  1.04 GB/s doc_throughput=  1654 docs/s instructions=     5892194 cycles=     1930088 branch_miss=   11020 cache_miss=       0 cache_ref=     12946 items=         1 avg_time=    611462 ns]
find_tweet<rapidjson>/manual_time                        1883798 ns      1949978 ns          375          26.174k           389.895M          9.943k        21.294k    5.17148M              8.18901           617.397       3.19286G          13.2811M                    21.0305                     2.56813            617.397    26.4524k   631.515k       319.705M/s    453.115   8.54555k   5.34233M         8.45955    530.843/s 2.83594G/s     13.2819M               21.0318                2.48616          1        530.843/s [BEST: throughput=  0.39 GB/s doc_throughput=   617 docs/s instructions=    13281051 cycles=     5171483 branch_miss=   26174 cache_miss=    9943 cache_ref=     21294 items=         1 avg_time=   1883797 ns]
find_tweet<rapidjson_insitu>/manual_time                 1336392 ns      1401598 ns          554          24.106k           522.717M          6.783k        13.678k    3.85759M              6.10847           827.719         3.193G           9.6479M                    15.2774                     2.50102            827.719     24.775k   631.515k       450.661M/s   1.18664k   8.02013k   3.93164M         6.22572    748.284/s 2.94198G/s     9.64822M               15.2779                  2.454          1        748.284/s [BEST: throughput=  0.52 GB/s doc_throughput=   827 docs/s instructions=     9647904 cycles=     3857588 branch_miss=   24106 cache_miss=    6783 cache_ref=     13678 items=         1 avg_time=   1336391 ns]
find_tweet<nlohmann_json>/manual_time                    7243698 ns      7332674 ns          100          88.215k           95.8577M             864        77.528k    21.0128M              33.2736            151.79       3.18953G          55.2717M                    87.5224                     2.63039             151.79    113.296k   631.515k       83.1426M/s      18.61    82.581k   23.0989M         36.5769    138.051/s 3.18882G/s     53.9154M               85.3747                2.33411          1        138.051/s [BEST: throughput=  0.10 GB/s doc_throughput=   151 docs/s instructions=    55271733 cycles=    21012763 branch_miss=   88215 cache_miss=     864 cache_ref=     77528 items=         1 avg_time=   7243698 ns]
top_tweet<simdjson_dom>/manual_time                      1844995 ns      1926154 ns          379          37.932k           343.634M              52        32.233k    5.86753M               9.2912           544.143       3.19278G          14.1075M                    22.3391                     2.40432            544.143    38.3845k   631.515k       326.429M/s    44.3852   32.4039k   5.88468M         9.31836    542.007/s 3.18954G/s     14.1075M               22.3391                2.39732          1        542.007/s [BEST: throughput=  0.34 GB/s doc_throughput=   544 docs/s instructions=    14107455 cycles=     5867534 branch_miss=   37932 cache_miss=      52 cache_ref=     32233 items=         1 avg_time=   1844994 ns]
top_tweet<simdjson_ondemand>/manual_time                 1446631 ns      1512840 ns          484          30.851k           438.244M               1         8.083k    4.60097M               7.2856           693.956       3.19287G          10.3519M                    16.3922                     2.24995            693.956    31.2677k   631.515k       416.319M/s     1.9814   8.25757k   4.61445M         7.30695    691.261/s 3.18979G/s     10.3519M               16.3922                2.24337          1        691.261/s [BEST: throughput=  0.44 GB/s doc_throughput=   693 docs/s instructions=    10351937 cycles=     4600965 branch_miss=   30851 cache_miss=       1 cache_ref=      8083 items=         1 avg_time=   1446630 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time    1469052 ns      1535892 ns          476          30.899k           432.026M               2         8.516k    4.66717M              7.39043           684.111       3.19286G          10.5746M                    16.7448                     2.26574            684.111    31.4595k   631.515k       409.965M/s    2.44748   8.81412k   4.68605M         7.42033    680.711/s 3.18985G/s     10.5746M               16.7448                2.25661          1        680.711/s [BEST: throughput=  0.43 GB/s doc_throughput=   684 docs/s instructions=    10574589 cycles=     4667168 branch_miss=   30899 cache_miss=       2 cache_ref=      8516 items=         1 avg_time=   1469052 ns]
top_tweet<yyjson>/manual_time                             844984 ns       934070 ns          941           9.816k           1.29097G             268        27.462k    1.56239M              2.47404          2.04425k       3.19393G          2.84503M                    4.50508                     1.82094           2.04425k      7.795k   631.515k       712.747M/s    397.695   22.3458k   1.73525M         2.74775   1.18345k/s 2.05359G/s     2.84571M               4.50616                1.63995          1       1.18345k/s [BEST: throughput=  1.29 GB/s doc_throughput=  2044 docs/s instructions=     2845027 cycles=     1562395 branch_miss=    9816 cache_miss=     268 cache_ref=     27462 items=         1 avg_time=    844984 ns]
top_tweet<yyjson_insitu>/manual_time                      568282 ns       638109 ns         1243            7.09k           1.56253G          1.316k        13.404k    1.28533M              2.03531          2.47426k       3.18022G          2.84491M                     4.5049                     2.21338           2.47426k    7.59186k   631.515k       1059.79M/s    49.2035   7.80411k   1.41471M         2.24019   1.75969k/s 2.48945G/s     2.84517M               4.50531                2.01113          1       1.75969k/s [BEST: throughput=  1.56 GB/s doc_throughput=  2474 docs/s instructions=     2844909 cycles=     1285326 branch_miss=    7090 cache_miss=    1316 cache_ref=     13404 items=         1 avg_time=    568281 ns]
top_tweet<sajson>/manual_time                             614486 ns       688130 ns         1138          10.926k            1040.3M               0        13.447k    1.93847M              3.06955          1.64731k       3.19326G          5.91934M                    9.37324                     3.05362           1.64731k     11.442k   631.515k       980.104M/s    1.90685   13.5116k   1.96026M         3.10405   1.62738k/s 3.19008G/s     5.91934M               9.37324                3.01968          1       1.62738k/s [BEST: throughput=  1.04 GB/s doc_throughput=  1647 docs/s instructions=     5919339 cycles=     1938468 branch_miss=   10926 cache_miss=       0 cache_ref=     13447 items=         1 avg_time=    614485 ns]
top_tweet<rapidjson>/manual_time                         1893167 ns      1965320 ns          373          26.264k           387.721M             843        22.438k     5.2007M              8.23528           613.953       3.19299G          13.3309M                    21.1095                      2.5633            613.953    26.5627k   631.515k       318.123M/s    544.743   10.5017k   5.37313M         8.50832    528.215/s 2.83817G/s     13.3319M               21.1109                2.48121          1        528.215/s [BEST: throughput=  0.39 GB/s doc_throughput=   613 docs/s instructions=    13330948 cycles=     5200702 branch_miss=   26264 cache_miss=     843 cache_ref=     22438 items=         1 avg_time=   1893166 ns]
top_tweet<rapidjson_insitu>/manual_time                  1344922 ns      1416373 ns          548          24.292k            521.29M          3.404k        14.262k    3.86794M              6.12486           825.459       3.19283G          9.68912M                    15.3427                     2.50498            825.459    24.8263k   631.515k       447.803M/s   1.28143k   9.91609k   3.95976M         6.27025    743.537/s 2.94423G/s     9.68943M               15.3432                2.44698          1        743.537/s [BEST: throughput=  0.52 GB/s doc_throughput=   825 docs/s instructions=     9689116 cycles=     3867942 branch_miss=   24292 cache_miss=    3404 cache_ref=     14262 items=         1 avg_time=   1344922 ns]
top_tweet<nlohmann_json>/manual_time                     9952359 ns     10043625 ns           70         180.728k           63.8101M              31       163.721k    31.5653M              49.9835           101.043       3.18945G          76.8989M                    121.769                     2.43619            101.043    184.232k   631.515k       60.5143M/s    29.1714   163.804k   31.7336M         50.2499    100.479/s 3.18855G/s      77.148M               122.163                2.43112          1        100.479/s [BEST: throughput=  0.06 GB/s doc_throughput=   101 docs/s instructions=    76898925 cycles=    31565300 branch_miss=  180728 cache_miss=      31 cache_ref=    163721 items=         1 avg_time=   9952358 ns]
