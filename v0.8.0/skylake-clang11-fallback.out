run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-clang11-fallback.json -DSIMDJSON_IMPLEMENTATION=fallback
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DSIMDJSON_IMPLEMENTATION=fallback ..
-- The CXX compiler identification is Clang 11.0.0
-- The C compiler identification is Clang 11.0.0
-- Check for working CXX compiler: /usr/bin/clang++-11
-- Check for working CXX compiler: /usr/bin/clang++-11 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/clang-11
-- Check for working C compiler: /usr/bin/clang-11 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Including implementation fallback due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation westmere due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation haswell due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation arm64 due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation ppc64 due to SIMDJSON_IMPLEMENTATION=fallback
-- Selected implementation fallback as builtin implementation based on fallback.
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Success
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Success
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES -- failed to compile
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-clang11-fallback.json --benchmark_out_format=json
2021-01-23 05:07:37
Running benchmark/bench_ondemand
Run on (4 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 256 KiB (x4)
  L3 Unified 8192 KiB (x1)
Load Average: 0.97, 0.78, 0.86
simdjson::dom implementation:      fallback
simdjson::ondemand implementation: fallback

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                 1563134 ns      1592004 ns          448          39.102k           406.278M               0         95.44k    5.73811M              9.08626           643.339       3.69155G           15.297M                    24.2227                     2.66586           64.3339k    39.9982k   631.515k        385.29M/s    5.06473   95.3254k    5.7676M         9.13296     639.74/s 3.68977G/s      15.297M               24.2227                2.65223        100        63.974k/s [BEST: throughput=  0.41 GB/s doc_throughput=   643 docs/s instructions=    15297024 cycles=     5738112 branch_miss=   39102 cache_miss=       0 cache_ref=     95440 items=       100 avg_time=   1563134 ns]
partial_tweets<simdjson_ondemand>/manual_time            1252041 ns      1280673 ns          559           32.92k           507.116M               0        60.212k    4.59719M              7.27963           803.015       3.69161G          10.9869M                    17.3977                     2.38992           80.3015k    33.6594k   631.515k       481.022M/s   0.245081   60.3017k   4.61984M         7.31549    798.696/s 3.68985G/s     10.9869M               17.3977                 2.3782        100       79.8696k/s [BEST: throughput=  0.51 GB/s doc_throughput=   803 docs/s instructions=    10986903 cycles=     4597193 branch_miss=   32920 cache_miss=       0 cache_ref=     60212 items=       100 avg_time=   1252041 ns]
partial_tweets<yyjson>/manual_time                        649164 ns       680190 ns         1082           9.818k           1.76302G             479        79.147k    1.32281M              2.09466          2.79173k       3.69293G           2.9199M                    4.62365                     2.20735           279.173k    7.50581k   631.515k       927.746M/s    967.197   51.7248k   1.53212M         2.42611   1.54044k/s 2.36014G/s     2.92039M               4.62442                1.90611        100       154.044k/s [BEST: throughput=  1.76 GB/s doc_throughput=  2791 docs/s instructions=     2919902 cycles=     1322810 branch_miss=    9818 cache_miss=     479 cache_ref=     79147 items=       100 avg_time=    649164 ns]
partial_tweets<yyjson_insitu>/manual_time                 433424 ns       462956 ns         1614            6.69k            2.0144G             438         48.44k    1.15147M              1.82334          3.18978k       3.67293G           2.9198M                    4.62348                     2.53572           318.978k    7.27118k   631.515k       1.35697G/s    160.688   33.9548k   1.25514M         1.98751   2.30721k/s 2.89587G/s     2.92006M               4.62389                2.32648        100       230.721k/s [BEST: throughput=  2.01 GB/s doc_throughput=  3189 docs/s instructions=     2919795 cycles=     1151466 branch_miss=    6690 cache_miss=     438 cache_ref=     48440 items=       100 avg_time=    433423 ns]
partial_tweets<sajson>/manual_time                        598325 ns       627222 ns         1169          10.183k            1062.5M               0        48.253k    2.19443M              3.47486          1.68246k       3.69204G          5.87949M                    9.31013                     2.67928           168.246k    10.6086k   631.515k       1006.58M/s     1.9769   48.3862k   2.20783M         3.49609   1.67133k/s 3.69003G/s     5.87949M               9.31013                2.66301        100       167.133k/s [BEST: throughput=  1.06 GB/s doc_throughput=  1682 docs/s instructions=     5879487 cycles=     2194429 branch_miss=   10183 cache_miss=       0 cache_ref=     48253 items=       100 avg_time=    598324 ns]
partial_tweets<rapidjson>/manual_time                    2388172 ns      2417744 ns          293           29.68k           287.931M         10.372k        54.739k    8.09667M               12.821           455.937       3.69157G           21.896M                    34.6721                     2.70432           45.5937k    30.0654k   631.515k       252.184M/s    660.147   34.8095k   8.22506M         13.0243     418.73/s 3.44408G/s     21.8966M               34.6732                2.66219        100        41.873k/s [BEST: throughput=  0.29 GB/s doc_throughput=   455 docs/s instructions=    21895980 cycles=     8096668 branch_miss=   29680 cache_miss=   10372 cache_ref=     54739 items=       100 avg_time=   2388171 ns]
partial_tweets<rapidjson_insitu>/manual_time             1539816 ns      1568943 ns          454          25.666k           442.568M              55        45.797k    5.25668M              8.32392           700.803        3.6839G          13.3566M                    21.1501                     2.54088           70.0803k    26.0985k   631.515k       391.125M/s    288.434   35.9284k    5.3309M         8.44144    649.428/s 3.46204G/s      13.357M               21.1507                2.50558        100       64.9428k/s [BEST: throughput=  0.44 GB/s doc_throughput=   700 docs/s instructions=    13356609 cycles=     5256682 branch_miss=   25666 cache_miss=      55 cache_ref=     45797 items=       100 avg_time=   1539815 ns]
partial_tweets<nlohmann_json>/manual_time                8512667 ns      8547743 ns           82         150.986k           76.3783M              10       228.638k    30.5004M              48.2972           120.945       3.68886G          80.3151M                    127.179                     2.63325           12.0945k    160.828k   631.515k       70.7486M/s     178.78   372.435k   31.4067M         49.7324    117.472/s 3.68941G/s     81.0054M               128.271                2.57924        100       11.7472k/s [BEST: throughput=  0.08 GB/s doc_throughput=   120 docs/s instructions=    80315141 cycles=    30500427 branch_miss=  150986 cache_miss=      10 cache_ref=    228638 items=       100 avg_time=   8512666 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 142376674 ns    145774295 ns            5         1.21142M           323.472M        11.1119M       15.6267M    524.624M              11.4052            7.0322       3.68926G          1.62266G                    35.2761                     3.09299            7.0322M    1.21088M   45.9988M       308.111M/s   11.1388M   15.6251M   525.242M         11.4186    7.02362/s  3.6891G/s     1.62266G               35.2761                3.08935      1000k       7.02362M/s [BEST: throughput=  0.32 GB/s doc_throughput=     7 docs/s instructions=  1622655139 cycles=   524623671 branch_miss= 1211422 cache_miss=11111888 cache_ref=  15626729 items=   1000000 avg_time= 142376674 ns]
large_random<simdjson_ondemand>/manual_time            112953138 ns    116335086 ns            6         1.20829M           407.829M        5.77285M       8.12555M    416.098M              9.04584           8.86607       3.68915G          1.22298G                    26.5871                     2.93916           8.86607M    1.20796M   45.9988M       388.372M/s   5.79978M   8.12578M   416.676M         9.05842    8.85323/s 3.68893G/s     1.22298G               26.5871                2.93507      1000k       8.85323M/s [BEST: throughput=  0.41 GB/s doc_throughput=     8 docs/s instructions=  1222976300 cycles=   416097755 branch_miss= 1208288 cache_miss= 5772854 cache_ref=   8125549 items=   1000000 avg_time= 112953137 ns]
large_random<simdjson_ondemand_unordered>/manual_time  112984721 ns    116370233 ns            6          1.2853M           407.294M        5.86555M       8.12392M    416.613M              9.05705           8.85445       3.68888G          1.21998G                    26.5219                     2.92832           8.85445M     1.2811M   45.9988M       388.264M/s   5.80269M   8.12316M   416.802M         9.06115    8.85075/s 3.68901G/s     1.21998G               26.5219                2.92699      1000k       8.85075M/s [BEST: throughput=  0.41 GB/s doc_throughput=     8 docs/s instructions=  1219976312 cycles=   416613091 branch_miss= 1285297 cache_miss= 5865545 cache_ref=   8123916 items=   1000000 avg_time= 112984721 ns]
large_random<yyjson>/manual_time                       124467449 ns    127897002 ns            6         732.345k           369.952M        6.07011M       9.36318M     339.44M              7.37933           8.04264          2.73G          855.681M                    18.6023                     2.52086           8.04264M    734.727k   45.9988M       352.444M/s   6.07475M   9.36364M   339.606M         7.38293    8.03423/s 2.72847G/s     855.681M               18.6023                2.51963      1000k       8.03423M/s [BEST: throughput=  0.37 GB/s doc_throughput=     8 docs/s instructions=   855680949 cycles=   339440037 branch_miss=  732345 cache_miss= 6070108 cache_ref=   9363180 items=   1000000 avg_time= 124467449 ns]
large_random<yyjson_insitu>/manual_time                106824186 ns    110244875 ns            7         734.455k           430.737M         5.1623M       7.96461M    308.389M              6.70428           9.36409       2.88778G           849.56M                    18.4692                     2.75483           9.36409M     734.71k   45.9988M       410.655M/s   5.16867M   7.96528M   308.394M         6.70439    9.36118/s 2.88693G/s      849.56M               18.4692                2.75479      1000k       9.36118M/s [BEST: throughput=  0.43 GB/s doc_throughput=     9 docs/s instructions=   849560195 cycles=   308388804 branch_miss=  734455 cache_miss= 5162297 cache_ref=   7964614 items=   1000000 avg_time= 106824186 ns]
large_random<sajson>/manual_time                        92531647 ns     95938817 ns            8         588.535k           497.791M        8.41041M       12.3185M     340.91M              7.41128           10.8218       3.68927G          1.12599G                    24.4787                      3.3029           10.8218M    589.156k   45.9988M       474.085M/s   8.40516M   12.2817M   341.359M         7.42103    10.8071/s  3.6891G/s     1.12599G               24.4787                3.29856      1000k       10.8071M/s [BEST: throughput=  0.50 GB/s doc_throughput=    10 docs/s instructions=  1125990565 cycles=   340909784 branch_miss=  588535 cache_miss= 8410409 cache_ref=  12318537 items=   1000000 avg_time=  92531646 ns]
large_random<rapidjson>/manual_time                    216106371 ns    219532656 ns            3         589.818k           218.762M        7.11449M       10.9912M    717.623M              15.6009           4.75582       3.41288G          2.01514G                    43.8086                     2.80808           4.75582M    590.262k   45.9988M       202.992M/s    6.6102M   10.3328M   720.442M         15.6622    4.62735/s 3.33374G/s     2.01515G               43.8088                2.79711      1000k       4.62735M/s [BEST: throughput=  0.22 GB/s doc_throughput=     4 docs/s instructions=  2015143790 cycles=   717622606 branch_miss=  589818 cache_miss= 7114493 cache_ref=  10991167 items=   1000000 avg_time= 216106371 ns]
large_random<rapidjson_lossless>/manual_time           245055432 ns    248489240 ns            3         584.327k           191.962M        7.11691M       11.0154M    826.032M              17.9577           4.17319       3.44719G          2.48011G                    53.9169                     3.00244           4.17319M    583.373k   45.9988M       179.012M/s    6.6203M     10.36M   827.375M         17.9869    4.08071/s 3.37628G/s     2.48012G               53.9171                2.99758      1000k       4.08071M/s [BEST: throughput=  0.19 GB/s doc_throughput=     4 docs/s instructions=  2480110902 cycles=   826031684 branch_miss=  584327 cache_miss= 7116908 cache_ref=  11015377 items=   1000000 avg_time= 245055431 ns]
large_random<rapidjson_insitu>/manual_time             230568168 ns    233997454 ns            3         596.794k            204.22M        8.23088M       12.6176M    772.903M              16.8027           4.43969       3.43145G          1.73714G                     37.765                     2.24756           4.43969M    597.036k   45.9988M        190.26M/s   7.74408M   11.9612M   773.835M          16.823    4.33711/s 3.35621G/s     1.73715G               37.7652                2.24486      1000k       4.33711M/s [BEST: throughput=  0.20 GB/s doc_throughput=     4 docs/s instructions=  1737143624 cycles=   772902821 branch_miss=  596794 cache_miss= 8230882 cache_ref=  12617590 items=   1000000 avg_time= 230568168 ns]
large_random<nlohmann_json>/manual_time               1259151123 ns   1262588772 ns            1          4.1202M           36.5316M        48.2678M       62.0945M    4.63272G              100.714          0.794186       3.67924G          12.7486G                     277.15                     2.75185           794.186k     4.1202M   45.9988M       34.8392M/s   48.2678M   62.0945M   4.63272G         100.714   0.794186/s 3.67924G/s     12.7486G                277.15                2.75185      1000k       794.186k/s [BEST: throughput=  0.04 GB/s doc_throughput=     0 docs/s instructions= 12748555128 cycles=  4632722522 branch_miss= 4120200 cache_miss=48267847 cache_ref=  62094464 items=   1000000 avg_time=1259151123 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                       246414312 ns    256962293 ns            3         1.74665M           557.463M        16.2925M       22.9229M    908.764M              6.61858           4.06003       3.68961G          2.67049G                    19.4494                      2.9386           2.12863M    1.74166M   137.305M       531.399M/s   16.3352M   22.8806M   909.128M         6.62123    4.05821/s 3.68943G/s     2.67049G               19.4494                2.93742   524.288k       2.12767M/s [BEST: throughput=  0.56 GB/s doc_throughput=     4 docs/s instructions=  2670493580 cycles=   908763990 branch_miss= 1746653 cache_miss=16292470 cache_ref=  22922900 items=    524288 avg_time= 246414312 ns]
kostya<simdjson_ondemand>/manual_time                  209906303 ns    220476532 ns            3         1.68895M            654.45M        10.5063M       14.4769M    774.073M              5.63762           4.76639       3.68954G          2.21354G                    16.1213                      2.8596           2.49896M    1.70288M   137.305M       623.822M/s   10.4927M   14.4359M   774.466M         5.64048    4.76403/s 3.68958G/s     2.21354G               16.1213                2.85815   524.288k       2.49772M/s [BEST: throughput=  0.65 GB/s doc_throughput=     4 docs/s instructions=  2213540947 cycles=   774072840 branch_miss= 1688951 cache_miss=10506344 cache_ref=  14476861 items=    524288 avg_time= 209906303 ns]
kostya<yyjson>/manual_time                             176697785 ns    187281589 ns            4         419.383k           778.227M          11.65M       16.7675M    455.013M              3.31389           5.66787       2.57896G          974.184M                    7.09504                       2.141            2.9716M    420.918k   137.305M       741.063M/s   11.6542M   16.7774M    455.17M         3.31503    5.65938/s 2.57598G/s     974.185M               7.09504                2.14027   524.288k       2.96715M/s [BEST: throughput=  0.78 GB/s doc_throughput=     5 docs/s instructions=   974184487 cycles=   455013316 branch_miss=  419383 cache_miss=11650047 cache_ref=  16767540 items=    524288 avg_time= 176697785 ns]
kostya<yyjson_insitu>/manual_time                      123416579 ns    134017839 ns            6         417.839k           1.11287G        8.99404M       12.7495M    360.756M               2.6274           8.10508       2.92395G          955.915M                    6.96198                     2.64976            4.2494M     418.65k   137.305M       1060.99M/s    8.9975M   12.7438M   360.793M         2.62768    8.10264/s 2.92338G/s     955.915M               6.96198                2.64948   524.288k       4.24812M/s [BEST: throughput=  1.11 GB/s doc_throughput=     8 docs/s instructions=   955915125 cycles=   360755714 branch_miss=  417839 cache_miss= 8994042 cache_ref=  12749520 items=    524288 avg_time= 123416578 ns]
kostya<sajson>/manual_time                             147994725 ns    158563892 ns            5          401.83k           931.587M        12.6127M       17.5044M    543.745M              3.96013            6.7848        3.6892G          1.53761G                    11.1985                     2.82781           3.55719M    401.987k   137.305M        884.79M/s   12.6354M   17.5372M   545.955M         3.97622      6.757/s 3.68902G/s     1.53761G               11.1985                2.81636   524.288k       3.54261M/s [BEST: throughput=  0.93 GB/s doc_throughput=     6 docs/s instructions=  1537609229 cycles=   543745438 branch_miss=  401830 cache_miss=12612748 cache_ref=  17504439 items=    524288 avg_time= 147994724 ns]
kostya<rapidjson>/manual_time                          283760362 ns    294371056 ns            2         973.274k           488.004M         8.4994M       12.5557M    956.933M               6.9694           3.55416        3.4011G          2.73925G                    19.9501                     2.86253            1.8634M    974.583k   137.305M       461.461M/s   8.27191M    12.279M   958.741M         6.98257     3.5241/s  3.3787G/s     2.73925G               19.9501                2.85713   524.288k       1.84764M/s [BEST: throughput=  0.49 GB/s doc_throughput=     3 docs/s instructions=  2739246112 cycles=   956933224 branch_miss=  973274 cache_miss= 8499401 cache_ref=  12555703 items=    524288 avg_time= 283760362 ns]
kostya<rapidjson_lossless>/manual_time                 298119392 ns    308721952 ns            2         983.243k           464.267M         8.5059M       12.5839M    1009.58M              7.35284           3.38128       3.41368G           3.0082G                    21.9089                     2.97965           1.77277M    984.797k   137.305M       439.234M/s   8.27729M   12.2599M    1011.3M         7.36535    3.35436/s 3.39226G/s      3.0082G               21.9089                2.97459   524.288k       1.75865M/s [BEST: throughput=  0.46 GB/s doc_throughput=     3 docs/s instructions=  3008196548 cycles=  1009581599 branch_miss=  983243 cache_miss= 8505899 cache_ref=  12583872 items=    524288 avg_time= 298119392 ns]
kostya<rapidjson_insitu>/manual_time                   265524918 ns    276116599 ns            3         964.477k           524.857M        12.3143M       16.5653M    884.181M              6.43954           3.82257       3.37984G          2.22201G                     16.183                     2.51307           2.00413M    1093.92k   137.305M       493.152M/s    12.018M   16.1677M    889.14M         6.47566    3.76612/s 3.34861G/s     2.22201G                16.183                2.49906   524.288k       1.97453M/s [BEST: throughput=  0.52 GB/s doc_throughput=     3 docs/s instructions=  2222010699 cycles=   884181496 branch_miss=  964477 cache_miss=12314323 cache_ref=  16565289 items=    524288 avg_time= 265524918 ns]
kostya<nlohmann_json>/manual_time                     1952114365 ns   1962728723 ns            1          14.188M           70.3366M        70.8754M       88.6048M    7.20232G              52.4549          0.512265       3.68949G          17.7632G                     129.37                     2.46632           268.574k     14.188M   137.305M       67.0782M/s   70.8754M   88.6048M   7.20232G         52.4549   0.512265/s 3.68949G/s     17.7632G                129.37                2.46632   524.288k       268.574k/s [BEST: throughput=  0.07 GB/s doc_throughput=     0 docs/s instructions= 17763208777 cycles=  7202315474 branch_miss=14188004 cache_miss=70875434 cache_ref=  88604840 items=    524288 avg_time=1952114365 ns]
distinct_user_id<simdjson_dom>/manual_time               1558501 ns      1588868 ns          449          39.577k           406.848M               0        96.508k       5.73M              9.07342           644.241        3.6915G           15.232M                    24.1198                      2.6583           74.0878k    40.1478k   631.515k       386.435M/s    3.05122   96.7392k   5.75014M         9.10531    641.642/s 3.68953G/s      15.232M               24.1199                2.64899        115       73.7888k/s [BEST: throughput=  0.41 GB/s doc_throughput=   644 docs/s instructions=    15232047 cycles=     5730001 branch_miss=   39577 cache_miss=       0 cache_ref=     96508 items=       115 avg_time=   1558501 ns]
distinct_user_id<simdjson_ondemand>/manual_time          1211072 ns      1242856 ns          578          32.567k            524.18M               0         57.51k    4.44753M              7.04264           830.036       3.69161G          10.6052M                    16.7932                      2.3845           95.4541k    33.1465k   631.515k       497.295M/s  0.0968858   57.6195k   4.46864M         7.07607    825.714/s 3.68982G/s     10.6052M               16.7932                2.37324        115       94.9572k/s [BEST: throughput=  0.52 GB/s doc_throughput=   830 docs/s instructions=    10605156 cycles=     4447531 branch_miss=   32567 cache_miss=       0 cache_ref=     57510 items=       115 avg_time=   1211072 ns]
distinct_user_id<yyjson>/manual_time                      554690 ns       588415 ns         1000            6.49k           1.88169G           22.1k        77.172k    1.23921M              1.96229          2.97964k       3.69241G          2.87776M                    4.55691                     2.32224           342.659k    7.33971k   631.515k       1085.76M/s   7.55893k    58.277k    1.4533M          2.3013   1.80281k/s 2.62003G/s     2.87824M               4.55768                1.98048        115       207.323k/s [BEST: throughput=  1.88 GB/s doc_throughput=  2979 docs/s instructions=     2877756 cycles=     1239215 branch_miss=    6490 cache_miss=   22100 cache_ref=     77172 items=       115 avg_time=    554690 ns]
distinct_user_id<yyjson_insitu>/manual_time               426497 ns       459438 ns         1642           6.826k           2.04193G             318        46.999k    1.13678M              1.80009          3.23338k       3.67565G          2.87753M                    4.55655                     2.53129           371.839k    7.41886k   631.515k       1.37901G/s     57.782   32.4444k   1.24039M         1.96416   2.34468k/s 2.90833G/s     2.87779M               4.55697                2.32006        115       269.639k/s [BEST: throughput=  2.04 GB/s doc_throughput=  3233 docs/s instructions=     2877530 cycles=     1136784 branch_miss=    6826 cache_miss=     318 cache_ref=     46999 items=       115 avg_time=    426496 ns]
distinct_user_id<sajson>/manual_time                      594359 ns       624914 ns         1177           9.981k           1072.33M               0        47.764k    2.17418M               3.4428          1.69803k       3.69181G          5.81792M                    9.21265                     2.67592           195.273k    10.5594k   631.515k       1013.29M/s   0.653356   47.9694k    2.1931M         3.47276   1.68248k/s 3.68986G/s     5.81792M               9.21265                2.65283        115       193.486k/s [BEST: throughput=  1.07 GB/s doc_throughput=  1698 docs/s instructions=     5817924 cycles=     2174177 branch_miss=    9981 cache_miss=       0 cache_ref=     47764 items=       115 avg_time=    594359 ns]
distinct_user_id<rapidjson>/manual_time                  2373241 ns      2403947 ns          296           29.43k            289.14M         15.179k        56.224k    8.06272M              12.7673           457.851       3.69152G          21.8229M                    34.5564                     2.70664           52.6528k    30.0504k   631.515k       253.771M/s   1.32024k   36.5105k   8.20727M         12.9962    421.365/s 3.45825G/s     21.8237M               34.5577                2.65907        115       48.4569k/s [BEST: throughput=  0.29 GB/s doc_throughput=   457 docs/s instructions=    21822861 cycles=     8062721 branch_miss=   29430 cache_miss=   15179 cache_ref=     56224 items=       115 avg_time=   2373240 ns]
distinct_user_id<rapidjson_insitu>/manual_time           1541667 ns      1572204 ns          446          25.481k           417.528M              66        35.972k    5.24469M              8.30493           661.152       3.46754G          13.2903M                    21.0451                     2.53404           76.0325k    32.5313k   631.515k       390.655M/s   2.88109k   38.6739k    5.4205M         8.58332    648.649/s   3.516G/s     13.2901M               21.0449                2.45183        115       74.5946k/s [BEST: throughput=  0.42 GB/s doc_throughput=   661 docs/s instructions=    13290265 cycles=     5244690 branch_miss=   25481 cache_miss=      66 cache_ref=     35972 items=       115 avg_time=   1541666 ns]
distinct_user_id<nlohmann_json>/manual_time              8312346 ns      8346704 ns           90         127.326k           82.2423M             172       226.955k    28.3374M              44.8721            130.23       3.69038G          75.7417M                    119.937                     2.67285           14.9765k    186.141k   631.515k       72.4536M/s    176.411   419.155k   30.6679M         48.5624    120.303/s 3.68944G/s     74.3666M               117.759                 2.4249        115       13.8348k/s [BEST: throughput=  0.08 GB/s doc_throughput=   130 docs/s instructions=    75741709 cycles=    28337393 branch_miss=  127326 cache_miss=     172 cache_ref=    226955 items=       115 avg_time=   8312346 ns]
find_tweet<simdjson_dom>/manual_time                     1546231 ns      1575544 ns          453          39.256k           410.243M               0        86.313k    5.68273M              8.99857           649.618        3.6916G          15.1467M                    23.9847                     2.66539            649.618    39.9205k   631.515k       389.502M/s     1.7064   86.2236k   5.70534M         9.03437    646.734/s 3.68984G/s     15.1467M               23.9847                2.65483          1        646.734/s [BEST: throughput=  0.41 GB/s doc_throughput=   649 docs/s instructions=    15146727 cycles=     5682733 branch_miss=   39256 cache_miss=       0 cache_ref=     86313 items=         1 avg_time=   1546231 ns]
find_tweet<simdjson_ondemand>/manual_time                1166042 ns      1194606 ns          600          31.876k           544.399M               0        33.686k    4.28237M              6.78111           862.053       3.69163G          10.0993M                    15.9922                     2.35834            862.053    32.5424k   631.515k       516.499M/s    5.83833   33.8803k   4.30234M         6.81273    857.602/s  3.6897G/s     10.0993M               15.9922                2.34739          1        857.602/s [BEST: throughput=  0.54 GB/s doc_throughput=   862 docs/s instructions=    10099287 cycles=     4282372 branch_miss=   31876 cache_miss=       0 cache_ref=     33686 items=         1 avg_time=   1166042 ns]
find_tweet<yyjson>/manual_time                            618036 ns       649109 ns         1140            9.29k            1.8534G             117        68.789k    1.25827M              1.99247          2.93484k       3.69283G          2.81718M                    4.46098                     2.23892           2.93484k    7.29077k   631.515k       974.473M/s   1.10165k   41.8515k   1.47794M          2.3403   1.61803k/s 2.39134G/s     2.81763M                4.4617                1.90646          1       1.61803k/s [BEST: throughput=  1.85 GB/s doc_throughput=  2934 docs/s instructions=     2817176 cycles=     1258272 branch_miss=    9290 cache_miss=     117 cache_ref=     68789 items=         1 avg_time=    618036 ns]
find_tweet<yyjson_insitu>/manual_time                     415548 ns       445972 ns         1685            6.61k           2.10999G             550        38.232k    1.10185M              1.74477          3.34115k       3.68145G          2.81704M                    4.46076                     2.55664           3.34115k    7.12926k   631.515k       1.41535G/s    16.4457   23.5737k   1.20084M         1.90152   2.40646k/s 2.88978G/s      2.8173M               4.46118                2.34611          1       2.40646k/s [BEST: throughput=  2.11 GB/s doc_throughput=  3341 docs/s instructions=     2817038 cycles=     1101851 branch_miss=    6610 cache_miss=     550 cache_ref=     38232 items=         1 avg_time=    415547 ns]
find_tweet<sajson>/manual_time                            582711 ns       612591 ns         1201           9.911k           1092.29M               0          38.4k    2.13453M              3.38001          1.72963k       3.69195G          5.72273M                    9.06191                     2.68103           1.72963k     10.426k   631.515k       1033.55M/s    1.08993   38.3899k   2.15018M          3.4048   1.71612k/s 3.68997G/s     5.72273M               9.06191                2.66151          1       1.71612k/s [BEST: throughput=  1.09 GB/s doc_throughput=  1729 docs/s instructions=     5722731 cycles=     2134528 branch_miss=    9911 cache_miss=       0 cache_ref=     38400 items=         1 avg_time=    582710 ns]
find_tweet<rapidjson>/manual_time                        2360769 ns      2389868 ns          298          29.336k           290.206M         21.583k        49.162k    8.03308M              12.7203           459.539       3.69151G          21.7393M                    34.4241                     2.70623            459.539    29.8705k   631.515k       255.112M/s    1006.79   28.9577k   8.16126M         12.9233    423.591/s 3.45703G/s       21.74M               34.4252                2.66381          1        423.591/s [BEST: throughput=  0.29 GB/s doc_throughput=   459 docs/s instructions=    21739347 cycles=     8033079 branch_miss=   29336 cache_miss=   21583 cache_ref=     49162 items=         1 avg_time=   2360768 ns]
find_tweet<rapidjson_insitu>/manual_time                 1523758 ns      1553676 ns          440          25.704k           453.153M             111        36.546k     5.1446M              8.14644           717.564       3.69158G          13.2115M                    20.9203                     2.56804            717.564    31.9131k   631.515k       395.246M/s   2.70717k    29.178k   5.35652M         8.48201    656.272/s 3.51533G/s     13.2118M               20.9208                2.46649          1        656.272/s [BEST: throughput=  0.45 GB/s doc_throughput=   717 docs/s instructions=    13211513 cycles=     5144600 branch_miss=   25704 cache_miss=     111 cache_ref=     36546 items=         1 avg_time=   1523757 ns]
find_tweet<nlohmann_json>/manual_time                    6830472 ns      6860893 ns          105         100.014k            95.589M          1.652k       169.451k    24.3757M              38.5988           151.365       3.68962G          65.8463M                    104.267                     2.70131            151.365    113.781k   631.515k       88.1725M/s    155.933   338.617k   25.1996M         39.9035    146.403/s  3.6893G/s     64.4838M                102.11                2.55892          1        146.403/s [BEST: throughput=  0.10 GB/s doc_throughput=   151 docs/s instructions=    65846322 cycles=    24375733 branch_miss=  100014 cache_miss=    1652 cache_ref=    169451 items=         1 avg_time=   6830472 ns]
top_tweet<simdjson_dom>/manual_time                      1551636 ns      1580514 ns          451          39.189k           408.926M               0        93.823k    5.70096M              9.02743           647.531       3.69155G          15.1836M                    24.0432                     2.66334            647.531    39.9192k   631.515k       388.145M/s    2.04878   93.8017k   5.72491M         9.06536    644.481/s  3.6896G/s     15.1836M               24.0432                 2.6522          1        644.481/s [BEST: throughput=  0.41 GB/s doc_throughput=   647 docs/s instructions=    15183614 cycles=     5700958 branch_miss=   39189 cache_miss=       0 cache_ref=     93823 items=         1 avg_time=   1551635 ns]
top_tweet<simdjson_ondemand>/manual_time                 1207822 ns      1236343 ns          579          32.453k           525.299M               0        57.566k      4.438M              7.02755           831.808       3.69156G          10.6259M                     16.826                     2.39429            831.808    32.9904k   631.515k       498.633M/s   0.516408   57.4965k   4.45654M         7.05691    827.937/s 3.68973G/s     10.6259M                16.826                2.38433          1        827.937/s [BEST: throughput=  0.53 GB/s doc_throughput=   831 docs/s instructions=    10625883 cycles=     4438003 branch_miss=   32453 cache_miss=       0 cache_ref=     57566 items=         1 avg_time=   1207821 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time    1226994 ns      1255717 ns          571          32.815k           517.211M               0         58.45k     4.5075M               7.1376           819.001       3.69165G          10.8513M                     17.183                      2.4074            819.001    33.3481k   631.515k       490.842M/s    0.38704    58.382k   4.52739M         7.16909        815/s 3.68982G/s     10.8513M                17.183                2.39682          1            815/s [BEST: throughput=  0.52 GB/s doc_throughput=   819 docs/s instructions=    10851341 cycles=     4507503 branch_miss=   32815 cache_miss=       0 cache_ref=     58450 items=         1 avg_time=   1226994 ns]
top_tweet<yyjson>/manual_time                             623206 ns       653612 ns         1129           9.421k           1.82263G             193         74.22k     1.2795M              2.02608          2.88613k       3.69281G          2.84445M                    4.50417                     2.22309           2.88613k     7.4201k   631.515k        966.39M/s    1061.61   47.0361k   1.49742M         2.37115   1.60461k/s 2.40276G/s     2.84491M               4.50489                1.89988          1       1.60461k/s [BEST: throughput=  1.82 GB/s doc_throughput=  2886 docs/s instructions=     2844451 cycles=     1279503 branch_miss=    9421 cache_miss=     193 cache_ref=     74220 items=         1 avg_time=    623205 ns]
top_tweet<yyjson_insitu>/manual_time                      420784 ns       450297 ns         1662           7.135k           2.06449G              12        43.154k    1.12955M              1.78863          3.26911k       3.69261G           2.8441M                    4.50362                     2.51792           3.26911k    7.19614k   631.515k       1.39773G/s    49.8995    28.895k   1.21982M         1.93157   2.37651k/s 2.89891G/s     2.84437M               4.50404                 2.3318          1       2.37651k/s [BEST: throughput=  2.06 GB/s doc_throughput=  3269 docs/s instructions=     2844105 cycles=     1129546 branch_miss=    7135 cache_miss=      12 cache_ref=     43154 items=         1 avg_time=    420784 ns]
top_tweet<sajson>/manual_time                             587047 ns       616120 ns         1192          10.014k           1084.14M               0        43.962k    2.15058M              3.40543          1.71674k       3.69197G          5.75272M                     9.1094                     2.67497           1.71674k    10.4769k   631.515k       1025.91M/s   0.743289   43.8095k   2.16639M         3.43046   1.70344k/s 3.69032G/s     5.75272M                9.1094                2.65544          1       1.70344k/s [BEST: throughput=  1.08 GB/s doc_throughput=  1716 docs/s instructions=     5752722 cycles=     2150577 branch_miss=   10014 cache_miss=       0 cache_ref=     43962 items=         1 avg_time=    587047 ns]
top_tweet<rapidjson>/manual_time                         2366719 ns      2395834 ns          297          29.645k           289.986M              17        51.476k    8.03927M              12.7301            459.19       3.69155G          21.7983M                    34.5174                     2.71148             459.19    29.9672k   631.515k        254.47M/s   1.16602k   32.7557k   8.18404M         12.9594    422.526/s 3.45797G/s     21.7991M               34.5187                2.66361          1        422.526/s [BEST: throughput=  0.29 GB/s doc_throughput=   459 docs/s instructions=    21798284 cycles=     8039269 branch_miss=   29645 cache_miss=      17 cache_ref=     51476 items=         1 avg_time=   2366719 ns]
top_tweet<rapidjson_insitu>/manual_time                  1534608 ns      1563888 ns          440          25.267k           419.858M              79        31.543k    5.21114M              8.25181           664.843       3.46459G          13.2664M                    21.0073                     2.54578            664.843    32.6867k   631.515k       392.452M/s   2.86043k   34.3359k   5.39711M          8.5463    651.632/s 3.51693G/s     13.2665M               21.0074                2.45807          1        651.632/s [BEST: throughput=  0.42 GB/s doc_throughput=   664 docs/s instructions=    13266418 cycles=     5211141 branch_miss=   25267 cache_miss=      79 cache_ref=     31543 items=         1 avg_time=   1534607 ns]
top_tweet<nlohmann_json>/manual_time                     9415927 ns      9446261 ns           74         191.036k            67.653M             287       394.893k    34.4429M              54.5401           107.128        3.6898G          87.7833M                    139.004                     2.54866            107.128    196.469k   631.515k       63.9618M/s    581.865   413.662k   34.7374M         55.0065    106.203/s 3.68922G/s     88.1532M                139.59                 2.5377          1        106.203/s [BEST: throughput=  0.07 GB/s doc_throughput=   107 docs/s instructions=    87783280 cycles=    34442869 branch_miss=  191036 cache_miss=     287 cache_ref=    394893 items=         1 avg_time=   9415926 ns]
