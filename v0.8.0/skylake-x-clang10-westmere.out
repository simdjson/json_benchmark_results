run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-x-clang10-westmere.json -DCMAKE_BUILD_TYPE=Release -DSIMDJSON_EXCLUDE_IMPLEMENTATION=haswell
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DCMAKE_BUILD_TYPE=Release -DSIMDJSON_EXCLUDE_IMPLEMENTATION=haswell -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
-- The CXX compiler identification is Clang 10.0.1
-- The C compiler identification is Clang 10.0.1
-- Check for working CXX compiler: /usr/bin/clang++-10
-- Check for working CXX compiler: /usr/bin/clang++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/clang-10
-- Check for working C compiler: /usr/bin/clang-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- Excluding implementation haswell due to SIMDJSON_EXCLUDE_IMPLEMENTATION=haswell
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Success
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Success
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES -- failed to compile
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
make -f CMakeFiles/Makefile2 bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 10
make -f CMakeFiles/Makefile2 benchmark/CMakeFiles/bench_ondemand.dir/all
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/DependInfo.cmake --color=
Scanning dependencies of target benchmark
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_api_internal.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_name.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_name.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_register.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_register.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_runner.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_runner.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/colorprint.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/colorprint.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/commandlineflags.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/commandlineflags.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/complexity.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/complexity.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/console_reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/console_reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/counter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/counter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/csv_reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/csv_reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/json_reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/json_reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/sleep.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/sleep.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/statistics.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/statistics.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/string_util.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/string_util.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/sysinfo.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/sysinfo.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/timers.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/timers.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/cmake -P CMakeFiles/benchmark.dir/cmake_clean_target.cmake
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/benchmark.dir/link.txt --verbose=1
/usr/bin/ar qc libbenchmark.a  CMakeFiles/benchmark.dir/benchmark.cc.o CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o CMakeFiles/benchmark.dir/benchmark_name.cc.o CMakeFiles/benchmark.dir/benchmark_register.cc.o CMakeFiles/benchmark.dir/benchmark_runner.cc.o CMakeFiles/benchmark.dir/colorprint.cc.o CMakeFiles/benchmark.dir/commandlineflags.cc.o CMakeFiles/benchmark.dir/complexity.cc.o CMakeFiles/benchmark.dir/console_reporter.cc.o CMakeFiles/benchmark.dir/counter.cc.o CMakeFiles/benchmark.dir/csv_reporter.cc.o CMakeFiles/benchmark.dir/json_reporter.cc.o CMakeFiles/benchmark.dir/reporter.cc.o CMakeFiles/benchmark.dir/sleep.cc.o CMakeFiles/benchmark.dir/statistics.cc.o CMakeFiles/benchmark.dir/string_util.cc.o CMakeFiles/benchmark.dir/sysinfo.cc.o CMakeFiles/benchmark.dir/timers.cc.o
/usr/bin/ranlib libbenchmark.a
[ 80%] Built target benchmark
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/CMakeFiles/generated-data.dir/DependInfo.cmake --color=
Scanning dependencies of target generated-data
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated && /usr/bin/ruby genfeaturejson.rb /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
[ 80%] Built target generated-data
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/src/CMakeFiles/simdjson.dir/DependInfo.cmake --color=
Scanning dependencies of target simdjson
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/clang++-10  -DSIMDJSON_IMPLEMENTATION_HASWELL=0 -DSIMDJSON_THREADS_ENABLED=1 -Dsimdjson_EXPORTS -I/home/jkeiser/simdjson_benchmark_results/simdjson/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/include  -O3 -DNDEBUG -fPIC   -fPIC -Werror -Wall -Wextra -Weffc++ -Wsign-compare -Wshadow -Wwrite-strings -Wpointer-arith -Winit-self -Wconversion -Wno-sign-conversion -pthread -std=c++17 -o CMakeFiles/simdjson.dir/simdjson.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/src/simdjson.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/simdjson.dir/link.txt --verbose=1
/usr/bin/clang++-10 -fPIC -O3 -DNDEBUG  -shared -Wl,-soname,libsimdjson.so.7 -o ../libsimdjson.so.7.0.0 CMakeFiles/simdjson.dir/simdjson.cpp.o  -pthread 
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_symlink_library ../libsimdjson.so.7.0.0 ../libsimdjson.so.7 ../libsimdjson.so
[ 80%] Built target simdjson
make -f dependencies/CMakeFiles/yyjson.dir/build.make dependencies/CMakeFiles/yyjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies/CMakeFiles/yyjson.dir/DependInfo.cmake --color=
Scanning dependencies of target yyjson
make -f dependencies/CMakeFiles/yyjson.dir/build.make dependencies/CMakeFiles/yyjson.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies && /usr/bin/clang-10  -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/yyjson/src  -O3 -DNDEBUG   -o CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o   -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/yyjson/src/yyjson.c
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies && /usr/bin/cmake -P CMakeFiles/yyjson.dir/cmake_clean_target.cmake
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies && /usr/bin/cmake -E cmake_link_script CMakeFiles/yyjson.dir/link.txt --verbose=1
/usr/bin/ar qc libyyjson.a  CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
/usr/bin/ranlib libyyjson.a
[ 90%] Built target yyjson
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark/CMakeFiles/bench_ondemand.dir/DependInfo.cmake --color=
Scanning dependencies of target bench_ondemand
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/clang++-10  -DRAPIDJSON_HAS_STDSTRING -DSAJSON_UNSORTED_OBJECT_KEYS -DSIMDJSON_BENCHMARK_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/\" -DSIMDJSON_COMPETITION_NLOHMANN_JSON -DSIMDJSON_COMPETITION_RAPIDJSON -DSIMDJSON_COMPETITION_SAJSON -DSIMDJSON_COMPETITION_YYJSON -DSIMDJSON_IMPLEMENTATION_HASWELL=0 -DSIMDJSON_MINEFIELD_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/minefield/\" -DSIMDJSON_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/\" -DSIMDJSON_THREADS_ENABLED=1 -DSIMDJSON_USING_LIBRARY=1 -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/. -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/linux -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/yyjson/src -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/rapidjson/include -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/sajson/include -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/json  -O3 -DNDEBUG   -pthread -std=c++17 -o CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/bench_ondemand.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/cmake -E cmake_link_script CMakeFiles/bench_ondemand.dir/link.txt --verbose=1
/usr/bin/clang++-10  -O3 -DNDEBUG   CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o  -o bench_ondemand  -Wl,-rpath,/home/jkeiser/simdjson_benchmark_results/simdjson/build ../libsimdjson.so.7.0.0 ../_deps/google_benchmarks/src/libbenchmark.a ../dependencies/libyyjson.a -pthread /usr/lib/x86_64-linux-gnu/librt.so 
[100%] Built target bench_ondemand
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 0
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-x-clang10-westmere.json --benchmark_out_format=json
2021-01-25 00:52:48
Running benchmark/bench_ondemand
Run on (4 X 3200 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 1024 KiB (x4)
  L3 Unified 8448 KiB (x1)
Load Average: 1.00, 0.72, 0.36
***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.
simdjson::dom implementation:      westmere
simdjson::ondemand implementation: fallback

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                  422248 ns       494003 ns         1654           3.719k           1.50434G               0        34.648k    1.34071M                2.123          2.38212k       3.19372G          4.37538M                    6.92839                     3.26349           238.212k    3.79959k   631.515k       1.39289G/s   0.817412   34.7443k   1.34711M         2.13314   2.36828k/s 3.19033G/s     4.37538M               6.92839                3.24797        100       236.828k/s [BEST: throughput=  1.50 GB/s doc_throughput=  2382 docs/s instructions=     4375384 cycles=     1340707 branch_miss=    3719 cache_miss=       0 cache_ref=     34648 items=       100 avg_time=    422247 ns]
partial_tweets<simdjson_ondemand>/manual_time             278473 ns       335435 ns         2509           2.353k           2.28489G               0         9.037k    882.679k              1.39772           3.6181k       3.19362G           3.3138M                    5.24737                     3.75425            361.81k    2.49372k   631.515k       2.11204G/s  0.0398565   9.13423k    888.56k         1.40703   3.59102k/s 3.19083G/s      3.3138M               5.24737                 3.7294        100       359.102k/s [BEST: throughput=  2.28 GB/s doc_throughput=  3618 docs/s instructions=     3313795 cycles=      882679 branch_miss=    2353 cache_miss=       0 cache_ref=      9037 items=       100 avg_time=    278472 ns]
partial_tweets<yyjson>/manual_time                        791459 ns       871626 ns          883           9.854k           1.44523G             180        27.785k    1.39616M              2.21082          2.28851k       3.19514G          2.90334M                    4.59742                     2.07951           228.851k    7.61113k   631.515k       760.949M/s    658.456   26.1878k   1.55926M         2.46908   1.26349k/s 1.97011G/s     2.90383M               4.59819                1.86231        100       126.349k/s [BEST: throughput=  1.45 GB/s doc_throughput=  2288 docs/s instructions=     2903341 cycles=     1396165 branch_miss=    9854 cache_miss=     180 cache_ref=     27785 items=       100 avg_time=    791459 ns]
partial_tweets<yyjson_insitu>/manual_time                 511042 ns       577128 ns         1382           6.923k           1.78746G          2.093k        14.402k    1.11976M              1.77313          2.83043k        3.1694G          2.90303M                    4.59693                     2.59255           283.043k    7.34578k   631.515k       1.15087G/s    131.825   12.7341k   1.23225M         1.95126   1.95679k/s 2.41124G/s     2.90329M               4.59734                 2.3561        100       195.679k/s [BEST: throughput=  1.79 GB/s doc_throughput=  2830 docs/s instructions=     2903030 cycles=     1119758 branch_miss=    6923 cache_miss=    2093 cache_ref=     14402 items=       100 avg_time=    511041 ns]
partial_tweets<sajson>/manual_time                        680079 ns       744647 ns         1030          10.314k           937.897M               0         13.42k    2.15005M              3.40459          1.48515k       3.19316G          5.87179M                    9.29794                       2.731           148.515k    10.7906k   631.515k       885.574M/s    1.69515   13.4759k   2.16958M         3.43552   1.47042k/s 3.19019G/s     5.87179M               9.29794                2.70642        100       147.042k/s [BEST: throughput=  0.94 GB/s doc_throughput=  1485 docs/s instructions=     5871791 cycles=     2150052 branch_miss=   10314 cache_miss=       0 cache_ref=     13420 items=       100 avg_time=    680078 ns]
partial_tweets<rapidjson>/manual_time                    2831057 ns      2900237 ns          247           29.76k           246.399M         12.437k        22.669k    8.18284M              12.9575           390.172       3.19271G          21.9145M                    34.7014                      2.6781           39.0172k    30.6088k   631.515k       212.733M/s    528.514   16.6152k   8.34272M         13.2106    353.225/s 2.94686G/s     21.9153M               34.7028                2.62688        100       35.3225k/s [BEST: throughput=  0.25 GB/s doc_throughput=   390 docs/s instructions=    21914453 cycles=     8182840 branch_miss=   29760 cache_miss=   12437 cache_ref=     22669 items=       100 avg_time=   2831056 ns]
partial_tweets<rapidjson_insitu>/manual_time             1765593 ns      1829393 ns          398          26.394k           390.546M             120        14.811k    5.16279M              8.17525           618.427       3.19281G          13.3442M                    21.1305                     2.58469           61.8427k    26.5137k   631.515k       341.109M/s    251.613   10.8148k    5.2325M         8.28563    566.382/s  2.9636G/s     13.3448M               21.1314                2.55037        100       56.6382k/s [BEST: throughput=  0.39 GB/s doc_throughput=   618 docs/s instructions=    13344197 cycles=     5162792 branch_miss=   26394 cache_miss=     120 cache_ref=     14811 items=       100 avg_time=   1765592 ns]
partial_tweets<nlohmann_json>/manual_time                9443183 ns      9532117 ns           75         153.484k           69.5944M              11         97.79k    28.9429M              45.8309           110.202       3.18958G          78.2154M                    123.854                      2.7024           11.0202k    164.421k   631.515k       63.7772M/s       37.8   135.826k   30.1175M         47.6908    105.896/s 3.18933G/s     78.7091M               124.635                 2.6134        100       10.5896k/s [BEST: throughput=  0.07 GB/s doc_throughput=   110 docs/s instructions=    78215429 cycles=    28942919 branch_miss=  153484 cache_miss=      11 cache_ref=     97790 items=       100 avg_time=   9443183 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 115145228 ns    121268418 ns            6         950.074k           399.761M        6.82855M       6.89553M    366.871M              7.97568           8.69068       3.18836G          1.16406G                    25.3062                     3.17293           8.69068M    951.374k   45.9988M       380.978M/s   6.82401M   6.89541M   367.124M         7.98118    8.68468/s 3.18836G/s     1.16406G               25.3062                3.17074      1000k       8.68468M/s [BEST: throughput=  0.40 GB/s doc_throughput=     8 docs/s instructions=  1164056370 cycles=   366871454 branch_miss=  950074 cache_miss= 6828553 cache_ref=   6895528 items=   1000000 avg_time= 115145227 ns]
large_random<simdjson_ondemand>/manual_time             78502707 ns     84571778 ns            9         909.354k           586.194M        3.51034M       3.57276M    250.228M              5.43987           12.7437       3.18882G          752.513M                    16.3594                     3.00731           12.7437M    909.965k   45.9988M       558.807M/s   3.52979M   3.57291M   250.303M         5.44152    12.7384/s 3.18847G/s     752.513M               16.3594                 3.0064      1000k       12.7384M/s [BEST: throughput=  0.59 GB/s doc_throughput=    12 docs/s instructions=   752512840 cycles=   250227587 branch_miss=  909354 cache_miss= 3510343 cache_ref=   3572760 items=   1000000 avg_time=  78502706 ns]
large_random<simdjson_ondemand_unordered>/manual_time   79184900 ns     85258701 ns            9         940.283k           581.338M        3.49199M       3.57332M    252.296M              5.48485           12.6381       3.18855G          751.513M                    16.3377                     2.97869           12.6381M    944.343k   45.9988M       553.993M/s   3.52048M    3.5732M   252.464M          5.4885    12.6287/s 3.18829G/s     751.513M               16.3377                2.97671      1000k       12.6287M/s [BEST: throughput=  0.58 GB/s doc_throughput=    12 docs/s instructions=   751512840 cycles=   252296321 branch_miss=  940283 cache_miss= 3491992 cache_ref=   3573315 items=   1000000 avg_time=  79184899 ns]
large_random<yyjson>/manual_time                       151004507 ns    157152860 ns            5          660.33k           305.043M        4.21382M       5.57348M    341.778M              7.43016           6.63156       2.26652G           866.68M                    18.8414                      2.5358           6.63156M    663.427k   45.9988M       290.507M/s   4.21139M   5.54027M   342.416M         7.44402    6.62232/s 2.26759G/s      866.68M               18.8414                2.53107      1000k       6.62232M/s [BEST: throughput=  0.31 GB/s doc_throughput=     6 docs/s instructions=   866679896 cycles=   341778045 branch_miss=  660330 cache_miss= 4213816 cache_ref=   5573476 items=   1000000 avg_time= 151004507 ns]
large_random<yyjson_insitu>/manual_time                124884707 ns    131011889 ns            6         660.561k           368.559M        3.49865M       4.81517M     299.41M              6.50909           8.01237       2.39899G          860.559M                    18.7083                     2.87418           8.01237M    662.917k   45.9988M       351.267M/s   3.49501M   4.81449M   299.581M          6.5128    8.00739/s 2.39886G/s     860.559M               18.7083                2.87254      1000k       8.00739M/s [BEST: throughput=  0.37 GB/s doc_throughput=     8 docs/s instructions=   860559365 cycles=   299410340 branch_miss=  660561 cache_miss= 3498649 cache_ref=   4815168 items=   1000000 avg_time= 124884706 ns]
large_random<sajson>/manual_time                       107533762 ns    113675127 ns            6         581.901k           428.678M        5.47075M        5.5772M    342.161M              7.43848           9.31933       3.18871G          1.13399G                    24.6526                      3.3142           9.31933M    582.006k   45.9988M       407.945M/s   5.47236M   5.57734M   342.894M         7.45442     9.2994/s 3.18871G/s     1.13399G               24.6526                3.30711      1000k        9.2994M/s [BEST: throughput=  0.43 GB/s doc_throughput=     9 docs/s instructions=  1133989156 cycles=   342160914 branch_miss=  581901 cache_miss= 5470750 cache_ref=   5577201 items=   1000000 avg_time= 107533761 ns]
large_random<rapidjson>/manual_time                    252954007 ns    259090510 ns            3         707.426k           188.101M         4.3338M       5.22429M    711.205M              15.4614           4.08926        2.9083G          2.02013G                     43.917                     2.84043           4.08926M    739.595k   45.9988M       173.422M/s     4.067M   5.16631M   715.928M         15.5641    3.95329/s 2.83027G/s     2.02014G               43.9172                 2.8217      1000k       3.95329M/s [BEST: throughput=  0.19 GB/s doc_throughput=     4 docs/s instructions=  2020126319 cycles=   711204904 branch_miss=  707426 cache_miss= 4333795 cache_ref=   5224286 items=   1000000 avg_time= 252954006 ns]
large_random<rapidjson_lossless>/manual_time           297129980 ns    303259909 ns            2          658.05k           158.065M        4.33817M       5.22389M    859.985M              18.6958           3.43629       2.95516G          2.48209G                      53.96                      2.8862           3.43629M    661.569k   45.9988M       147.639M/s    4.1339M   5.17933M   863.246M         18.7667    3.36553/s 2.90528G/s      2.4821G               53.9601                2.87531      1000k       3.36553M/s [BEST: throughput=  0.16 GB/s doc_throughput=     3 docs/s instructions=  2482093697 cycles=   859985481 branch_miss=  658050 cache_miss= 4338169 cache_ref=   5223893 items=   1000000 avg_time= 297129980 ns]
large_random<rapidjson_insitu>/manual_time             278835399 ns    284937641 ns            3         587.687k           169.797M        5.03324M        5.9441M     795.74M              17.2992           3.69133       2.93734G          1.75113G                     38.069                     2.20063           3.69133M    587.069k   45.9988M       157.325M/s   4.76492M   5.88174M   799.309M         17.3768    3.58635/s  2.8666G/s     1.75114G               38.0692                2.19081      1000k       3.58635M/s [BEST: throughput=  0.17 GB/s doc_throughput=     3 docs/s instructions=  1751126437 cycles=   795739838 branch_miss=  587687 cache_miss= 5033242 cache_ref=   5944101 items=   1000000 avg_time= 278835399 ns]
large_random<nlohmann_json>/manual_time               1455675660 ns   1461769595 ns            1         4.11732M           31.5996M         30.284M       31.0883M    4.62777G              100.606          0.686966       3.17912G          12.3806G                     269.15                     2.67527           686.966k    4.11732M   45.9988M       30.1357M/s    30.284M   31.0883M   4.62777G         100.606   0.686966/s 3.17912G/s     12.3806G                269.15                2.67527      1000k       686.966k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 12380552775 cycles=  4627774171 branch_miss= 4117320 cache_miss=30283997 cache_ref=  31088323 items=   1000000 avg_time=1455675660 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                       124626955 ns    143621506 ns            6         1081.59k           1.10287G        10.2514M       10.3191M    396.971M              2.89116           8.03224       3.18856G          1.23813G                    9.01737                     3.11895           4.21121M    1082.62k   137.305M       1050.69M/s   10.2483M   10.3191M   397.359M         2.89399    8.02395/s 3.18839G/s     1.23813G               9.01737                 3.1159   524.288k       4.20686M/s [BEST: throughput=  1.10 GB/s doc_throughput=     8 docs/s instructions=  1238129996 cycles=   396970572 branch_miss= 1081594 cache_miss=10251403 cache_ref=  10319097 items=    524288 avg_time= 124626954 ns]
kostya<simdjson_ondemand>/manual_time                   82800523 ns    101790780 ns            8         519.771k           1.66086G        6.43153M       6.47122M    263.583M              1.91969           12.0961       3.18833G          846.724M                    6.16674                     3.21237           6.34186M    520.293k   137.305M       1.54438G/s   6.44249M   6.47118M   263.994M         1.92268    12.0772/s 3.18832G/s     846.724M               6.16674                3.20736   524.288k       6.33194M/s [BEST: throughput=  1.66 GB/s doc_throughput=    12 docs/s instructions=   846723949 cycles=   263582650 branch_miss=  519771 cache_miss= 6431529 cache_ref=   6471220 items=    524288 avg_time=  82800522 ns]
kostya<yyjson>/manual_time                             229622261 ns    248698832 ns            3         414.328k           598.278M        8.50416M       9.88652M    499.492M              3.63783           4.35729       2.17644G          978.903M                     7.1294                     1.95979           2.28448M    414.558k   137.305M       570.259M/s   8.50315M   9.88486M   500.128M         3.64246    4.35498/s 2.17805G/s     978.903M                7.1294                 1.9573   524.288k       2.28326M/s [BEST: throughput=  0.60 GB/s doc_throughput=     4 docs/s instructions=   978902597 cycles=   499492497 branch_miss=  414328 cache_miss= 8504162 cache_ref=   9886519 items=    524288 avg_time= 229622261 ns]
kostya<yyjson_insitu>/manual_time                      151732909 ns    170738242 ns            5         411.244k           905.173M        6.36493M       7.77456M    372.435M              2.71247           6.59243       2.45525G          960.633M                    6.99635                     2.57933           3.45633M    411.584k   137.305M       862.992M/s   6.36509M   7.77176M   372.521M         2.71309    6.59053/s 2.45511G/s     960.633M               6.99635                2.57873   524.288k       3.45533M/s [BEST: throughput=  0.91 GB/s doc_throughput=     6 docs/s instructions=   960633137 cycles=   372435033 branch_miss=  411244 cache_miss= 6364932 cache_ref=   7774562 items=    524288 avg_time= 151732908 ns]
kostya<sajson>/manual_time                             163129448 ns    182140146 ns            4         355.106k           841.731M        8.51995M       8.53959M    520.145M              3.78825           6.13038       3.18869G          1.54442G                    11.2481                     2.96922           3.21408M    355.048k   137.305M       802.701M/s   8.48627M   8.54007M   520.167M          3.7884     6.1301/s 3.18867G/s     1.54442G               11.2481                 2.9691   524.288k       3.21394M/s [BEST: throughput=  0.84 GB/s doc_throughput=     6 docs/s instructions=  1544424224 cycles=   520145101 branch_miss=  355106 cache_miss= 8519950 cache_ref=   8539588 items=    524288 avg_time= 163129448 ns]
kostya<rapidjson>/manual_time                          330471632 ns    349520477 ns            2         1.38006M           418.968M        5.19763M       6.50034M    946.608M               6.8942           3.05137       2.88845G          2.74288G                    19.9766                     2.89759            1.5998M    1.31744M   137.305M       396.234M/s   5.07397M   6.46984M   946.799M         6.89559    3.02598/s 2.86499G/s     2.74288G               19.9766                2.89701   524.288k       1.58648M/s [BEST: throughput=  0.42 GB/s doc_throughput=     3 docs/s instructions=  2742882056 cycles=   946607896 branch_miss= 1380055 cache_miss= 5197625 cache_ref=   6500337 items=    524288 avg_time= 330471632 ns]
kostya<rapidjson_lossless>/manual_time                 355699323 ns    374684797 ns            2         1070.16k           389.905M        5.19871M       6.50507M    1025.75M              7.47059            2.8397       2.91282G          3.00974G                    21.9201                     2.93418           1.48882M    1074.06k   137.305M       368.132M/s   5.07602M   6.47505M   1028.45M         7.49023    2.81136/s 2.89134G/s     3.00974G               21.9201                2.92649   524.288k       1.47396M/s [BEST: throughput=  0.39 GB/s doc_throughput=     2 docs/s instructions=  3009735341 cycles=  1025749284 branch_miss= 1070160 cache_miss= 5198715 cache_ref=   6505068 items=    524288 avg_time= 355699323 ns]
kostya<rapidjson_insitu>/manual_time                   317915514 ns    336960990 ns            2         1008.56k           436.264M        7.32853M       8.65459M    906.835M              6.60453           3.17733       2.88132G          2.22722G                     16.221                     2.45604           1.66584M    1008.38k   137.305M       411.884M/s   7.20544M   8.62841M    908.52M          6.6168    3.14549/s 2.85774G/s     2.22722G                16.221                2.45148   524.288k       1.64914M/s [BEST: throughput=  0.44 GB/s doc_throughput=     3 docs/s instructions=  2227219491 cycles=   906834835 branch_miss= 1008562 cache_miss= 7328534 cache_ref=   8654590 items=    524288 avg_time= 317915514 ns]
kostya<nlohmann_json>/manual_time                     2170876154 ns   2189827002 ns            1         14.8748M           63.2487M        45.9518M       46.5946M    6.92375G               50.426          0.460644       3.18938G          17.2831G                    125.874                      2.4962            241.51k    14.8748M   137.305M       60.3186M/s   45.9518M   46.5946M   6.92375G          50.426   0.460644/s 3.18938G/s     17.2831G               125.874                 2.4962   524.288k        241.51k/s [BEST: throughput=  0.06 GB/s doc_throughput=     0 docs/s instructions= 17283074654 cycles=  6923745835 branch_miss=14874769 cache_miss=45951821 cache_ref=  46594643 items=    524288 avg_time=2170876154 ns]
distinct_user_id<simdjson_dom>/manual_time                415448 ns       494324 ns         1685            3.74k           1.52928G              80        34.549k    1.31879M              2.08829           2.4216k       3.19358G          4.30951M                    6.82408                     3.26778           278.484k    3.88761k   631.515k       1.41569G/s    78.1412   34.6975k   1.32555M         2.09901   2.40704k/s 3.19067G/s     4.30951M               6.82408                 3.2511        115        276.81k/s [BEST: throughput=  1.53 GB/s doc_throughput=  2421 docs/s instructions=     4309506 cycles=     1318788 branch_miss=    3740 cache_miss=      80 cache_ref=     34549 items=       115 avg_time=    415447 ns]
distinct_user_id<simdjson_ondemand>/manual_time           263894 ns       327058 ns         2651           1.809k           2.40732G               5         9.987k    837.918k              1.32684          3.81198k       3.19412G          2.93274M                    4.64398                     3.50004           438.377k    1.91733k   631.515k       2.22871G/s    5.48925   10.0887k   842.068k         1.33341    3.7894k/s 3.19093G/s     2.93274M               4.64398                3.48279        115        435.78k/s [BEST: throughput=  2.41 GB/s doc_throughput=  3811 docs/s instructions=     2932744 cycles=      837918 branch_miss=    1809 cache_miss=       5 cache_ref=      9987 items=       115 avg_time=    263894 ns]
distinct_user_id<yyjson>/manual_time                      684925 ns       774363 ns         1000           6.525k            1.5729G          7.108k        27.364k    1.28225M              2.03043          2.49068k       3.19367G          2.86149M                    4.53114                     2.23162           286.429k    7.36889k   631.515k       879.308M/s   2.27891k   26.3073k   1.47783M         2.34014   1.46001k/s 2.15766G/s     2.86168M               4.53146                 1.9364        115       167.902k/s [BEST: throughput=  1.57 GB/s doc_throughput=  2490 docs/s instructions=     2861486 cycles=     1282246 branch_miss=    6525 cache_miss=    7108 cache_ref=     27364 items=       115 avg_time=    684924 ns]
distinct_user_id<yyjson_insitu>/manual_time               506549 ns       582145 ns         1395           6.813k           1.82497G          1.482k        14.275k    1.10002M              1.74188          2.88982k       3.17887G          2.86097M                    4.53033                     2.60083            332.33k    7.41393k   631.515k       1.16108G/s    127.926   12.4811k   1.21815M         1.92894   1.97414k/s 2.40481G/s     2.86124M               4.53075                2.34883        115       227.027k/s [BEST: throughput=  1.82 GB/s doc_throughput=  2889 docs/s instructions=     2860973 cycles=     1100023 branch_miss=    6813 cache_miss=    1482 cache_ref=     14275 items=       115 avg_time=    506548 ns]
distinct_user_id<sajson>/manual_time                      674830 ns       746972 ns         1034          10.197k           944.791M               0         13.39k    2.13429M              3.37964          1.49607k       3.19305G          5.81023M                    9.20046                     2.72232           172.048k     10.679k   631.515k       892.461M/s    2.26499   13.4104k   2.15264M         3.40869   1.48185k/s 3.18989G/s     5.81023M               9.20046                2.69912        115       170.413k/s [BEST: throughput=  0.94 GB/s doc_throughput=  1496 docs/s instructions=     5810227 cycles=     2134293 branch_miss=   10197 cache_miss=       0 cache_ref=     13390 items=       115 avg_time=    674830 ns]
distinct_user_id<rapidjson>/manual_time                  2822016 ns      2899762 ns          249          29.814k           247.356M          9.797k        23.107k    8.15114M              12.9073           391.687       3.19269G          21.8422M                    34.5871                     2.67966            45.044k    31.0329k   631.515k       213.415M/s    967.562   17.3019k   8.33693M         13.2015    354.357/s 2.95425G/s     21.8431M               34.5884                2.62004        115        40.751k/s [BEST: throughput=  0.25 GB/s doc_throughput=   391 docs/s instructions=    21842241 cycles=     8151136 branch_miss=   29814 cache_miss=    9797 cache_ref=     23107 items=       115 avg_time=   2822015 ns]
distinct_user_id<rapidjson_insitu>/manual_time           1718199 ns      1790070 ns          432          25.987k           392.164M          7.096k        14.634k     5.1415M              8.14153            620.99       3.19282G          13.2775M                    21.0248                     2.58241           71.4138k    26.4372k   631.515k       350.518M/s   2.36082k   12.7615k   5.20291M         8.23878    582.005/s 3.02812G/s     13.2777M               21.0252                2.55198        115       66.9305k/s [BEST: throughput=  0.39 GB/s doc_throughput=   620 docs/s instructions=    13277461 cycles=     5141500 branch_miss=   25987 cache_miss=    7096 cache_ref=     14634 items=       115 avg_time=   1718199 ns]
distinct_user_id<nlohmann_json>/manual_time              8933531 ns      9024805 ns           81         127.582k           75.0799M              20        97.444k    26.8284M              42.4826           118.889       3.18959G          73.6532M                    116.629                     2.74534           13.6722k    142.714k   631.515k       67.4156M/s    39.7037   105.432k   28.4911M         45.1154    111.938/s 3.18923G/s     72.2836M               114.461                2.53706        115       12.8729k/s [BEST: throughput=  0.08 GB/s doc_throughput=   118 docs/s instructions=    73653185 cycles=    26828395 branch_miss=  127582 cache_miss=      20 cache_ref=     97444 items=       115 avg_time=   8933530 ns]
find_tweet<simdjson_dom>/manual_time                      398905 ns       474926 ns         1754           3.598k           1.59208G             111        30.102k    1.26698M              2.00625          2.52105k       3.19412G          4.22419M                    6.68897                     3.33406           2.52105k    3.68148k   631.515k       1.47439G/s    113.629   30.1878k   1.27286M         2.01556   2.50686k/s 3.19087G/s     4.22419M               6.68897                3.31867          1       2.50686k/s [BEST: throughput=  1.59 GB/s doc_throughput=  2521 docs/s instructions=     4224186 cycles=     1266978 branch_miss=    3598 cache_miss=     111 cache_ref=     30102 items=         1 avg_time=    398905 ns]
find_tweet<simdjson_ondemand>/manual_time                 202420 ns       268320 ns         3456             1038           3.13214G               0         7.634k    644.084k               1.0199          4.95973k       3.19448G          2.42698M                     3.8431                      3.7681           4.95973k     1095.91   631.515k       2.90557G/s   6.65509m   7.66689k   645.965k         1.02288   4.94023k/s 3.19122G/s     2.42698M                3.8431                3.75713          1       4.94023k/s [BEST: throughput=  3.13 GB/s doc_throughput=  4959 docs/s instructions=     2426975 cycles=      644084 branch_miss=    1038 cache_miss=       0 cache_ref=      7634 items=         1 avg_time=    202419 ns]
find_tweet<yyjson>/manual_time                            775210 ns       862831 ns         1084           9.516k           1.48778G             243        27.311k    1.35585M              2.14698           2.3559k       3.19425G           2.8006M                    4.43473                     2.06556            2.3559k    7.39231k   631.515k       776.899M/s    467.668   25.2193k   1.51161M         2.39363   1.28997k/s 1.94994G/s     2.80108M               4.43548                1.85304          1       1.28997k/s [BEST: throughput=  1.49 GB/s doc_throughput=  2355 docs/s instructions=     2800598 cycles=     1355853 branch_miss=    9516 cache_miss=     243 cache_ref=     27311 items=         1 avg_time=    775210 ns]
find_tweet<yyjson_insitu>/manual_time                     495391 ns       566735 ns         1414           6.789k            1.8642G          1.982k         13.13k    1077.04k              1.70548          2.95195k       3.17936G          2.80028M                    4.43422                     2.59998           2.95195k    7.21192k   631.515k       1.18723G/s     8.5884   10.8916k   1.18296M         1.87321   2.01861k/s 2.38793G/s     2.80054M               4.43464                 2.3674          1       2.01861k/s [BEST: throughput=  1.86 GB/s doc_throughput=  2951 docs/s instructions=     2800277 cycles=     1077036 branch_miss=    6789 cache_miss=    1982 cache_ref=     13130 items=         1 avg_time=    495390 ns]
find_tweet<sajson>/manual_time                            663038 ns       733537 ns         1055          10.008k           961.326M               1        12.662k    2.09771M              3.32171          1.52225k       3.19324G          5.71503M                    9.04972                     2.72442           1.52225k    10.5021k   631.515k       908.333M/s    3.90047   12.7765k   2.11525M         3.34948   1.50821k/s 3.19024G/s     5.71503M               9.04972                2.70183          1       1.50821k/s [BEST: throughput=  0.96 GB/s doc_throughput=  1522 docs/s instructions=     5715034 cycles=     2097707 branch_miss=   10008 cache_miss=       1 cache_ref=     12662 items=         1 avg_time=    663038 ns]
find_tweet<rapidjson>/manual_time                        2802733 ns      2875891 ns          250          29.349k           248.853M          11.89k        21.434k    8.10235M                12.83           394.057       3.19279G          21.7592M                    34.4556                     2.68554            394.057    30.5802k   631.515k       214.883M/s    675.952   14.6113k   8.27516M         13.1037    356.795/s 2.95253G/s     21.7598M               34.4565                2.62953          1        356.795/s [BEST: throughput=  0.25 GB/s doc_throughput=   394 docs/s instructions=    21759209 cycles=     8102353 branch_miss=   29349 cache_miss=   11890 cache_ref=     21434 items=         1 avg_time=   2802732 ns]
find_tweet<rapidjson_insitu>/manual_time                 1719720 ns      1788133 ns          431          26.227k           390.618M          2.851k        13.523k    5.16179M              8.17367           618.542       3.19279G          13.1992M                    20.9008                     2.55709            618.542    26.3159k   631.515k       350.208M/s   2.19403k   10.1988k   5.21029M         8.25045     581.49/s 3.02973G/s     13.1994M               20.9012                2.53334          1         581.49/s [BEST: throughput=  0.39 GB/s doc_throughput=   618 docs/s instructions=    13199155 cycles=     5161795 branch_miss=   26227 cache_miss=    2851 cache_ref=     13523 items=         1 avg_time=   1719719 ns]
find_tweet<nlohmann_json>/manual_time                    7595421 ns      7684175 ns           96         102.886k           88.5474M             967        77.051k    22.7512M              36.0263           140.214       3.19004G          63.6599M                    100.805                     2.79809            140.214    116.505k   631.515k       79.2925M/s    33.4375   81.4982k   24.2235M         38.3577    131.658/s 3.18922G/s     62.3003M               98.6522                 2.5719          1        131.658/s [BEST: throughput=  0.09 GB/s doc_throughput=   140 docs/s instructions=    63659851 cycles=    22751174 branch_miss=  102886 cache_miss=     967 cache_ref=     77051 items=         1 avg_time=   7595420 ns]
top_tweet<simdjson_dom>/manual_time                       406055 ns       486749 ns         1723           3.621k           1.56299G               2        32.327k    1.29039M              2.04333          2.47498k        3.1937G          4.26107M                    6.74738                     3.30216           2.47498k    3.75426k   631.515k       1.44843G/s    2.06094   32.4051k   1.29555M         2.05149   2.46272k/s 3.19058G/s     4.26107M               6.74738                3.28901          1       2.46272k/s [BEST: throughput=  1.56 GB/s doc_throughput=  2474 docs/s instructions=     4261074 cycles=     1290391 branch_miss=    3621 cache_miss=       2 cache_ref=     32327 items=         1 avg_time=    406055 ns]
top_tweet<simdjson_ondemand>/manual_time                  260806 ns       328103 ns         2684            1.75k           2.43952G               1        10.242k    826.886k              1.30937          3.86296k       3.19423G          2.95277M                     4.6757                     3.57096           3.86296k    1.92538k   631.515k        2.2551G/s    1.01416   10.1838k   832.224k         1.31782   3.83427k/s 3.19097G/s     2.95278M                4.6757                3.54805          1       3.83427k/s [BEST: throughput=  2.44 GB/s doc_throughput=  3862 docs/s instructions=     2952775 cycles=      826886 branch_miss=    1750 cache_miss=       1 cache_ref=     10242 items=         1 avg_time=    260805 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time     272076 ns       340137 ns         2573           2.077k           2.33738G               5        10.856k    863.236k              1.36693          3.70122k       3.19503G          3.17845M                    5.03306                     3.68202           3.70122k    2.20769k   631.515k       2.16169G/s    4.69413     10.89k   868.199k         1.37479   3.67544k/s 3.19101G/s     3.17845M               5.03306                3.66097          1       3.67544k/s [BEST: throughput=  2.34 GB/s doc_throughput=  3701 docs/s instructions=     3178453 cycles=      863236 branch_miss=    2077 cache_miss=       5 cache_ref=     10856 items=         1 avg_time=    272076 ns]
top_tweet<yyjson>/manual_time                             780604 ns       871702 ns         1073            9.84k           1.46595G             194        27.386k    1.37627M              2.17931          2.32132k       3.19476G          2.82787M                    4.47791                     2.05474           2.32132k    7.55325k   631.515k       771.531M/s    478.868   25.5603k   1.52913M         2.42136   1.28106k/s  1.9589G/s     2.82855M                 4.479                1.84978          1       1.28106k/s [BEST: throughput=  1.47 GB/s doc_throughput=  2321 docs/s instructions=     2827869 cycles=     1376269 branch_miss=    9840 cache_miss=     194 cache_ref=     27386 items=         1 avg_time=    780603 ns]
top_tweet<yyjson_insitu>/manual_time                      501726 ns       577683 ns         1000           7.274k            1.8378G             145        14.575k    1097.48k              1.73785          2.91015k       3.19382G          2.82755M                     4.4774                     2.57641           2.91015k    7.31921k   631.515k       1.17224G/s      88.68   11.8502k   1.20385M         1.90629   1.99312k/s 2.39942G/s     2.82781M               4.47782                2.34897          1       1.99312k/s [BEST: throughput=  1.84 GB/s doc_throughput=  2910 docs/s instructions=     2827547 cycles=     1097477 branch_miss=    7274 cache_miss=     145 cache_ref=     14575 items=         1 avg_time=    501725 ns]
top_tweet<sajson>/manual_time                             667434 ns       742114 ns         1047          10.256k           954.504M               2        13.123k    2.11266M              3.34538          1.51145k       3.19317G          5.74503M                    9.09721                     2.71934           1.51145k    10.6264k   631.515k        902.35M/s    3.59312   13.2707k   2.12918M         3.37154   1.49827k/s 3.19009G/s     5.74503M               9.09721                2.69824          1       1.49827k/s [BEST: throughput=  0.95 GB/s doc_throughput=  1511 docs/s instructions=     5745026 cycles=     2112655 branch_miss=   10256 cache_miss=       2 cache_ref=     13123 items=         1 avg_time=    667434 ns]
top_tweet<rapidjson>/manual_time                         2810947 ns      2889161 ns          250          29.942k           248.318M             162        22.552k    8.11957M              12.8573            393.21       3.19269G          21.8177M                    34.5482                     2.68706             393.21    30.7402k   631.515k       214.255M/s    833.944   15.7533k   8.30218M         13.1464    355.752/s 2.95352G/s     21.8186M               34.5497                2.62806          1        355.752/s [BEST: throughput=  0.25 GB/s doc_throughput=   393 docs/s instructions=    21817737 cycles=     8119567 branch_miss=   29942 cache_miss=     162 cache_ref=     22552 items=         1 avg_time=   2810946 ns]
top_tweet<rapidjson_insitu>/manual_time                  1707804 ns      1781270 ns          432          25.806k            393.45M          6.993k        14.269k     5.1246M              8.11477           623.025       3.19275G          13.2536M                     20.987                     2.58628            623.025    26.2258k   631.515k       352.652M/s   2.30614k   11.4382k   5.17246M         8.19056    585.547/s 3.02872G/s     13.2539M               20.9874                2.56239          1        585.547/s [BEST: throughput=  0.39 GB/s doc_throughput=   623 docs/s instructions=    13253630 cycles=     5124597 branch_miss=   25806 cache_miss=    6993 cache_ref=     14269 items=         1 avg_time=   1707803 ns]
top_tweet<nlohmann_json>/manual_time                    10525584 ns     10617504 ns           67          195.38k            60.352M              14       163.158k    33.3664M              52.8355           95.5671       3.18873G          85.8535M                    135.948                     2.57305            95.5671    198.968k   631.515k       57.2186M/s    65.5672   164.054k   33.5687M         53.1558    95.0066/s 3.18925G/s     86.1863M               136.475                2.56746          1        95.0066/s [BEST: throughput=  0.06 GB/s doc_throughput=    95 docs/s instructions=    85853479 cycles=    33366411 branch_miss=  195380 cache_miss=      14 cache_ref=    163158 items=         1 avg_time=  10525583 ns]
