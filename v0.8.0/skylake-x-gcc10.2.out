run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-gcc10.2.json 
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake ..
-- The CXX compiler identification is GNU 10.2.0
-- The C compiler identification is GNU 10.2.0
-- Check for working CXX compiler: /usr/bin/g++-10
-- Check for working CXX compiler: /usr/bin/g++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/gcc-10
-- Check for working C compiler: /usr/bin/gcc-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Failed
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Failed
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-gcc10.2.json --benchmark_out_format=json
2021-01-23 04:31:15
Running benchmark/bench_ondemand
Run on (4 X 3200 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 1024 KiB (x4)
  L3 Unified 8448 KiB (x1)
Load Average: 1.04, 0.97, 0.63
***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.
simdjson::dom implementation:      haswell
simdjson::ondemand implementation: fallback
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                  302637 ns       369725 ns         2310           3.825k           2.10142G               0        33.306k    959.762k              1.51978          3.32759k       3.19369G          2.96251M                    4.69112                     3.08671           332.759k     3.9831k   631.515k        1.9434G/s   0.446753   33.3116k   965.696k         1.52917   3.30428k/s 3.19093G/s     2.96251M               4.69112                3.06775        100       330.428k/s [BEST: throughput=  2.10 GB/s doc_throughput=  3327 docs/s instructions=     2962511 cycles=      959762 branch_miss=    3825 cache_miss=       0 cache_ref=     33306 items=       100 avg_time=    302637 ns]
partial_tweets<simdjson_ondemand>/manual_time             219233 ns       272476 ns         3198           2.315k           2.90453G               0        11.186k    694.588k              1.09988          4.59931k       3.19462G           2.4602M                    3.89571                     3.54195           459.931k    2.45086k   631.515k       2.68274G/s  0.0528455   11.2576k   699.669k         1.10792   4.56136k/s 3.19144G/s      2.4602M               3.89571                3.51623        100       456.136k/s [BEST: throughput=  2.90 GB/s doc_throughput=  4599 docs/s instructions=     2460197 cycles=      694588 branch_miss=    2315 cache_miss=       0 cache_ref=     11186 items=       100 avg_time=    219232 ns]
partial_tweets<yyjson>/manual_time                        859434 ns       935658 ns          817           9.991k           1.24308G             264        27.731k    1.62253M              2.56927          1.96841k       3.19381G          2.90846M                    4.60553                     1.79255           196.841k    7.79808k   631.515k       700.763M/s    514.741   23.2607k   1.78715M         2.82993   1.16356k/s 2.07945G/s     2.90915M               4.60663                1.62782        100       116.356k/s [BEST: throughput=  1.24 GB/s doc_throughput=  1968 docs/s instructions=     2908461 cycles=     1622531 branch_miss=    9991 cache_miss=     264 cache_ref=     27731 items=       100 avg_time=    859433 ns]
partial_tweets<yyjson_insitu>/manual_time                 587464 ns       646419 ns         1200           7.699k           1.47074G             137        14.735k    1.37132M              2.17148          2.32891k       3.19369G          2.90835M                    4.60536                     2.12084           232.891k    7.57267k   631.515k       1025.19M/s      63.92   8.59116k    1.4794M         2.34261   1.70223k/s 2.51828G/s     2.90861M               4.60577                1.96608        100       170.223k/s [BEST: throughput=  1.47 GB/s doc_throughput=  2328 docs/s instructions=     2908351 cycles=     1371323 branch_miss=    7699 cache_miss=     137 cache_ref=     14735 items=       100 avg_time=    587463 ns]
partial_tweets<sajson>/manual_time                        629200 ns       690584 ns         1111          10.989k           1016.71M               1        13.406k    1.98353M               3.1409          1.60995k       3.19339G          6.05185M                    9.58306                     3.05105           160.995k    11.5927k   631.515k       957.184M/s     2.9739   13.4321k   2.00733M         3.17859   1.58932k/s 3.19029G/s     6.05185M               9.58306                3.01488        100       158.932k/s [BEST: throughput=  1.02 GB/s doc_throughput=  1609 docs/s instructions=     6051847 cycles=     1983528 branch_miss=   10989 cache_miss=       1 cache_ref=     13406 items=       100 avg_time=    629199 ns]
partial_tweets<rapidjson>/manual_time                    1729943 ns      1791478 ns          406          28.443k           433.795M             700        22.944k    4.64824M              7.36045           686.912       3.19293G          13.4099M                    21.2345                     2.88495           68.6912k    28.6417k   631.515k       348.138M/s    314.483   11.2999k   4.84292M         7.66873    578.054/s 2.79947G/s     13.4108M               21.2358                2.76915        100       57.8054k/s [BEST: throughput=  0.43 GB/s doc_throughput=   686 docs/s instructions=    13409914 cycles=     4648236 branch_miss=   28443 cache_miss=     700 cache_ref=     22944 items=       100 avg_time=   1729942 ns]
partial_tweets<rapidjson_insitu>/manual_time             1155805 ns      1214952 ns          608          25.302k           632.404M             163        14.576k    3.18849M              5.04896           1001.41       3.19298G          9.75495M                    15.4469                     3.05942           100.141k    25.4688k   631.515k       521.074M/s     162.38   9.18041k   3.29289M         5.21428    865.198/s   2.849G/s     9.75555M               15.4479                2.96261        100       86.5198k/s [BEST: throughput=  0.63 GB/s doc_throughput=  1001 docs/s instructions=     9754951 cycles=     3188494 branch_miss=   25302 cache_miss=     163 cache_ref=     14576 items=       100 avg_time=   1155805 ns]
partial_tweets<nlohmann_json>/manual_time                9214323 ns      9300009 ns           77         139.636k           71.8727M              34        98.247k    28.0285M              44.3829            113.81       3.18992G          71.2142M                    112.767                     2.54078            11.381k    154.475k   631.515k       65.3612M/s    40.4545   135.708k   29.3869M         46.5339    108.527/s 3.18926G/s     71.9098M               113.869                2.44701        100       10.8527k/s [BEST: throughput=  0.07 GB/s doc_throughput=   113 docs/s instructions=    71214199 cycles=    28028488 branch_miss=  139636 cache_miss=      34 cache_ref=     98247 items=       100 avg_time=   9214322 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 103995987 ns    109911593 ns            7         868.037k           443.576M        6.76825M       6.89483M    330.709M              7.18952           9.64321        3.1891G          983.113M                    21.3726                     2.97274           9.64321M     867.75k   45.9988M       421.823M/s   6.80538M   6.89498M    331.62M         7.20932    9.61576/s 3.18878G/s     983.113M               21.3726                2.96458      1000k       9.61576M/s [BEST: throughput=  0.44 GB/s doc_throughput=     9 docs/s instructions=   983112711 cycles=   330709261 branch_miss=  868037 cache_miss= 6768249 cache_ref=   6894827 items=   1000000 avg_time= 103995987 ns]
large_random<simdjson_ondemand>/manual_time             66535487 ns     72454162 ns           11         880.411k           692.714M        3.48241M       3.57317M    211.782M              4.60407           15.0594       3.18931G           642.49M                    13.9675                     3.03374           15.0594M    885.789k   45.9988M       659.315M/s   3.50759M   3.57324M   212.158M         4.61226    15.0296/s 3.18865G/s      642.49M               13.9675                3.02835      1000k       15.0296M/s [BEST: throughput=  0.69 GB/s doc_throughput=    15 docs/s instructions=   642489799 cycles=   211781763 branch_miss=  880411 cache_miss= 3482405 cache_ref=   3573169 items=   1000000 avg_time=  66535487 ns]
large_random<simdjson_ondemand_unordered>/manual_time   70045220 ns     75992546 ns           10         871.538k           657.131M        3.49782M       3.57328M    223.234M              4.85305           14.2858       3.18909G           646.49M                    14.0545                     2.89601           14.2858M    870.378k   45.9988M       626.279M/s   3.51402M   3.57323M    223.34M         4.85536    14.2765/s 3.18852G/s      646.49M               14.0545                2.89464      1000k       14.2765M/s [BEST: throughput=  0.66 GB/s doc_throughput=    14 docs/s instructions=   646489804 cycles=   223234440 branch_miss=  871538 cache_miss= 3497823 cache_ref=   3573282 items=   1000000 avg_time=  70045220 ns]
large_random<yyjson>/manual_time                       156917529 ns    162850829 ns            4         656.346k           293.337M        4.20012M       4.39294M    360.951M              7.84698           6.37706       2.30181G          944.149M                    20.5255                     2.61572           6.37706M    660.053k   45.9988M        279.56M/s   4.20072M   4.38849M   361.323M         7.85506    6.37277/s 2.30263G/s     944.149M               20.5255                2.61303      1000k       6.37277M/s [BEST: throughput=  0.29 GB/s doc_throughput=     6 docs/s instructions=   944149424 cycles=   360951406 branch_miss=  656346 cache_miss= 4200121 cache_ref=   4392944 items=   1000000 avg_time= 156917529 ns]
large_random<yyjson_insitu>/manual_time                131132064 ns    137046754 ns            5         659.773k           350.986M        3.48311M        3.6684M    319.013M              6.93525           7.63032       2.43417G          938.029M                    20.3925                     2.94041           7.63032M    659.135k   45.9988M       334.532M/s   3.48346M   3.67144M   319.229M         6.93994     7.6259/s 2.43441G/s     938.029M               20.3925                2.93842      1000k        7.6259M/s [BEST: throughput=  0.35 GB/s doc_throughput=     7 docs/s instructions=   938028654 cycles=   319013075 branch_miss=  659773 cache_miss= 3483108 cache_ref=   3668403 items=   1000000 avg_time= 131132064 ns]
large_random<sajson>/manual_time                       109799317 ns    115730923 ns            6          587.04k           420.315M        5.45496M       5.57715M    349.033M              7.58789           9.13753        3.1893G          1099.99M                    23.9134                     3.15152           9.13753M    587.403k   45.9988M       399.528M/s    5.4792M   5.57728M   350.142M         7.61199    9.10752/s 3.18893G/s     1099.99M               23.9134                3.14154      1000k       9.10752M/s [BEST: throughput=  0.42 GB/s doc_throughput=     9 docs/s instructions=  1099987399 cycles=   349033491 branch_miss=  587040 cache_miss= 5454958 cache_ref=   5577148 items=   1000000 avg_time= 109799317 ns]
large_random<rapidjson>/manual_time                    205966460 ns    211916320 ns            4         649.305k           233.928M        4.36093M       4.90256M    559.689M              12.1675           5.08553       2.84631G          1.65913G                    36.0689                     2.96437           5.08553M    644.149k   45.9988M       212.985M/s   4.06502M   4.67461M    564.91M          12.281    4.85516/s 2.74273G/s     1.65914G               36.0691                2.93699      1000k       4.85516M/s [BEST: throughput=  0.23 GB/s doc_throughput=     5 docs/s instructions=  1659125555 cycles=   559688864 branch_miss=  649305 cache_miss= 4360928 cache_ref=   4902564 items=   1000000 avg_time= 205966460 ns]
large_random<rapidjson_lossless>/manual_time           236633312 ns    242568196 ns            3         594.486k           201.847M        4.35589M       4.91339M    658.954M              14.3255           4.38809       2.89155G          2.02209G                    43.9597                     3.06864           4.38809M     595.93k   45.9988M       185.383M/s    4.0954M   4.71048M   664.907M         14.4549    4.22595/s 2.80986G/s      2.0221G               43.9599                3.04118      1000k       4.22595M/s [BEST: throughput=  0.20 GB/s doc_throughput=     4 docs/s instructions=  2022092258 cycles=   658954426 branch_miss=  594486 cache_miss= 4355886 cache_ref=   4913387 items=   1000000 avg_time= 236633312 ns]
large_random<rapidjson_insitu>/manual_time             191340450 ns    197298147 ns            4         584.891k            253.19M        5.04929M       5.63165M     511.84M              11.1272           5.50427       2.81731G          1.49112G                    32.4166                     2.91326           5.50427M    584.648k   45.9988M       229.266M/s   4.78015M   5.40086M   518.094M         11.2632    5.22629/s 2.70771G/s     1.49113G               32.4168                2.87811      1000k       5.22629M/s [BEST: throughput=  0.25 GB/s doc_throughput=     5 docs/s instructions=  1491122818 cycles=   511839795 branch_miss=  584891 cache_miss= 5049295 cache_ref=   5631652 items=   1000000 avg_time= 191340449 ns]
large_random<nlohmann_json>/manual_time               1429538541 ns   1435441621 ns            1         5.64235M           32.1774M        30.4089M       30.9096M    4.54453G              98.7967          0.699526       3.17902G          11.9494G                    259.776                      2.6294           699.526k    5.64235M   45.9988M       30.6867M/s   30.4089M   30.9096M   4.54453G         98.7967   0.699526/s 3.17902G/s     11.9494G               259.776                 2.6294      1000k       699.526k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 11949361461 cycles=  4544527393 branch_miss= 5642349 cache_miss=30408945 cache_ref=  30909579 items=   1000000 avg_time=1429538541 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                        97468318 ns    115752287 ns            7         463.376k           1.41187G        10.2105M       10.3158M    310.104M               2.2585           10.2827       3.18871G          945.501M                    6.88614                     3.04898           5.39111M    462.517k   137.305M       1.31197G/s   10.2456M   10.3158M   310.771M         2.26336    10.2597/s 3.18843G/s     945.501M               6.88614                3.04244   524.288k       5.37906M/s [BEST: throughput=  1.41 GB/s doc_throughput=    10 docs/s instructions=   945501413 cycles=   310103875 branch_miss=  463376 cache_miss=10210472 cache_ref=  10315800 items=    524288 avg_time=  97468318 ns]
kostya<simdjson_ondemand>/manual_time                   65204197 ns     83461915 ns           11         512.051k           2.10815G        6.45111M       6.47139M    207.675M              1.51251           15.3538       3.18859G          676.213M                     4.9249                     3.25611            8.0498M    512.042k   137.305M       1.96115G/s   6.44107M   6.47176M   207.906M         1.51419    15.3364/s 3.18854G/s     676.213M                4.9249                 3.2525   524.288k       8.04071M/s [BEST: throughput=  2.11 GB/s doc_throughput=    15 docs/s instructions=   676213317 cycles=   207674923 branch_miss=  512051 cache_miss= 6451109 cache_ref=   6471385 items=    524288 avg_time=  65204197 ns]
kostya<yyjson>/manual_time                             264043606 ns    282394585 ns            3         413.607k           520.286M        8.48413M       8.71148M    610.699M              4.44776           3.78927       2.31411G          984.045M                    7.16686                     1.61134           1.98667M    413.938k   137.305M       495.919M/s   8.48613M   8.71591M   610.825M         4.44867    3.78725/s 2.31335G/s     984.045M               7.16686                1.61101   524.288k       1.98561M/s [BEST: throughput=  0.52 GB/s doc_throughput=     3 docs/s instructions=   984045280 cycles=   610699278 branch_miss=  413607 cache_miss= 8484133 cache_ref=   8711478 items=    524288 avg_time= 264043606 ns]
kostya<yyjson_insitu>/manual_time                      186739528 ns    205102885 ns            4         412.348k           735.376M        6.34765M       6.59148M    484.031M              3.52523           5.35578       2.59237G          965.775M                     7.0338                     1.99528           2.80797M    413.077k   137.305M       701.213M/s   6.34661M   6.59696M   484.085M         3.52562    5.35505/s  2.5923G/s     965.775M                7.0338                1.99505   524.288k       2.80759M/s [BEST: throughput=  0.74 GB/s doc_throughput=     5 docs/s instructions=   965775285 cycles=   484031062 branch_miss=  412348 cache_miss= 6347652 cache_ref=   6591485 items=    524288 avg_time= 186739528 ns]
kostya<sajson>/manual_time                             160535658 ns    178853833 ns            4         450.293k           857.867M        8.48543M       8.54698M    510.447M              3.71761           6.24789       3.18922G          1.62034G                     11.801                     3.17436           3.27569M    449.035k   137.305M       815.671M/s   8.49666M   8.54706M   511.954M         3.72859    6.22915/s 3.18904G/s     1.62034G                11.801                3.16502   524.288k       3.26587M/s [BEST: throughput=  0.86 GB/s doc_throughput=     6 docs/s instructions=  1620343059 cycles=   510446882 branch_miss=  450293 cache_miss= 8485431 cache_ref=   8546980 items=    524288 avg_time= 160535658 ns]
kostya<rapidjson>/manual_time                          280334614 ns    298631214 ns            3         1.14464M           497.658M        5.23641M        5.7729M    783.575M              5.70682           3.62447       2.84005G           2.2966G                    16.7263                     2.93092           1.90027M    1.14274M   137.305M         467.1M/s   5.07552M   5.63839M   786.351M         5.72704    3.56717/s 2.80505G/s      2.2966G               16.7263                2.92058   524.288k       1.87022M/s [BEST: throughput=  0.50 GB/s doc_throughput=     3 docs/s instructions=  2296598424 cycles=   783575342 branch_miss= 1144637 cache_miss= 5236407 cache_ref=   5772897 items=    524288 avg_time= 280334614 ns]
kostya<rapidjson_lossless>/manual_time                 297201093 ns    315506764 ns            2         1.12032M           467.254M        5.24029M         5.787M    840.198M              6.11921           3.40304       2.85922G          2.50316G                    18.2307                     2.97925           1.78417M    1.11144M   137.305M       440.591M/s   5.11697M     5.686M    842.38M          6.1351    3.36473/s 2.83438G/s     2.50316G               18.2307                2.97154   524.288k       1.76409M/s [BEST: throughput=  0.47 GB/s doc_throughput=     3 docs/s instructions=  2503159363 cycles=   840198129 branch_miss= 1120323 cache_miss= 5240291 cache_ref=   5786996 items=    524288 avg_time= 297201092 ns]
kostya<rapidjson_insitu>/manual_time                   263045371 ns    281382727 ns            3         994.137k           530.926M        7.38121M        7.9144M    728.382M              5.30485           3.86676       2.81648G          2.03014G                    14.7857                      2.7872            2.0273M    994.329k   137.305M       497.801M/s   7.21358M   7.78037M   731.379M         5.32667    3.80163/s 2.78043G/s     2.03015G               14.7857                2.77578   524.288k       1.99315M/s [BEST: throughput=  0.53 GB/s doc_throughput=     3 docs/s instructions=  2030143973 cycles=   728381983 branch_miss=  994137 cache_miss= 7381212 cache_ref=   7914402 items=    524288 avg_time= 263045370 ns]
kostya<nlohmann_json>/manual_time                     1944400835 ns   1962596589 ns            1         3.77881M           70.6156M        45.4584M       46.0072M    6.20083G               45.161          0.514297       3.18907G           15.147G                    110.317                     2.44275            269.64k    3.77881M   137.305M       67.3443M/s   45.4584M   46.0072M   6.20083G          45.161   0.514297/s 3.18907G/s      15.147G               110.317                2.44275   524.288k        269.64k/s [BEST: throughput=  0.07 GB/s doc_throughput=     0 docs/s instructions= 15147049751 cycles=  6200826484 branch_miss= 3778806 cache_miss=45458360 cache_ref=  46007243 items=    524288 avg_time=1944400835 ns]
distinct_user_id<simdjson_dom>/manual_time                297562 ns       373704 ns         2351           4.045k           2.13783G               5        33.458k    943.414k              1.49389          3.38524k       3.19368G          2.90344M                    4.59757                     3.07758           389.303k    4.15378k   631.515k       1.97654G/s    3.58996     33.51k    949.43k         1.50342   3.36064k/s 3.19069G/s     2.90344M               4.59757                3.05808        115       386.474k/s [BEST: throughput=  2.14 GB/s doc_throughput=  3385 docs/s instructions=     2903436 cycles=      943414 branch_miss=    4045 cache_miss=       5 cache_ref=     33458 items=       115 avg_time=    297562 ns]
distinct_user_id<simdjson_ondemand>/manual_time           211308 ns       272749 ns         3311           2.001k            3.0118G               0         9.616k    669.978k              1.06091          4.76917k       3.19524G          2.15108M                    3.40623                     3.21068           548.455k    2.14455k   631.515k       2.78336G/s   0.051042    9.7615k   674.414k         1.06793   4.73244k/s 3.19163G/s     2.15108M               3.40623                3.18956        115        544.23k/s [BEST: throughput=  3.01 GB/s doc_throughput=  4769 docs/s instructions=     2151083 cycles=      669978 branch_miss=    2001 cache_miss=       0 cache_ref=      9616 items=       115 avg_time=    211307 ns]
distinct_user_id<yyjson>/manual_time                      757533 ns       843391 ns         1000           6.967k           1.32832G          7.167k        26.044k    1.51817M              2.40402          2.10339k       3.19331G          2.87481M                    4.55224                     1.89359            241.89k    7.68541k   631.515k       795.028M/s   2.22296k   24.3524k   1.71569M         2.71679   1.32007k/s 2.26485G/s     2.87529M               4.55301                1.67588        115       151.809k/s [BEST: throughput=  1.33 GB/s doc_throughput=  2103 docs/s instructions=     2874806 cycles=     1518174 branch_miss=    6967 cache_miss=    7167 cache_ref=     26044 items=       115 avg_time=    757532 ns]
distinct_user_id<yyjson_insitu>/manual_time               585799 ns       654531 ns         1205           7.281k           1.48666G          1.382k        13.665k    1.35112M              2.13949          2.35412k       3.18071G          2.87458M                    4.55188                     2.12755           270.724k    7.70114k   631.515k        1028.1M/s    67.3004   8.71027k   1.47408M          2.3342   1.70707k/s 2.51636G/s     2.87484M               4.55229                1.95026        115       196.313k/s [BEST: throughput=  1.49 GB/s doc_throughput=  2354 docs/s instructions=     2874579 cycles=     1351123 branch_miss=    7281 cache_miss=    1382 cache_ref=     13665 items=       115 avg_time=    585799 ns]
distinct_user_id<sajson>/manual_time                      622993 ns       692044 ns         1123          10.897k           1028.37M              41        13.473k      1.961M              3.10523          1.62842k       3.19333G          5.98431M                    9.47612                     3.05167           187.268k    11.6041k   631.515k       966.719M/s    47.1986   13.5387k   1.98764M         3.14742   1.60515k/s 3.19047G/s     5.98431M               9.47612                3.01076        115       184.593k/s [BEST: throughput=  1.03 GB/s doc_throughput=  1628 docs/s instructions=     5984313 cycles=     1960999 branch_miss=   10897 cache_miss=      41 cache_ref=     13473 items=       115 avg_time=    622993 ns]
distinct_user_id<rapidjson>/manual_time                  1752554 ns      1822149 ns          403          28.423k           430.901M          7.035k        22.934k    4.67939M              7.40978            682.33       3.19289G          13.3505M                    21.1405                     2.85305           78.4679k    28.4817k   631.515k       343.647M/s    582.687   12.0545k   4.92902M         7.80507    570.596/s 2.81248G/s     13.3512M               21.1415                2.70869        115       65.6185k/s [BEST: throughput=  0.43 GB/s doc_throughput=   682 docs/s instructions=    13350530 cycles=     4679390 branch_miss=   28423 cache_miss=    7035 cache_ref=     22934 items=       115 avg_time=   1752553 ns]
distinct_user_id<rapidjson_insitu>/manual_time           1132278 ns      1200223 ns          697          25.406k           635.209M              44        14.798k    3.17453M              5.02685           1005.85        3.1931G          9.70594M                    15.3693                     3.05744           115.673k    25.4781k   631.515k       531.901M/s   1.23233k    11.065k   3.27639M         5.18815    883.176/s 2.89363G/s     9.70648M               15.3701                2.96255        115       101.565k/s [BEST: throughput=  0.64 GB/s doc_throughput=  1005 docs/s instructions=     9705945 cycles=     3174534 branch_miss=   25406 cache_miss=      44 cache_ref=     14798 items=       115 avg_time=   1132277 ns]
distinct_user_id<nlohmann_json>/manual_time              8830881 ns      8919723 ns           84         115.682k           77.9338M             986       100.061k     25.833M              40.9065           123.408         3.188G          66.6622M                    105.559                      2.5805           14.1919k    139.934k   631.515k       68.1993M/s     30.381   106.535k   28.1647M         44.5987    113.239/s 3.18934G/s     65.2503M               103.323                2.31674        115       13.0225k/s [BEST: throughput=  0.08 GB/s doc_throughput=   123 docs/s instructions=    66662196 cycles=    25833048 branch_miss=  115682 cache_miss=     986 cache_ref=    100061 items=       115 avg_time=   8830881 ns]
find_tweet<simdjson_dom>/manual_time                      282389 ns       355635 ns         2478           3.674k           2.25428G              73        29.701k    894.873k              1.41703          3.56963k       3.19437G           2.8224M                    4.46925                     3.15396           3.56963k    3.83864k   631.515k       2.08274G/s    76.3325   29.8401k   901.227k         1.42709   3.54121k/s 3.19143G/s      2.8224M               4.46925                3.13172          1       3.54121k/s [BEST: throughput=  2.25 GB/s doc_throughput=  3569 docs/s instructions=     2822396 cycles=      894873 branch_miss=    3674 cache_miss=      73 cache_ref=     29701 items=         1 avg_time=    282389 ns]
find_tweet<simdjson_ondemand>/manual_time                 133642 ns       195980 ns         5216              929            4.7566G               0           7.7k    424.167k             0.671666          7.53205k       3.19485G          1.50673M                     2.3859                     3.55221           7.53205k     1005.27   631.515k       4.40089G/s   4.79294m   7.65369k   426.645k         0.67559   7.48268k/s 3.19245G/s     1.50673M                2.3859                3.53158          1       7.48268k/s [BEST: throughput=  4.76 GB/s doc_throughput=  7532 docs/s instructions=     1506730 cycles=      424167 branch_miss=     929 cache_miss=       0 cache_ref=      7700 items=         1 avg_time=    133641 ns]
find_tweet<yyjson>/manual_time                            840828 ns       922934 ns          937           9.739k           1.26749G             217        27.278k    1.59143M              2.52001          2.00706k       3.19408G          2.82417M                    4.47206                     1.77462           2.00706k    7.64845k   631.515k        716.27M/s    308.358   19.2566k   1.73076M         2.74064    1.1893k/s  2.0584G/s     2.82483M                4.4731                1.63213          1        1.1893k/s [BEST: throughput=  1.27 GB/s doc_throughput=  2007 docs/s instructions=     2824171 cycles=     1591427 branch_miss=    9739 cache_miss=     217 cache_ref=     27278 items=         1 avg_time=    840827 ns]
find_tweet<yyjson_insitu>/manual_time                     571857 ns       633883 ns         1235           7.568k           1.50867G             128        13.856k    1.33675M              2.11674          2.38897k       3.19346G          2.82403M                    4.47183                      2.1126           2.38897k    7.46203k   631.515k       1053.17M/s    7.59028    4.8387k   1.43009M         2.26454   1.74869k/s 2.50078G/s     2.82429M               4.47224                 1.9749          1       1.74869k/s [BEST: throughput=  1.51 GB/s doc_throughput=  2388 docs/s instructions=     2824025 cycles=     1336751 branch_miss=    7568 cache_miss=     128 cache_ref=     13856 items=         1 avg_time=    571856 ns]
find_tweet<sajson>/manual_time                            610597 ns       678196 ns         1145          10.912k           1048.82M               2        12.652k    1.92278M              3.04472           1.6608k       3.19336G          5.89219M                    9.33025                     3.06441            1.6608k    11.3537k   631.515k       986.345M/s     4.7607   12.7643k   1.94803M          3.0847   1.63774k/s 3.19037G/s     5.89219M               9.33025                3.02469          1       1.63774k/s [BEST: throughput=  1.05 GB/s doc_throughput=  1660 docs/s instructions=     5892194 cycles=     1922784 branch_miss=   10912 cache_miss=       2 cache_ref=     12652 items=         1 avg_time=    610597 ns]
find_tweet<rapidjson>/manual_time                        1706060 ns      1771287 ns          415          28.108k           439.268M             617        21.393k    4.59036M              7.26881           695.578       3.19295G          13.2816M                    21.0313                     2.89336            695.578    28.3941k   631.515k       353.012M/s    416.465   8.52796k    4.7792M         7.56784    586.146/s 2.80131G/s     13.2825M               21.0328                2.77923          1        586.146/s [BEST: throughput=  0.44 GB/s doc_throughput=   695 docs/s instructions=    13281579 cycles=     4590364 branch_miss=   28108 cache_miss=     617 cache_ref=     21393 items=         1 avg_time=   1706060 ns]
find_tweet<rapidjson_insitu>/manual_time                 1114976 ns      1179329 ns          704          25.286k           639.968M             873        13.612k    3.15091M              4.98944           1013.38       3.19308G          9.64835M                    15.2781                     3.06209            1013.38    25.3415k   631.515k       540.155M/s   1.28888k   8.05839k   3.23319M         5.11974     896.88/s 2.89979G/s     9.64867M               15.2786                2.98425          1         896.88/s [BEST: throughput=  0.64 GB/s doc_throughput=  1013 docs/s instructions=     9648355 cycles=     3150908 branch_miss=   25286 cache_miss=     873 cache_ref=     13612 items=         1 avg_time=   1114975 ns]
find_tweet<nlohmann_json>/manual_time                    7481801 ns      7567873 ns           99          92.262k           91.8705M             669        77.287k    21.9288M               34.724           145.476       3.19011G          57.0746M                    90.3773                     2.60273            145.476    110.513k   631.515k       80.4966M/s    28.4242   83.2365k   23.8617M         37.7848    133.658/s  3.1893G/s     55.6685M               88.1508                2.33297          1        133.658/s [BEST: throughput=  0.09 GB/s doc_throughput=   145 docs/s instructions=    57074620 cycles=    21928751 branch_miss=   92262 cache_miss=     669 cache_ref=     77287 items=         1 avg_time=   7481800 ns]
top_tweet<simdjson_dom>/manual_time                       289270 ns       366621 ns         2421           3.792k           2.19997G               0        32.114k    916.927k              1.45195          3.48364k       3.19424G          2.85646M                    4.52319                     3.11526           3.48364k    3.94043k   631.515k        2.0332G/s   0.536968   32.1279k   923.117k         1.46175   3.45698k/s  3.1912G/s     2.85646M               4.52319                3.09437          1       3.45698k/s [BEST: throughput=  2.20 GB/s doc_throughput=  3483 docs/s instructions=     2856464 cycles=      916927 branch_miss=    3792 cache_miss=       0 cache_ref=     32114 items=         1 avg_time=    289269 ns]
top_tweet<simdjson_ondemand>/manual_time                  194932 ns       259094 ns         3589           1.621k            3.2748G               0         9.566k    616.097k             0.975586          5.18562k       3.19484G           2.1282M                       3.37                     3.45433           5.18562k    1.82376k   631.515k       3.01718G/s   0.194205   9.69419k   622.195k        0.985242      5.13k/s 3.19186G/s      2.1282M                  3.37                3.42048          1          5.13k/s [BEST: throughput=  3.27 GB/s doc_throughput=  5185 docs/s instructions=     2128204 cycles=      616097 branch_miss=    1621 cache_miss=       0 cache_ref=      9566 items=         1 avg_time=    194931 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time     204686 ns       269320 ns         3416           1.882k           3.11341G               0        10.518k    647.969k              1.02605          4.93007k       3.19453G           2.3491M                    3.71979                     3.62533           4.93007k    2.03716k   631.515k        2.8734G/s  0.0102459   10.5326k    653.35k         1.03458   4.88553k/s 3.19196G/s      2.3491M               3.71979                3.59547          1       4.88553k/s [BEST: throughput=  3.11 GB/s doc_throughput=  4930 docs/s instructions=     2349103 cycles=      647969 branch_miss=    1882 cache_miss=       0 cache_ref=     10518 items=         1 avg_time=    204686 ns]
top_tweet<yyjson>/manual_time                             850978 ns       937457 ns          938          10.126k           1.25418G             220        27.245k    1.60817M              2.54652          1.98598k       3.19378G          2.84503M                    4.50508                     1.76911           1.98598k    7.79595k   631.515k       707.726M/s    371.536   22.1238k   1.76216M         2.79037   1.17512k/s 2.07075G/s      2.8455M               4.50584                1.61478          1       1.17512k/s [BEST: throughput=  1.25 GB/s doc_throughput=  1985 docs/s instructions=     2845027 cycles=     1608166 branch_miss=   10126 cache_miss=     220 cache_ref=     27245 items=         1 avg_time=    850978 ns]
top_tweet<yyjson_insitu>/manual_time                      579742 ns       648482 ns         1216           7.197k           1.49841G          1.353k         13.27k    1.34084M              2.12321          2.37272k       3.18144G          2.84491M                     4.5049                     2.12174           2.37272k    7.53164k   631.515k       1038.84M/s    49.9383    7.6173k   1.45519M         2.30428   1.72491k/s 2.51006G/s     2.84517M               4.50531                1.95519          1       1.72491k/s [BEST: throughput=  1.50 GB/s doc_throughput=  2372 docs/s instructions=     2844909 cycles=     1340839 branch_miss=    7197 cache_miss=    1353 cache_ref=     13270 items=         1 avg_time=    579741 ns]
top_tweet<sajson>/manual_time                             614889 ns       686017 ns         1139          10.814k           1041.61M               0        13.104k    1.93607M              3.06575          1.64938k       3.19331G          5.91934M                    9.37324                      3.0574           1.64938k    11.4576k   631.515k        979.46M/s    1.56102    13.173k   1.96168M         3.10631   1.62631k/s  3.1903G/s     5.91934M               9.37324                3.01748          1       1.62631k/s [BEST: throughput=  1.04 GB/s doc_throughput=  1649 docs/s instructions=     5919339 cycles=     1936070 branch_miss=   10814 cache_miss=       0 cache_ref=     13104 items=         1 avg_time=    614889 ns]
top_tweet<rapidjson>/manual_time                         1717124 ns      1787899 ns          412          28.742k           434.996M             900        22.383k    4.63535M              7.34005           688.814        3.1929G          13.3315M                    21.1103                     2.87604            688.814    28.5604k   631.515k       350.737M/s     509.75   10.3797k   4.81605M         7.62619    582.369/s 2.80472G/s     13.3323M               21.1116                 2.7683          1        582.369/s [BEST: throughput=  0.43 GB/s doc_throughput=   688 docs/s instructions=    13331460 cycles=     4635354 branch_miss=   28742 cache_miss=     900 cache_ref=     22383 items=         1 avg_time=   1717124 ns]
top_tweet<rapidjson_insitu>/manual_time                  1125111 ns      1194839 ns          699           25.16k           636.893M          1.534k        14.225k    3.16613M              5.01355           1008.52        3.1931G          9.68953M                    15.3433                     3.06037            1008.52    25.4869k   631.515k       535.289M/s   1.32782k   9.92513k   3.26275M         5.16654    888.801/s 2.89993G/s     9.68984M               15.3438                2.96984          1        888.801/s [BEST: throughput=  0.64 GB/s doc_throughput=  1008 docs/s instructions=     9689531 cycles=     3166133 branch_miss=   25160 cache_miss=    1534 cache_ref=     14225 items=         1 avg_time=   1125111 ns]
top_tweet<nlohmann_json>/manual_time                    10110328 ns     10199388 ns           69         179.166k           62.6163M              41       165.437k     32.162M              50.9284           99.1525       3.18895G          78.2781M                    123.953                     2.43386            99.1525     180.84k   631.515k       59.5688M/s    83.8696   165.115k   32.2385M         51.0495    98.9088/s 3.18867G/s     78.3218M               124.022                2.42945          1        98.9088/s [BEST: throughput=  0.06 GB/s doc_throughput=    99 docs/s instructions=    78278068 cycles=    32162047 branch_miss=  179166 cache_miss=      41 cache_ref=    165437 items=         1 avg_time=  10110327 ns]
