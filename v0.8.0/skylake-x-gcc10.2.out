run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-x-gcc10.2.json -DCMAKE_BUILD_TYPE=Release
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
-- The CXX compiler identification is GNU 10.2.0
-- The C compiler identification is GNU 10.2.0
-- Check for working CXX compiler: /usr/bin/g++-10
-- Check for working CXX compiler: /usr/bin/g++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/gcc-10
-- Check for working C compiler: /usr/bin/gcc-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Failed
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Failed
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
make -f CMakeFiles/Makefile2 bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 10
make -f CMakeFiles/Makefile2 benchmark/CMakeFiles/bench_ondemand.dir/all
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/DependInfo.cmake --color=
Scanning dependencies of target benchmark
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/g++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/g++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_api_internal.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/g++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_name.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_name.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/g++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_register.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_register.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/g++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_runner.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_runner.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/g++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/colorprint.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/colorprint.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/g++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/commandlineflags.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/commandlineflags.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/g++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/complexity.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/complexity.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/g++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/console_reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/console_reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/g++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/counter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/counter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/g++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/csv_reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/csv_reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/g++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/json_reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/json_reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/g++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/g++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/sleep.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/sleep.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/g++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/statistics.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/statistics.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/g++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/string_util.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/string_util.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/g++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/sysinfo.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/sysinfo.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/g++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -std=c++11  -Wall  -Wextra  -Wshadow  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/timers.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/timers.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/cmake -P CMakeFiles/benchmark.dir/cmake_clean_target.cmake
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/benchmark.dir/link.txt --verbose=1
/usr/bin/ar qc libbenchmark.a  CMakeFiles/benchmark.dir/benchmark.cc.o CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o CMakeFiles/benchmark.dir/benchmark_name.cc.o CMakeFiles/benchmark.dir/benchmark_register.cc.o CMakeFiles/benchmark.dir/benchmark_runner.cc.o CMakeFiles/benchmark.dir/colorprint.cc.o CMakeFiles/benchmark.dir/commandlineflags.cc.o CMakeFiles/benchmark.dir/complexity.cc.o CMakeFiles/benchmark.dir/console_reporter.cc.o CMakeFiles/benchmark.dir/counter.cc.o CMakeFiles/benchmark.dir/csv_reporter.cc.o CMakeFiles/benchmark.dir/json_reporter.cc.o CMakeFiles/benchmark.dir/reporter.cc.o CMakeFiles/benchmark.dir/sleep.cc.o CMakeFiles/benchmark.dir/statistics.cc.o CMakeFiles/benchmark.dir/string_util.cc.o CMakeFiles/benchmark.dir/sysinfo.cc.o CMakeFiles/benchmark.dir/timers.cc.o
/usr/bin/ranlib libbenchmark.a
[ 80%] Built target benchmark
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/CMakeFiles/generated-data.dir/DependInfo.cmake --color=
Scanning dependencies of target generated-data
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated && /usr/bin/ruby genfeaturejson.rb /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
[ 80%] Built target generated-data
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/src/CMakeFiles/simdjson.dir/DependInfo.cmake --color=
Scanning dependencies of target simdjson
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/g++-10  -DSIMDJSON_THREADS_ENABLED=1 -Dsimdjson_EXPORTS -I/home/jkeiser/simdjson_benchmark_results/simdjson/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/include  -O3 -DNDEBUG -fPIC   -fPIC -Werror -Wall -Wextra -Weffc++ -Wsign-compare -Wshadow -Wwrite-strings -Wpointer-arith -Winit-self -Wconversion -Wno-sign-conversion -pthread -std=c++17 -o CMakeFiles/simdjson.dir/simdjson.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/src/simdjson.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/simdjson.dir/link.txt --verbose=1
/usr/bin/g++-10 -fPIC -O3 -DNDEBUG  -shared -Wl,-soname,libsimdjson.so.7 -o ../libsimdjson.so.7.0.0 CMakeFiles/simdjson.dir/simdjson.cpp.o  -pthread 
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_symlink_library ../libsimdjson.so.7.0.0 ../libsimdjson.so.7 ../libsimdjson.so
[ 80%] Built target simdjson
make -f dependencies/CMakeFiles/yyjson.dir/build.make dependencies/CMakeFiles/yyjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies/CMakeFiles/yyjson.dir/DependInfo.cmake --color=
Scanning dependencies of target yyjson
make -f dependencies/CMakeFiles/yyjson.dir/build.make dependencies/CMakeFiles/yyjson.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies && /usr/bin/gcc-10  -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/yyjson/src  -O3 -DNDEBUG   -o CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o   -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/yyjson/src/yyjson.c
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies && /usr/bin/cmake -P CMakeFiles/yyjson.dir/cmake_clean_target.cmake
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies && /usr/bin/cmake -E cmake_link_script CMakeFiles/yyjson.dir/link.txt --verbose=1
/usr/bin/ar qc libyyjson.a  CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
/usr/bin/ranlib libyyjson.a
[ 90%] Built target yyjson
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark/CMakeFiles/bench_ondemand.dir/DependInfo.cmake --color=
Scanning dependencies of target bench_ondemand
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/g++-10  -DRAPIDJSON_HAS_STDSTRING -DSAJSON_UNSORTED_OBJECT_KEYS -DSIMDJSON_BENCHMARK_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/\" -DSIMDJSON_COMPETITION_NLOHMANN_JSON -DSIMDJSON_COMPETITION_RAPIDJSON -DSIMDJSON_COMPETITION_SAJSON -DSIMDJSON_COMPETITION_YYJSON -DSIMDJSON_MINEFIELD_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/minefield/\" -DSIMDJSON_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/\" -DSIMDJSON_THREADS_ENABLED=1 -DSIMDJSON_USING_LIBRARY=1 -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/. -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/linux -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/yyjson/src -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/rapidjson/include -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/sajson/include -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/json  -O3 -DNDEBUG   -pthread -std=c++17 -o CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/bench_ondemand.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/cmake -E cmake_link_script CMakeFiles/bench_ondemand.dir/link.txt --verbose=1
/usr/bin/g++-10  -O3 -DNDEBUG   CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o  -o bench_ondemand  -Wl,-rpath,/home/jkeiser/simdjson_benchmark_results/simdjson/build ../libsimdjson.so.7.0.0 ../_deps/google_benchmarks/src/libbenchmark.a ../dependencies/libyyjson.a -pthread /usr/lib/x86_64-linux-gnu/librt.so 
[100%] Built target bench_ondemand
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 0
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-x-gcc10.2.json --benchmark_out_format=json
2021-01-25 01:12:03
Running benchmark/bench_ondemand
Run on (4 X 3200 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 1024 KiB (x4)
  L3 Unified 8448 KiB (x1)
Load Average: 1.00, 1.00, 0.85
***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.
simdjson::dom implementation:      haswell
simdjson::ondemand implementation: fallback

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
partial_tweets<simdjson_dom>/manual_time                  302561 ns       370538 ns         2311           3.865k           2.10271G               0         32.98k    959.324k              1.51908          3.32963k       3.19419G          2.96251M                    4.69112                     3.08812           332.963k    4.02385k   631.515k       1.94389G/s   0.508005   33.0367k   965.497k         1.52886   3.30512k/s 3.19109G/s     2.96251M               4.69112                3.06838        100       330.512k/s [BEST: throughput=  2.10 GB/s doc_throughput=  3329 docs/s instructions=     2962511 cycles=      959324 branch_miss=    3865 cache_miss=       0 cache_ref=     32980 items=       100 avg_time=    302560 ns]
partial_tweets<simdjson_ondemand>/manual_time             218507 ns       273066 ns         3199            2.26k           2.91284G               2        10.799k    692.501k              1.09657          4.61246k       3.19413G           2.4602M                    3.89571                     3.55263           461.246k    2.39461k   631.515k       2.69165G/s    1.29509   10.8738k   697.358k         1.10426   4.57652k/s 3.19148G/s      2.4602M               3.89571                3.52788        100       457.652k/s [BEST: throughput=  2.91 GB/s doc_throughput=  4612 docs/s instructions=     2460197 cycles=      692501 branch_miss=    2260 cache_miss=       2 cache_ref=     10799 items=       100 avg_time=    218506 ns]
partial_tweets<yyjson>/manual_time                        857378 ns       934272 ns          816          10.031k           1.24314G             155        28.109k    1.62243M               2.5691          1.96851k       3.19376G          2.90846M                    4.60553                     1.79266           196.851k    7.68962k   631.515k       702.444M/s    658.158   25.6428k   1.77832M         2.81595   1.16635k/s 2.07414G/s     2.90895M                4.6063                1.63579        100       116.635k/s [BEST: throughput=  1.24 GB/s doc_throughput=  1968 docs/s instructions=     2908461 cycles=     1622426 branch_miss=   10031 cache_miss=     155 cache_ref=     28109 items=       100 avg_time=    857377 ns]
partial_tweets<yyjson_insitu>/manual_time                 584023 ns       645914 ns         1209           7.398k           1.48316G             100         14.89k    1.35967M              2.15304          2.34857k       3.19329G          2.90835M                    4.60536                     2.13901           234.857k    7.46303k   631.515k       1031.23M/s    103.178   11.7563k   1.46886M         2.32593   1.71226k/s 2.51507G/s     2.90861M               4.60577                1.98019        100       171.226k/s [BEST: throughput=  1.48 GB/s doc_throughput=  2348 docs/s instructions=     2908351 cycles=     1359674 branch_miss=    7398 cache_miss=     100 cache_ref=     14890 items=       100 avg_time=    584022 ns]
partial_tweets<sajson>/manual_time                        625436 ns       686939 ns         1115          10.853k           1020.24M               1        13.546k    1.97646M              3.12972          1.61554k       3.19306G          6.05185M                    9.58306                     3.06196           161.554k    11.2244k   631.515k       962.944M/s    2.99103   13.6681k   1.99528M         3.15951   1.59889k/s 3.19022G/s     6.05185M               9.58306                3.03308        100       159.889k/s [BEST: throughput=  1.02 GB/s doc_throughput=  1615 docs/s instructions=     6051847 cycles=     1976464 branch_miss=   10853 cache_miss=       1 cache_ref=     13546 items=       100 avg_time=    625435 ns]
partial_tweets<rapidjson>/manual_time                    1719554 ns      1784250 ns          408          27.348k           436.814M             892        22.982k    4.61608M              7.30953           691.692        3.1929G          13.4097M                    21.2342                       2.905           69.1692k    27.5465k   631.515k       350.242M/s    394.176   15.6919k   4.80868M         7.61452    581.546/s 2.79647G/s     13.4106M               21.2357                2.78884        100       58.1546k/s [BEST: throughput=  0.44 GB/s doc_throughput=   691 docs/s instructions=    13409688 cycles=     4616076 branch_miss=   27348 cache_miss=     892 cache_ref=     22982 items=       100 avg_time=   1719553 ns]
partial_tweets<rapidjson_insitu>/manual_time             1146530 ns      1205724 ns          613          24.054k           639.231M             313        14.764k    3.15471M              4.99546           1012.22       3.19326G          9.75505M                    15.4471                     3.09222           101.222k    24.2881k   631.515k       525.289M/s    195.124   9.76969k   3.26451M         5.16933    872.197/s  2.8473G/s     9.75544M               15.4477                2.98833        100       87.2197k/s [BEST: throughput=  0.64 GB/s doc_throughput=  1012 docs/s instructions=     9755047 cycles=     3154711 branch_miss=   24054 cache_miss=     313 cache_ref=     14764 items=       100 avg_time=   1146529 ns]
partial_tweets<nlohmann_json>/manual_time                9197245 ns      9282631 ns           77         140.055k           71.7091M              27        99.807k    28.0798M              44.4642           113.551       3.18849G          71.2174M                    112.772                     2.53625           11.3551k    153.675k   631.515k       65.4826M/s    28.7273    139.74k   29.3335M         46.4495    108.728/s 3.18938G/s     71.7618M               113.634                2.44641        100       10.8728k/s [BEST: throughput=  0.07 GB/s doc_throughput=   113 docs/s instructions=    71217428 cycles=    28079834 branch_miss=  140055 cache_miss=      27 cache_ref=     99807 items=       100 avg_time=   9197244 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 104090138 ns    109985262 ns            7         868.372k           443.033M        6.79963M       6.89467M    331.046M              7.19685            9.6314       3.18844G          983.113M                    21.3726                     2.96971            9.6314M    869.423k   45.9988M       421.441M/s   6.80826M   6.89478M   331.888M         7.21514    9.60706/s 3.18847G/s     983.113M               21.3726                2.96218      1000k       9.60706M/s [BEST: throughput=  0.44 GB/s doc_throughput=     9 docs/s instructions=   983112713 cycles=   331046213 branch_miss=  868372 cache_miss= 6799628 cache_ref=   6894674 items=   1000000 avg_time= 104090137 ns]
large_random<simdjson_ondemand>/manual_time             66754278 ns     72625021 ns           10         878.918k           692.699M        3.51762M       3.57283M    211.681M              4.60188           15.0591       3.18772G           642.49M                    13.9675                     3.03518           15.0591M    890.855k   45.9988M       657.154M/s   3.52181M   3.57282M   212.851M         4.62733    14.9803/s 3.18858G/s      642.49M               13.9675                3.01849      1000k       14.9803M/s [BEST: throughput=  0.69 GB/s doc_throughput=    15 docs/s instructions=   642489800 cycles=   211680890 branch_miss=  878918 cache_miss= 3517620 cache_ref=   3572834 items=   1000000 avg_time=  66754277 ns]
large_random<simdjson_ondemand_unordered>/manual_time   70098299 ns     76020548 ns           10         865.961k           656.717M        3.52298M       3.57376M    223.386M              4.85634           14.2768       3.18924G           646.49M                    14.0545                     2.89405           14.2768M    868.946k   45.9988M       625.805M/s   3.51868M   3.57382M   223.521M         4.85928    14.2657/s 3.18868G/s      646.49M               14.0545                 2.8923      1000k       14.2657M/s [BEST: throughput=  0.66 GB/s doc_throughput=    14 docs/s instructions=   646489804 cycles=   223385675 branch_miss=  865961 cache_miss= 3522976 cache_ref=   3573759 items=   1000000 avg_time=  70098299 ns]
large_random<yyjson>/manual_time                       156424836 ns    162365619 ns            4         658.442k           294.228M        4.20907M        5.2818M    359.896M              7.82403           6.39643       2.30205G           944.15M                    20.5255                      2.6234           6.39643M    661.764k   45.9988M        280.44M/s    4.2092M   5.29861M    360.18M         7.83021    6.39285/s 2.30258G/s      944.15M               20.5255                2.62133      1000k       6.39285M/s [BEST: throughput=  0.29 GB/s doc_throughput=     6 docs/s instructions=   944149628 cycles=   359895875 branch_miss=  658442 cache_miss= 4209069 cache_ref=   5281803 items=   1000000 avg_time= 156424836 ns]
large_random<yyjson_insitu>/manual_time                130454932 ns    136404467 ns            5         659.289k           352.832M         3.4932M       4.60759M    317.428M              6.90078           7.67047       2.43482G          938.029M                    20.3925                      2.9551           7.67047M    661.685k   45.9988M       336.268M/s   3.49302M   4.60911M   317.591M         6.90435    7.66548/s 2.43449G/s     938.029M               20.3925                2.95357      1000k       7.66548M/s [BEST: throughput=  0.35 GB/s doc_throughput=     7 docs/s instructions=   938028855 cycles=   317427518 branch_miss=  659289 cache_miss= 3493202 cache_ref=   4607588 items=   1000000 avg_time= 130454932 ns]
large_random<sajson>/manual_time                       109937516 ns    115894468 ns            6         583.663k           419.118M        5.42757M       5.57689M    350.034M              7.60964            9.1115       3.18934G          1099.99M                    23.9134                     3.14251            9.1115M    583.946k   45.9988M       399.025M/s   5.46974M   5.57708M   350.596M         7.62185    9.09608/s 3.18905G/s     1099.99M               23.9134                3.13748      1000k       9.09608M/s [BEST: throughput=  0.42 GB/s doc_throughput=     9 docs/s instructions=  1099987399 cycles=   350034224 branch_miss=  583663 cache_miss= 5427567 cache_ref=   5576893 items=   1000000 avg_time= 109937516 ns]
large_random<rapidjson>/manual_time                    203516404 ns    209417978 ns            4         604.745k           236.907M        4.34553M       5.17469M    551.745M              11.9948           5.15029       2.84165G          1.65912G                    36.0689                     3.00705           5.15029M     602.88k   45.9988M       215.549M/s   4.04404M   5.09141M   557.221M         12.1138    4.91361/s 2.73797G/s     1.65914G               36.0691                2.97752      1000k       4.91361M/s [BEST: throughput=  0.24 GB/s doc_throughput=     5 docs/s instructions=  1659124968 cycles=   551745328 branch_miss=  604745 cache_miss= 4345527 cache_ref=   5174689 items=   1000000 avg_time= 203516403 ns]
large_random<rapidjson_lossless>/manual_time           237877297 ns    243833774 ns            3         605.369k           200.322M        4.34166M        5.1804M    664.524M              14.4466           4.35495       2.89397G          2.02209G                    43.9597                     3.04292           4.35495M    604.474k   45.9988M       184.414M/s   4.07788M   5.10281M   668.999M         14.5439    4.20385/s 2.81237G/s      2.0221G               43.9599                3.02257      1000k       4.20385M/s [BEST: throughput=  0.20 GB/s doc_throughput=     4 docs/s instructions=  2022091885 cycles=   664524402 branch_miss=  605369 cache_miss= 4341660 cache_ref=   5180396 items=   1000000 avg_time= 237877297 ns]
large_random<rapidjson_insitu>/manual_time             190545544 ns    196495585 ns            4         581.377k           254.058M        5.03718M       5.87323M     509.91M              11.0853           5.52316       2.81631G          1.49112G                    32.4166                     2.92429           5.52316M    581.098k   45.9988M       230.222M/s   4.75454M   5.78119M   515.764M         11.2126    5.24809/s 2.70678G/s     1.49113G               32.4168                2.89111      1000k       5.24809M/s [BEST: throughput=  0.25 GB/s doc_throughput=     5 docs/s instructions=  1491122442 cycles=   509909700 branch_miss=  581377 cache_miss= 5037179 cache_ref=   5873225 items=   1000000 avg_time= 190545543 ns]
large_random<nlohmann_json>/manual_time               1423542673 ns   1429449390 ns            1         4.56417M           32.3129M        30.3707M       30.9894M    4.52525G              98.3775          0.702473       3.17886G          11.9494G                    259.776                      2.6406           702.473k    4.56417M   45.9988M        30.816M/s   30.3707M   30.9894M   4.52525G         98.3775   0.702473/s 3.17886G/s     11.9494G               259.776                 2.6406      1000k       702.473k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 11949360796 cycles=  4525245710 branch_miss= 4564173 cache_miss=30370738 cache_ref=  30989405 items=   1000000 avg_time=1423542673 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                        98060601 ns    116627488 ns            7         461.895k           1.40202G        10.2165M       10.3156M    312.204M               2.2738            10.211        3.1879G          945.501M                    6.88614                     3.02848           5.35349M    462.129k   137.305M       1.30404G/s   10.2446M   10.3155M   312.643M           2.277    10.1978/s 3.18826G/s     945.501M               6.88614                3.02422   524.288k       5.34657M/s [BEST: throughput=  1.40 GB/s doc_throughput=    10 docs/s instructions=   945501414 cycles=   312203520 branch_miss=  461895 cache_miss=10216476 cache_ref=  10315579 items=    524288 avg_time=  98060600 ns]
kostya<simdjson_ondemand>/manual_time                   65321269 ns     83873785 ns           11         496.769k            2.1053G        6.42966M       6.47147M    207.972M              1.51467           15.3331       3.18884G          676.213M                     4.9249                     3.25147           8.03894M    496.723k   137.305M       1.95764G/s   6.43665M   6.47147M   208.272M         1.51685    15.3089/s 3.18842G/s     676.213M                4.9249                3.24678   524.288k        8.0263M/s [BEST: throughput=  2.11 GB/s doc_throughput=    15 docs/s instructions=   676213316 cycles=   207971815 branch_miss=  496769 cache_miss= 6429659 cache_ref=   6471466 items=    524288 avg_time=  65321269 ns]
kostya<yyjson>/manual_time                             264068133 ns    282646987 ns            3         418.252k           520.203M        8.49112M       9.86714M    611.193M              4.45135           3.78867       2.31561G          984.045M                    7.16685                     1.61004           1.98635M    418.352k   137.305M       495.873M/s   8.49177M   9.87415M   611.688M         4.45496     3.7869/s  2.3164G/s     984.045M               7.16686                1.60874   524.288k       1.98543M/s [BEST: throughput=  0.52 GB/s doc_throughput=     3 docs/s instructions=   984044955 cycles=   611193045 branch_miss=  418252 cache_miss= 8491122 cache_ref=   9867143 items=    524288 avg_time= 264068132 ns]
kostya<yyjson_insitu>/manual_time                      186793037 ns    205368561 ns            4         417.273k           735.351M        6.35788M       7.74908M    484.974M              3.53209            5.3556       2.59733G          965.776M                     7.0338                      1.9914           2.80788M    417.802k   137.305M       701.012M/s   6.35495M   7.72917M   485.101M         3.53302    5.35352/s   2.597G/s     965.776M                7.0338                1.99088   524.288k       2.80679M/s [BEST: throughput=  0.74 GB/s doc_throughput=     5 docs/s instructions=   965775603 cycles=   484973981 branch_miss=  417273 cache_miss= 6357883 cache_ref=   7749083 items=    524288 avg_time= 186793037 ns]
kostya<sajson>/manual_time                             161395726 ns    179968488 ns            4         445.399k           857.472M        8.50306M       8.54739M    510.679M              3.71931           6.24501        3.1892G          1.62034G                     11.801                     3.17292           3.27419M    447.186k   137.305M       811.324M/s   8.49757M   8.54757M   514.645M         3.74819    6.19595/s 3.18871G/s     1.62034G                11.801                3.14847   524.288k       3.24846M/s [BEST: throughput=  0.86 GB/s doc_throughput=     6 docs/s instructions=  1620343059 cycles=   510679216 branch_miss=  445399 cache_miss= 8503056 cache_ref=   8547385 items=    524288 avg_time= 161395725 ns]
kostya<rapidjson>/manual_time                          280077893 ns    298740628 ns            3         1078.94k           498.547M        5.19975M       6.34607M    781.895M              5.69459           3.63095       2.83902G           2.2966G                    16.7263                     2.93722           1.90366M     1.1083M   137.305M       467.528M/s    5.0347M    6.3129M   785.534M         5.72109    3.57044/s  2.8047G/s      2.2966G               16.7263                2.92362   524.288k       1.87194M/s [BEST: throughput=  0.50 GB/s doc_throughput=     3 docs/s instructions=  2296597982 cycles=   781895473 branch_miss= 1078944 cache_miss= 5199755 cache_ref=   6346074 items=    524288 avg_time= 280077893 ns]
kostya<rapidjson_lossless>/manual_time                 297266232 ns    315894499 ns            2         1093.67k           467.329M        5.19346M       6.40401M    840.215M              6.11933           3.40358       2.85974G          2.50316G                    18.2306                     2.97919           1.78446M    1.12248M   137.305M       440.495M/s   5.06926M   6.36143M   842.882M         6.13875    3.36399/s 2.83544G/s     2.50316G               18.2307                2.96977   524.288k        1.7637M/s [BEST: throughput=  0.47 GB/s doc_throughput=     3 docs/s instructions=  2503158913 cycles=   840214539 branch_miss= 1093673 cache_miss= 5193459 cache_ref=   6404008 items=    524288 avg_time= 297266232 ns]
kostya<rapidjson_insitu>/manual_time                   263637775 ns    282263528 ns            3         1.10656M           528.262M        7.32465M       8.55466M    732.738M              5.33658           3.84736       2.81911G          2.03014G                    14.7856                     2.77063           2.01713M    1032.28k   137.305M       496.682M/s   7.16044M   8.49947M    733.37M         5.34117    3.79308/s 2.78173G/s     2.03015G               14.7857                2.76824   524.288k       1.98867M/s [BEST: throughput=  0.53 GB/s doc_throughput=     3 docs/s instructions=  2030143528 cycles=   732738458 branch_miss= 1106561 cache_miss= 7324651 cache_ref=   8554664 items=    524288 avg_time= 263637775 ns]
kostya<nlohmann_json>/manual_time                     1949308106 ns   1967890591 ns            1          3.7762M           70.4378M        44.5752M       45.1454M    6.21679G              45.2772          0.513003       3.18923G          15.1471G                    110.317                     2.43647           268.961k     3.7762M   137.305M       67.1747M/s   44.5752M   45.1454M   6.21679G         45.2772   0.513003/s 3.18923G/s     15.1471G               110.317                2.43647   524.288k       268.961k/s [BEST: throughput=  0.07 GB/s doc_throughput=     0 docs/s instructions= 15147051764 cycles=  6216791352 branch_miss= 3776198 cache_miss=44575227 cache_ref=  45145415 items=    524288 avg_time=1949308106 ns]
distinct_user_id<simdjson_dom>/manual_time                297888 ns       375182 ns         2348           4.069k           2.13429G               3        34.017k    945.011k              1.49642          3.37963k       3.19379G          2.90344M                    4.59757                     3.07238           388.658k    4.21655k   631.515k       1.97438G/s    2.28066   34.1074k   950.565k         1.50521   3.35696k/s 3.19101G/s     2.90344M               4.59757                3.05443        115       386.051k/s [BEST: throughput=  2.13 GB/s doc_throughput=  3379 docs/s instructions=     2903436 cycles=      945011 branch_miss=    4069 cache_miss=       3 cache_ref=     34017 items=       115 avg_time=    297888 ns]
distinct_user_id<simdjson_ondemand>/manual_time           211078 ns       271720 ns         3316           1.979k           3.01418G               0         8.468k    669.431k              1.06004          4.77293k       3.19515G          2.15108M                    3.40623                      3.2133           548.887k    2.11865k   631.515k       2.78638G/s    1.28016   8.55281k   673.704k         1.06681   4.73758k/s 3.19172G/s     2.15108M               3.40623                3.19292        115       544.821k/s [BEST: throughput=  3.01 GB/s doc_throughput=  4772 docs/s instructions=     2151083 cycles=      669431 branch_miss=    1979 cache_miss=       0 cache_ref=      8468 items=       115 avg_time=    211078 ns]
distinct_user_id<yyjson>/manual_time                      754548 ns       841786 ns         1000           6.921k           1.32896G          7.114k        26.034k    1.51754M              2.40301          2.10439k        3.1935G           2.8751M                     4.5527                     1.89458           242.005k    7.59165k   631.515k       798.173M/s   2.26784k   25.8865k   1.70641M         2.70209    1.3253k/s  2.2615G/s     2.87529M               4.55301                  1.685        115       152.409k/s [BEST: throughput=  1.33 GB/s doc_throughput=  2104 docs/s instructions=     2875096 cycles=     1517538 branch_miss=    6921 cache_miss=    7114 cache_ref=     26034 items=       115 avg_time=    754547 ns]
distinct_user_id<yyjson_insitu>/manual_time               581415 ns       653681 ns         1214           7.591k           1.48378G             106        14.774k    1.35933M              2.15248          2.34956k       3.19382G          2.87458M                    4.55188                     2.11471           270.199k     7.5385k   631.515k       1035.85M/s    98.5033   11.6755k    1.4605M         2.31269   1.71994k/s 2.51197G/s     2.87484M               4.55229                1.96839        115       197.793k/s [BEST: throughput=  1.48 GB/s doc_throughput=  2349 docs/s instructions=     2874578 cycles=     1359326 branch_miss=    7591 cache_miss=     106 cache_ref=     14774 items=       115 avg_time=    581415 ns]
distinct_user_id<sajson>/manual_time                      618111 ns       688051 ns         1130          10.836k           1032.67M               6        13.648k    1.95274M              3.09216          1.63523k       3.19319G          5.98431M                    9.47612                     3.06456           188.051k    11.0945k   631.515k       974.355M/s    7.51681   13.6535k   1.97188M         3.12246   1.61783k/s 3.19017G/s     5.98431M               9.47612                3.03483        115       186.051k/s [BEST: throughput=  1.03 GB/s doc_throughput=  1635 docs/s instructions=     5984313 cycles=     1952745 branch_miss=   10836 cache_miss=       6 cache_ref=     13648 items=       115 avg_time=    618110 ns]
distinct_user_id<rapidjson>/manual_time                  1708626 ns      1782283 ns          414          27.789k           437.338M             512        23.074k    4.61052M              7.30073           692.521       3.19288G          13.3502M                      21.14                      2.8956           79.6399k    27.4128k   631.515k       352.482M/s    656.261   16.0641k   4.78748M         7.58095    585.266/s 2.80195G/s      13.351M               21.1413                2.78874        115       67.3055k/s [BEST: throughput=  0.44 GB/s doc_throughput=   692 docs/s instructions=    13350228 cycles=     4610518 branch_miss=   27789 cache_miss=     512 cache_ref=     23074 items=       115 avg_time=   1708626 ns]
distinct_user_id<rapidjson_insitu>/manual_time           1119453 ns      1188784 ns          702          23.973k           642.134M             191        15.137k    3.14023M              4.97253           1016.82       3.19303G          9.70619M                    15.3697                     3.09092           116.934k    24.4038k   631.515k       537.995M/s   1.44002k   11.6006k   3.24787M         5.14299    893.294/s 2.90131G/s      9.7065M               15.3702                2.98857        115       102.729k/s [BEST: throughput=  0.64 GB/s doc_throughput=  1016 docs/s instructions=     9706186 cycles=     3140226 branch_miss=   23973 cache_miss=     191 cache_ref=     15137 items=       115 avg_time=   1119452 ns]
distinct_user_id<nlohmann_json>/manual_time              8762284 ns      8851870 ns           82         116.817k           77.7957M          1.408k        98.553k    25.8749M              40.9728           123.189       3.18751G          66.6704M                    105.572                     2.57664           14.1667k    132.381k   631.515k       68.7332M/s    32.4634   106.047k   27.9423M         44.2465    114.126/s 3.18893G/s     65.2479M                103.32                2.33509        115       13.1244k/s [BEST: throughput=  0.08 GB/s doc_throughput=   123 docs/s instructions=    66670448 cycles=    25874947 branch_miss=  116817 cache_miss=    1408 cache_ref=     98553 items=       115 avg_time=   8762283 ns]
find_tweet<simdjson_dom>/manual_time                      282892 ns       355977 ns         2476           3.714k           2.24864G               1        30.252k    896.999k              1.42039          3.56071k       3.19395G           2.8224M                    4.46925                     3.14649           3.56071k    3.84801k   631.515k       2.07904G/s    1.84047   30.0184k   902.613k         1.42928   3.53492k/s 3.19066G/s      2.8224M               4.46925                3.12692          1       3.53492k/s [BEST: throughput=  2.25 GB/s doc_throughput=  3560 docs/s instructions=     2822396 cycles=      896999 branch_miss=    3714 cache_miss=       1 cache_ref=     30252 items=         1 avg_time=    282892 ns]
find_tweet<simdjson_ondemand>/manual_time                 133567 ns       196477 ns         5221              931           4.75764G               0         7.566k    424.107k             0.671571          7.53369k       3.19509G          1.50673M                     2.3859                     3.55271           7.53369k     999.011   631.515k       4.40336G/s   0.664432   7.65177k    426.39k        0.675186   7.48688k/s 3.19233G/s     1.50673M                2.3859                3.53369          1       7.48688k/s [BEST: throughput=  4.76 GB/s doc_throughput=  7533 docs/s instructions=     1506730 cycles=      424107 branch_miss=     931 cache_miss=       0 cache_ref=      7566 items=         1 avg_time=    133567 ns]
find_tweet<yyjson>/manual_time                            842636 ns       928824 ns          943           9.598k           1.27229G             241        27.275k    1.58526M              2.51024          2.01467k       3.19377G          2.82414M                    4.47201                     1.78151           2.01467k    7.50612k   631.515k       714.733M/s    443.537   24.3592k    1.7363M         2.74942   1.18675k/s 2.06056G/s     2.82462M               4.47277                 1.6268          1       1.18675k/s [BEST: throughput=  1.27 GB/s doc_throughput=  2014 docs/s instructions=     2824144 cycles=     1585257 branch_miss=    9598 cache_miss=     241 cache_ref=     27275 items=         1 avg_time=    842635 ns]
find_tweet<yyjson_insitu>/manual_time                     570121 ns       637909 ns         1238           6.964k            1.5213G           1.67k        13.121k    1.32065M              2.09124          2.40897k        3.1814G          2.82382M                     4.4715                     2.13821           2.40897k    7.26754k   631.515k       1056.37M/s    7.75202   9.92258k   1.42474M         2.25607   1.75401k/s 2.49902G/s     2.82408M               4.47192                1.98217          1       1.75401k/s [BEST: throughput=  1.52 GB/s doc_throughput=  2408 docs/s instructions=     2823819 cycles=     1320647 branch_miss=    6964 cache_miss=    1670 cache_ref=     13121 items=         1 avg_time=    570121 ns]
find_tweet<sajson>/manual_time                            606372 ns       674227 ns         1150          10.468k           1052.21M               0        12.749k    1.91648M              3.03473          1.66617k       3.19318G          5.89219M                    9.33025                     3.07449           1.66617k    10.9112k   631.515k       993.219M/s    2.94522   12.9454k   1.93442M         3.06315   1.64915k/s 3.19016G/s     5.89219M               9.33025                3.04597          1       1.64915k/s [BEST: throughput=  1.05 GB/s doc_throughput=  1666 docs/s instructions=     5892194 cycles=     1916478 branch_miss=   10468 cache_miss=       0 cache_ref=     12749 items=         1 avg_time=    606371 ns]
find_tweet<rapidjson>/manual_time                        1692539 ns      1762888 ns          418          26.721k           442.402M          9.697k        21.203k    4.55771M              7.21711           700.541       3.19286G           13.282M                    21.0319                     2.91417            700.541    27.3885k   631.515k       355.832M/s    413.244   13.0944k   4.73684M         7.50075    590.828/s 2.79866G/s     13.2828M               21.0333                2.80416          1        590.828/s [BEST: throughput=  0.44 GB/s doc_throughput=   700 docs/s instructions=    13281959 cycles=     4557714 branch_miss=   26721 cache_miss=    9697 cache_ref=     21203 items=         1 avg_time=   1692539 ns]
find_tweet<rapidjson_insitu>/manual_time                 1103878 ns      1169683 ns          712          23.289k           647.229M          6.391k        13.239k    3.11561M              4.93355           1024.88       3.19314G          9.64813M                    15.2778                     3.09671            1024.88    24.1596k   631.515k       545.585M/s   1.32488k   8.80042k   3.20179M         5.07001    905.897/s 2.90049G/s     9.64844M               15.2782                3.01345          1        905.897/s [BEST: throughput=  0.65 GB/s doc_throughput=  1024 docs/s instructions=     9648135 cycles=     3115610 branch_miss=   23289 cache_miss=    6391 cache_ref=     13239 items=         1 avg_time=   1103878 ns]
find_tweet<nlohmann_json>/manual_time                    7721270 ns      7808742 ns           99          92.407k           91.6833M          1.463k         76.79k    21.9545M              34.7648            145.18       3.18735G          57.0476M                    90.3346                     2.59845             145.18    136.064k   631.515k       78.0001M/s    32.3939   83.1753k   24.6247M         38.9931    129.512/s 3.18921G/s      55.667M               88.1484                2.26061          1        129.512/s [BEST: throughput=  0.09 GB/s doc_throughput=   145 docs/s instructions=    57047624 cycles=    21954508 branch_miss=   92407 cache_miss=    1463 cache_ref=     76790 items=         1 avg_time=   7721270 ns]
top_tweet<simdjson_dom>/manual_time                       289912 ns       368725 ns         2415            3.77k           2.19504G               0        32.903k    918.875k              1.45503          3.47583k       3.19385G          2.85646M                    4.52319                     3.10865           3.47583k    3.92545k   631.515k        2.0287G/s   0.570186   32.9377k   925.061k         1.46483   3.44932k/s 3.19083G/s     2.85646M               4.52319                3.08787          1       3.44932k/s [BEST: throughput=  2.20 GB/s doc_throughput=  3475 docs/s instructions=     2856464 cycles=      918875 branch_miss=    3770 cache_miss=       0 cache_ref=     32903 items=         1 avg_time=    289912 ns]
top_tweet<simdjson_ondemand>/manual_time                  195497 ns       259905 ns         3583           1.725k           3.25762G               0         8.464k    619.422k             0.980851          5.15841k       3.19524G           2.1282M                       3.37                     3.43579           5.15841k    1.87732k   631.515k       3.00845G/s   6.97739m   8.52925k   624.109k        0.988273   5.11517k/s 3.19242G/s      2.1282M                  3.37                3.40999          1       5.11517k/s [BEST: throughput=  3.26 GB/s doc_throughput=  5158 docs/s instructions=     2128204 cycles=      619422 branch_miss=    1725 cache_miss=       0 cache_ref=      8464 items=         1 avg_time=    195497 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time     204464 ns       269124 ns         3424           1.899k           3.11828G               0         9.271k    646.987k               1.0245          4.93778k       3.19468G           2.3491M                    3.71979                     3.63083           4.93778k    2.04729k   631.515k       2.87652G/s  0.0108061   9.33466k   652.556k         1.03332   4.89084k/s 3.19155G/s      2.3491M               3.71979                3.59985          1       4.89084k/s [BEST: throughput=  3.12 GB/s doc_throughput=  4937 docs/s instructions=     2349103 cycles=      646987 branch_miss=    1899 cache_miss=       0 cache_ref=      9271 items=         1 avg_time=    204463 ns]
top_tweet<yyjson>/manual_time                             848729 ns       938061 ns          953           9.778k           1.26115G             164         27.43k    1.59962M              2.53299          1.99702k       3.19448G          2.84503M                    4.50508                     1.77856           1.99702k    7.68162k   631.515k       709.602M/s    462.486    25.084k   1.75565M         2.78006   1.17823k/s 2.06856G/s     2.84571M               4.50616                1.62089          1       1.17823k/s [BEST: throughput=  1.26 GB/s doc_throughput=  1997 docs/s instructions=     2845027 cycles=     1599622 branch_miss=    9778 cache_miss=     164 cache_ref=     27430 items=         1 avg_time=    848729 ns]
top_tweet<yyjson_insitu>/manual_time                      576450 ns       649786 ns         1223           7.154k           1.50609G          1.659k        13.969k    1.33406M              2.11247          2.38488k       3.18157G          2.84491M                     4.5049                     2.13252           2.38488k    7.40885k   631.515k       1044.77M/s    71.4227   11.3061k   1.44533M         2.28867   1.73476k/s 2.50729G/s     2.84517M               4.50531                1.96853          1       1.73476k/s [BEST: throughput=  1.51 GB/s doc_throughput=  2384 docs/s instructions=     2844909 cycles=     1334059 branch_miss=    7154 cache_miss=    1659 cache_ref=     13969 items=         1 avg_time=    576450 ns]
top_tweet<sajson>/manual_time                             610118 ns       682390 ns         1146          10.589k           1045.38M               0        13.189k    1.92904M              3.05462          1.65536k       3.19324G          5.91934M                    9.37324                     3.06855           1.65536k     11.053k   631.515k        987.12M/s    1.66318   13.1833k    1.9465M         3.08226   1.63903k/s 3.19036G/s     5.91934M               9.37324                3.04102          1       1.63903k/s [BEST: throughput=  1.05 GB/s doc_throughput=  1655 docs/s instructions=     5919339 cycles=     1929037 branch_miss=   10589 cache_miss=       0 cache_ref=     13189 items=         1 avg_time=    610117 ns]
top_tweet<rapidjson>/manual_time                         1702134 ns      1777526 ns          415          26.819k           440.323M          7.254k        22.189k    4.57944M              7.25152           697.248       3.19301G          13.3318M                    21.1107                     2.91122            697.248    27.4107k   631.515k       353.826M/s    548.807   14.6892k   4.76678M         7.54816    587.498/s 2.80047G/s     13.3325M               21.1119                2.79696          1        587.498/s [BEST: throughput=  0.44 GB/s doc_throughput=   697 docs/s instructions=    13331754 cycles=     4579443 branch_miss=   26819 cache_miss=    7254 cache_ref=     22189 items=         1 avg_time=   1702133 ns]
top_tweet<rapidjson_insitu>/manual_time                  1114584 ns      1185549 ns          705          24.219k           642.195M             499         14.16k     3.1399M                4.972           1016.91         3.193G          9.68952M                    15.3433                     3.08594            1016.91    24.3648k   631.515k       540.345M/s   1.37966k   10.4196k   3.23297M         5.11938    897.196/s  2.9006G/s     9.68983M               15.3438                2.99719          1        897.196/s [BEST: throughput=  0.64 GB/s doc_throughput=  1016 docs/s instructions=     9689517 cycles=     3139895 branch_miss=   24219 cache_miss=     499 cache_ref=     14160 items=         1 avg_time=   1114584 ns]
top_tweet<nlohmann_json>/manual_time                    10133927 ns     10224503 ns           69         180.542k           62.4506M              23       165.384k    32.2598M              51.0832           98.8901       3.19018G          78.3152M                    124.012                     2.42764            98.8901    181.557k   631.515k         59.43M/s    40.8696   164.702k    32.319M         51.1769    98.6784/s 3.18919G/s     78.3231M               124.024                2.42344          1        98.6784/s [BEST: throughput=  0.06 GB/s doc_throughput=    98 docs/s instructions=    78315209 cycles=    32259830 branch_miss=  180542 cache_miss=      23 cache_ref=    165384 items=         1 avg_time=  10133927 ns]
