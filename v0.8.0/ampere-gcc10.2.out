run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-gcc10.2.json 
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake ..
-- The CXX compiler identification is GNU 10.2.0
-- The C compiler identification is GNU 10.2.0
-- Check for working CXX compiler: /usr/bin/g++-10
-- Check for working CXX compiler: /usr/bin/g++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/gcc-10
-- Check for working C compiler: /usr/bin/gcc-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Failed
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Failed
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-gcc10.2.json --benchmark_out_format=json
2021-01-23 04:31:25
Running benchmark/bench_ondemand
Run on (32 X 3300 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x32)
  L1 Instruction 32 KiB (x32)
  L2 Unified 256 KiB (x16)
Load Average: 1.00, 0.95, 0.60
simdjson::dom implementation:      arm64
simdjson::ondemand implementation: arm64
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                 1579831 ns      1648952 ns          443          17.062k           400.633M         25.869k       905.079k    5.04644M              7.99101             634.4       3.20146G          3.92138M                    6.20949                    0.777059             63.44k      17.25k   631.515k       381.218M/s   25.8845k   905.529k   5.05216M         8.00006    632.979/s 3.19791G/s     3.92138M               6.20949                0.77618        100       63.2979k/s [BEST: throughput=  0.40 GB/s doc_throughput=   634 docs/s instructions=     3921383 cycles=     5046441 branch_miss=   17062 cache_miss=   25869 cache_ref=    905079 items=       100 avg_time=   1579831 ns]
partial_tweets<simdjson_ondemand>/manual_time            1068864 ns      1138342 ns          655           6.948k           592.212M         22.792k       403.157k    3.41409M              5.40618           937.764       3.20161G          2.75757M                    4.36659                    0.807703           93.7764k    7.07933k   631.515k       563.458M/s   22.7776k   403.042k   3.41863M         5.41338    935.572/s 3.19838G/s     2.75756M               4.36658               0.806628        100       93.5572k/s [BEST: throughput=  0.59 GB/s doc_throughput=   937 docs/s instructions=     2757566 cycles=     3414086 branch_miss=    6948 cache_miss=   22792 cache_ref=    403157 items=       100 avg_time=   1068864 ns]
partial_tweets<yyjson>/manual_time                       1244577 ns      1316567 ns          564          47.946k           574.065M         24.378k       1.49012M    3.52253M              5.57791           909.028       3.20208G          3.54892M                    5.61968                     1.00749           90.9028k    47.9787k   631.515k       483.907M/s    24.394k   1.49099M   3.75706M         5.94928    803.486/s 3.01874G/s     3.54899M                5.6198               0.944619        100       80.3486k/s [BEST: throughput=  0.57 GB/s doc_throughput=   909 docs/s instructions=     3548915 cycles=     3522534 branch_miss=   47946 cache_miss=   24378 cache_ref=   1490115 items=       100 avg_time=   1244577 ns]
partial_tweets<yyjson_insitu>/manual_time                1164593 ns      1236343 ns          603          48.305k           597.077M          14.49k        1.3315M    3.38679M              5.36296           945.468        3.2021G          3.44978M                     5.4627                      1.0186           94.5468k    47.9163k   631.515k       517.142M/s   14.4871k   1.33163M   3.61178M         5.71924    858.669/s 3.10133G/s     3.44993M               5.46294               0.955187        100       85.8669k/s [BEST: throughput=  0.60 GB/s doc_throughput=   945 docs/s instructions=     3449777 cycles=     3386787 branch_miss=   48305 cache_miss=   14490 cache_ref=   1331502 items=       100 avg_time=   1164593 ns]
partial_tweets<sajson>/manual_time                       1486987 ns      1557987 ns          470          68.657k            425.93M         12.765k       1.87593M    4.74682M              7.51657           674.458       3.20153G          5.31238M                    8.41212                     1.11914           67.4458k    69.2545k   631.515k        405.02M/s   12.7608k     1.877M    4.7555M         7.53031    672.501/s 3.19808G/s     5.31239M               8.41213                 1.1171        100       67.2501k/s [BEST: throughput=  0.43 GB/s doc_throughput=   674 docs/s instructions=     5312383 cycles=     4746825 branch_miss=   68657 cache_miss=   12765 cache_ref=   1875929 items=       100 avg_time=   1486986 ns]
partial_tweets<rapidjson>/manual_time                    2804477 ns      2878160 ns          249           74.98k           231.693M         12.967k       6.24944M    8.72427M              13.8148           366.884       3.20079G          13.3644M                    21.1624                     1.53186           36.6884k    74.8003k   631.515k       214.749M/s   13.2335k    6.2592M   8.75573M         13.8646    356.573/s 3.12206G/s     13.3649M               21.1633                1.52642        100       35.6573k/s [BEST: throughput=  0.23 GB/s doc_throughput=   366 docs/s instructions=    13364375 cycles=     8724267 branch_miss=   74980 cache_miss=   12967 cache_ref=   6249437 items=       100 avg_time=   2804477 ns]
partial_tweets<rapidjson_insitu>/manual_time             2134696 ns      2208411 ns          328          59.575k            304.43M         13.695k       3.42962M    6.64031M              10.5149           482.062       3.20104G          9.76594M                    15.4643                     1.47071           48.2062k    59.6043k   631.515k       282.129M/s   13.8683k   3.43059M   6.67313M         10.5669    468.451/s 3.12603G/s     9.76656M               15.4653                1.46357        100       46.8451k/s [BEST: throughput=  0.30 GB/s doc_throughput=   482 docs/s instructions=     9765944 cycles=     6640308 branch_miss=   59575 cache_miss=   13695 cache_ref=   3429617 items=       100 avg_time=   2134695 ns]
partial_tweets<nlohmann_json>/manual_time               17088683 ns     17185081 ns           41         364.997k           39.8227M         198.03k          38.7M    50.6855M              80.2601           63.0591       3.19618G          68.9853M                    109.238                     1.36105           6.30591k    382.278k   631.515k       35.2432M/s   251.587k   38.8428M   54.6252M         86.4987    58.5183/s 3.19657G/s     69.1251M               109.459                1.26544        100       5.85183k/s [BEST: throughput=  0.04 GB/s doc_throughput=    63 docs/s instructions=    68985268 cycles=    50685451 branch_miss=  364997 cache_miss=  198030 cache_ref=  38700022 items=       100 avg_time=  17088682 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 311583728 ns    315188113 ns            2         1.92105M           147.647M         3.9802M       246.784M    996.004M              21.6528            3.2098       3.19697G          1.10647G                    24.0544                     1.11091            3.2098M    1.92184M   45.9988M        140.79M/s   3.98025M   246.788M   996.112M         21.6552    3.20941/s 3.19693G/s     1.10647G               24.0544                1.11079      1000k       3.20941M/s [BEST: throughput=  0.15 GB/s doc_throughput=     3 docs/s instructions=  1106473018 cycles=   996003719 branch_miss= 1921047 cache_miss= 3980201 cache_ref= 246784021 items=   1000000 avg_time= 311583727 ns]
large_random<simdjson_ondemand>/manual_time            182722950 ns    186328185 ns            4         1.17459M           251.794M        2.31733M       134.426M    584.143M              12.6991           5.47393       3.19756G          689.959M                    14.9995                     1.18115           5.47393M    1.17467M   45.9988M       240.078M/s   2.31735M   134.426M   584.147M         12.6992    5.47277/s  3.1969G/s     689.959M               14.9995                1.18114      1000k       5.47277M/s [BEST: throughput=  0.25 GB/s doc_throughput=     5 docs/s instructions=   689958567 cycles=   584143122 branch_miss= 1174590 cache_miss= 2317332 cache_ref= 134426054 items=   1000000 avg_time= 182722950 ns]
large_random<simdjson_ondemand_unordered>/manual_time  185465696 ns    189104529 ns            4         1.20685M           248.055M        2.31736M        138.38M     592.91M              12.8897           5.39265       3.19736G          694.959M                    15.1082                     1.17211           5.39265M    1.20682M   45.9988M       236.528M/s   2.31737M    138.38M   592.915M         12.8898    5.39183/s  3.1969G/s     694.959M               15.1082                 1.1721      1000k       5.39183M/s [BEST: throughput=  0.25 GB/s doc_throughput=     5 docs/s instructions=   694958567 cycles=   592910193 branch_miss= 1206851 cache_miss= 2317365 cache_ref= 138379576 items=   1000000 avg_time= 185465696 ns]
large_random<yyjson>/manual_time                       204419279 ns    208027956 ns            3         1.61728M           225.111M        4.91262M       235.246M    627.617M              13.6442           4.89385       3.07147G          908.191M                    19.7438                     1.44705           4.89385M    1.61551M   45.9988M       214.597M/s    4.9126M    235.24M   627.775M         13.6477    4.89191/s 3.07102G/s     908.191M               19.7438                1.44668      1000k       4.89191M/s [BEST: throughput=  0.23 GB/s doc_throughput=     4 docs/s instructions=   908191366 cycles=   627617211 branch_miss= 1617282 cache_miss= 4912620 cache_ref= 235245530 items=   1000000 avg_time= 204419278 ns]
large_random<yyjson_insitu>/manual_time                198447206 ns    202060301 ns            4         1.61745M           231.812M         4.1957M       223.734M    615.788M              13.3871           5.03953       3.10328G          901.004M                    19.5876                     1.46317           5.03953M    1.61662M   45.9988M       221.056M/s   4.19573M   223.734M   615.834M         13.3881    5.03912/s 3.10327G/s     901.004M               19.5876                1.46306      1000k       5.03912M/s [BEST: throughput=  0.23 GB/s doc_throughput=     5 docs/s instructions=   901003549 cycles=   615787998 branch_miss= 1617449 cache_miss= 4195699 cache_ref= 223733655 items=   1000000 avg_time= 198447205 ns]
large_random<sajson>/manual_time                       191966298 ns    195565505 ns            3         1.66113M           247.542M        3.44386M       222.121M    593.913M              12.9115            5.3815       3.19614G          955.996M                    20.7831                     1.60965            5.3815M    1.66203M   45.9988M       228.519M/s   3.44389M   222.124M   613.639M         13.3403    5.20925/s  3.1966G/s     955.996M               20.7831                1.55791      1000k       5.20925M/s [BEST: throughput=  0.25 GB/s doc_throughput=     5 docs/s instructions=   955995641 cycles=   593913465 branch_miss= 1661131 cache_miss= 3443861 cache_ref= 222121365 items=   1000000 avg_time= 191966297 ns]
large_random<rapidjson>/manual_time                    520432429 ns    353664845 ns            1         2.00081M           88.3857M        4.95593M       755.841M    1090.43M              23.7056           1.92148       2.09524G          1.65551G                    35.9902                     1.51822           1.92148M    2.00081M   45.9988M       84.2912M/s   4.95593M   755.841M   1090.43M         23.7056    1.92148/s 2.09524G/s     1.65551G               35.9902                1.51822      1000k       1.92148M/s [BEST: throughput=  0.09 GB/s doc_throughput=     1 docs/s instructions=  1655506535 cycles=  1090429506 branch_miss= 2000805 cache_miss= 4955928 cache_ref= 755840678 items=   1000000 avg_time= 520432429 ns]
large_random<rapidjson_lossless>/manual_time           393335242 ns    396951302 ns            2         2.24949M           117.197M        4.95749M       953.163M    1.22734G              26.6819           2.54784       3.12705G          1.97048G                    42.8377                      1.6055           2.54784M    2.25526M   45.9988M       111.528M/s   4.95768M   953.154M   1.22746G         26.6846    2.54236/s 3.12064G/s     1.97049G               42.8378                1.60534      1000k       2.54236M/s [BEST: throughput=  0.12 GB/s doc_throughput=     2 docs/s instructions=  1970483266 cycles=  1227335101 branch_miss= 2249488 cache_miss= 4957492 cache_ref= 953162736 items=   1000000 avg_time= 393335241 ns]
large_random<rapidjson_insitu>/manual_time             332435640 ns    336041724 ns            2         2.02717M           138.723M        5.67243M       734.539M    1032.94M              22.4557            3.0158       3.11512G          1.55051G                    33.7076                     1.50107            3.0158M    2.03798M   45.9988M       131.959M/s   5.67305M   734.547M   1033.21M         22.4617     3.0081/s   3.108G/s     1.55051G               33.7077                1.50067      1000k        3.0081M/s [BEST: throughput=  0.14 GB/s doc_throughput=     3 docs/s instructions=  1550507342 cycles=  1032935680 branch_miss= 2027165 cache_miss= 5672432 cache_ref= 734539476 items=   1000000 avg_time= 332435640 ns]
large_random<nlohmann_json>/manual_time               2659706162 ns   2663294680 ns            1         12.3759M           17.2947M        27.2628M       5.83037G    8.49932G              184.773          0.375981       3.19559G          12.0941G                    262.922                     1.42295           375.981k    12.3759M   45.9988M       16.4935M/s   27.2628M   5.83037G   8.49932G         184.773   0.375981/s 3.19559G/s     12.0941G               262.922                1.42295      1000k       375.981k/s [BEST: throughput=  0.02 GB/s doc_throughput=     0 docs/s instructions= 12094071677 cycles=  8499322169 branch_miss=12375918 cache_miss=27262779 cache_ref=5830369536 items=   1000000 avg_time=2659706162 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                       380397492 ns    391129668 ns            2         1.10258M           360.959M        6.94337M       246.884M    1.21588G              8.85532           2.62889       3.19641G          1.14604G                    8.34671                    0.942564           1.37829M    1.10306M   137.305M        344.23M/s   6.94339M   246.886M   1.21596G         8.85593    2.62883/s 3.19656G/s     1.14604G               8.34671               0.942499   524.288k       1.37826M/s [BEST: throughput=  0.36 GB/s doc_throughput=     2 docs/s instructions=  1146044372 cycles=  1215879408 branch_miss= 1102579 cache_miss= 6943367 cache_ref= 246884307 items=    524288 avg_time= 380397492 ns]
kostya<simdjson_ondemand>/manual_time                  261503229 ns    272221735 ns            3         1.46602M           526.473M        5.28205M       138.538M    833.621M              6.07131           3.83433       3.19638G          796.596M                    5.80166                    0.955585            2.0103M    1.55058M   137.305M       500.737M/s   5.28204M   138.793M   835.888M         6.08782    3.82404/s 3.19647G/s     796.596M               5.80166               0.952994   524.288k        2.0049M/s [BEST: throughput=  0.53 GB/s doc_throughput=     3 docs/s instructions=   796596293 cycles=   833621288 branch_miss= 1466020 cache_miss= 5282053 cache_ref= 138537991 items=    524288 avg_time= 261503228 ns]
kostya<yyjson>/manual_time                             358162896 ns    306283290 ns            2         1055.28k           464.484M        7.98665M       344.741M    901.834M              6.56811           3.38286       3.05078G          1052.15M                    7.66288                     1.16668           1.77359M    1040.37k   137.305M         365.6M/s   7.98824M   344.703M   901.523M         6.56584    2.79203/s 2.51707G/s     1052.15M               7.66288                1.16708   524.288k       1.46383M/s [BEST: throughput=  0.46 GB/s doc_throughput=     3 docs/s instructions=  1052152116 cycles=   901833711 branch_miss= 1055283 cache_miss= 7986655 cache_ref= 344741484 items=    524288 avg_time= 358162896 ns]
kostya<yyjson_insitu>/manual_time                      278393417 ns    289055512 ns            3         1060.22k           493.655M        5.84729M       310.439M    866.915M              6.31379           3.59532       3.11684G           1030.7M                    7.50663                     1.18893           1.88498M    1049.97k   137.305M       470.357M/s   5.84856M   310.408M    867.74M          6.3198    3.59204/s 3.11696G/s      1030.7M               7.50663                 1.1878   524.288k       1.88326M/s [BEST: throughput=  0.49 GB/s doc_throughput=     3 docs/s instructions=  1030698172 cycles=   866915305 branch_miss= 1060218 cache_miss= 5847290 cache_ref= 310438702 items=    524288 avg_time= 278393417 ns]
kostya<sajson>/manual_time                             403844630 ns    414524490 ns            2         7.44122M           340.087M        4.64339M       425.361M    1.29058G               9.3994           2.47687       3.19661G          1.38919G                    10.1176                     1.07641           1.29859M    7.44633M   137.305M       324.244M/s   4.64335M   425.459M   1.29107G         9.40296     2.4762/s 3.19696G/s     1.38919G               10.1176                  1.076   524.288k       1.29824M/s [BEST: throughput=  0.34 GB/s doc_throughput=     2 docs/s instructions=  1389192347 cycles=  1290583907 branch_miss= 7441219 cache_miss= 4643387 cache_ref= 425361318 items=    524288 avg_time= 403844630 ns]
kostya<rapidjson>/manual_time                          568269450 ns    578953226 ns            1         8.05574M            241.62M        5.38668M       973.401M    1.78141G              12.9741           1.75973        3.1348G          2.37304G                     17.283                     1.33211           922.605k    8.05574M   137.305M       230.426M/s   5.38668M   973.401M   1.78141G         12.9741    1.75973/s  3.1348G/s     2.37304G                17.283                1.33211   524.288k       922.605k/s [BEST: throughput=  0.24 GB/s doc_throughput=     1 docs/s instructions=  2373037402 cycles=  1781409734 branch_miss= 8055740 cache_miss= 5386678 cache_ref= 973400800 items=    524288 avg_time= 568269450 ns]
kostya<rapidjson_lossless>/manual_time                 591205649 ns    601881203 ns            1         7.36747M           232.246M        5.38828M       1092.33M    1.85491G              13.5094           1.69146       3.13751G          2.55706G                    18.6232                     1.37853           886.812k    7.36747M   137.305M       221.487M/s   5.38828M   1092.33M   1.85491G         13.5094    1.69146/s 3.13751G/s     2.55706G               18.6232                1.37853   524.288k       886.812k/s [BEST: throughput=  0.23 GB/s doc_throughput=     1 docs/s instructions=  2557055846 cycles=  1854911079 branch_miss= 7367473 cache_miss= 5388279 cache_ref=1092332971 items=    524288 avg_time= 591205649 ns]
kostya<rapidjson_insitu>/manual_time                   549012540 ns    559651869 ns            1          7.4556M           250.094M        6.35765M       866.488M    1.71995G              12.5265           1.82145       3.13281G          2.17212G                    15.8197                     1.26289           954.965k     7.4556M   137.305M       238.509M/s   6.35765M   866.488M   1.71995G         12.5265    1.82145/s 3.13281G/s     2.17212G               15.8197                1.26289   524.288k       954.965k/s [BEST: throughput=  0.25 GB/s doc_throughput=     1 docs/s instructions=  2172119213 cycles=  1719954430 branch_miss= 7455595 cache_miss= 6357650 cache_ref= 866487527 items=    524288 avg_time= 549012540 ns]
kostya<nlohmann_json>/manual_time                     4139370264 ns   4150039175 ns            1         28.8405M           33.1705M        38.0837M       7.88968G    13.2334G              96.3795          0.241583       3.19695G          15.0753G                    109.794                     1.13919           126.659k    28.8405M   137.305M       31.6339M/s   38.0837M   7.88968G   13.2334G         96.3795   0.241583/s 3.19695G/s     15.0753G               109.794                1.13919   524.288k       126.659k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 15075318285 cycles= 13233380240 branch_miss=28840522 cache_miss=38083660 cache_ref=7889675506 items=    524288 avg_time=4139370264 ns]
distinct_user_id<simdjson_dom>/manual_time               1568358 ns      1657752 ns          447          16.849k           404.022M         26.508k       890.286k      5.004M               7.9238           639.766       3.20139G          3.85168M                    6.09911                    0.769721           73.5731k    16.9682k   631.515k       384.006M/s   26.5154k   890.218k   5.01459M         7.94057     637.61/s 3.19735G/s     3.85168M               6.09911               0.768095        115       73.3251k/s [BEST: throughput=  0.40 GB/s doc_throughput=   639 docs/s instructions=     3851681 cycles=     5003996 branch_miss=   16849 cache_miss=   26508 cache_ref=    890286 items=       115 avg_time=   1568357 ns]
distinct_user_id<simdjson_ondemand>/manual_time          1058137 ns      1142692 ns          662           6.743k           598.234M         22.418k       400.309k    3.38003M              5.35226             947.3        3.2019G          2.73848M                    4.33636                    0.810193           108.939k    6.88741k   631.515k        569.17M/s   22.4211k    400.54k   3.38443M         5.35922    945.057/s 3.19848G/s     2.73848M               4.33636               0.809141        115       108.682k/s [BEST: throughput=  0.60 GB/s doc_throughput=   947 docs/s instructions=     2738478 cycles=     3380031 branch_miss=    6743 cache_miss=   22418 cache_ref=    400309 items=       115 avg_time=   1058137 ns]
distinct_user_id<yyjson>/manual_time                     1192224 ns      1279908 ns          608          47.965k           572.239M         24.237k       1.47675M    3.47332M              5.49999           906.136        3.1473G          3.51486M                    5.56576                     1.01196           104.206k    47.5195k   631.515k       505.156M/s   24.1981k   1.47662M   3.68547M         5.83592    838.768/s 3.09126G/s     3.51474M               5.56556               0.953674        115       96.4583k/s [BEST: throughput=  0.57 GB/s doc_throughput=   906 docs/s instructions=     3514864 cycles=     3473324 branch_miss=   47965 cache_miss=   24237 cache_ref=   1476751 items=       115 avg_time=   1192224 ns]
distinct_user_id<yyjson_insitu>/manual_time              1144566 ns      1233046 ns          615          47.636k           608.194M         14.275k       1.31725M    3.32502M              5.26514           963.072       3.20223G          3.41557M                    5.40854                     1.02724           110.753k    47.6065k   631.515k       526.191M/s    14.284k   1.31735M   3.54732M         5.61717    873.694/s 3.09928G/s     3.41572M               5.40877               0.962901        115       100.475k/s [BEST: throughput=  0.61 GB/s doc_throughput=   963 docs/s instructions=     3415573 cycles=     3325015 branch_miss=   47636 cache_miss=   14275 cache_ref=   1317248 items=       115 avg_time=   1144565 ns]
distinct_user_id<sajson>/manual_time                     1471735 ns      1559232 ns          476          68.825k           430.186M         12.795k       1.86068M    4.69981M              7.44211           681.197       3.20149G          5.24709M                    8.30874                     1.11645           78.3376k    69.3028k   631.515k       409.217M/s   12.8038k   1.86159M   4.70673M         7.45308     679.47/s 3.19808G/s     5.24709M               8.30874                1.11481        115       78.1391k/s [BEST: throughput=  0.43 GB/s doc_throughput=   681 docs/s instructions=     5247094 cycles=     4699805 branch_miss=   68825 cache_miss=   12795 cache_ref=   1860679 items=       115 avg_time=   1471734 ns]
distinct_user_id<rapidjson>/manual_time                  2793283 ns      2883013 ns          251          74.553k           232.746M         13.747k       6.24717M    8.68511M              13.7528           368.552       3.20091G          13.3286M                    21.1058                     1.53465           42.3834k    74.6839k   631.515k        215.61M/s   13.9782k   6.25013M   8.74332M          13.845    358.002/s 3.13012G/s     13.3292M               21.1067                 1.5245        115       41.1702k/s [BEST: throughput=  0.23 GB/s doc_throughput=   368 docs/s instructions=    13328601 cycles=     8685112 branch_miss=   74553 cache_miss=   13747 cache_ref=   6247171 items=       115 avg_time=   2793283 ns]
distinct_user_id<rapidjson_insitu>/manual_time           2127095 ns      2218239 ns          333          59.391k            305.98M         14.147k       3.41881M    6.60701M              10.4622           484.517       3.20121G          9.72896M                    15.4057                     1.47252           55.7195k    59.5701k   631.515k       283.137M/s   14.2988k   3.41987M   6.64715M         10.5257    470.125/s 3.12499G/s     9.72955M               15.4067                1.46372        115       54.0644k/s [BEST: throughput=  0.31 GB/s doc_throughput=   484 docs/s instructions=     9728960 cycles=     6607014 branch_miss=   59391 cache_miss=   14147 cache_ref=   3418814 items=       115 avg_time=   2127094 ns]
distinct_user_id<nlohmann_json>/manual_time             16055460 ns     16149368 ns           44         330.348k           42.7886M         161.42k       36.4235M     47.185M              74.7172           67.7555       3.19705G          64.3618M                    101.917                     1.36403           7.79189k    345.736k   631.515k       37.5112M/s    217.52k    35.884M   51.3231M         81.2698    62.2841/s 3.19661G/s     62.8006M               99.4444                1.22363        115       7.16267k/s [BEST: throughput=  0.04 GB/s doc_throughput=    67 docs/s instructions=    64361830 cycles=    47185045 branch_miss=  330348 cache_miss=  161420 cache_ref=  36423465 items=       115 avg_time=  16055460 ns]
find_tweet<simdjson_dom>/manual_time                     1518974 ns      1606319 ns          460          16.439k           416.834M         23.458k       873.567k    4.85006M              7.68004           660.054        3.2013G          3.76235M                    5.95766                    0.775733            660.054    16.6917k   631.515k       396.491M/s    23.457k   874.055k   4.85756M         7.69192    658.339/s 3.19792G/s     3.76235M               5.95766               0.774535          1        658.339/s [BEST: throughput=  0.42 GB/s doc_throughput=   660 docs/s instructions=     3762353 cycles=     4850059 branch_miss=   16439 cache_miss=   23458 cache_ref=    873567 items=         1 avg_time=   1518974 ns]
find_tweet<simdjson_ondemand>/manual_time                 915541 ns      1003127 ns          764           3.999k           691.196M         11.569k       194.091k    2.92564M              4.63274            1094.5       3.20213G          2.05905M                    3.26049                    0.703793             1094.5    4.11983k   631.515k       657.818M/s   11.5718k   194.166k   2.92849M         4.63725    1092.25/s 3.19865G/s     2.05905M               3.26049               0.703108          1        1092.25/s [BEST: throughput=  0.69 GB/s doc_throughput=  1094 docs/s instructions=     2059047 cycles=     2925642 branch_miss=    3999 cache_miss=   11569 cache_ref=    194091 items=         1 avg_time=    915541 ns]
find_tweet<yyjson>/manual_time                           1188005 ns      1280497 ns          591          47.726k           589.143M          21.69k       1.45959M    3.36552M              5.32927           932.905       3.13971G           3.4593M                    5.47779                     1.02787            932.905    47.4927k   631.515k        506.95M/s   21.7211k   1.46029M   3.57497M         5.66095    841.747/s 3.00922G/s     3.45952M               5.47813               0.967706          1        841.747/s [BEST: throughput=  0.59 GB/s doc_throughput=   932 docs/s instructions=     3459305 cycles=     3365517 branch_miss=   47726 cache_miss=   21690 cache_ref=   1459592 items=         1 avg_time=   1188005 ns]
find_tweet<yyjson_insitu>/manual_time                    1254943 ns      1271583 ns          634          47.459k           628.714M         11.785k       1.30081M    3.21633M              5.09304           995.565       3.20207G          3.36031M                    5.32103                     1.04476            995.565    47.4385k   631.515k        479.91M/s   11.8226k   1.30104M   3.42667M         5.42611    796.849/s 2.73054G/s     3.36046M               5.32127               0.980678          1        796.849/s [BEST: throughput=  0.63 GB/s doc_throughput=   995 docs/s instructions=     3360309 cycles=     3216331 branch_miss=   47459 cache_miss=   11785 cache_ref=   1300809 items=         1 avg_time=   1254943 ns]
find_tweet<sajson>/manual_time                           1426523 ns      1521194 ns          491          68.464k           443.845M         10.182k       1.83967M    4.55513M              7.21303           702.826       3.20146G          5.16187M                    8.17378                      1.1332            702.826    68.9215k   631.515k       422.187M/s   10.1868k   1.84068M   4.56207M         7.22401    701.005/s 3.19804G/s     5.16187M               8.17379                1.13147          1        701.005/s [BEST: throughput=  0.44 GB/s doc_throughput=   702 docs/s instructions=     5161867 cycles=     4555134 branch_miss=   68464 cache_miss=   10182 cache_ref=   1839670 items=         1 avg_time=   1426523 ns]
find_tweet<rapidjson>/manual_time                        2766695 ns      2863941 ns          253          74.448k           234.221M         11.002k       6.23425M    8.62987M              13.6653           370.888       3.20071G          13.2842M                    21.0354                     1.53933            370.888    74.6297k   631.515k       217.682M/s   11.2142k   6.23545M   8.65685M         13.7081    361.442/s 3.12895G/s     13.2848M               21.0364                 1.5346          1        361.442/s [BEST: throughput=  0.23 GB/s doc_throughput=   370 docs/s instructions=    13284187 cycles=     8629872 branch_miss=   74448 cache_miss=   11002 cache_ref=   6234248 items=         1 avg_time=   2766694 ns]
find_tweet<rapidjson_insitu>/manual_time                 2098053 ns      2198134 ns          339          59.358k           309.604M         10.845k       3.40616M    6.52926M               10.339           490.255         3.201G          9.68489M                     15.336                     1.48331            490.255    59.4954k   631.515k       287.056M/s   11.0048k   3.40758M   6.55324M          10.377    476.632/s 3.12349G/s     9.68548M               15.3369                1.47797          1        476.632/s [BEST: throughput=  0.31 GB/s doc_throughput=   490 docs/s instructions=     9684886 cycles=     6529260 branch_miss=   59358 cache_miss=   10845 cache_ref=   3406155 items=         1 avg_time=   2098053 ns]
find_tweet<nlohmann_json>/manual_time                   13029699 ns     13132898 ns           55          253.36k           52.9096M         88.775k       31.0433M    38.1646M              60.4333           83.7821       3.19751G          54.4244M                    86.1807                     1.42605            83.7821    268.633k   631.515k       46.2221M/s   138.275k   30.5228M   41.6506M         65.9535    76.7477/s 3.19659G/s      52.917M               83.7938                 1.2705          1        76.7477/s [BEST: throughput=  0.05 GB/s doc_throughput=    83 docs/s instructions=    54424423 cycles=    38164561 branch_miss=  253360 cache_miss=   88775 cache_ref=  31043339 items=         1 avg_time=  13029698 ns]
top_tweet<simdjson_dom>/manual_time                      1553519 ns      1655613 ns          450           16.86k           407.399M         25.533k       881.137k    4.96268M              7.85837           645.113       3.20149G          3.80075M                    6.01846                    0.765866            645.113    17.0389k   631.515k       387.674M/s   25.5498k    881.67k   4.96828M         7.86724      643.7/s 3.19808G/s     3.80074M               6.01845               0.765002          1          643.7/s [BEST: throughput=  0.41 GB/s doc_throughput=   645 docs/s instructions=     3800745 cycles=     4962679 branch_miss=   16860 cache_miss=   25533 cache_ref=    881137 items=         1 avg_time=   1553519 ns]
top_tweet<simdjson_ondemand>/manual_time                 1055461 ns      1160518 ns          663           6.466k           599.863M         22.462k       380.128k    3.37063M              5.33737           949.879       3.20169G          2.70591M                    4.28479                    0.802791            949.879     6.6516k   631.515k       570.613M/s   22.4573k   380.447k   3.37587M         5.34567    947.453/s 3.19848G/s     2.70591M               4.28479               0.801543          1        947.453/s [BEST: throughput=  0.60 GB/s doc_throughput=   949 docs/s instructions=     2705909 cycles=     3370627 branch_miss=    6466 cache_miss=   22462 cache_ref=    380128 items=         1 avg_time=   1055461 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time    1070376 ns      1178665 ns          654           6.714k           591.449M         22.747k       394.559k    3.41885M              5.41373           936.555       3.20194G           2.7344M                     4.3299                      0.7998            936.555    6.84587k   631.515k       562.662M/s   22.7456k   394.763k   3.42337M         5.42089    934.251/s 3.19829G/s     2.73439M                4.3299               0.798743          1        934.251/s [BEST: throughput=  0.59 GB/s doc_throughput=   936 docs/s instructions=     2734396 cycles=     3418850 branch_miss=    6714 cache_miss=   22747 cache_ref=    394559 items=         1 avg_time=   1070376 ns]
top_tweet<yyjson>/manual_time                            1212262 ns      1323528 ns          582          48.005k           590.465M         23.309k       1.46677M    3.42445M               5.4226           934.998       3.20186G          3.48273M                    5.51487                     1.01702            934.998     47.733k   631.515k       496.807M/s   23.3911k   1.46774M   3.65081M         5.78104    824.905/s 3.01157G/s     3.48294M               5.51522               0.954019          1        824.905/s [BEST: throughput=  0.59 GB/s doc_throughput=   934 docs/s instructions=     3482726 cycles=     3424453 branch_miss=   48005 cache_miss=   23309 cache_ref=   1466768 items=         1 avg_time=   1212261 ns]
top_tweet<yyjson_insitu>/manual_time                     1131305 ns      1244803 ns          620          47.888k           615.545M         13.511k       1.30813M     3.2849M              5.20161           974.712       3.20183G          3.38373M                    5.35812                     1.03009            974.712    47.7321k   631.515k       532.358M/s   13.5048k   1.30838M   3.50433M         5.54909    883.935/s  3.0976G/s     3.38388M               5.35836               0.965628          1        883.935/s [BEST: throughput=  0.62 GB/s doc_throughput=   974 docs/s instructions=     3383734 cycles=     3284895 branch_miss=   47888 cache_miss=   13511 cache_ref=   1308127 items=         1 avg_time=   1131304 ns]
top_tweet<sajson>/manual_time                            1447422 ns      1560590 ns          484          68.753k            437.45M         11.755k       1.84814M    4.62159M              7.31825             692.7       3.20137G          5.18708M                     8.2137                     1.12236              692.7    69.1829k   631.515k       416.091M/s   11.7806k   1.84906M   4.62864M         7.32942    690.883/s 3.19785G/s     5.18707M                8.2137                1.12065          1        690.883/s [BEST: throughput=  0.44 GB/s doc_throughput=   692 docs/s instructions=     5187077 cycles=     4621587 branch_miss=   68753 cache_miss=   11755 cache_ref=   1848136 items=         1 avg_time=   1447422 ns]
top_tweet<rapidjson>/manual_time                         2809273 ns      2929004 ns          250          74.744k           232.775M         12.827k       6.24771M    8.68376M              13.7507           368.597       3.20081G           13.318M                     21.089                     1.53367            368.597    74.7591k   631.515k       214.383M/s   13.1329k   6.25015M   8.77743M          13.899    355.964/s 3.12445G/s     13.3187M                 21.09                1.51738          1        355.964/s [BEST: throughput=  0.23 GB/s doc_throughput=   368 docs/s instructions=    13317998 cycles=     8683763 branch_miss=   74744 cache_miss=   12827 cache_ref=   6247707 items=         1 avg_time=   2809273 ns]
top_tweet<rapidjson_insitu>/manual_time                  2118100 ns      2241570 ns          335          59.416k           306.935M         13.017k       3.41591M    6.58582M              10.4286            486.03        3.2009G            9.717M                    15.3868                     1.47544             486.03    59.5974k   631.515k        284.34M/s   13.1998k    3.4169M   6.61735M         10.4785    472.121/s 3.12419G/s     9.71759M               15.3877                 1.4685          1        472.121/s [BEST: throughput=  0.31 GB/s doc_throughput=   486 docs/s instructions=     9717000 cycles=     6585816 branch_miss=   59416 cache_miss=   13017 cache_ref=   3415914 items=         1 avg_time=   2118099 ns]
top_tweet<nlohmann_json>/manual_time                    18562997 ns     18689501 ns           38         427.249k            34.089M        335.786k       42.3401M     59.206M              93.7523           53.9797       3.19592G          76.5777M                     121.26                     1.29341            53.9797     428.95k   631.515k       32.4441M/s   336.937k   42.3889M   59.3383M         93.9619    53.8706/s 3.19659G/s     76.7009M               121.455                 1.2926          1        53.8706/s [BEST: throughput=  0.03 GB/s doc_throughput=    53 docs/s instructions=    76577749 cycles=    59206002 branch_miss=  427249 cache_miss=  335786 cache_ref=  42340084 items=         1 avg_time=  18562996 ns]
