run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-clang10-fallback.json -DSIMDJSON_IMPLEMENTATION=fallback
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DSIMDJSON_IMPLEMENTATION=fallback ..
-- The CXX compiler identification is Clang 10.0.1
-- The C compiler identification is Clang 10.0.1
-- Check for working CXX compiler: /usr/bin/clang++-10
-- Check for working CXX compiler: /usr/bin/clang++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/clang-10
-- Check for working C compiler: /usr/bin/clang-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Including implementation fallback due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation westmere due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation haswell due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation arm64 due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation ppc64 due to SIMDJSON_IMPLEMENTATION=fallback
-- Selected implementation fallback as builtin implementation based on fallback.
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Success
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Success
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES -- failed to compile
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-clang10-fallback.json --benchmark_out_format=json
2021-01-23 05:36:35
Running benchmark/bench_ondemand
Run on (32 X 3300 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x32)
  L1 Instruction 32 KiB (x32)
  L2 Unified 256 KiB (x16)
Load Average: 0.99, 0.94, 0.97
simdjson::dom implementation:      fallback
simdjson::ondemand implementation: fallback

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                 2564462 ns      2633429 ns          273           106.7k           246.757M         25.973k       2.71761M    8.19152M              12.9712           390.738       3.20074G          13.7781M                    21.8175                     1.68199           39.0738k    106.935k   631.515k       234.848M/s   25.9844k   2.71846M   8.19893M         12.9829    389.945/s 3.19713G/s     13.7781M               21.8175                1.68047        100       38.9945k/s [BEST: throughput=  0.25 GB/s doc_throughput=   390 docs/s instructions=    13778056 cycles=     8191518 branch_miss=  106700 cache_miss=   25973 cache_ref=   2717611 items=       100 avg_time=   2564462 ns]
partial_tweets<simdjson_ondemand>/manual_time            1830928 ns      1900292 ns          382          82.843k           345.854M         22.868k       1.37406M    5.84474M               9.2551           547.658       3.20092G           8.9888M                    14.2337                     1.53793           54.7658k    83.2108k   631.515k       328.937M/s   22.8704k   1.37539M   5.85444M         9.27047    546.171/s 3.19753G/s      8.9888M               14.2337                1.53538        100       54.6171k/s [BEST: throughput=  0.35 GB/s doc_throughput=   547 docs/s instructions=     8988801 cycles=     5844737 branch_miss=   82843 cache_miss=   22868 cache_ref=   1374062 items=       100 avg_time=   1830927 ns]
partial_tweets<yyjson>/manual_time                       1207286 ns      1279048 ns          582          47.373k           591.867M         24.329k       1.43183M     3.4163M              5.40969           937.218       3.20182G          3.30073M                    5.22668                     0.96617           93.7218k     47.083k   631.515k       498.854M/s   24.2777k   1.43239M    3.6349M         5.75584    828.304/s  3.0108G/s     3.30081M                5.2268               0.908087        100       82.8304k/s [BEST: throughput=  0.59 GB/s doc_throughput=   937 docs/s instructions=     3300729 cycles=     3416303 branch_miss=   47373 cache_miss=   24329 cache_ref=   1431830 items=       100 avg_time=   1207286 ns]
partial_tweets<yyjson_insitu>/manual_time                1126462 ns      1198615 ns          625          47.222k           615.372M          14.27k        1.2736M    3.28578M              5.20302           974.438       3.20179G          3.20182M                    5.07006                    0.974446           97.4438k    47.0676k   631.515k       534.647M/s    14.329k   1.27334M   3.48982M         5.52611    887.735/s 3.09804G/s     3.20174M               5.06994               0.917451        100       88.7735k/s [BEST: throughput=  0.62 GB/s doc_throughput=   974 docs/s instructions=     3201820 cycles=     3285784 branch_miss=   47222 cache_miss=   14270 cache_ref=   1273596 items=       100 avg_time=   1126461 ns]
partial_tweets<sajson>/manual_time                       1475890 ns      1547331 ns          474          58.606k           429.094M         12.722k       1.87071M    4.71152M              7.46067           679.468       3.20133G          5.55211M                    8.79173                     1.17841           67.9468k    58.8396k   631.515k       408.065M/s   12.7362k   1.87124M    4.7187M         7.47204    677.557/s 3.19719G/s     5.55211M               8.79173                1.17662        100       67.7557k/s [BEST: throughput=  0.43 GB/s doc_throughput=   679 docs/s instructions=     5552109 cycles=     4711522 branch_miss=   58606 cache_miss=   12722 cache_ref=   1870713 items=       100 avg_time=   1475890 ns]
partial_tweets<rapidjson>/manual_time                    4605934 ns      4679466 ns          152          78.452k           139.264M         12.965k       13.3719M    14.4707M              22.9142           220.524       3.19113G          20.6849M                    32.7545                     1.42944           22.0524k    78.4806k   631.515k       130.757M/s   13.1651k   13.3764M   14.5055M         22.9693    217.111/s  3.1493G/s     20.6854M               32.7552                1.42604        100       21.7111k/s [BEST: throughput=  0.14 GB/s doc_throughput=   220 docs/s instructions=    20684945 cycles=    14470682 branch_miss=   78452 cache_miss=   12965 cache_ref=  13371887 items=       100 avg_time=   4605933 ns]
partial_tweets<rapidjson_insitu>/manual_time             2894205 ns      2968476 ns          242          61.766k           222.796M         13.748k       5.85165M     9.0724M              14.3661           352.796        3.2007G          12.8462M                    20.3419                     1.41597           35.2796k    61.6149k   631.515k       208.092M/s   13.9074k   5.85241M   9.09593M         14.4033    345.518/s 3.14281G/s     12.8467M               20.3427                1.41236        100       34.5518k/s [BEST: throughput=  0.22 GB/s doc_throughput=   352 docs/s instructions=    12846199 cycles=     9072397 branch_miss=   61766 cache_miss=   13748 cache_ref=   5851653 items=       100 avg_time=   2894204 ns]
partial_tweets<nlohmann_json>/manual_time               21326362 ns     21423187 ns           33         403.147k            31.428M        197.878k       49.0328M    64.2367M              101.718           49.7661       3.19681G          78.4361M                    124.203                     1.22105           4.97661k    423.474k   631.515k       28.2401M/s   254.106k   49.1052M   68.1658M          107.94    46.8903/s 3.19631G/s     78.3654M               124.091                1.14963        100       4.68903k/s [BEST: throughput=  0.03 GB/s doc_throughput=    49 docs/s instructions=    78436072 cycles=    64236712 branch_miss=  403147 cache_miss=  197878 cache_ref=  49032786 items=       100 avg_time=  21326361 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 318988219 ns    322578991 ns            2         4.61803M           144.275M        3.98252M       275.154M    1019.28M               22.159            3.1365       3.19699G          1.43812G                    31.2643                     1.41091            3.1365M    4.61855M   45.9988M       137.522M/s   3.98264M   275.144M   1019.55M         22.1647    3.13491/s  3.1962G/s     1.43812G               31.2643                1.41054      1000k       3.13491M/s [BEST: throughput=  0.14 GB/s doc_throughput=     3 docs/s instructions=  1438120509 cycles=  1019284596 branch_miss= 4618033 cache_miss= 3982519 cache_ref= 275153735 items=   1000000 avg_time= 318988218 ns]
large_random<simdjson_ondemand>/manual_time            263967294 ns    267567660 ns            3         3.85906M           174.281M        2.31953M       206.869M    843.756M               18.343           3.78882       3.19683G          1074.98M                    23.3697                     1.27404           3.78882M    3.85929M   45.9988M       166.187M/s   2.31956M   206.862M   843.749M         18.3429    3.78835/s 3.19641G/s     1074.98M               23.3697                1.27405      1000k       3.78835M/s [BEST: throughput=  0.17 GB/s doc_throughput=     3 docs/s instructions=  1074978763 cycles=   843755804 branch_miss= 3859059 cache_miss= 2319527 cache_ref= 206868665 items=   1000000 avg_time= 263967294 ns]
large_random<simdjson_ondemand_unordered>/manual_time  242601415 ns    246209260 ns            3         3.84837M           189.645M        2.31959M       206.899M    775.373M              16.8564           4.12282       3.19673G          1086.98M                    23.6306                     1.40188           4.12282M    3.84814M   45.9988M       180.823M/s   2.31963M   206.901M   775.378M         16.8565    4.12199/s  3.1961G/s     1086.98M               23.6306                1.40187      1000k       4.12199M/s [BEST: throughput=  0.19 GB/s doc_throughput=     4 docs/s instructions=  1086978764 cycles=   775373006 branch_miss= 3848373 cache_miss= 2319590 cache_ref= 206899140 items=   1000000 avg_time= 242601414 ns]
large_random<yyjson>/manual_time                       204985486 ns    208589816 ns            3         1.56533M           224.433M        4.91336M       212.737M    629.606M              13.6875            4.8791       3.07191G          823.384M                    17.9001                     1.30778            4.8791M    1.56765M   45.9988M       214.005M/s   4.91348M   212.744M   629.713M         13.6898    4.87839/s 3.07199G/s     823.384M               17.9001                1.30755      1000k       4.87839M/s [BEST: throughput=  0.22 GB/s doc_throughput=     4 docs/s instructions=   823383996 cycles=   629606174 branch_miss= 1565328 cache_miss= 4913363 cache_ref= 212737344 items=   1000000 avg_time= 204985485 ns]
large_random<yyjson_insitu>/manual_time                198967281 ns    202590979 ns            4         1.55904M           231.263M        4.19628M       201.215M    617.355M              13.4211           5.02758        3.1038G          816.196M                    17.7439                     1.32209           5.02758M    1.56789M   45.9988M       220.478M/s   4.19633M   201.239M   617.575M         13.4259    5.02595/s  3.1039G/s     816.196M               17.7439                1.32161      1000k       5.02595M/s [BEST: throughput=  0.23 GB/s doc_throughput=     5 docs/s instructions=   816196469 cycles=   617355486 branch_miss= 1559040 cache_miss= 4196277 cache_ref= 201214735 items=   1000000 avg_time= 198967281 ns]
large_random<sajson>/manual_time                       210220462 ns    213846105 ns            3         1.51303M           224.837M        3.44473M       213.117M    653.945M              14.2166           4.88789       3.19641G          963.995M                     20.957                     1.47412           4.88789M    1.51308M   45.9988M       208.675M/s   3.44489M   213.116M   672.023M         14.6096    4.75691/s 3.19676G/s     963.995M                20.957                1.43447      1000k       4.75691M/s [BEST: throughput=  0.22 GB/s doc_throughput=     4 docs/s instructions=   963995039 cycles=   653944667 branch_miss= 1513025 cache_miss= 3444734 cache_ref= 213117166 items=   1000000 avg_time= 210220462 ns]
large_random<rapidjson>/manual_time                    372256737 ns    375881435 ns            2         3.24049M           123.823M        4.95186M       782.291M    1.16015G              25.2213           2.69187       3.12297G          1.64651G                    35.7947                     1.41922           2.69187M    3.24594M   45.9988M       117.843M/s   4.95263M   782.318M    1.1602G         25.2224    2.68632/s 3.11666G/s     1.64652G               35.7948                1.41917      1000k       2.68632M/s [BEST: throughput=  0.12 GB/s doc_throughput=     2 docs/s instructions=  1646510167 cycles=  1160149999 branch_miss= 3240488 cache_miss= 4951863 cache_ref= 782290614 items=   1000000 avg_time= 372256736 ns]
large_random<rapidjson_lossless>/manual_time           410328619 ns    413915480 ns            2         1.35241M           112.242M        4.95259M          1021M    1.28248G              27.8808            2.4401       3.12939G          2.06348G                    44.8595                     1.60897            2.4401M    1.35261M   45.9988M       106.909M/s   4.95325M   1021.01M   1.28192G         27.8687    2.43707/s 3.12414G/s     2.06349G               44.8596                1.60968      1000k       2.43707M/s [BEST: throughput=  0.11 GB/s doc_throughput=     2 docs/s instructions=  2063483514 cycles=  1282484713 branch_miss= 1352413 cache_miss= 4952590 cache_ref=1020998754 items=   1000000 avg_time= 410328619 ns]
large_random<rapidjson_insitu>/manual_time             358303230 ns    361929701 ns            2         2.17875M           128.702M        5.67394M       696.195M    1.11527G              24.2457           2.79794       3.12047G          1.39851G                    30.4032                     1.25396           2.79794M    2.17916M   45.9988M       122.432M/s   5.67493M   696.206M   1.11586G         24.2584    2.79093/s 3.11428G/s     1.39851G               30.4033                1.25331      1000k       2.79093M/s [BEST: throughput=  0.13 GB/s doc_throughput=     2 docs/s instructions=  1398510033 cycles=  1115274112 branch_miss= 2178754 cache_miss= 5673936 cache_ref= 696195366 items=   1000000 avg_time= 358303230 ns]
large_random<nlohmann_json>/manual_time               3048902163 ns   3052477370 ns            1         22.8139M            15.087M         27.292M       6.61507G    9.74142G              211.776          0.327987       3.19506G           12.447G                    270.594                     1.27774           327.987k    22.8139M   45.9988M       14.3881M/s    27.292M   6.61507G   9.74142G         211.776   0.327987/s 3.19506G/s      12.447G               270.594                1.27774      1000k       327.987k/s [BEST: throughput=  0.02 GB/s doc_throughput=     0 docs/s instructions= 12446977060 cycles=  9741421064 branch_miss=22813937 cache_miss=27292040 cache_ref=6615066373 items=   1000000 avg_time=3048902163 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                       517467405 ns    528157402 ns            1         15.4415M            265.34M        6.95521M       498.111M    1.65414G              12.0472           1.93249        3.1966G           2.3857G                    17.3752                     1.44226           1013.18k    15.4415M   137.305M       253.048M/s   6.95521M   498.111M   1.65414G         12.0472    1.93249/s  3.1966G/s      2.3857G               17.3752                1.44226   524.288k       1013.18k/s [BEST: throughput=  0.27 GB/s doc_throughput=     1 docs/s instructions=  2385698406 cycles=  1654137501 branch_miss=15441500 cache_miss= 6955205 cache_ref= 498111381 items=    524288 avg_time= 517467405 ns]
kostya<simdjson_ondemand>/manual_time                  444201628 ns    454836157 ns            2         14.9795M           309.151M        5.29018M       396.072M    1.41981G              10.3406           2.25156       3.19679G          1.96952G                    14.3441                     1.38717           1.18047M    14.9849M   137.305M       294.786M/s   5.29021M   396.094M   1.41991G         10.3413    2.25123/s 3.19654G/s     1.96952G               14.3441                1.38707   524.288k       1.18029M/s [BEST: throughput=  0.31 GB/s doc_throughput=     2 docs/s instructions=  1969515287 cycles=  1419809957 branch_miss=14979455 cache_miss= 5290184 cache_ref= 396072239 items=    524288 avg_time= 444201628 ns]
kostya<yyjson>/manual_time                             297132515 ns    307789335 ns            2         1.60488M           462.443M        7.97267M       336.903M    905.896M              6.59769             3.368       3.05106G          970.289M                    7.06667                     1.07108            1.7658M    1.59978M   137.305M       440.693M/s   7.97354M   336.884M   906.531M         6.60231     3.3655/s 3.05093G/s     970.289M               7.06667                1.07033   524.288k       1.76449M/s [BEST: throughput=  0.46 GB/s doc_throughput=     3 docs/s instructions=   970289228 cycles=   905896001 branch_miss= 1604877 cache_miss= 7972666 cache_ref= 336902773 items=    524288 avg_time= 297132515 ns]
kostya<yyjson_insitu>/manual_time                      278952647 ns    289609324 ns            2         1.59311M           492.877M        5.83264M        302.57M    868.102M              6.32243           3.58965       3.11618G          948.835M                    6.91042                       1.093           1.88201M    1.59762M   137.305M       469.414M/s   5.83368M   302.573M   869.243M         6.33074    3.58484/s 3.11609G/s     948.835M               6.91042                1.09156   524.288k       1.87949M/s [BEST: throughput=  0.49 GB/s doc_throughput=     3 docs/s instructions=   948834698 cycles=   868101706 branch_miss= 1593106 cache_miss= 5832639 cache_ref= 302570392 items=    524288 avg_time= 278952647 ns]
kostya<sajson>/manual_time                             411453306 ns    422108469 ns            2         7.64227M           334.781M        4.63358M       421.384M    1.31094G              9.54762           2.43823       3.19636G          1.41335G                    10.2935                     1.07813           1.27833M    7.74578M   137.305M       318.248M/s   4.63344M   421.544M   1.31515G         9.57832    2.43041/s 3.19636G/s     1.41335G               10.2935                1.07467   524.288k       1.27423M/s [BEST: throughput=  0.33 GB/s doc_throughput=     2 docs/s instructions=  1413353471 cycles=  1310935662 branch_miss= 7642266 cache_miss= 4633583 cache_ref= 421384311 items=    524288 avg_time= 411453306 ns]
kostya<rapidjson>/manual_time                          693354997 ns    609959826 ns            1         6.27801M            198.03M        5.38488M       1.21554G    1.87919G              13.6863           1.44226       2.71029G          2.47806G                    18.0479                     1.31869           756.161k    6.27801M   137.305M       188.856M/s   5.38488M   1.21554G   1.87919G         13.6863    1.44226/s 2.71029G/s     2.47806G               18.0479                1.31869   524.288k       756.161k/s [BEST: throughput=  0.20 GB/s doc_throughput=     1 docs/s instructions=  2478063795 cycles=  1879192247 branch_miss= 6278007 cache_miss= 5384881 cache_ref=1215538022 items=    524288 avg_time= 693354997 ns]
kostya<rapidjson_lossless>/manual_time                 627403892 ns    638083625 ns            1         7.39465M           218.846M        5.38872M       1.35253G    1.96966G              14.3452           1.59387       3.13939G          2.71975G                    19.8081                     1.38082           835.647k    7.39465M   137.305M       208.708M/s   5.38872M   1.35253G   1.96966G         14.3452    1.59387/s 3.13939G/s     2.71975G               19.8081                1.38082   524.288k       835.647k/s [BEST: throughput=  0.22 GB/s doc_throughput=     1 docs/s instructions=  2719752322 cycles=  1969663247 branch_miss= 7394645 cache_miss= 5388715 cache_ref=1352532562 items=    524288 avg_time= 627403892 ns]
kostya<rapidjson_insitu>/manual_time                   543879656 ns    554545892 ns            1         7.30942M           252.455M         6.3627M       912.452M    1.70312G              12.4039           1.83864       3.13143G          2.00528G                    14.6045                     1.17741           963.978k    7.30942M   137.305M        240.76M/s    6.3627M   912.452M   1.70312G         12.4039    1.83864/s 3.13143G/s     2.00528G               14.6045                1.17741   524.288k       963.978k/s [BEST: throughput=  0.25 GB/s doc_throughput=     1 docs/s instructions=  2005275562 cycles=  1703120639 branch_miss= 7309421 cache_miss= 6362701 cache_ref= 912452248 items=    524288 avg_time= 543879656 ns]
kostya<nlohmann_json>/manual_time                     5224520563 ns   5200754181 ns            1         44.1579M           26.2809M         37.974M       10.5314G    16.5896G              120.823          0.191405       3.17534G          17.4035G                    126.751                     1.04906           100.351k    44.1579M   137.305M       25.0634M/s    37.974M   10.5314G   16.5896G         120.823   0.191405/s 3.17534G/s     17.4035G               126.751                1.04906   524.288k       100.351k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 17403521379 cycles= 16589648677 branch_miss=44157875 cache_miss=37974004 cache_ref=10531351793 items=    524288 avg_time=5224520563 ns]
distinct_user_id<simdjson_dom>/manual_time               2554954 ns      2638183 ns          274         106.611k            247.71M         26.511k       2.70241M    8.15985M              12.9211           392.247       3.20068G          13.7071M                    21.7051                     1.67982           45.1084k    106.733k   631.515k       235.722M/s   26.5196k   2.70264M   8.16863M          12.935    391.397/s 3.19717G/s     13.7071M               21.7051                1.67801        115       45.0106k/s [BEST: throughput=  0.25 GB/s doc_throughput=   392 docs/s instructions=    13707078 cycles=     8159853 branch_miss=  106611 cache_miss=   26511 cache_ref=   2702414 items=       115 avg_time=   2554953 ns]
distinct_user_id<simdjson_ondemand>/manual_time          1796476 ns      1880936 ns          389          84.549k           352.303M         22.633k       1.26695M    5.73816M              9.08634           557.869       3.20114G          8.54206M                    13.5263                     1.48864            64.155k    84.7776k   631.515k       335.245M/s   22.6469k   1.26745M    5.7443M         9.09606    556.645/s 3.19754G/s     8.54206M               13.5263                1.48705        115       64.0142k/s [BEST: throughput=  0.35 GB/s doc_throughput=   557 docs/s instructions=     8542057 cycles=     5738158 branch_miss=   84549 cache_miss=   22633 cache_ref=   1266949 items=       115 avg_time=   1796476 ns]
distinct_user_id<yyjson>/manual_time                     1160421 ns      1247141 ns          626          47.295k           600.331M         24.267k       1.41809M    3.36819M              5.33351           950.621       3.20187G          3.26358M                    5.16787                    0.968942           109.321k    47.1958k   631.515k       519.001M/s   24.2686k   1.41957M   3.58037M          5.6695    861.757/s 3.08541G/s     3.26345M               5.16765               0.911482        115        99.102k/s [BEST: throughput=  0.60 GB/s doc_throughput=   950 docs/s instructions=     3263585 cycles=     3368193 branch_miss=   47295 cache_miss=   24267 cache_ref=   1418091 items=       115 avg_time=   1160420 ns]
distinct_user_id<yyjson_insitu>/manual_time              1106681 ns      1193873 ns          634          47.345k           626.787M         14.304k       1.26039M    3.22605M              5.10843           992.512        3.2019G          3.16427M                    5.01061                     0.98085           114.139k    47.2334k   631.515k       544.203M/s   14.3479k   1.26043M   3.42544M         5.42416    903.603/s 3.09524G/s     3.16443M               5.01085               0.923801        115       103.914k/s [BEST: throughput=  0.63 GB/s doc_throughput=   992 docs/s instructions=     3164273 cycles=     3226052 branch_miss=   47345 cache_miss=   14304 cache_ref=   1260386 items=       115 avg_time=   1106681 ns]
distinct_user_id<sajson>/manual_time                     1461670 ns      1548494 ns          479          58.463k           433.149M         12.775k         1.857M    4.66709M              7.39031           685.889       3.20111G          5.49513M                     8.7015                     1.17742           78.8773k    58.8144k   631.515k       412.035M/s   12.7976k   1.85814M   4.67345M         7.40038    684.149/s 3.19734G/s     5.49513M                8.7015                1.17582        115       78.6771k/s [BEST: throughput=  0.43 GB/s doc_throughput=   685 docs/s instructions=     5495126 cycles=     4667094 branch_miss=   58463 cache_miss=   12775 cache_ref=   1857004 items=       115 avg_time=   1461669 ns]
distinct_user_id<rapidjson>/manual_time                  5080527 ns      5169500 ns          100          78.338k           139.948M          13.78k       13.3705M    14.4418M              22.8685           221.607       3.20039G          20.6372M                    32.6789                     1.42899           25.4847k    78.3964k   631.515k       118.543M/s   14.0239k   13.3655M   14.4973M         22.9565     196.83/s 2.85351G/s     20.6378M               32.6798                1.42355        115       22.6354k/s [BEST: throughput=  0.14 GB/s doc_throughput=   221 docs/s instructions=    20637187 cycles=    14441784 branch_miss=   78338 cache_miss=   13780 cache_ref=  13370539 items=       115 avg_time=   5080526 ns]
distinct_user_id<rapidjson_insitu>/manual_time           2879918 ns      2968934 ns          245          61.531k           224.294M         14.212k       5.84376M    9.01179M              14.2701           355.168        3.2007G          12.7985M                    20.2663                     1.42019           40.8443k    61.5608k   631.515k       209.124M/s   14.3572k    5.8444M   9.04735M         14.3264    347.232/s 3.14153G/s     12.7989M                20.267                1.41466        115       39.9317k/s [BEST: throughput=  0.22 GB/s doc_throughput=   355 docs/s instructions=    12798453 cycles=     9011791 branch_miss=   61531 cache_miss=   14212 cache_ref=   5843764 items=       115 avg_time=   2879918 ns]
distinct_user_id<nlohmann_json>/manual_time             20362509 ns     20456395 ns           35         365.073k           33.3829M        165.117k       46.5511M    60.4613M                95.74           52.8616       3.19608G          73.7561M                    116.792                     1.21989           6.07909k    381.697k   631.515k       29.5769M/s   227.161k   45.9837M   65.0828M         103.058    49.1099/s 3.19621G/s     72.1219M               114.205                1.10816        115       5.64763k/s [BEST: throughput=  0.03 GB/s doc_throughput=    52 docs/s instructions=    73756129 cycles=    60461263 branch_miss=  365073 cache_miss=  165117 cache_ref=  46551133 items=       115 avg_time=  20362508 ns]
find_tweet<simdjson_dom>/manual_time                     2502953 ns      2588691 ns          280         106.224k           252.861M         23.532k       2.68777M     7.9936M              12.6578           400.403       3.20067G          13.6167M                    21.5619                     1.70345            400.403    106.493k   631.515k        240.62M/s   23.5238k   2.68835M   8.00229M         12.6716    399.528/s 3.19714G/s     13.6167M               21.5619                 1.7016          1        399.528/s [BEST: throughput=  0.25 GB/s doc_throughput=   400 docs/s instructions=    13616667 cycles=     7993605 branch_miss=  106224 cache_miss=   23532 cache_ref=   2687773 items=         1 avg_time=   2502952 ns]
find_tweet<simdjson_ondemand>/manual_time                1654411 ns      1741101 ns          423          77.624k           382.349M          11.56k       1070.66k    5.28688M              8.37174           605.448       3.20093G          7.99241M                    12.6559                     1.51174            605.448     77.705k   631.515k       364.033M/s   11.5649k   1070.88k   5.28999M         8.37667    604.445/s 3.19751G/s      7.9924M               12.6559                1.51085          1        604.445/s [BEST: throughput=  0.38 GB/s doc_throughput=   605 docs/s instructions=     7992407 cycles=     5286877 branch_miss=   77624 cache_miss=   11560 cache_ref=   1070658 items=         1 avg_time=   1654411 ns]
find_tweet<yyjson>/manual_time                           1141207 ns      1233489 ns          618          47.223k           617.632M          21.73k       1.40382M    3.22132M              5.10093           978.017        3.1505G          3.20653M                    5.07753                    0.995412            978.017    47.2085k   631.515k       527.739M/s   21.7877k    1.4045M   3.42508M         5.42359    876.265/s 3.00128G/s     3.20714M               5.07848               0.936369          1        876.265/s [BEST: throughput=  0.62 GB/s doc_throughput=   978 docs/s instructions=     3206534 cycles=     3221315 branch_miss=   47223 cache_miss=   21730 cache_ref=   1403817 items=         1 avg_time=   1141207 ns]
find_tweet<yyjson_insitu>/manual_time                    1063027 ns      1157096 ns          661          47.396k           654.337M         11.865k       1.24612M    3.09028M              4.89343           1036.14       3.20195G          3.10793M                    4.92139                     1.00571            1036.14    47.2655k   631.515k       566.552M/s   11.8829k   1.24556M    3.2856M         5.20272     940.71/s 3.09079G/s     3.10808M               4.92162                0.94597          1         940.71/s [BEST: throughput=  0.65 GB/s doc_throughput=  1036 docs/s instructions=     3107929 cycles=     3090276 branch_miss=   47396 cache_miss=   11865 cache_ref=   1246117 items=         1 avg_time=   1063026 ns]
find_tweet<sajson>/manual_time                           1416494 ns      1508373 ns          494          58.611k           446.937M          10.21k       1.83813M     4.5233M              7.16262           707.722       3.20124G           5.4077M                    8.56307                     1.19552            707.722    58.7327k   631.515k       425.176M/s   10.2212k   1.83822M   4.52941M         7.17229    705.968/s 3.19762G/s      5.4077M               8.56306                1.19391          1        705.968/s [BEST: throughput=  0.45 GB/s doc_throughput=   707 docs/s instructions=     5407705 cycles=     4523300 branch_miss=   58611 cache_miss=   10210 cache_ref=   1838132 items=         1 avg_time=   1416493 ns]
find_tweet<rapidjson>/manual_time                        4556522 ns      4652126 ns          153          78.154k           140.882M         11.004k       13.3497M    14.3462M              22.7171           223.085       3.20042G          20.5765M                    32.5827                     1.43428            223.085    78.2908k   631.515k       132.175M/s   11.2943k    13.356M   14.3878M          22.783    219.466/s 3.15764G/s     20.5769M               32.5835                1.43016          1        219.466/s [BEST: throughput=  0.14 GB/s doc_throughput=   223 docs/s instructions=    20576453 cycles=    14346167 branch_miss=   78154 cache_miss=   11004 cache_ref=  13349666 items=         1 avg_time=   4556521 ns]
find_tweet<rapidjson_insitu>/manual_time                 2844812 ns      2944115 ns          247          61.357k           226.876M         10.912k       5.82653M    8.90905M              14.1074           359.257       3.20064G          12.7376M                    20.1699                     1.42974            359.257     61.527k   631.515k       211.705M/s   11.0915k   5.82776M   8.93745M         14.1524    351.517/s 3.14166G/s     12.7382M               20.1708                1.42526          1        351.517/s [BEST: throughput=  0.23 GB/s doc_throughput=   359 docs/s instructions=    12737580 cycles=     8909047 branch_miss=   61357 cache_miss=   10912 cache_ref=   5826532 items=         1 avg_time=   2844811 ns]
find_tweet<nlohmann_json>/manual_time                   17815913 ns     17928725 ns           42         277.965k           39.6334M         89.846k       40.7826M    50.9482M              80.6761           62.7592       3.19746G          63.5544M                    100.638                     1.24743            62.7592    293.229k   631.515k       33.8046M/s    144.51k   40.2046M    56.936M         90.1577    56.1296/s 3.19579G/s     61.9236M               98.0556                 1.0876          1        56.1296/s [BEST: throughput=  0.04 GB/s doc_throughput=    62 docs/s instructions=    63554377 cycles=    50948153 branch_miss=  277965 cache_miss=   89846 cache_ref=  40782617 items=         1 avg_time=  17815913 ns]
top_tweet<simdjson_dom>/manual_time                      2538837 ns      2639478 ns          276         106.697k           249.226M         25.655k       2.69489M    8.11014M              12.8424           394.648       3.20065G          13.6559M                    21.6241                     1.68381            394.648     106.83k   631.515k       237.219M/s   25.6457k   2.69572M   8.11702M         12.8533    393.881/s 3.19714G/s     13.6559M               21.6241                1.68238          1        393.881/s [BEST: throughput=  0.25 GB/s doc_throughput=   394 docs/s instructions=    13655943 cycles=     8110144 branch_miss=  106697 cache_miss=   25655 cache_ref=   2694890 items=         1 avg_time=   2538836 ns]
top_tweet<simdjson_ondemand>/manual_time                 1803795 ns      1907289 ns          386          84.787k           351.275M          22.72k       1.26716M    5.75488M              9.11282           556.242       3.20111G          8.54636M                    13.5331                     1.48506            556.242    85.3238k   631.515k       333.885M/s   22.7289k   1.26825M   5.76503M          9.1289    554.387/s 3.19606G/s     8.54637M               13.5331                1.48245          1        554.387/s [BEST: throughput=  0.35 GB/s doc_throughput=   556 docs/s instructions=     8546364 cycles=     5754884 branch_miss=   84787 cache_miss=   22720 cache_ref=   1267160 items=         1 avg_time=   1803794 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time    1823121 ns      1928577 ns          383          83.421k            347.41M         22.784k       1.33574M    5.81849M              9.21354           550.122       3.20088G          8.82556M                    13.9752                     1.51681            550.122    83.6271k   631.515k       330.345M/s   22.7934k   1.33585M   5.82697M         9.22697     548.51/s 3.19615G/s     8.82556M               13.9752                1.51461          1         548.51/s [BEST: throughput=  0.35 GB/s doc_throughput=   550 docs/s instructions=     8825561 cycles=     5818491 branch_miss=   83421 cache_miss=   22784 cache_ref=   1335743 items=         1 avg_time=   1823121 ns]
top_tweet<yyjson>/manual_time                            1173732 ns      1283959 ns          603          47.549k           600.471M         23.263k       1.41023M     3.3218M              5.26006           950.842       3.15851G          3.23137M                    5.11686                    0.972776            950.842    47.2897k   631.515k       513.115M/s   23.2773k   1.41052M   3.52894M         5.58805    851.984/s  3.0066G/s     3.23159M                5.1172                0.91574          1        851.984/s [BEST: throughput=  0.60 GB/s doc_throughput=   950 docs/s instructions=     3231372 cycles=     3321804 branch_miss=   47549 cache_miss=   23263 cache_ref=   1410230 items=         1 avg_time=   1173731 ns]
top_tweet<yyjson_insitu>/manual_time                     1092571 ns      1205163 ns          642          47.455k           636.187M         13.408k       1.25168M    3.17855M              5.03321            1007.4       3.20206G          3.13247M                    4.96024                    0.985503             1007.4    47.3424k   631.515k       551.232M/s   13.3957k   1.25148M   3.37918M         5.35091    915.273/s 3.09287G/s     3.13253M               4.96034               0.927008          1        915.273/s [BEST: throughput=  0.64 GB/s doc_throughput=  1007 docs/s instructions=     3132467 cycles=     3178547 branch_miss=   47455 cache_miss=   13408 cache_ref=   1251684 items=         1 avg_time=   1092570 ns]
top_tweet<sajson>/manual_time                            1437425 ns      1550769 ns          487          58.734k           440.583M         11.847k       1.84521M    4.58849M              7.26585           697.661       3.20121G          5.43458M                    8.60562                     1.18439            697.661     58.967k   631.515k       418.985M/s   11.8408k   1.84587M   4.59564M         7.27716    695.688/s 3.19713G/s     5.43458M               8.60562                1.18255          1        695.688/s [BEST: throughput=  0.44 GB/s doc_throughput=   697 docs/s instructions=     5434579 cycles=     4588491 branch_miss=   58734 cache_miss=   11847 cache_ref=   1845215 items=         1 avg_time=   1437425 ns]
top_tweet<rapidjson>/manual_time                         4579803 ns      4698883 ns          153          78.381k           140.297M         12.905k       13.3685M    14.4064M              22.8124           222.159       3.20051G          20.6205M                    32.6525                     1.43134            222.159     78.464k   631.515k       131.503M/s   13.1857k   13.3652M   14.4595M         22.8966     218.35/s 3.15724G/s     20.6211M               32.6534                1.42613          1         218.35/s [BEST: throughput=  0.14 GB/s doc_throughput=   222 docs/s instructions=    20620522 cycles=    14406398 branch_miss=   78381 cache_miss=   12905 cache_ref=  13368543 items=         1 avg_time=   4579802 ns]
top_tweet<rapidjson_insitu>/manual_time                  2875802 ns      2996082 ns          244          61.358k            224.59M         13.152k       5.83535M    8.99996M              14.2514           355.637       3.20072G          12.7817M                    20.2397                     1.42019            355.637    61.5976k   631.515k       209.423M/s    13.299k   5.83724M   9.03445M          14.306    347.729/s 3.14154G/s     12.7823M               20.2406                1.41484          1        347.729/s [BEST: throughput=  0.22 GB/s doc_throughput=   355 docs/s instructions=    12781675 cycles=     8999960 branch_miss=   61358 cache_miss=   13152 cache_ref=   5835351 items=         1 avg_time=   2875801 ns]
top_tweet<nlohmann_json>/manual_time                    22829186 ns     22953872 ns           31         465.241k           27.7015M        354.167k       52.6642M     72.858M               115.37           43.8652       3.19593G          85.6451M                    135.618                     1.17551            43.8652    467.402k   631.515k       26.3811M/s   354.978k   52.6875M   72.9677M         115.544    43.8036/s 3.19624G/s     85.6787M               135.672                 1.1742          1        43.8036/s [BEST: throughput=  0.03 GB/s doc_throughput=    43 docs/s instructions=    85645060 cycles=    72857964 branch_miss=  465241 cache_miss=  354167 cache_ref=  52664163 items=         1 avg_time=  22829185 ns]
