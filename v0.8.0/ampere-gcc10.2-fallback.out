run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-gcc10.2-fallback.json -DSIMDJSON_IMPLEMENTATION=fallback
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DSIMDJSON_IMPLEMENTATION=fallback ..
-- The CXX compiler identification is GNU 10.2.0
-- The C compiler identification is GNU 10.2.0
-- Check for working CXX compiler: /usr/bin/g++-10
-- Check for working CXX compiler: /usr/bin/g++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/gcc-10
-- Check for working C compiler: /usr/bin/gcc-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Including implementation fallback due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation westmere due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation haswell due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation arm64 due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation ppc64 due to SIMDJSON_IMPLEMENTATION=fallback
-- Selected implementation fallback as builtin implementation based on fallback.
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Failed
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Failed
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-gcc10.2-fallback.json --benchmark_out_format=json
2021-01-23 05:45:02
Running benchmark/bench_ondemand
Run on (32 X 3300 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x32)
  L1 Instruction 32 KiB (x32)
  L2 Unified 256 KiB (x16)
Load Average: 1.04, 1.02, 1.00
simdjson::dom implementation:      fallback
simdjson::ondemand implementation: fallback

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                 2542385 ns      2610609 ns          275         102.622k           249.224M         25.925k       1.99689M    8.11055M               12.843           394.644       3.20078G           12.511M                     19.811                     1.54255           39.4644k    103.093k   631.515k       236.888M/s   25.9281k   1.99694M   8.12872M         12.8718    393.331/s 3.19728G/s      12.511M                19.811                 1.5391        100       39.3331k/s [BEST: throughput=  0.25 GB/s doc_throughput=   394 docs/s instructions=    12510956 cycles=     8110546 branch_miss=  102622 cache_miss=   25925 cache_ref=   1996893 items=       100 avg_time=   2542384 ns]
partial_tweets<simdjson_ondemand>/manual_time            1854796 ns      1923064 ns          377          71.299k           341.466M         22.765k       1054.73k    5.91991M              9.37415           540.709       3.20095G          8.85005M                     14.014                     1.49496           54.0709k    71.7566k   631.515k       324.704M/s   22.7658k    1055.4k   5.93091M         9.39155    539.143/s 3.19761G/s     8.85005M                14.014                1.49219        100       53.9143k/s [BEST: throughput=  0.34 GB/s doc_throughput=   540 docs/s instructions=     8850049 cycles=     5919914 branch_miss=   71299 cache_miss=   22765 cache_ref=   1054728 items=       100 avg_time=   1854796 ns]
partial_tweets<yyjson>/manual_time                       1241205 ns      1312417 ns          567          48.035k           575.891M          24.43k       1.49247M    3.51088M              5.55945            911.92       3.20164G          3.54891M                    5.61968                     1.01083            91.192k    47.8788k   631.515k       485.222M/s   24.3861k   1.49352M   3.74599M         5.93175    805.669/s 3.01803G/s     3.54899M                5.6198               0.947409        100       80.5669k/s [BEST: throughput=  0.58 GB/s doc_throughput=   911 docs/s instructions=     3548911 cycles=     3510876 branch_miss=   48035 cache_miss=   24430 cache_ref=   1492467 items=       100 avg_time=   1241204 ns]
partial_tweets<yyjson_insitu>/manual_time                1160167 ns      1231842 ns          606           47.98k           597.379M         14.445k         1.334M    3.38506M              5.36021           945.946       3.20208G             3.45M                    5.46306                     1.01919           94.5946k    47.8388k   631.515k       519.115M/s     14.48k   1.33426M   3.59832M         5.69792    861.945/s 3.10156G/s     3.44993M               5.46294                0.95876        100       86.1945k/s [BEST: throughput=  0.60 GB/s doc_throughput=   945 docs/s instructions=     3450004 cycles=     3385056 branch_miss=   47980 cache_miss=   14445 cache_ref=   1333997 items=       100 avg_time=   1160166 ns]
partial_tweets<sajson>/manual_time                       1489389 ns      1559777 ns          469           69.88k           425.172M         12.743k       1.87886M    4.75474M               7.5291           673.257       3.20116G          5.31238M                    8.41212                     1.11728           67.3257k    70.2911k   631.515k       404.367M/s   12.7393k   1.88018M   4.76258M         7.54152    671.416/s 3.19767G/s     5.31238M               8.41213                1.11544        100       67.1416k/s [BEST: throughput=  0.43 GB/s doc_throughput=   673 docs/s instructions=     5312383 cycles=     4754739 branch_miss=   69880 cache_miss=   12743 cache_ref=   1878863 items=       100 avg_time=   1489388 ns]
partial_tweets<rapidjson>/manual_time                    2814619 ns      2887858 ns          249          74.962k           230.835M         12.981k       6.27077M     8.7564M              13.8657           365.525       3.20068G          13.3644M                    21.1624                     1.52624           36.5525k    74.5836k   631.515k       213.976M/s   13.2108k   6.27195M   8.79571M         13.9279    355.288/s 3.12501G/s     13.3649M               21.1633                1.51948        100       35.5288k/s [BEST: throughput=  0.23 GB/s doc_throughput=   365 docs/s instructions=    13364371 cycles=     8756400 branch_miss=   74962 cache_miss=   12981 cache_ref=   6270773 items=       100 avg_time=   2814619 ns]
partial_tweets<rapidjson_insitu>/manual_time             2125771 ns      2199068 ns          330           60.24k           305.973M         13.663k       3.44023M    6.60619M              10.4609           484.507       3.20074G          9.76603M                    15.4644                     1.47832           48.4507k    60.1286k   631.515k       283.314M/s   13.8272k   3.44034M   6.64725M         10.5259    470.418/s 3.12698G/s     9.76655M               15.4653                1.46926        100       47.0418k/s [BEST: throughput=  0.31 GB/s doc_throughput=   484 docs/s instructions=     9766030 cycles=     6606188 branch_miss=   60240 cache_miss=   13663 cache_ref=   3440230 items=       100 avg_time=   2125771 ns]
partial_tweets<nlohmann_json>/manual_time               17418817 ns     17515180 ns           40         365.849k           39.0529M        197.844k       39.7009M    51.7136M              81.8882           61.8401       3.19797G          70.6581M                    111.887                     1.36633           6.18401k    381.474k   631.515k       34.5752M/s   253.017k   39.8405M   55.6839M          88.175    57.4092/s 3.19676G/s     70.7874M               112.091                1.27124        100       5.74092k/s [BEST: throughput=  0.04 GB/s doc_throughput=    61 docs/s instructions=    70658101 cycles=    51713628 branch_miss=  365849 cache_miss=  197844 cache_ref=  39700862 items=       100 avg_time=  17418816 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 335903356 ns    339495991 ns            2         3.58383M           137.977M        3.98111M       263.974M    1065.87M              23.1716           2.99959       3.19716G          1.56549G                    34.0333                     1.46875           2.99959M    3.93977M   45.9988M       130.597M/s   3.98109M   264.314M   1073.92M         23.3467    2.97705/s  3.1971G/s     1.56549G               34.0333                1.45774      1000k       2.97705M/s [BEST: throughput=  0.14 GB/s doc_throughput=     2 docs/s instructions=  1565488707 cycles=  1065866932 branch_miss= 3583831 cache_miss= 3981114 cache_ref= 263974103 items=   1000000 avg_time= 335903356 ns]
large_random<simdjson_ondemand>/manual_time            254263621 ns    257868720 ns            3         3.36916M           183.511M        2.31788M       180.741M    801.401M              17.4222           3.98948       3.19717G          1.18497G                     25.761                     1.47863           3.98948M    4.10619M   45.9988M       172.529M/s   2.31789M   181.455M   812.937M          17.673    3.93293/s 3.19722G/s     1.18497G                25.761                1.45765      1000k       3.93293M/s [BEST: throughput=  0.18 GB/s doc_throughput=     3 docs/s instructions=  1184974537 cycles=   801400825 branch_miss= 3369164 cache_miss= 2317878 cache_ref= 180741480 items=   1000000 avg_time= 254263620 ns]
large_random<simdjson_ondemand_unordered>/manual_time  257406822 ns    261014038 ns            3         4.10055M           183.151M        2.31791M       185.444M    802.897M              17.4547           3.98165       3.19685G          1.18997G                    25.8697                      1.4821           3.98165M    5.00473M   45.9988M       170.422M/s   2.31791M   186.319M   822.954M         17.8908     3.8849/s  3.1971G/s     1.18997G               25.8697                1.44598      1000k        3.8849M/s [BEST: throughput=  0.18 GB/s doc_throughput=     3 docs/s instructions=  1189974539 cycles=   802896589 branch_miss= 4100545 cache_miss= 2317911 cache_ref= 185444085 items=   1000000 avg_time= 257406821 ns]
large_random<yyjson>/manual_time                       203893528 ns    207510401 ns            3         1.57362M           225.659M        4.91451M       234.951M    627.389M              13.6393           4.90575       3.07782G          908.192M                    19.7438                     1.44757           4.90575M    1.57426M   45.9988M       215.151M/s   4.91458M   234.954M   627.511M         13.6419    4.90452/s 3.07764G/s     908.192M               19.7438                1.44729      1000k       4.90452M/s [BEST: throughput=  0.23 GB/s doc_throughput=     4 docs/s instructions=   908191708 cycles=   627389279 branch_miss= 1573622 cache_miss= 4914508 cache_ref= 234950733 items=   1000000 avg_time= 203893527 ns]
large_random<yyjson_insitu>/manual_time                197967915 ns    201625768 ns            4          1.5735M           232.455M         4.1974M       223.438M    615.116M              13.3724           5.05351        3.1085G          901.004M                    19.5876                     1.46477           5.05351M    1.57278M   45.9988M       221.591M/s   4.19738M   223.444M   615.415M         13.3789    5.05132/s 3.10866G/s     901.004M               19.5876                1.46406      1000k       5.05132M/s [BEST: throughput=  0.23 GB/s doc_throughput=     5 docs/s instructions=   901003731 cycles=   615116040 branch_miss= 1573504 cache_miss= 4197399 cache_ref= 223437929 items=   1000000 avg_time= 197967915 ns]
large_random<sajson>/manual_time                       178216104 ns    181818456 ns            4          1.5963M           273.656M        3.44366M       221.928M    537.316M              11.6811           5.94921        3.1966G          955.996M                    20.7831                     1.77921           5.94921M    1.59562M   45.9988M        246.15M/s   3.44365M    221.92M   569.668M         12.3844    5.61117/s  3.1965G/s     955.996M               20.7831                1.67816      1000k       5.61117M/s [BEST: throughput=  0.27 GB/s doc_throughput=     5 docs/s instructions=   955995643 cycles=   537315659 branch_miss= 1596299 cache_miss= 3443662 cache_ref= 221927698 items=   1000000 avg_time= 178216104 ns]
large_random<rapidjson>/manual_time                    349743752 ns    353352080 ns            2         1.95113M           131.767M        4.95639M       756.036M    1089.76M              23.6912           2.86459       3.12173G          1.65551G                    35.9903                     1.51914           2.86459M    1.94337M   45.9988M       125.429M/s   4.95726M   756.015M   1089.48M         23.6849    2.85924/s 3.11507G/s     1.65551G               35.9904                1.51955      1000k       2.85924M/s [BEST: throughput=  0.13 GB/s doc_throughput=     2 docs/s instructions=  1655507608 cycles=  1089764622 branch_miss= 1951128 cache_miss= 4956392 cache_ref= 756036051 items=   1000000 avg_time= 349743752 ns]
large_random<rapidjson_lossless>/manual_time           389285184 ns    392875269 ns            2         2.08175M           118.366M        4.95618M       952.228M    1.21611G              26.4379           2.57324       3.12935G          1.97048G                    42.8377                     1.62031           2.57324M    2.09663M   45.9988M       112.688M/s   4.95705M   952.265M   1.21589G         26.4331    2.56881/s 3.12339G/s     1.97049G               42.8378                1.62062      1000k       2.56881M/s [BEST: throughput=  0.12 GB/s doc_throughput=     2 docs/s instructions=  1970483378 cycles=  1216112353 branch_miss= 2081751 cache_miss= 4956184 cache_ref= 952228330 items=   1000000 avg_time= 389285184 ns]
large_random<rapidjson_insitu>/manual_time             332061778 ns    335659768 ns            2         2.10735M           138.823M        5.67393M       734.477M    1033.14M              22.4601           3.01797       3.11798G          1.55051G                    33.7076                     1.50078           3.01797M    2.11188M   45.9988M       132.107M/s    5.6746M   734.487M   1033.09M         22.4591    3.01149/s 3.11114G/s     1.55051G               33.7077                1.50085      1000k       3.01149M/s [BEST: throughput=  0.14 GB/s doc_throughput=     3 docs/s instructions=  1550507448 cycles=  1033136472 branch_miss= 2107347 cache_miss= 5673925 cache_ref= 734477391 items=   1000000 avg_time= 332061778 ns]
large_random<nlohmann_json>/manual_time               2630738634 ns   2634397836 ns            1         11.7059M           17.4851M        27.2427M       5.81459G    8.40749G              182.776          0.380121       3.19587G          12.0941G                    262.922                     1.43849           380.121k    11.7059M   45.9988M       16.6751M/s   27.2427M   5.81459G   8.40749G         182.776   0.380121/s 3.19587G/s     12.0941G               262.922                1.43849      1000k       380.121k/s [BEST: throughput=  0.02 GB/s doc_throughput=     0 docs/s instructions= 12094073494 cycles=  8407488260 branch_miss=11705875 cache_miss=27242736 cache_ref=5814590310 items=   1000000 avg_time=2630738634 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                       563869114 ns    574632248 ns            1          9.4603M           243.505M        6.94472M       354.271M    1.80272G              13.1293           1.77346       3.19705G           2.6929G                    19.6125                      1.4938           929.804k     9.4603M   137.305M       232.225M/s   6.94472M   354.271M   1.80272G         13.1293    1.77346/s 3.19705G/s      2.6929G               19.6125                 1.4938   524.288k       929.804k/s [BEST: throughput=  0.24 GB/s doc_throughput=     1 docs/s instructions=  2692895315 cycles=  1802718143 branch_miss= 9460297 cache_miss= 6944716 cache_ref= 354271149 items=    524288 avg_time= 563869114 ns]
kostya<simdjson_ondemand>/manual_time                  488603582 ns    499362558 ns            2         10.4463M           281.225M        5.28719M       266.335M     1.5609G              11.3681           2.04818       3.19701G          2.31461G                    16.8575                     1.48287           1073.84k    10.5008M   137.305M       267.997M/s   5.28724M   266.498M   1.56212G          11.377    2.04665/s 3.19712G/s     2.31461G               16.8575                1.48171   524.288k       1073.03k/s [BEST: throughput=  0.28 GB/s doc_throughput=     2 docs/s instructions=  2314613322 cycles=  1560900637 branch_miss=10446284 cache_miss= 5287189 cache_ref= 266334863 items=    524288 avg_time= 488603582 ns]
kostya<yyjson>/manual_time                             293339448 ns    304106479 ns            2         1.20985M           468.268M        7.96189M        345.42M    895.294M              6.52047           3.41042       3.05333G          1052.15M                    7.66289                      1.1752           1.78804M    1.19955M   137.305M       446.392M/s   7.96375M   345.391M   895.684M         6.52332    3.40902/s  3.0534G/s     1052.15M               7.66289                1.17469   524.288k       1.78731M/s [BEST: throughput=  0.47 GB/s doc_throughput=     3 docs/s instructions=  1052152416 cycles=   895293512 branch_miss= 1209849 cache_miss= 7961886 cache_ref= 345419912 items=    524288 avg_time= 293339447 ns]
kostya<yyjson_insitu>/manual_time                      276088332 ns    286835564 ns            3         1.20278M           497.753M        5.82372M       311.085M     859.71M              6.26132           3.62516       3.11659G           1030.7M                    7.50663                     1.19889           1.90063M    1.18962M   137.305M       474.284M/s   5.82619M   311.053M   860.499M         6.26706    3.62203/s 3.11675G/s      1030.7M               7.50663                1.19779   524.288k       1.89899M/s [BEST: throughput=  0.50 GB/s doc_throughput=     3 docs/s instructions=  1030698162 cycles=   859709993 branch_miss= 1202782 cache_miss= 5823722 cache_ref= 311085165 items=    524288 avg_time= 276088331 ns]
kostya<sajson>/manual_time                             401921738 ns    412674502 ns            2         7.38407M           341.656M        4.64052M        423.33M    1.28487G              9.35781            2.4883       3.19715G          1.38919G                    10.1176                     1.08119           1.30458M    7.37981M   137.305M       325.795M/s   4.64049M   423.322M   1.28502G          9.3589    2.48805/s  3.1972G/s     1.38919G               10.1176                1.08106   524.288k       1.30445M/s [BEST: throughput=  0.34 GB/s doc_throughput=     2 docs/s instructions=  1389192349 cycles=  1284873688 branch_miss= 7384073 cache_miss= 4640518 cache_ref= 423330157 items=    524288 avg_time= 401921738 ns]
kostya<rapidjson>/manual_time                          569779934 ns    580597158 ns            1         8.42521M           240.979M        5.38908M       977.556M    1.78744G               13.018           1.75506       3.13707G          2.37304G                     17.283                     1.32762           920.159k    8.42521M   137.305M       229.815M/s   5.38908M   977.556M   1.78744G          13.018    1.75506/s 3.13707G/s     2.37304G                17.283                1.32762   524.288k       920.159k/s [BEST: throughput=  0.24 GB/s doc_throughput=     1 docs/s instructions=  2373037595 cycles=  1787436981 branch_miss= 8425214 cache_miss= 5389085 cache_ref= 977556393 items=    524288 avg_time= 569779934 ns]
kostya<rapidjson_lossless>/manual_time                 597364660 ns    608108581 ns            1         8.06171M           229.851M        5.39374M       1095.15M    1.87595G              13.6626           1.67402       3.14037G          2.55706G                    18.6232                     1.36307           877.668k    8.06171M   137.305M       219.203M/s   5.39374M   1095.15M   1.87595G         13.6626    1.67402/s 3.14037G/s     2.55706G               18.6232                1.36307   524.288k       877.668k/s [BEST: throughput=  0.23 GB/s doc_throughput=     1 docs/s instructions=  2557056039 cycles=  1875946979 branch_miss= 8061706 cache_miss= 5393740 cache_ref=1095147934 items=    524288 avg_time= 597364660 ns]
kostya<rapidjson_insitu>/manual_time                   538461852 ns    549218714 ns            1         7.49116M           254.995M        6.36209M       867.318M    1.68773G              12.2918           1.85714       3.13435G          2.17212G                    15.8197                     1.28701           973.677k    7.49116M   137.305M       243.182M/s   6.36209M   867.318M   1.68773G         12.2918    1.85714/s 3.13435G/s     2.17212G               15.8197                1.28701   524.288k       973.677k/s [BEST: throughput=  0.25 GB/s doc_throughput=     1 docs/s instructions=  2172119406 cycles=  1687730095 branch_miss= 7491160 cache_miss= 6362094 cache_ref= 867317855 items=    524288 avg_time= 538461852 ns]
kostya<nlohmann_json>/manual_time                     4289892061 ns   4269434530 ns            1         29.0903M           32.0066M         38.779M        7.8836G    13.6137G              99.1496          0.233106       3.17345G          15.0753G                    109.794                     1.10736           122.215k    29.0903M   137.305M       30.5239M/s    38.779M    7.8836G   13.6137G         99.1496   0.233106/s 3.17345G/s     15.0753G               109.794                1.10736   524.288k       122.215k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 15075320767 cycles= 13613737488 branch_miss=29090316 cache_miss=38779049 cache_ref=7883602390 items=    524288 avg_time=4289892060 ns]
distinct_user_id<simdjson_dom>/manual_time               2527406 ns      2610487 ns          277          102.33k           250.483M         26.465k       1.98105M    8.06996M              12.7787           396.638       3.20085G          12.4412M                    19.7006                     1.54167           45.6133k      102.8k   631.515k       238.292M/s   26.4694k   1.98133M    8.0803M         12.7951    395.663/s 3.19707G/s     12.4412M               19.7006                 1.5397        115       45.5012k/s [BEST: throughput=  0.25 GB/s doc_throughput=   396 docs/s instructions=    12441246 cycles=     8069962 branch_miss=  102330 cache_miss=   26465 cache_ref=   1981054 items=       115 avg_time=   2527405 ns]
distinct_user_id<simdjson_ondemand>/manual_time          1815952 ns      1899371 ns          385          70.164k           348.779M          22.39k       996.145k    5.79615M              9.17816           552.289       3.20115G          8.54603M                    13.5326                     1.47443           63.5132k    70.6514k   631.515k        331.65M/s   22.3835k   996.598k   5.80658M         9.19468    550.675/s 3.19754G/s     8.54603M               13.5326                1.47178        115       63.3277k/s [BEST: throughput=  0.35 GB/s doc_throughput=   552 docs/s instructions=     8546026 cycles=     5796148 branch_miss=   70164 cache_miss=   22390 cache_ref=    996145 items=       115 avg_time=   1815952 ns]
distinct_user_id<yyjson>/manual_time                     1186846 ns      1273625 ns          610          47.596k           585.393M         24.166k       1.47817M    3.45409M              5.46954           926.966       3.20183G          3.51486M                    5.56575                     1.01759           106.601k    47.3677k   631.515k       507.446M/s   24.1847k   1.47879M   3.67014M         5.81165    842.569/s 3.09235G/s     3.51474M               5.56556               0.957657        115       96.8955k/s [BEST: throughput=  0.59 GB/s doc_throughput=   926 docs/s instructions=     3514856 cycles=     3454095 branch_miss=   47596 cache_miss=   24166 cache_ref=   1478166 items=       115 avg_time=   1186845 ns]
distinct_user_id<yyjson_insitu>/manual_time              1141581 ns      1228607 ns          615          47.184k           610.284M         14.271k       1.31946M    3.31361M              5.24707           966.382       3.20221G          3.41557M                    5.40854                     1.03077           111.134k    47.3327k   631.515k       527.566M/s   14.3224k   1.31976M   3.53719M         5.60111    875.978/s  3.0985G/s     3.41572M               5.40877               0.965661        115       100.737k/s [BEST: throughput=  0.61 GB/s doc_throughput=   966 docs/s instructions=     3415573 cycles=     3313606 branch_miss=   47184 cache_miss=   14271 cache_ref=   1319460 items=       115 avg_time=   1141581 ns]
distinct_user_id<sajson>/manual_time                     1474437 ns      1561648 ns          475          69.808k           429.393M         12.725k       1.86317M    4.70849M              7.45586           679.941       3.20149G          5.24709M                    8.30873                     1.11439           78.1932k    70.2106k   631.515k       408.467M/s    12.747k   1.86425M   4.71506M         7.46628    678.225/s 3.19787G/s     5.24709M               8.30874                1.11284        115       77.9959k/s [BEST: throughput=  0.43 GB/s doc_throughput=   679 docs/s instructions=     5247090 cycles=     4708486 branch_miss=   69808 cache_miss=   12725 cache_ref=   1863170 items=       115 avg_time=   1474437 ns]
distinct_user_id<rapidjson>/manual_time                  2789571 ns      2879035 ns          251          74.615k           233.112M         13.752k       6.25215M    8.67116M              13.7307           369.132        3.2008G          13.3287M                    21.1059                     1.53713           42.4502k    74.5297k   631.515k       215.897M/s   13.9558k    6.2497M   8.73731M         13.8355    358.478/s 3.13214G/s     13.3293M               21.1069                1.52556        115        41.225k/s [BEST: throughput=  0.23 GB/s doc_throughput=   369 docs/s instructions=    13328682 cycles=     8671155 branch_miss=   74615 cache_miss=   13752 cache_ref=   6252152 items=       115 avg_time=   2789570 ns]
distinct_user_id<rapidjson_insitu>/manual_time           2399081 ns      2208301 ns          335          60.167k           307.443M         14.155k       3.42894M    6.57544M              10.4122           486.834       3.20115G          9.72923M                    15.4062                     1.47963           55.9859k    60.1642k   631.515k       251.038M/s   14.3448k   3.42974M   6.61786M         10.4793    416.826/s  2.7585G/s     9.72982M               15.4071                1.47024        115        47.935k/s [BEST: throughput=  0.31 GB/s doc_throughput=   486 docs/s instructions=     9729230 cycles=     6575442 branch_miss=   60167 cache_miss=   14155 cache_ref=   3428937 items=       115 avg_time=   2399081 ns]
distinct_user_id<nlohmann_json>/manual_time             16329705 ns     16423290 ns           44         330.951k           41.8996M        161.185k       37.3665M    48.1551M              76.2533           66.3477       3.19498G          66.0425M                    104.578                     1.37145           7.62998k    345.562k   631.515k       36.8812M/s   217.952k   36.8249M      52.2M         82.6583    61.2381/s 3.19663G/s     64.4823M               102.107                1.23529        115       7.04238k/s [BEST: throughput=  0.04 GB/s doc_throughput=    66 docs/s instructions=    66042460 cycles=    48155129 branch_miss=  330951 cache_miss=  161185 cache_ref=  37366504 items=       115 avg_time=  16329705 ns]
find_tweet<simdjson_dom>/manual_time                     2481060 ns      2566300 ns          282         102.061k           255.186M         23.458k       1.96517M    7.92097M              12.5428           404.085       3.20074G          12.3519M                    19.5592                      1.5594            404.085    102.544k   631.515k       242.743M/s    23.464k   1.96538M    7.9325M         12.5611    403.054/s 3.19722G/s     12.3519M               19.5592                1.55713          1        403.054/s [BEST: throughput=  0.26 GB/s doc_throughput=   404 docs/s instructions=    12351922 cycles=     7920968 branch_miss=  102061 cache_miss=   23458 cache_ref=   1965175 items=         1 avg_time=   2481059 ns]
find_tweet<simdjson_ondemand>/manual_time                1680760 ns      1766797 ns          416          68.014k           376.943M          11.54k       793.336k      5.363M              8.49228           596.887       3.20111G          7.86972M                    12.4616                     1.46741            596.887     68.574k   631.515k       358.326M/s   11.5384k   793.543k   5.37437M         8.51029    594.969/s 3.19759G/s     7.86972M               12.4616                 1.4643          1        594.969/s [BEST: throughput=  0.38 GB/s doc_throughput=   596 docs/s instructions=     7869715 cycles=     5363000 branch_miss=   68014 cache_miss=   11540 cache_ref=    793336 items=         1 avg_time=   1680759 ns]
find_tweet<yyjson>/manual_time                           1183435 ns      1273965 ns          595          47.611k           603.365M         21.679k       1.46174M    3.35117M              5.30656           955.425       3.20179G          3.45931M                    5.47779                     1.03227            955.425     47.434k   631.515k       508.908M/s   21.7081k   1.46308M    3.5626M         5.64135    844.998/s 3.01039G/s     3.45952M               5.47813               0.971066          1        844.998/s [BEST: throughput=  0.60 GB/s doc_throughput=   955 docs/s instructions=     3459309 cycles=     3351173 branch_miss=   47611 cache_miss=   21679 cache_ref=   1461744 items=         1 avg_time=   1183435 ns]
find_tweet<yyjson_insitu>/manual_time                    1106560 ns      1198860 ns          635           47.45k           628.756M         11.803k       1.30387M    3.21589M              5.09234           995.631       3.20184G          3.36061M                    5.32151                       1.045            995.631    47.3925k   631.515k       544.263M/s   11.8091k   1.30407M   3.42596M         5.42499    903.701/s 3.09604G/s     3.36076M               5.32174               0.980968          1        903.701/s [BEST: throughput=  0.63 GB/s doc_throughput=   995 docs/s instructions=     3360611 cycles=     3215887 branch_miss=   47450 cache_miss=   11803 cache_ref=   1303869 items=         1 avg_time=   1106560 ns]
find_tweet<sajson>/manual_time                           1430359 ns      1522265 ns          489           69.98k           442.518M         10.174k       1.84288M    4.56832M              7.23391           700.725       3.20114G          5.16187M                    8.17379                     1.12993            700.725    70.1176k   631.515k       421.055M/s   10.1896k   1.84355M   4.57412M         7.24309    699.125/s 3.19788G/s     5.16187M               8.17379                1.12849          1        699.125/s [BEST: throughput=  0.44 GB/s doc_throughput=   700 docs/s instructions=     5161871 cycles=     4568321 branch_miss=   69980 cache_miss=   10174 cache_ref=   1842884 items=         1 avg_time=   1430359 ns]
find_tweet<rapidjson>/manual_time                        2765344 ns      2859379 ns          253          74.339k           234.755M         10.967k       6.24187M    8.61038M              13.6345           371.733       3.20076G          13.2834M                    21.0341                     1.54272            371.733    74.4571k   631.515k       217.788M/s   11.1896k    6.2385M   8.66017M         13.7133    361.619/s 3.13168G/s     13.2842M               21.0355                1.53394          1        361.619/s [BEST: throughput=  0.23 GB/s doc_throughput=   371 docs/s instructions=    13283375 cycles=     8610383 branch_miss=   74339 cache_miss=   10967 cache_ref=   6241872 items=         1 avg_time=   2765344 ns]
find_tweet<rapidjson_insitu>/manual_time                 2087291 ns      2183537 ns          340          60.205k           311.064M         10.844k       3.41641M    6.49809M              10.2897           492.568       3.20075G          9.68466M                    15.3356                     1.49039            492.568    60.0581k   631.515k       288.537M/s   10.9888k   3.41703M   6.52339M         10.3297     479.09/s 3.12529G/s     9.68526M               15.3365                 1.4847          1         479.09/s [BEST: throughput=  0.31 GB/s doc_throughput=   492 docs/s instructions=     9684664 cycles=     6498090 branch_miss=   60205 cache_miss=   10844 cache_ref=   3416405 items=         1 avg_time=   2087290 ns]
find_tweet<nlohmann_json>/manual_time                   13316893 ns     13416947 ns           54         253.025k           51.6158M         88.671k       31.9879M    39.1209M              61.9477           81.7332       3.19748G           56.107M                    88.8451                      1.4342            81.7332    268.027k   631.515k       45.2252M/s    139.81k   31.4689M   42.5698M         67.4091    75.0926/s 3.19668G/s     54.6069M               86.4697                1.28276          1        75.0926/s [BEST: throughput=  0.05 GB/s doc_throughput=    81 docs/s instructions=    56106998 cycles=    39120880 branch_miss=  253025 cache_miss=   88671 cache_ref=  31987921 items=         1 avg_time=  13316893 ns]
top_tweet<simdjson_dom>/manual_time                      2514365 ns      2613375 ns          278         102.388k           251.736M         25.569k       1.97269M    8.02916M              12.7141           398.623       3.20061G          12.3903M                      19.62                     1.54316            398.623    102.844k   631.515k       239.528M/s   25.5615k   1.97264M   8.03921M           12.73    397.715/s 3.19731G/s     12.3903M                 19.62                1.54123          1        397.715/s [BEST: throughput=  0.25 GB/s doc_throughput=   398 docs/s instructions=    12390310 cycles=     8029159 branch_miss=  102388 cache_miss=   25569 cache_ref=   1972688 items=         1 avg_time=   2514365 ns]
top_tweet<simdjson_ondemand>/manual_time                 1822894 ns      1931551 ns          384          70.952k           347.772M         22.415k       981.289k    5.81243M              9.20395           550.694       3.20087G          8.51767M                    13.4877                     1.46542            550.694     71.394k   631.515k       330.386M/s   22.4112k   981.571k    5.8283M         9.22907    548.578/s 3.19728G/s     8.51768M               13.4877                1.46143          1        548.578/s [BEST: throughput=  0.35 GB/s doc_throughput=   550 docs/s instructions=     8517674 cycles=     5812430 branch_miss=   70952 cache_miss=   22415 cache_ref=    981289 items=         1 avg_time=   1822894 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time    1846900 ns      1952326 ns          379          70.888k           342.862M         22.764k       1030.46k    5.89555M              9.33556           542.921       3.20081G           8.7363M                    13.8339                     1.48185            542.921    71.2426k   631.515k       326.092M/s   22.7634k   1030.45k   5.90576M         9.35173    541.448/s 3.19766G/s      8.7363M               13.8339                1.47929          1        541.448/s [BEST: throughput=  0.34 GB/s doc_throughput=   542 docs/s instructions=     8736298 cycles=     5895549 branch_miss=   70888 cache_miss=   22764 cache_ref=   1030464 items=         1 avg_time=   1846899 ns]
top_tweet<yyjson>/manual_time                            1207536 ns      1317664 ns          584          47.813k           591.424M          23.36k       1.46904M    3.41868M              5.41345           936.515       3.20164G          3.48273M                    5.51488                     1.01874            936.515    47.6251k   631.515k       498.751M/s   23.3826k   1.46979M   3.63946M         5.76305    828.132/s 3.01395G/s     3.48294M               5.51522               0.956996          1        828.132/s [BEST: throughput=  0.59 GB/s doc_throughput=   936 docs/s instructions=     3482730 cycles=     3418676 branch_miss=   47813 cache_miss=   23360 cache_ref=   1469041 items=         1 avg_time=   1207536 ns]
top_tweet<yyjson_insitu>/manual_time                     1127630 ns      1239857 ns          623          47.462k           617.203M         13.435k       1.30982M    3.27625M              5.18793           977.337         3.202G          3.38373M                    5.35812                     1.03281            977.337    47.5876k   631.515k       534.093M/s   13.4614k   1.31059M   3.49304M          5.5312    886.816/s 3.09768G/s     3.38388M               5.35836               0.968751          1        886.816/s [BEST: throughput=  0.62 GB/s doc_throughput=   977 docs/s instructions=     3383734 cycles=     3276253 branch_miss=   47462 cache_miss=   13435 cache_ref=   1309824 items=         1 avg_time=   1127629 ns]
top_tweet<sajson>/manual_time                            1450289 ns      1563673 ns          482          69.799k           436.684M         11.778k       1.85052M    4.62927M              7.33041           691.486       3.20107G          5.18707M                     8.2137                      1.1205            691.486    70.1975k   631.515k       415.269M/s   11.7797k   1.85172M   4.63763M         7.34367    689.518/s 3.19773G/s     5.18708M                8.2137                1.11847          1        689.518/s [BEST: throughput=  0.44 GB/s doc_throughput=   691 docs/s instructions=     5187073 cycles=     4629267 branch_miss=   69799 cache_miss=   11778 cache_ref=   1850516 items=         1 avg_time=   1450289 ns]
top_tweet<rapidjson>/manual_time                         2780297 ns      2898561 ns          252          74.614k           233.772M         12.799k       6.25191M    8.64612M              13.6911           370.177       3.20059G          13.3178M                    21.0887                     1.54032            370.177    74.6148k   631.515k       216.617M/s   13.0579k   6.24788M   8.70689M         13.7873    359.674/s 3.13164G/s     13.3184M               21.0896                1.52964          1        359.674/s [BEST: throughput=  0.23 GB/s doc_throughput=   370 docs/s instructions=    13317840 cycles=     8646124 branch_miss=   74614 cache_miss=   12799 cache_ref=   6251906 items=         1 avg_time=   2780296 ns]
top_tweet<rapidjson_insitu>/manual_time                  2107545 ns      2227562 ns          337          60.224k           308.538M         13.027k       3.42677M    6.55156M              10.3744           488.568       3.20088G          9.71676M                    15.3864                     1.48312            488.568    60.1657k   631.515k       285.764M/s   13.1958k   3.42742M   6.58802M         10.4321    474.486/s 3.12592G/s     9.71724M               15.3872                1.47499          1        474.486/s [BEST: throughput=  0.31 GB/s doc_throughput=   488 docs/s instructions=     9716761 cycles=     6551559 branch_miss=   60224 cache_miss=   13027 cache_ref=   3426769 items=         1 avg_time=   2107545 ns]
top_tweet<nlohmann_json>/manual_time                    18917298 ns     19042058 ns           37         425.515k           33.4599M        339.719k       43.2781M    60.3688M              95.5936           52.9835       3.19855G           78.112M                     123.69                     1.29391            52.9835    428.466k   631.515k       31.8365M/s   338.132k    43.367M   60.4721M         95.7572    52.8617/s 3.19666G/s     78.3232M               124.024                 1.2952          1        52.8617/s [BEST: throughput=  0.03 GB/s doc_throughput=    52 docs/s instructions=    78111969 cycles=    60368805 branch_miss=  425515 cache_miss=  339719 cache_ref=  43278052 items=         1 avg_time=  18917298 ns]
