run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-gcc10.2.json 
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake ..
-- The CXX compiler identification is GNU 10.2.0
-- The C compiler identification is GNU 10.2.0
-- Check for working CXX compiler: /usr/bin/g++-10
-- Check for working CXX compiler: /usr/bin/g++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/gcc-10
-- Check for working C compiler: /usr/bin/gcc-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Failed
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Failed
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-gcc10.2.json --benchmark_out_format=json
2021-01-23 04:16:54
Running benchmark/bench_ondemand
Run on (4 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 256 KiB (x4)
  L3 Unified 8192 KiB (x1)
Load Average: 1.00, 0.89, 0.54
simdjson::dom implementation:      haswell
simdjson::ondemand implementation: fallback

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                  263303 ns       291494 ns         2661           3.866k           2.41101G               0        87.124k    967.148k              1.53147          3.81781k       3.69239G           2.9625M                     4.6911                     3.06313           381.781k    4.01299k   631.515k       2.23372G/s    1.47914   87.1086k   971.736k         1.53874   3.79791k/s 3.69057G/s      2.9625M                4.6911                3.04867        100       379.791k/s [BEST: throughput=  2.41 GB/s doc_throughput=  3817 docs/s instructions=     2962503 cycles=      967148 branch_miss=    3866 cache_miss=       0 cache_ref=     87124 items=       100 avg_time=    263302 ns]
partial_tweets<simdjson_ondemand>/manual_time             189882 ns       217914 ns         3685           2.136k           3.34723G               0        55.075k    696.759k              1.10331          5.30032k       3.69304G          2.46019M                    3.89569                      3.5309           530.032k    2.26501k   631.515k       3.09743G/s   0.145183   55.0049k   700.871k         1.10982   5.26644k/s 3.69109G/s     2.46019M               3.89569                3.51019        100       526.644k/s [BEST: throughput=  3.35 GB/s doc_throughput=  5300 docs/s instructions=     2460189 cycles=      696759 branch_miss=    2136 cache_miss=       0 cache_ref=     55075 items=       100 avg_time=    189881 ns]
partial_tweets<yyjson>/manual_time                        701792 ns       732112 ns         1002          10.091k           1.53157G             156        74.458k    1.52238M              2.41069          2.42523k       3.69213G          2.90845M                    4.60552                     1.91046           242.523k    7.46591k   631.515k       858.174M/s    907.651   49.1223k   1.73084M         2.74078   1.42492k/s 2.46632G/s     2.90894M               4.60629                1.68065        100       142.492k/s [BEST: throughput=  1.53 GB/s doc_throughput=  2425 docs/s instructions=     2908453 cycles=     1522384 branch_miss=   10091 cache_miss=     156 cache_ref=     74458 items=       100 avg_time=    701792 ns]
partial_tweets<yyjson_insitu>/manual_time                 487817 ns       516852 ns         1434           6.933k           1.71271G             888        45.161k    1.35518M              2.14592          2.71206k       3.67534G          2.90814M                    4.60502                     2.14594           271.206k    7.30194k   631.515k       1.20567G/s    161.165   31.7296k   1.46074M         2.31308   2.04995k/s 2.99445G/s      2.9084M               4.60543                1.99104        100       204.995k/s [BEST: throughput=  1.71 GB/s doc_throughput=  2712 docs/s instructions=     2908138 cycles=     1355183 branch_miss=    6933 cache_miss=     888 cache_ref=     45161 items=       100 avg_time=    487817 ns]
partial_tweets<sajson>/manual_time                        545785 ns       574157 ns         1278          11.331k           1.17225G               0        46.009k    1.98893M              3.14946          1.85624k       3.69195G          6.05184M                    9.58305                     3.04276           185.624k    11.6956k   631.515k       1103.47M/s    1.23318   46.0125k   2.01402M         3.18919   1.83222k/s 3.69014G/s     6.05184M               9.58305                3.00485        100       183.222k/s [BEST: throughput=  1.17 GB/s doc_throughput=  1856 docs/s instructions=     6051839 cycles=     1988932 branch_miss=   11331 cache_miss=       0 cache_ref=     46009 items=       100 avg_time=    545785 ns]
partial_tweets<rapidjson>/manual_time                    1451487 ns      1480259 ns          484          27.173k           504.879M         10.068k        52.454k    4.61763M              7.31198           799.473       3.69167G          13.4095M                    21.2339                     2.90398           79.9473k    27.9168k   631.515k       414.926M/s    482.767   32.5319k   4.77171M         7.55597    688.949/s 3.28746G/s     13.4102M                21.235                2.81036        100       68.8949k/s [BEST: throughput=  0.50 GB/s doc_throughput=   799 docs/s instructions=    13409507 cycles=     4617625 branch_miss=   27173 cache_miss=   10068 cache_ref=     52454 items=       100 avg_time=   1451486 ns]
partial_tweets<rapidjson_insitu>/manual_time              990927 ns      1019617 ns          710          25.501k           724.898M              27        43.056k    3.21612M              5.09271          1.14787k       3.69169G          9.75494M                    15.4469                     3.03314           114.787k    25.4574k   631.515k       607.774M/s    214.855   33.3233k   3.31149M         5.24373    1009.16/s 3.34181G/s     9.75554M               15.4478                2.94597        100       100.916k/s [BEST: throughput=  0.72 GB/s doc_throughput=  1147 docs/s instructions=     9754938 cycles=     3216122 branch_miss=   25501 cache_miss=      27 cache_ref=     43056 items=       100 avg_time=    990927 ns]
partial_tweets<nlohmann_json>/manual_time                7823913 ns      7859338 ns           89         139.793k           83.3471M              14       230.071k    27.9504M              44.2592            131.98       3.68888G          71.2128M                    112.765                     2.54783            13.198k    149.738k   631.515k       76.9768M/s     522.36   363.286k   28.8658M         45.7088    127.813/s 3.68943G/s     71.8816M               113.824                 2.4902        100       12.7813k/s [BEST: throughput=  0.08 GB/s doc_throughput=   131 docs/s instructions=    71212827 cycles=    27950365 branch_miss=  139793 cache_miss=      14 cache_ref=    230071 items=       100 avg_time=   7823912 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                  92212752 ns     95597331 ns            8         876.059k           501.701M        10.9137M       15.2075M    338.233M              7.35308           10.9068       3.68905G          983.113M                    21.3726                     2.90662           10.9068M    875.887k   45.9988M       475.724M/s   10.9241M   15.1959M   340.169M         7.39517    10.8445/s 3.68895G/s     983.113M               21.3726                2.89007      1000k       10.8445M/s [BEST: throughput=  0.50 GB/s doc_throughput=    10 docs/s instructions=   983112701 cycles=   338232535 branch_miss=  876059 cache_miss=10913743 cache_ref=  15207452 items=   1000000 avg_time=  92212751 ns]
large_random<simdjson_ondemand>/manual_time             59688033 ns     63031215 ns           12         883.148k           773.635M        5.63777M       7.87114M    219.346M              4.76852           16.8186       3.68909G           642.49M                    13.9675                     2.92911           16.8186M    890.184k   45.9988M       734.952M/s   5.67383M   7.87972M   220.193M         4.78692    16.7538/s 3.68906G/s      642.49M               13.9675                2.91785      1000k       16.7538M/s [BEST: throughput=  0.77 GB/s doc_throughput=    16 docs/s instructions=   642489790 cycles=   219346157 branch_miss=  883148 cache_miss= 5637770 cache_ref=   7871144 items=   1000000 avg_time=  59688033 ns]
large_random<simdjson_ondemand_unordered>/manual_time   62774944 ns     66135064 ns           11         867.337k           733.524M        5.66893M       7.88523M    231.328M              5.02901           15.9466        3.6889G           646.49M                    14.0545                     2.79468           15.9466M    869.517k   45.9988M       698.811M/s    5.6773M   7.88076M   231.569M         5.03424    15.9299/s 3.68887G/s      646.49M               14.0545                2.79178      1000k       15.9299M/s [BEST: throughput=  0.73 GB/s doc_throughput=    15 docs/s instructions=   646489796 cycles=   231328475 branch_miss=  867337 cache_miss= 5668928 cache_ref=   7885233 items=   1000000 avg_time=  62774944 ns]
large_random<yyjson>/manual_time                       127679061 ns    131093201 ns            5         663.915k            360.91M        5.83246M        8.9564M    351.401M              7.63935           7.84608       2.75712G          944.149M                    20.5255                     2.68682           7.84608M    661.685k   45.9988M       343.579M/s   5.82766M   8.92873M   351.366M         7.63858    7.83214/s 2.75194G/s     944.149M               20.5255                2.68709      1000k       7.83214M/s [BEST: throughput=  0.36 GB/s doc_throughput=     7 docs/s instructions=   944149408 cycles=   351400717 branch_miss=  663915 cache_miss= 5832460 cache_ref=   8956402 items=   1000000 avg_time= 127679060 ns]
large_random<yyjson_insitu>/manual_time                109575101 ns    112999978 ns            6         659.023k            419.91M        4.97683M       7.61128M     318.99M              6.93474           9.12872       2.91197G          938.029M                    20.3925                     2.94062           9.12872M    661.777k   45.9988M       400.345M/s   4.98528M   7.63963M   319.131M         6.93782    9.12616/s 2.91244G/s     938.029M               20.3925                2.93932      1000k       9.12616M/s [BEST: throughput=  0.42 GB/s doc_throughput=     9 docs/s instructions=   938028849 cycles=   318989723 branch_miss=  659023 cache_miss= 4976829 cache_ref=   7611279 items=   1000000 avg_time= 109575101 ns]
large_random<sajson>/manual_time                        93399613 ns     96787002 ns            7         586.841k           492.978M        8.37996M       12.2017M    344.224M              7.48333           10.7172       3.68912G          1099.99M                    23.9134                     3.19556           10.7172M    586.874k   45.9988M       469.679M/s   8.37438M   12.1156M   344.569M         7.49083    10.7067/s 3.68919G/s     1099.99M               23.9134                3.19236      1000k       10.7067M/s [BEST: throughput=  0.49 GB/s doc_throughput=    10 docs/s instructions=  1099987391 cycles=   344224173 branch_miss=  586841 cache_miss= 8379959 cache_ref=  12201669 items=   1000000 avg_time=  93399612 ns]
large_random<rapidjson>/manual_time                    173018468 ns    176441423 ns            4         606.255k           277.423M        6.98651M       10.6611M    554.313M              12.0506           6.03109       3.34311G          1.66014G                     36.091                     2.99496           6.03109M    605.649k   45.9988M       253.544M/s   6.42329M   9.90775M   559.832M         12.1706    5.77973/s 3.23568G/s     1.66015G               36.0913                2.96545      1000k       5.77973M/s [BEST: throughput=  0.28 GB/s doc_throughput=     6 docs/s instructions=  1660143165 cycles=   554312910 branch_miss=  606255 cache_miss= 6986514 cache_ref=  10661054 items=   1000000 avg_time= 173018468 ns]
large_random<rapidjson_lossless>/manual_time           200510960 ns    203933615 ns            4         601.828k           237.514M        7.00037M       10.6342M    657.013M              14.2833           5.16349       3.39248G          2.02311G                    43.9818                     3.07926           5.16349M    596.636k   45.9988M        218.78M/s   6.42971M   9.90253M   661.184M         14.3739    4.98726/s  3.2975G/s     2.02312G                43.982                3.05984      1000k       4.98726M/s [BEST: throughput=  0.24 GB/s doc_throughput=     5 docs/s instructions=  2023110256 cycles=   657012896 branch_miss=  601828 cache_miss= 7000373 cache_ref=  10634242 items=   1000000 avg_time= 200510960 ns]
large_random<rapidjson_insitu>/manual_time             161505478 ns    164916024 ns            5         585.794k           298.716M        8.13441M       12.1899M    510.437M              11.0968           6.49399       3.31477G          1.49214G                    32.4387                     2.92326           6.49399M    585.829k   45.9988M       271.618M/s    7.5103M   11.3977M   515.658M         11.2103    6.19174/s 3.19282G/s     1.49215G               32.4389                2.89368      1000k       6.19174M/s [BEST: throughput=  0.30 GB/s doc_throughput=     6 docs/s instructions=  1492140810 cycles=   510437168 branch_miss=  585794 cache_miss= 8134406 cache_ref=  12189867 items=   1000000 avg_time= 161505477 ns]
large_random<nlohmann_json>/manual_time               1218096626 ns   1221537959 ns            1         4.53562M           37.7628M        46.8752M       60.3663M    4.48143G              97.4249          0.820953       3.67904G          11.9494G                    259.776                     2.66642           820.953k    4.53562M   45.9988M       36.0134M/s   46.8752M   60.3663M   4.48143G         97.4249   0.820953/s 3.67904G/s     11.9494G               259.776                2.66642      1000k       820.953k/s [BEST: throughput=  0.04 GB/s doc_throughput=     0 docs/s instructions= 11949358423 cycles=  4481427409 branch_miss= 4535621 cache_miss=46875160 cache_ref=  60366315 items=   1000000 avg_time=1218096626 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                        85211375 ns     95427363 ns            8         455.216k           1.61556G        15.5793M       21.8736M    313.532M              2.28347           11.7662        3.6891G          945.501M                    6.88614                     3.01564            6.1689M    454.541k   137.305M       1.50068G/s   15.6406M   21.9176M    314.34M         2.28935    11.7355/s 3.68894G/s     945.501M               6.88614                 3.0079   524.288k       6.15279M/s [BEST: throughput=  1.62 GB/s doc_throughput=    11 docs/s instructions=   945501401 cycles=   313532379 branch_miss=  455216 cache_miss=15579317 cache_ref=  21873552 items=    524288 avg_time=  85211374 ns]
kostya<simdjson_ondemand>/manual_time                   58191453 ns     68395611 ns           12         486.693k           2.36203G        9.99753M       13.8221M     214.45M              1.56185           17.2028       3.68915G          676.213M                     4.9249                     3.15324           9.01923M    485.783k   137.305M       2.19749G/s   10.0265M   13.7846M   214.664M         1.56341    17.1847/s 3.68892G/s     676.213M                4.9249                3.15011   524.288k       9.00971M/s [BEST: throughput=  2.36 GB/s doc_throughput=    17 docs/s instructions=   676213308 cycles=   214450394 branch_miss=  486693 cache_miss= 9997528 cache_ref=  13822059 items=    524288 avg_time=  58191452 ns]
kostya<yyjson>/manual_time                             207363742 ns    217624541 ns            3         412.587k            662.69M        11.3305M       16.0478M    567.967M              4.13654           4.82641       2.74124G          984.045M                    7.16686                     1.73257           2.53043M     411.91k   137.305M       631.471M/s   11.3292M    16.034M   568.029M         4.13699    4.82244/s 2.73929G/s     984.045M               7.16686                1.73239   524.288k       2.52835M/s [BEST: throughput=  0.66 GB/s doc_throughput=     4 docs/s instructions=   984045276 cycles=   567967156 branch_miss=  412587 cache_miss=11330542 cache_ref=  16047828 items=    524288 avg_time= 207363742 ns]
kostya<yyjson_insitu>/manual_time                      153512930 ns    163761502 ns            5         412.724k           894.869M        8.80546M       12.1972M    471.849M               3.4365           6.51738       3.07522G          965.775M                     7.0338                     2.04679           3.41699M    413.408k   137.305M       852.985M/s   8.80835M   12.1816M   471.952M         3.43725    6.51411/s 3.07434G/s     965.775M                7.0338                2.04634   524.288k       3.41527M/s [BEST: throughput=  0.89 GB/s doc_throughput=     6 docs/s instructions=   965775269 cycles=   471848990 branch_miss=  412724 cache_miss= 8805464 cache_ref=  12197193 items=    524288 avg_time= 153512929 ns]
kostya<sajson>/manual_time                             135249172 ns    145501712 ns            5         439.364k           1016.56M        12.3774M       17.2506M    498.294M               3.6291           7.40365        3.6892G          1.62034G                     11.801                     3.25178           3.88165M    437.894k   137.305M        968.17M/s   12.4031M   17.2512M   498.943M         3.63383    7.39376/s 3.68907G/s     1.62034G                11.801                3.24755   524.288k       3.87646M/s [BEST: throughput=  1.02 GB/s doc_throughput=     7 docs/s instructions=  1620343045 cycles=   498294163 branch_miss=  439364 cache_miss=12377445 cache_ref=  17250568 items=    524288 avg_time= 135249171 ns]
kostya<rapidjson>/manual_time                          237852341 ns    248110327 ns            3         1024.72k            585.68M         8.1181M       12.0037M    783.849M              5.70882           4.26554       3.34354G          2.29873G                    16.7418                     2.93262           2.23637M    1024.03k   137.305M       550.527M/s   7.81986M   11.5951M   786.829M         5.73052    4.20429/s 3.30806G/s     2.29873G               16.7418                2.92151   524.288k       2.20426M/s [BEST: throughput=  0.59 GB/s doc_throughput=     4 docs/s instructions=  2298730145 cycles=   783848837 branch_miss= 1024724 cache_miss= 8118102 cache_ref=  12003698 items=    524288 avg_time= 237852341 ns]
kostya<rapidjson_lossless>/manual_time                 252418237 ns    262682896 ns            3         947.522k           551.315M        8.11784M       12.0093M    837.551M              6.09993           4.01526       3.36298G          2.50529G                    18.2462                     2.99121           2.10515M    948.135k   137.305M       518.759M/s   7.81025M   11.6457M   840.503M         6.12143    3.96168/s  3.3298G/s     2.50529G               18.2462                2.98071   524.288k       2.07706M/s [BEST: throughput=  0.55 GB/s doc_throughput=     4 docs/s instructions=  2505291083 cycles=   837551270 branch_miss=  947522 cache_miss= 8117844 cache_ref=  12009259 items=    524288 avg_time= 252418237 ns]
kostya<rapidjson_insitu>/manual_time                   218961916 ns    229225025 ns            3          997.95k           636.988M        11.1994M        15.617M    714.351M              5.20266           4.63922       3.31403G          2.03228G                    14.8012                     2.84493           2.43229M    999.326k   137.305M       598.023M/s   10.9092M   15.2576M   717.524M         5.22577      4.567/s 3.27694G/s     2.03228G               14.8012                2.83235   524.288k       2.39443M/s [BEST: throughput=  0.64 GB/s doc_throughput=     4 docs/s instructions=  2032275691 cycles=   714351223 branch_miss=  997950 cache_miss=11199421 cache_ref=  15616982 items=    524288 avg_time= 218961915 ns]
kostya<nlohmann_json>/manual_time                     1606502621 ns   1616835393 ns            1         3.76269M           85.4683M        69.0548M       86.3161M    5.92719G              43.1681           0.62247        3.6895G           15.147G                    110.317                     2.55552           326.354k    3.76269M   137.305M       81.5089M/s   69.0548M   86.3161M   5.92719G         43.1681    0.62247/s  3.6895G/s      15.147G               110.317                2.55552   524.288k       326.354k/s [BEST: throughput=  0.09 GB/s doc_throughput=     0 docs/s instructions= 15147049318 cycles=  5927190265 branch_miss= 3762689 cache_miss=69054818 cache_ref=  86316074 items=    524288 avg_time=1606502621 ns]
distinct_user_id<simdjson_dom>/manual_time                259183 ns       289657 ns         2701           4.061k           2.45256G               0        88.497k    950.811k               1.5056          3.88362k       3.69258G          2.90343M                    4.59756                     3.05363           446.616k    4.20551k   631.515k       2.26922G/s    2.03036   88.6459k   956.577k         1.51473   3.85828k/s 3.69074G/s     2.90343M               4.59756                3.03523        115       443.702k/s [BEST: throughput=  2.45 GB/s doc_throughput=  3883 docs/s instructions=     2903428 cycles=      950811 branch_miss=    4061 cache_miss=       0 cache_ref=     88497 items=       115 avg_time=    259183 ns]
distinct_user_id<simdjson_ondemand>/manual_time           182989 ns       212742 ns         3824           1.895k           3.47347G               0        53.584k    671.407k              1.06317          5.50022k       3.69288G          2.15107M                    3.40621                     3.20383           632.525k    2.03227k   631.515k        3.2141G/s    0.04341   53.5553k   675.475k         1.06961   5.46481k/s 3.69135G/s     2.15108M               3.40621                3.18454        115       628.453k/s [BEST: throughput=  3.47 GB/s doc_throughput=  5500 docs/s instructions=     2151075 cycles=      671407 branch_miss=    1895 cache_miss=       0 cache_ref=     53584 items=       115 avg_time=    182988 ns]
distinct_user_id<yyjson>/manual_time                      609015 ns       642139 ns         1000           6.623k           1.61467G         22.245k        73.272k    1.44399M              2.28654          2.55683k       3.69202G           2.8748M                    4.55222                     1.99088           294.035k    7.35287k   631.515k       988.907M/s    7.2697k   55.1927k    1.6573M         2.62432   1.64199k/s 2.72128G/s     2.87528M                 4.553                1.73492        115       188.829k/s [BEST: throughput=  1.61 GB/s doc_throughput=  2556 docs/s instructions=     2874798 cycles=     1443986 branch_miss=    6623 cache_miss=   22245 cache_ref=     73272 items=       115 avg_time=    609015 ns]
distinct_user_id<yyjson_insitu>/manual_time               483487 ns       516542 ns         1448           7.742k           1.70736G              61        47.106k    1.36563M              2.16247          2.70359k       3.69211G          2.87457M                    4.55186                     2.10493           310.912k    7.46303k   631.515k       1.21646G/s    46.3936   32.3037k   1.45234M         2.29977   2.06831k/s 3.00388G/s     2.87483M               4.55228                1.97945        115       237.855k/s [BEST: throughput=  1.71 GB/s doc_throughput=  2703 docs/s instructions=     2874570 cycles=     1365635 branch_miss=    7742 cache_miss=      61 cache_ref=     47106 items=       115 avg_time=    483487 ns]
distinct_user_id<sajson>/manual_time                      541924 ns       573090 ns         1290          11.369k            1.1802G               0        47.912k    1.97546M              3.12813          1.86884k       3.69182G           5.9843M                    9.47611                     3.02932           214.916k    11.7335k   631.515k       1111.34M/s        1.2   47.7884k   1.99956M         3.16628   1.84528k/s 3.68973G/s     5.98431M               9.47611                2.99282        115       212.207k/s [BEST: throughput=  1.18 GB/s doc_throughput=  1868 docs/s instructions=     5984305 cycles=     1975461 branch_miss=   11369 cache_miss=       0 cache_ref=     47912 items=       115 avg_time=    541924 ns]
distinct_user_id<rapidjson>/manual_time                  1437926 ns      1468812 ns          492          27.781k           507.237M             288        54.827k    4.59609M              7.27787           803.206       3.69161G          13.3499M                    21.1395                     2.90463           92.3687k    27.7904k   631.515k       418.839M/s     869.88   34.9277k   4.74877M         7.51965    695.446/s 3.30252G/s     13.3508M               21.1408                2.81141        115       79.9763k/s [BEST: throughput=  0.51 GB/s doc_throughput=   803 docs/s instructions=    13349935 cycles=     4596087 branch_miss=   27781 cache_miss=     288 cache_ref=     54827 items=       115 avg_time=   1437925 ns]
distinct_user_id<rapidjson_insitu>/manual_time            969642 ns      1000044 ns          800          25.507k           727.373M              21        45.405k    3.20521M              5.07543          1.15179k       3.69173G          9.70616M                    15.3696                     3.02824           132.456k    25.4913k   631.515k       621.115M/s   1.98808k   36.6885k   3.28991M         5.20955    1031.31/s 3.39291G/s     9.70648M               15.3702                2.95038        115         118.6k/s [BEST: throughput=  0.73 GB/s doc_throughput=  1151 docs/s instructions=     9706156 cycles=     3205211 branch_miss=   25507 cache_miss=      21 cache_ref=     45405 items=       115 avg_time=    969642 ns]
distinct_user_id<nlohmann_json>/manual_time              7213792 ns      7248280 ns           97         116.616k            90.736M             121       220.281k    25.6823M              40.6677            143.68       3.69003G          66.7112M                    105.637                     2.59756           16.5232k    124.632k   631.515k       83.4872M/s    60.5155   363.986k   26.6101M         42.1369    138.623/s 3.68878G/s     67.6193M               107.075                2.54111        115       15.9417k/s [BEST: throughput=  0.09 GB/s doc_throughput=   143 docs/s instructions=    66711220 cycles=    25682281 branch_miss=  116616 cache_miss=     121 cache_ref=    220281 items=       115 avg_time=   7213792 ns]
find_tweet<simdjson_dom>/manual_time                      247260 ns       276495 ns         2834           3.674k           2.57091G               0        83.774k    907.118k              1.43642          4.07101k       3.69289G          2.82239M                    4.46923                     3.11138           4.07101k    3.83839k   631.515k       2.37865G/s   0.342625   83.9275k   912.205k         1.44447   4.04433k/s 3.68926G/s     2.82239M               4.46923                3.09403          1       4.04433k/s [BEST: throughput=  2.57 GB/s doc_throughput=  4071 docs/s instructions=     2822388 cycles=      907118 branch_miss=    3674 cache_miss=       0 cache_ref=     83774 items=         1 avg_time=    247259 ns]
find_tweet<simdjson_ondemand>/manual_time                 116332 ns       144845 ns         6012              872           5.46237G               0        33.153k    427.114k             0.676332          8.64962k       3.69437G          1.50672M                    2.38588                     3.52768           8.64962k     954.867   631.515k       5.05573G/s  0.0211244   32.9403k   429.458k        0.680044   8.59607k/s 3.69165G/s     1.50672M               2.38588                3.50843          1       8.59607k/s [BEST: throughput=  5.46 GB/s doc_throughput=  8649 docs/s instructions=     1506722 cycles=      427114 branch_miss=     872 cache_miss=       0 cache_ref=     33153 items=         1 avg_time=    116332 ns]
find_tweet<yyjson>/manual_time                            674962 ns       705951 ns         1086           9.751k           1.57752G              77        68.812k     1.4781M              2.34056            2.498k       3.69228G          2.82413M                    4.47199                     1.91065             2.498k    7.38535k   631.515k       892.287M/s    1032.84   41.6079k   1.69112M         2.67788   1.48156k/s  2.5055G/s     2.82482M               4.47308                1.67038          1       1.48156k/s [BEST: throughput=  1.58 GB/s doc_throughput=  2497 docs/s instructions=     2824127 cycles=     1478098 branch_miss=    9751 cache_miss=      77 cache_ref=     68812 items=         1 avg_time=    674961 ns]
find_tweet<yyjson_insitu>/manual_time                     473766 ns       504118 ns         1479           7.377k           1.75851G              10        38.233k    1.32594M              2.09962          2.78459k       3.69221G          2.82381M                    4.47149                     2.12966           2.78459k    7.25504k   631.515k       1.24142G/s    13.7728   23.4825k   1.41704M         2.24387   2.11075k/s   2.991G/s     2.82407M                4.4719                1.99294          1       2.11075k/s [BEST: throughput=  1.76 GB/s doc_throughput=  2784 docs/s instructions=     2823810 cycles=     1325942 branch_miss=    7377 cache_miss=      10 cache_ref=     38233 items=         1 avg_time=    473766 ns]
find_tweet<sajson>/manual_time                            529918 ns       559943 ns         1321          10.946k           1.20863G               1        38.281k    1.92914M              3.05479          1.91386k       3.69212G          5.89219M                    9.33024                      3.0543           1.91386k    11.5424k   631.515k       1.10988G/s    1.12566   38.3096k   1.95522M         3.09608   1.88708k/s 3.68966G/s     5.89219M               9.33024                3.01357          1       1.88708k/s [BEST: throughput=  1.21 GB/s doc_throughput=  1913 docs/s instructions=     5892186 cycles=     1929145 branch_miss=   10946 cache_miss=       1 cache_ref=     38281 items=         1 avg_time=    529918 ns]
find_tweet<rapidjson>/manual_time                        1427638 ns      1456546 ns          494          27.584k           512.079M             170        47.424k    4.55287M              7.20945           810.874       3.69181G          13.2808M                    21.0301                     2.91702            810.874    27.6341k   631.515k       421.857M/s    630.178   27.6977k   4.71184M         7.46117    700.458/s 3.30044G/s     13.2818M               21.0316                2.81881          1        700.458/s [BEST: throughput=  0.51 GB/s doc_throughput=   810 docs/s instructions=    13280843 cycles=     4552873 branch_miss=   27584 cache_miss=     170 cache_ref=     47424 items=         1 avg_time=   1427637 ns]
find_tweet<rapidjson_insitu>/manual_time                  960531 ns       990251 ns          809          25.061k           736.419M             506        36.541k    3.16577M              5.01297          1.16611k       3.69164G          9.64766M                     15.277                     3.04749           1.16611k    25.3367k   631.515k       627.007M/s   1.86102k   27.8185k    3.2577M         5.15854    1041.09/s 3.39156G/s     9.64798M               15.2775                 2.9616          1        1041.09/s [BEST: throughput=  0.74 GB/s doc_throughput=  1166 docs/s instructions=     9647655 cycles=     3165766 branch_miss=   25061 cache_miss=     506 cache_ref=     36541 items=         1 avg_time=    960531 ns]
find_tweet<nlohmann_json>/manual_time                    6050036 ns      6080543 ns          117          92.854k           106.806M              18       168.213k    21.8122M              34.5395           169.127       3.68904G          57.1125M                    90.4373                     2.61837            169.127    104.395k   631.515k       99.5465M/s    39.8974    268.01k   22.3198M         35.3433    165.288/s  3.6892G/s     55.8546M               88.4454                2.50247          1        165.288/s [BEST: throughput=  0.11 GB/s doc_throughput=   169 docs/s instructions=    57112484 cycles=    21812224 branch_miss=   92854 cache_miss=      18 cache_ref=    168213 items=         1 avg_time=   6050035 ns]
top_tweet<simdjson_dom>/manual_time                       252774 ns       281483 ns         2767           3.781k           2.51276G               0        91.695k    928.055k              1.46957          3.97894k       3.69268G          2.85646M                    4.52318                      3.0779           3.97894k    3.92038k   631.515k       2.32676G/s   0.204192   91.8985k   932.674k         1.47688    3.9561k/s 3.68975G/s     2.85646M               4.52318                3.06265          1        3.9561k/s [BEST: throughput=  2.51 GB/s doc_throughput=  3978 docs/s instructions=     2856456 cycles=      928055 branch_miss=    3781 cache_miss=       0 cache_ref=     91695 items=         1 avg_time=    252774 ns]
top_tweet<simdjson_ondemand>/manual_time                  169544 ns       197991 ns         4126           1.622k           3.74875G               0        56.957k     622.11k             0.985107          5.93613k       3.69292G           2.1282M                    3.36998                     3.42093           5.93613k    1.75075k   631.515k       3.46899G/s  0.0419292   57.0596k   625.814k        0.990973   5.89819k/s 3.69117G/s      2.1282M               3.36998                3.40068          1       5.89819k/s [BEST: throughput=  3.75 GB/s doc_throughput=  5936 docs/s instructions=     2128196 cycles=      622110 branch_miss=    1622 cache_miss=       0 cache_ref=     56957 items=         1 avg_time=    169543 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time     178396 ns       206859 ns         3923           1.846k           3.56349G               0        58.003k     654.54k              1.03646          5.64277k       3.69342G          2.34909M                    3.71978                     3.58893           5.64277k    1.95829k   631.515k       3.29685G/s   0.060158   57.9346k   658.314k         1.04244   5.60551k/s 3.69018G/s      2.3491M               3.71978                3.56835          1       5.60551k/s [BEST: throughput=  3.56 GB/s doc_throughput=  5642 docs/s instructions=     2349095 cycles=      654540 branch_miss=    1846 cache_miss=       0 cache_ref=     58003 items=         1 avg_time=    178396 ns]
top_tweet<yyjson>/manual_time                             679531 ns       709741 ns         1093            9.83k           1.52448G             214         72.33k     1.4926M              2.36352          2.41401k       3.60314G          2.84501M                    4.50506                     1.90608           2.41401k    7.46276k   631.515k       886.287M/s    992.635    46.701k   1.70763M         2.70402    1.4716k/s 2.51295G/s      2.8455M               4.50582                1.66634          1        1.4716k/s [BEST: throughput=  1.52 GB/s doc_throughput=  2414 docs/s instructions=     2845011 cycles=     1492598 branch_miss=    9830 cache_miss=     214 cache_ref=     72330 items=         1 avg_time=    679531 ns]
top_tweet<yyjson_insitu>/manual_time                      479015 ns       508581 ns         1463           6.892k           1.74564G             475        43.062k    1.33052M              2.10687          2.76422k       3.67785G           2.8449M                    4.50488                     2.13819           2.76422k    7.31021k   631.515k       1.22782G/s    46.6651   28.7801k   1.43527M         2.27273   2.08762k/s 2.99629G/s     2.84516M                4.5053                1.98233          1       2.08762k/s [BEST: throughput=  1.75 GB/s doc_throughput=  2764 docs/s instructions=     2844901 cycles=     1330520 branch_miss=    6892 cache_miss=     475 cache_ref=     43062 items=         1 avg_time=    479014 ns]
top_tweet<sajson>/manual_time                             534309 ns       563309 ns         1311          11.234k           1.19685G               0        43.702k    1.94798M              3.08461           1.8952k        3.6918G          5.91933M                    9.37322                     3.03871            1.8952k    11.6244k   631.515k       1.10076G/s    0.68955   43.6236k   1.97138M         3.12167   1.87158k/s 3.68959G/s     5.91933M               9.37322                3.00263          1       1.87158k/s [BEST: throughput=  1.20 GB/s doc_throughput=  1895 docs/s instructions=     5919331 cycles=     1947975 branch_miss=   11234 cache_miss=       0 cache_ref=     43702 items=         1 avg_time=    534308 ns]
top_tweet<rapidjson>/manual_time                         1433631 ns      1462487 ns          492           27.47k           509.344M             563        50.967k    4.57727M              7.24808           806.543       3.69177G          13.3311M                    21.1097                     2.91245            806.543    27.7503k   631.515k       420.094M/s    748.646   31.8545k   4.73342M         7.49534     697.53/s  3.3017G/s      13.332M               21.1111                2.81657          1         697.53/s [BEST: throughput=  0.51 GB/s doc_throughput=   806 docs/s instructions=    13331062 cycles=     4577274 branch_miss=   27470 cache_miss=     563 cache_ref=     50967 items=         1 avg_time=   1433630 ns]
top_tweet<rapidjson_insitu>/manual_time                   965190 ns       994362 ns          804          24.747k            730.98M          9.124k        42.538k    3.18943M              5.05044           1.1575k       3.69177G          9.68891M                    15.3423                     3.03782            1.1575k    25.3529k   631.515k        623.98M/s    1.9426k   33.1729k   3.27413M         5.18457    1036.06/s 3.39221G/s     9.68945M               15.3432                 2.9594          1        1036.06/s [BEST: throughput=  0.73 GB/s doc_throughput=  1157 docs/s instructions=     9688913 cycles=     3189431 branch_miss=   24747 cache_miss=    9124 cache_ref=     42538 items=         1 avg_time=    965190 ns]
top_tweet<nlohmann_json>/manual_time                     8701871 ns      8731999 ns           80         183.605k           73.0745M              10       398.516k    31.8842M              50.4885           115.713       3.68942G          78.5732M                     124.42                     2.46433            115.713    188.186k   631.515k       69.2104M/s     79.625   404.636k   32.0997M         50.8297    114.918/s 3.68883G/s     78.8574M                124.87                2.45664          1        114.918/s [BEST: throughput=  0.07 GB/s doc_throughput=   115 docs/s instructions=    78573245 cycles=    31884242 branch_miss=  183605 cache_miss=      10 cache_ref=    398516 items=         1 avg_time=   8701871 ns]
