run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-gcc10.2-native.json -DCMAKE_CXX_FLAGS=-march=native
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DCMAKE_CXX_FLAGS=-march=native ..
-- The CXX compiler identification is GNU 10.2.0
-- The C compiler identification is GNU 10.2.0
-- Check for working CXX compiler: /usr/bin/g++-10
-- Check for working CXX compiler: /usr/bin/g++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/gcc-10
-- Check for working C compiler: /usr/bin/gcc-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Failed
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Failed
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-gcc10.2-native.json --benchmark_out_format=json
2021-01-23 04:33:41
Running benchmark/bench_ondemand
Run on (4 X 3200 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 1024 KiB (x4)
  L3 Unified 8448 KiB (x1)
Load Average: 1.03, 0.99, 0.69
***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.
simdjson::dom implementation:      haswell
simdjson::ondemand implementation: haswell
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                  326457 ns       397677 ns         2149           4.281k           1.94795G               0        33.608k    1035.33k              1.63944          3.08457k       3.19356G          3.07044M                    4.86202                     2.96566           308.457k    4.41474k   631.515k        1.8016G/s   0.533737    33.635k   1041.58k         1.64934   3.06319k/s 3.19056G/s     3.07044M               4.86202                2.94787        100       306.319k/s [BEST: throughput=  1.95 GB/s doc_throughput=  3084 docs/s instructions=     3070441 cycles=     1035332 branch_miss=    4281 cache_miss=       0 cache_ref=     33608 items=       100 avg_time=    326456 ns]
partial_tweets<simdjson_ondemand>/manual_time             240750 ns       298306 ns         2909           2.304k           2.64091G               4         9.694k    763.793k              1.20946          4.18186k       3.19408G          2.23641M                    3.54133                     2.92803           418.186k    2.43338k   631.515k       2.44297G/s    1.62393   9.63608k   768.304k         1.21661   4.15369k/s  3.1913G/s     2.23641M               3.54133                2.91083        100       415.369k/s [BEST: throughput=  2.64 GB/s doc_throughput=  4181 docs/s instructions=     2236405 cycles=      763793 branch_miss=    2304 cache_miss=       4 cache_ref=      9694 items=       100 avg_time=    240749 ns]
partial_tweets<yyjson>/manual_time                        866222 ns       945456 ns          811           9.766k           1.24068G             208        27.747k    1.62566M              2.57423          1.96461k       3.19378G          2.90846M                    4.60553                     1.78909           196.461k    7.71053k   631.515k       695.272M/s    522.263   23.3781k   1.80034M         2.85083   1.15444k/s 2.07839G/s     2.90895M                4.6063                1.61577        100       115.444k/s [BEST: throughput=  1.24 GB/s doc_throughput=  1964 docs/s instructions=     2908461 cycles=     1625662 branch_miss=    9766 cache_miss=     208 cache_ref=     27747 items=       100 avg_time=    866221 ns]
partial_tweets<yyjson_insitu>/manual_time                 588478 ns       650125 ns         1201           7.138k           1.47757G          1.551k        13.767k    1.35653M              2.14805          2.33972k        3.1739G          2.90815M                    4.60503                     2.14382           233.972k    7.48933k   631.515k       1023.42M/s     59.637   8.90183k   1.47941M         2.34263    1.6993k/s 2.51396G/s     2.90841M               4.60544                1.96593        100        169.93k/s [BEST: throughput=  1.48 GB/s doc_throughput=  2339 docs/s instructions=     2908146 cycles=     1356526 branch_miss=    7138 cache_miss=    1551 cache_ref=     13767 items=       100 avg_time=    588477 ns]
partial_tweets<sajson>/manual_time                        612795 ns       677816 ns         1141          10.205k           1039.93M               1        13.685k    1.93906M              3.07048          1.64673k        3.1931G          6.04845M                    9.57768                     3.11927           164.673k    10.6854k   631.515k       982.808M/s    1.89833   13.6047k   1.95479M          3.0954   1.63187k/s 3.18996G/s     6.04845M               9.57768                3.09417        100       163.187k/s [BEST: throughput=  1.04 GB/s doc_throughput=  1646 docs/s instructions=     6048450 cycles=     1939057 branch_miss=   10205 cache_miss=       1 cache_ref=     13685 items=       100 avg_time=    612795 ns]
partial_tweets<rapidjson>/manual_time                    1900914 ns      1965057 ns          367          26.115k           387.054M             824        22.777k     5.2094M              8.24905           612.897       3.19283G          13.1147M                    20.7671                     2.51751           61.2897k    26.1366k   631.515k       316.826M/s    325.787   11.5414k   5.38437M         8.52612    526.063/s 2.83252G/s     13.1154M               20.7681                2.43582        100       52.6063k/s [BEST: throughput=  0.39 GB/s doc_throughput=   612 docs/s instructions=    13114729 cycles=     5209399 branch_miss=   26115 cache_miss=     824 cache_ref=     22777 items=       100 avg_time=   1900913 ns]
partial_tweets<rapidjson_insitu>/manual_time             1442705 ns      1504862 ns          487          26.355k           493.556M             141        14.699k    4.08525M              6.46897           781.542        3.1928G          9.82305M                    15.5547                     2.40452           78.1542k    26.3492k   631.515k       417.452M/s    205.943   9.99458k   4.20458M         6.65792    693.142/s 2.91437G/s     9.82344M               15.5553                2.33637        100       69.3142k/s [BEST: throughput=  0.49 GB/s doc_throughput=   781 docs/s instructions=     9823045 cycles=     4085250 branch_miss=   26355 cache_miss=     141 cache_ref=     14699 items=       100 avg_time=   1442704 ns]
partial_tweets<nlohmann_json>/manual_time                9067724 ns      9156411 ns           77          135.61k            72.671M               8        99.348k    27.7171M              43.8898           115.074       3.18952G          70.6953M                    111.946                     2.55061           11.5074k    147.785k   631.515k        66.418M/s    30.2208   135.682k   28.9175M         45.7908    110.281/s 3.18906G/s     71.1389M               112.648                2.46006        100       11.0281k/s [BEST: throughput=  0.07 GB/s doc_throughput=   115 docs/s instructions=    70695336 cycles=    27717084 branch_miss=  135610 cache_miss=       8 cache_ref=     99348 items=       100 avg_time=   9067723 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 104771303 ns    110915814 ns            7         866.325k           439.703M         6.8732M       6.89497M    333.428M              7.24863           9.55902       3.18725G          998.581M                    21.7089                     2.99489           9.55902M    865.157k   45.9988M       418.701M/s   6.79999M   6.89494M   334.039M          7.2619     9.5446/s 3.18826G/s     998.581M               21.7089                2.98942      1000k        9.5446M/s [BEST: throughput=  0.44 GB/s doc_throughput=     9 docs/s instructions=   998581029 cycles=   333428026 branch_miss=  866325 cache_miss= 6873204 cache_ref=   6894971 items=   1000000 avg_time= 104771303 ns]
large_random<simdjson_ondemand>/manual_time             66037429 ns     72150806 ns           11         870.888k           697.206M        3.50107M       3.57253M    210.397M              4.57397           15.1571         3.189G          651.959M                    14.1734                     3.09871           15.1571M    870.461k   45.9988M       664.288M/s   3.51974M   3.57255M   210.566M         4.57763    15.1429/s 3.18858G/s     651.959M               14.1734                3.09623      1000k       15.1429M/s [BEST: throughput=  0.70 GB/s doc_throughput=    15 docs/s instructions=   651958679 cycles=   210396838 branch_miss=  870888 cache_miss= 3501069 cache_ref=   3572525 items=   1000000 avg_time=  66037428 ns]
large_random<simdjson_ondemand_unordered>/manual_time   70723588 ns     76819420 ns           10         863.755k           650.841M        3.51778M       3.57237M    225.368M              4.89944           14.1491       3.18876G          651.959M                    14.1734                     2.89286           14.1491M    864.147k   45.9988M       620.272M/s   3.51243M   3.57255M   225.501M         4.90234    14.1396/s 3.18849G/s     651.959M               14.1734                2.89115      1000k       14.1396M/s [BEST: throughput=  0.65 GB/s doc_throughput=    14 docs/s instructions=   651958685 cycles=   225368345 branch_miss=  863755 cache_miss= 3517780 cache_ref=   3572372 items=   1000000 avg_time=  70723587 ns]
large_random<yyjson>/manual_time                       157597189 ns    163845102 ns            4         660.884k           292.038M        4.20191M       4.37321M    362.061M              7.87109           6.34882       2.29866G           942.15M                    20.4821                     2.60219           6.34882M    664.376k   45.9988M       278.354M/s   4.20106M   4.32825M   362.396M         7.87839    6.34529/s 2.29951G/s      942.15M               20.4821                2.59978      1000k       6.34529M/s [BEST: throughput=  0.29 GB/s doc_throughput=     6 docs/s instructions=   942149726 cycles=   362060597 branch_miss=  660884 cache_miss= 4201905 cache_ref=   4373214 items=   1000000 avg_time= 157597189 ns]
large_random<yyjson_insitu>/manual_time                131460024 ns    137689479 ns            5         662.701k           350.359M        3.48185M       3.59428M    319.133M              6.93786            7.6167       2.43074G          936.029M                     20.349                     2.93304            7.6167M    664.468k   45.9988M       333.697M/s   3.48264M   3.59547M   319.589M         6.94778    7.60688/s 2.43108G/s     936.029M                20.349                2.92885      1000k       7.60688M/s [BEST: throughput=  0.35 GB/s doc_throughput=     7 docs/s instructions=   936028865 cycles=   319133176 branch_miss=  662701 cache_miss= 3481846 cache_ref=   3594283 items=   1000000 avg_time= 131460024 ns]
large_random<sajson>/manual_time                       104211039 ns    110361279 ns            7          596.15k           442.092M        5.46858M       5.57694M    331.726M              7.21163           9.61096       3.18821G          1066.99M                    23.1961                     3.21649           9.61096M    596.172k   45.9988M       420.952M/s   5.46142M    5.5768M   332.299M         7.22408    9.59591/s 3.18871G/s     1066.99M               23.1961                3.21094      1000k       9.59591M/s [BEST: throughput=  0.44 GB/s doc_throughput=     9 docs/s instructions=  1066991832 cycles=   331726036 branch_miss=  596150 cache_miss= 5468580 cache_ref=   5576942 items=   1000000 avg_time= 104211039 ns]
large_random<rapidjson>/manual_time                    208853243 ns    215019550 ns            4         607.376k           230.537M         4.3679M       4.87838M     568.13M               12.351           5.01182       2.84736G          1.66512G                    36.1993                     2.93089           5.01182M      607.3k   45.9988M       210.042M/s   4.07259M   4.64544M   573.308M         12.4635    4.78805/s 2.74503G/s     1.66513G               36.1995                2.90443      1000k       4.78805M/s [BEST: throughput=  0.23 GB/s doc_throughput=     5 docs/s instructions=  1665122611 cycles=   568129505 branch_miss=  607376 cache_miss= 4367902 cache_ref=   4878381 items=   1000000 avg_time= 208853243 ns]
large_random<rapidjson_lossless>/manual_time           242153914 ns    248337917 ns            3         601.729k           196.448M        4.36555M       4.87956M    678.505M              14.7505           4.27072       2.89771G          2.04909G                    44.5466                        3.02           4.27072M     596.29k   45.9988M       181.157M/s   4.10471M   4.67268M   682.249M         14.8319     4.1296/s 2.81742G/s      2.0491G               44.5468                3.00345      1000k        4.1296M/s [BEST: throughput=  0.20 GB/s doc_throughput=     4 docs/s instructions=  2049088099 cycles=   678504934 branch_miss=  601729 cache_miss= 4365545 cache_ref=   4879562 items=   1000000 avg_time= 242153914 ns]
large_random<rapidjson_insitu>/manual_time             189777212 ns    195971753 ns            4         613.302k           255.439M        5.05594M       5.60545M    506.156M              11.0037           5.55317       2.81077G          1.49712G                     32.547                     2.95783           5.55317M    613.452k   45.9988M       231.154M/s   4.78093M   5.36898M   512.562M          11.143    5.26934/s 2.70086G/s     1.49713G               32.5472                2.92088      1000k       5.26934M/s [BEST: throughput=  0.26 GB/s doc_throughput=     5 docs/s instructions=  1497122528 cycles=   506155509 branch_miss=  613302 cache_miss= 5055945 cache_ref=   5605449 items=   1000000 avg_time= 189777211 ns]
large_random<nlohmann_json>/manual_time               1435860732 ns   1442021701 ns            1         4.50342M           32.0357M        30.4703M       30.9061M    4.56444G              99.2295          0.696446       3.17888G          11.9244G                    259.232                     2.61245           696.446k    4.50342M   45.9988M       30.5516M/s   30.4703M   30.9061M   4.56444G         99.2295   0.696446/s 3.17888G/s     11.9244G               259.232                2.61245      1000k       696.446k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 11924357886 cycles=  4564435356 branch_miss= 4503418 cache_miss=30470262 cache_ref=  30906137 items=   1000000 avg_time=1435860732 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                       100090589 ns    119267378 ns            7         451.977k           1.37488G        10.2146M       10.3153M    318.431M              2.31915           10.0133       3.18856G           972.65M                    7.08386                     3.05451           5.24988M    452.483k   137.305M        1.2776G/s    10.237M   10.3152M   319.127M         2.32422    9.99095/s 3.18838G/s      972.65M               7.08386                3.04785   524.288k       5.23813M/s [BEST: throughput=  1.37 GB/s doc_throughput=    10 docs/s instructions=   972650011 cycles=   318431209 branch_miss=  451977 cache_miss=10214577 cache_ref=  10315294 items=    524288 avg_time= 100090589 ns]
kostya<simdjson_ondemand>/manual_time                   69370473 ns     88528631 ns           10         467.176k           1.98295G        6.43709M       6.47121M    220.776M              1.60792            14.442       3.18844G          700.216M                    5.09972                     3.17162           7.57175M    467.967k   137.305M       1.84337G/s    6.4348M   6.47104M   221.175M         1.61083    14.4154/s 3.18831G/s     700.216M               5.09972                 3.1659   524.288k        7.5578M/s [BEST: throughput=  1.98 GB/s doc_throughput=    14 docs/s instructions=   700216391 cycles=   220775826 branch_miss=  467176 cache_miss= 6437087 cache_ref=   6471206 items=    524288 avg_time=  69370473 ns]
kostya<yyjson>/manual_time                             265176386 ns    284423774 ns            3         417.624k           518.065M         8.4865M       8.62245M     613.38M              4.46728            3.7731       2.31434G          983.521M                    7.16304                     1.60345           1.97819M     416.54k   137.305M       493.801M/s   8.48661M    8.6232M   613.449M         4.46778    3.77107/s 2.31336G/s     983.521M               7.16304                1.60326   524.288k       1.97713M/s [BEST: throughput=  0.52 GB/s doc_throughput=     3 docs/s instructions=   983520986 cycles=   613379676 branch_miss=  417624 cache_miss= 8486501 cache_ref=   8622454 items=    524288 avg_time= 265176385 ns]
kostya<yyjson_insitu>/manual_time                      187429141 ns    206634707 ns            4         417.548k           732.656M        6.34768M       6.47999M     485.58M              3.53651           5.33597       2.59104G          965.251M                    7.02998                     1.98783           2.79759M    416.097k   137.305M       698.633M/s   6.34817M   6.49395M   485.552M          3.5363    5.33535/s 2.59059G/s     965.251M               7.02998                1.98795   524.288k       2.79726M/s [BEST: throughput=  0.73 GB/s doc_throughput=     5 docs/s instructions=   965251315 cycles=   485579987 branch_miss=  417548 cache_miss= 6347684 cache_ref=   6479990 items=    524288 avg_time= 187429141 ns]
kostya<sajson>/manual_time                             156020182 ns    175247779 ns            4         373.203k           880.511M        8.46133M        8.5448M    497.273M              3.62167           6.41281       3.18892G          1.60357G                    11.6789                     3.22472           3.36216M    373.515k   137.305M       839.278M/s    8.4908M   8.54482M   497.511M          3.6234    6.40943/s 3.18876G/s     1.60357G               11.6789                3.22318   524.288k       3.36039M/s [BEST: throughput=  0.88 GB/s doc_throughput=     6 docs/s instructions=  1603566988 cycles=   497272993 branch_miss=  373203 cache_miss= 8461326 cache_ref=   8544799 items=    524288 avg_time= 156020181 ns]
kostya<rapidjson>/manual_time                          294952326 ns    314157369 ns            2          1.1415M           471.064M        5.24283M       5.78035M    832.089M              6.06015           3.43079       2.85472G          2.29089G                    16.6847                     2.75318           1.79872M    1.15869M   137.305M       443.951M/s   5.11813M   5.67437M   834.633M         6.07868    3.39038/s 2.82972G/s     2.29089G               16.6847                2.74479   524.288k       1.77753M/s [BEST: throughput=  0.47 GB/s doc_throughput=     3 docs/s instructions=  2290888556 cycles=   832089237 branch_miss= 1141500 cache_miss= 5242829 cache_ref=   5780352 items=    524288 avg_time= 294952325 ns]
kostya<rapidjson_lossless>/manual_time                 319214363 ns    338438255 ns            2         992.954k           434.714M        5.24305M       5.76738M    910.227M              6.62923           3.16604       2.88182G          2.50794G                    18.2654                     2.75529           1.65992M    975.426k   137.305M       410.208M/s   5.11887M   5.66425M   912.353M         6.64472    3.13269/s 2.85812G/s     2.50794G               18.2654                2.74887   524.288k       1.64243M/s [BEST: throughput=  0.43 GB/s doc_throughput=     3 docs/s instructions=  2507935050 cycles=   910226935 branch_miss=  992954 cache_miss= 5243049 cache_ref=   5767380 items=    524288 avg_time= 319214362 ns]
kostya<rapidjson_insitu>/manual_time                   284271053 ns    303502127 ns            2         1008.21k           488.684M        7.37655M       7.89631M    799.158M              5.82031           3.55911       2.84429G          2.04115G                    14.8658                     2.55413             1.866M    1008.37k   137.305M       460.632M/s   7.25579M    7.7864M   801.096M         5.83443    3.51777/s 2.81807G/s     2.04116G               14.8658                2.54795   524.288k       1.84432M/s [BEST: throughput=  0.49 GB/s doc_throughput=     3 docs/s instructions=  2041153531 cycles=   799158093 branch_miss= 1008211 cache_miss= 7376554 cache_ref=   7896306 items=    524288 avg_time= 284271053 ns]
kostya<nlohmann_json>/manual_time                     1925746761 ns   1944988483 ns            1         4.04833M           71.2996M        44.8304M       45.3845M    6.14187G              44.7316          0.519279       3.18934G          15.1099G                    110.046                     2.46014           272.252k    4.04833M   137.305M       67.9966M/s   44.8304M   45.3845M   6.14187G         44.7316   0.519279/s 3.18934G/s     15.1099G               110.046                2.46014   524.288k       272.252k/s [BEST: throughput=  0.07 GB/s doc_throughput=     0 docs/s instructions= 15109884005 cycles=  6141870023 branch_miss= 4048335 cache_miss=44830360 cache_ref=  45384521 items=    524288 avg_time=1925746761 ns]
distinct_user_id<simdjson_dom>/manual_time                325819 ns       404573 ns         2147           4.275k           1.95541G               0        34.122k    1031.42k              1.63325          3.09638k       3.19368G          3.01136M                    4.76848                     2.91962           356.083k    4.38634k   631.515k       1.80513G/s   0.605962   34.0923k   1039.57k         1.64615   3.06919k/s 3.19063G/s     3.01137M               4.76848                2.89675        115       352.957k/s [BEST: throughput=  1.96 GB/s doc_throughput=  3096 docs/s instructions=     3011365 cycles=     1031424 branch_miss=    4275 cache_miss=       0 cache_ref=     34122 items=       115 avg_time=    325819 ns]
distinct_user_id<simdjson_ondemand>/manual_time           225412 ns       288219 ns         3104           2.153k           2.82146G               2          9.32k    714.959k              1.13213          4.46776k       3.19426G          2.19251M                    3.47183                     3.06662           513.792k    2.27974k   631.515k        2.6092G/s     2.3866   9.41877k   719.332k         1.13906   4.43632k/s 3.19119G/s     2.19251M               3.47183                3.04798        115       510.177k/s [BEST: throughput=  2.82 GB/s doc_throughput=  4467 docs/s instructions=     2192511 cycles=      714959 branch_miss=    2153 cache_miss=       2 cache_ref=      9320 items=       115 avg_time=    225411 ns]
distinct_user_id<yyjson>/manual_time                      762644 ns       851469 ns         1000           6.682k           1.32331G          7.133k        27.303k    1.52393M              2.41313          2.09545k       3.19332G          2.87509M                    4.55269                     1.88663           240.977k    7.52521k   631.515k       789.699M/s   2.23007k    24.484k   1.72575M         2.73272   1.31123k/s 2.26285G/s     2.87529M               4.55301                1.66611        115       150.791k/s [BEST: throughput=  1.32 GB/s doc_throughput=  2095 docs/s instructions=     2875095 cycles=     1523929 branch_miss=    6682 cache_miss=    7133 cache_ref=     27303 items=       115 avg_time=    762644 ns]
distinct_user_id<yyjson_insitu>/manual_time               586549 ns       657732 ns         1203           7.221k           1.48819G            1082        13.557k    1.34981M              2.13741          2.35654k       3.18087G          2.87478M                     4.5522                     2.12978           271.002k    7.57318k   631.515k       1026.78M/s    64.1064   8.98951k    1.4737M          2.3336   1.70489k/s  2.5125G/s     2.87505M               4.55262                 1.9509        115       196.062k/s [BEST: throughput=  1.49 GB/s doc_throughput=  2356 docs/s instructions=     2874785 cycles=     1349806 branch_miss=    7221 cache_miss=    1082 cache_ref=     13557 items=       115 avg_time=    586549 ns]
distinct_user_id<sajson>/manual_time                      607492 ns       680513 ns         1149          10.308k           1050.06M               0        13.201k    1.92035M              3.04087          1.66276k       3.19308G          5.98102M                     9.4709                     3.11454           191.217k    10.7192k   631.515k       991.387M/s    1.56658   13.3027k   1.93783M         3.06853   1.64611k/s 3.18988G/s     5.98102M                9.4709                3.08646        115       189.303k/s [BEST: throughput=  1.05 GB/s doc_throughput=  1662 docs/s instructions=     5981016 cycles=     1920354 branch_miss=   10308 cache_miss=       0 cache_ref=     13201 items=       115 avg_time=    607491 ns]
distinct_user_id<rapidjson>/manual_time                  1891772 ns      1963847 ns          373          26.332k           386.802M          7.348k        22.841k    5.21271M              8.25429           612.498       3.19277G          13.0572M                    20.6759                     2.50487           70.4373k    26.1434k   631.515k       318.357M/s    623.051   12.4025k   5.37059M         8.50429    528.605/s 2.83892G/s     13.0578M               20.6769                2.43135        115       60.7896k/s [BEST: throughput=  0.39 GB/s doc_throughput=   612 docs/s instructions=    13057161 cycles=     5212709 branch_miss=   26332 cache_miss=    7348 cache_ref=     22841 items=       115 avg_time=   1891771 ns]
distinct_user_id<rapidjson_insitu>/manual_time           1413205 ns      1483899 ns          521           26.15k           495.455M             767        14.548k    4.06963M              6.44424            784.55       3.19283G          9.77505M                    15.4787                     2.40195           90.2233k    26.3292k   631.515k       426.166M/s   1.40783k   11.4627k   4.17958M         6.61834    707.611/s 2.95752G/s     9.77536M               15.4792                2.33884        115       81.3753k/s [BEST: throughput=  0.50 GB/s doc_throughput=   784 docs/s instructions=     9775050 cycles=     4069632 branch_miss=   26150 cache_miss=     767 cache_ref=     14548 items=       115 avg_time=   1413204 ns]
distinct_user_id<nlohmann_json>/manual_time              8521443 ns      8612875 ns           85         111.987k           79.0115M              93        97.212k    25.4901M              40.3634           125.114       3.18917G          66.1453M                    104.741                     2.59494           14.3881k    128.073k   631.515k       70.6758M/s    73.4706   105.075k   27.1751M         43.0316    117.351/s 3.18903G/s     64.7693M               102.562                2.38341        115       13.4954k/s [BEST: throughput=  0.08 GB/s doc_throughput=   125 docs/s instructions=    66145326 cycles=    25490089 branch_miss=  111987 cache_miss=      93 cache_ref=     97212 items=       115 avg_time=   8521442 ns]
find_tweet<simdjson_dom>/manual_time                      310067 ns       385272 ns         2257           4.066k           2.05323G               0        29.608k    982.251k              1.55539          3.25128k       3.19357G          2.93033M                    4.64015                     2.98328           3.25128k    4.18116k   631.515k       1.89683G/s   0.431103   29.7554k   989.303k         1.56656   3.22511k/s 3.19061G/s     2.93033M               4.64015                2.96201          1       3.22511k/s [BEST: throughput=  2.05 GB/s doc_throughput=  3251 docs/s instructions=     2930326 cycles=      982251 branch_miss=    4066 cache_miss=       0 cache_ref=     29608 items=         1 avg_time=    310066 ns]
find_tweet<simdjson_ondemand>/manual_time                 152106 ns       216999 ns         4596           1.281k           4.18604G               1         7.938k    481.882k             0.763057          6.62857k       3.19419G          1.56921M                    2.48484                     3.25642           6.62857k    1.34346k   631.515k       3.86668G/s      1.005   7.90069k   485.461k        0.768725   6.57437k/s  3.1916G/s     1.56921M               2.48484                3.23241          1       6.57437k/s [BEST: throughput=  4.19 GB/s doc_throughput=  6628 docs/s instructions=     1569211 cycles=      481882 branch_miss=    1281 cache_miss=       1 cache_ref=      7938 items=         1 avg_time=    152105 ns]
find_tweet<yyjson>/manual_time                            847358 ns       932817 ns          883           9.331k           1.27177G             191         27.18k    1.58613M              2.51163          2.01384k       3.19422G          2.82418M                    4.47206                     1.78055           2.01384k    7.58566k   631.515k        710.75M/s    314.362   19.5889k   1.74362M         2.76102   1.18014k/s 2.05772G/s     2.82483M               4.47309                1.62009          1       1.18014k/s [BEST: throughput=  1.27 GB/s doc_throughput=  2013 docs/s instructions=     2824175 cycles=     1586129 branch_miss=    9331 cache_miss=     191 cache_ref=     27180 items=         1 avg_time=    847358 ns]
find_tweet<yyjson_insitu>/manual_time                     571499 ns       635292 ns         1233           6.981k           1.51994G          1.104k        12.989k    1.32206M              2.09347          2.40681k       3.18194G          2.82382M                     4.4715                     2.13593           2.40681k    7.32266k   631.515k       1053.82M/s     6.7356   5.26235k    1.4259M         2.25791   1.74978k/s 2.49502G/s     2.82408M               4.47191                1.98055          1       1.74978k/s [BEST: throughput=  1.52 GB/s doc_throughput=  2406 docs/s instructions=     2823817 cycles=     1322057 branch_miss=    6981 cache_miss=    1104 cache_ref=     12989 items=         1 avg_time=    571499 ns]
find_tweet<sajson>/manual_time                            594351 ns       664954 ns         1174          10.005k           1072.04M               0        12.896k    1.88094M              2.97845          1.69756k         3.193G          5.88887M                    9.32499                     3.13082           1.69756k    10.4561k   631.515k       1013.31M/s    2.40204   13.0088k   1.89603M         3.00234   1.68251k/s 3.19008G/s     5.88887M               9.32499                 3.1059          1       1.68251k/s [BEST: throughput=  1.07 GB/s doc_throughput=  1697 docs/s instructions=     5888871 cycles=     1880935 branch_miss=   10005 cache_miss=       0 cache_ref=     12896 items=         1 avg_time=    594351 ns]
find_tweet<rapidjson>/manual_time                        1875150 ns      1942349 ns          376          25.271k           391.257M         11.897k        21.091k    5.15347M              8.16049           619.553       3.19285G           12.989M                     20.568                     2.52044            619.553    25.9784k   631.515k       321.179M/s    458.402   9.03437k   5.31722M         8.41979    533.291/s 2.83562G/s     12.9897M               20.5692                2.44295          1        533.291/s [BEST: throughput=  0.39 GB/s doc_throughput=   619 docs/s instructions=    12988997 cycles=     5153470 branch_miss=   25271 cache_miss=   11897 cache_ref=     21091 items=         1 avg_time=   1875149 ns]
find_tweet<rapidjson_insitu>/manual_time                 1399731 ns      1466393 ns          529          26.206k           498.938M               5        13.742k     4.0412M              6.39921           790.065       3.19281G          9.71753M                    15.3877                     2.40462            790.065    26.1981k   631.515k       430.268M/s    1.2404k   8.58063k   4.13584M         6.54908    714.423/s 2.95474G/s     9.71785M               15.3881                2.34967          1        714.423/s [BEST: throughput=  0.50 GB/s doc_throughput=   790 docs/s instructions=     9717535 cycles=     4041195 branch_miss=   26206 cache_miss=       5 cache_ref=     13742 items=         1 avg_time=   1399730 ns]
find_tweet<nlohmann_json>/manual_time                    7361481 ns      7450414 ns          100          89.513k           93.1514M              12        76.032k    21.6304M              34.2516           147.505       3.19058G          56.5559M                    89.5559                     2.61465            147.505    114.256k   631.515k       81.8123M/s      24.11   82.2615k   23.4773M         37.1762    135.842/s 3.18922G/s     55.1734M               87.3667                2.35007          1        135.842/s [BEST: throughput=  0.09 GB/s doc_throughput=   147 docs/s instructions=    56555915 cycles=    21630369 branch_miss=   89513 cache_miss=      12 cache_ref=     76032 items=         1 avg_time=   7361480 ns]
top_tweet<simdjson_dom>/manual_time                       317727 ns       397977 ns         2201           4.143k           2.00457G               5        32.569k     1006.1k              1.59316          3.17423k       3.19361G          2.96449M                    4.69426                     2.94651           3.17423k    4.27172k   631.515k        1.8511G/s    5.42117    32.451k   1013.76k         1.60528   3.14736k/s 3.19066G/s      2.9645M               4.69426                2.92426          1       3.14736k/s [BEST: throughput=  2.00 GB/s doc_throughput=  3174 docs/s instructions=     2964495 cycles=     1006104 branch_miss=    4143 cache_miss=       5 cache_ref=     32569 items=         1 avg_time=    317726 ns]
top_tweet<simdjson_ondemand>/manual_time                  224501 ns       290538 ns         3118           2.262k           2.83645G               0         9.808k    711.163k              1.12612           4.4915k       3.19419G          2.19171M                    3.47056                     3.08187            4.4915k    2.35022k   631.515k       2.61978G/s   0.010263   9.87176k   716.491k         1.13456   4.45432k/s 3.19148G/s     2.19171M               3.47056                3.05895          1       4.45432k/s [BEST: throughput=  2.84 GB/s doc_throughput=  4491 docs/s instructions=     2191712 cycles=      711163 branch_miss=    2262 cache_miss=       0 cache_ref=      9808 items=         1 avg_time=    224501 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time     217166 ns       284188 ns         3225           2.186k           2.93462G               0        10.474k    687.376k              1.08846          4.64695k        3.1942G          2.21895M                    3.51369                     3.22814           4.64695k    2.31041k   631.515k       2.70828G/s  0.0108527    10.483k   693.042k         1.09743   4.60478k/s 3.19131G/s     2.21895M               3.51369                3.20175          1       4.60478k/s [BEST: throughput=  2.93 GB/s doc_throughput=  4646 docs/s instructions=     2218946 cycles=      687376 branch_miss=    2186 cache_miss=       0 cache_ref=     10474 items=         1 avg_time=    217165 ns]
top_tweet<yyjson>/manual_time                             857237 ns       946668 ns          882            9.85k           1.24952G             231        27.427k    1.61429M              2.55621          1.97861k       3.19404G          2.84502M                    4.50507                      1.7624           1.97861k    7.66489k   631.515k       702.559M/s     374.35   22.2752k   1.77366M         2.80858   1.16654k/s 2.06904G/s     2.84571M               4.50616                1.60443          1       1.16654k/s [BEST: throughput=  1.25 GB/s doc_throughput=  1978 docs/s instructions=     2845018 cycles=     1614287 branch_miss=    9850 cache_miss=     231 cache_ref=     27427 items=         1 avg_time=    857236 ns]
top_tweet<yyjson_insitu>/manual_time                      580298 ns       650598 ns         1217           6.825k           1.51466G          1.213k         13.28k    1.32614M              2.09993          2.39845k       3.18068G          2.84491M                     4.5049                     2.14526           2.39845k    7.40116k   631.515k       1037.85M/s    47.2958   7.96627k    1.4535M         2.30161   1.72325k/s 2.50475G/s     2.84517M               4.50531                1.95746          1       1.72325k/s [BEST: throughput=  1.51 GB/s doc_throughput=  2398 docs/s instructions=     2844909 cycles=     1326140 branch_miss=    6825 cache_miss=    1213 cache_ref=     13280 items=         1 avg_time=    580297 ns]
top_tweet<sajson>/manual_time                             598396 ns       672567 ns         1168          10.152k           1064.63M               6        13.459k    1.89411M              2.99931          1.68584k       3.19316G          5.91604M                    9.36802                     3.12339           1.68584k    10.5598k   631.515k       1006.46M/s    12.7483    13.375k   1.90889M         3.02271   1.67113k/s 3.19001G/s     5.91604M               9.36802                3.09921          1       1.67113k/s [BEST: throughput=  1.06 GB/s doc_throughput=  1685 docs/s instructions=     5916043 cycles=     1894112 branch_miss=   10152 cache_miss=       6 cache_ref=     13459 items=         1 avg_time=    598395 ns]
top_tweet<rapidjson>/manual_time                         1886142 ns      1959028 ns          374          26.702k           387.985M             204        22.311k    5.19689M              8.22924           614.371       3.19282G          13.0393M                    20.6476                     2.50905            614.371    26.1471k   631.515k       319.308M/s     540.66   10.7147k   5.35255M         8.47572    530.183/s 2.83783G/s     13.0401M               20.6489                2.43624          1        530.183/s [BEST: throughput=  0.39 GB/s doc_throughput=   614 docs/s instructions=    13039257 cycles=     5196891 branch_miss=   26702 cache_miss=     204 cache_ref=     22311 items=         1 avg_time=   1886141 ns]
top_tweet<rapidjson_insitu>/manual_time                  1408452 ns      1480144 ns          524          25.952k           496.678M           3.23k        14.184k    4.05966M              6.42845           786.487       3.19287G          9.75922M                    15.4537                     2.40395            786.487    26.2624k   631.515k       427.604M/s   1.35337k   10.1121k   4.16446M         6.59439    709.999/s 2.95676G/s     9.75953M               15.4542                2.34353          1        709.999/s [BEST: throughput=  0.50 GB/s doc_throughput=   786 docs/s instructions=     9759217 cycles=     4059661 branch_miss=   25952 cache_miss=    3230 cache_ref=     14184 items=         1 avg_time=   1408451 ns]
top_tweet<nlohmann_json>/manual_time                    10108317 ns     10199957 ns           69         177.175k           62.8887M              32       163.472k    32.0309M              50.7208           99.5839       3.18976G          78.0687M                    123.621                     2.43729            99.5839      181.7k   631.515k       59.5806M/s    34.1884   164.268k   32.2358M         51.0451    98.9284/s 3.18903G/s     78.3305M               124.036                2.42993          1        98.9284/s [BEST: throughput=  0.06 GB/s doc_throughput=    99 docs/s instructions=    78068683 cycles=    32030926 branch_miss=  177175 cache_miss=      32 cache_ref=    163472 items=         1 avg_time=  10108316 ns]
