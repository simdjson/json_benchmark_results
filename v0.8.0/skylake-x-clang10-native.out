run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-clang10-native.json -DCMAKE_CXX_FLAGS=-march=native
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DCMAKE_CXX_FLAGS=-march=native ..
-- The CXX compiler identification is Clang 10.0.1
-- The C compiler identification is Clang 10.0.1
-- Check for working CXX compiler: /usr/bin/clang++-10
-- Check for working CXX compiler: /usr/bin/clang++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/clang-10
-- Check for working C compiler: /usr/bin/clang-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Success
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Success
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES -- failed to compile
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-clang10-native.json --benchmark_out_format=json
2021-01-23 04:24:08
Running benchmark/bench_ondemand
Run on (4 X 3200 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 1024 KiB (x4)
  L3 Unified 8448 KiB (x1)
Load Average: 0.99, 0.75, 0.38
***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.
simdjson::dom implementation:      haswell
simdjson::ondemand implementation: haswell

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                  325634 ns       395135 ns         2160           3.632k           1.95434G              13        32.607k    1032.05k              1.63425          3.09469k       3.19388G           2.9944M                    4.74161                      2.9014           309.469k    3.75799k   631.515k       1.80615G/s    15.7097    32.675k   1038.89k         1.64507   3.07093k/s 3.19036G/s      2.9944M               4.74161                2.88231        100       307.093k/s [BEST: throughput=  1.95 GB/s doc_throughput=  3094 docs/s instructions=     2994397 cycles=     1032051 branch_miss=    3632 cache_miss=      13 cache_ref=     32607 items=       100 avg_time=    325634 ns]
partial_tweets<simdjson_ondemand>/manual_time             208079 ns       265936 ns         3362           1.737k           3.06211G               0        11.383k    658.854k              1.04329          4.84884k       3.19468G          1.92824M                    3.05335                     2.92666           484.884k    1.87683k   631.515k       2.82655G/s  0.0838786   11.4125k   664.053k         1.05152   4.80587k/s 3.19136G/s     1.92824M               3.05335                2.90374        100       480.587k/s [BEST: throughput=  3.06 GB/s doc_throughput=  4848 docs/s instructions=     1928239 cycles=      658854 branch_miss=    1737 cache_miss=       0 cache_ref=     11383 items=       100 avg_time=    208078 ns]
partial_tweets<yyjson>/manual_time                        797612 ns       876640 ns          881           9.945k           1.44107G             314         27.81k    1.39966M              2.21635          2.28193k       3.19393G          2.90304M                    4.59695                      2.0741           228.193k    7.75202k   631.515k       755.078M/s    523.385   23.6079k   1.57262M         2.49023   1.25374k/s 1.97166G/s     2.90373M               4.59805                1.84643        100       125.374k/s [BEST: throughput=  1.44 GB/s doc_throughput=  2281 docs/s instructions=     2903042 cycles=     1399661 branch_miss=    9945 cache_miss=     314 cache_ref=     27810 items=       100 avg_time=    797612 ns]
partial_tweets<yyjson_insitu>/manual_time                 516850 ns       579191 ns         1367           7.341k           1.77767G              73        14.842k    1.13465M              1.79672          2.81493k       3.19397G          2.90294M                    4.59678                     2.55843           281.493k    7.44417k   631.515k       1.13794G/s    67.2048   8.79396k   1.24688M         1.97443    1.9348k/s 2.41246G/s      2.9032M                4.5972                2.32837        100        193.48k/s [BEST: throughput=  1.78 GB/s doc_throughput=  2814 docs/s instructions=     2902936 cycles=     1134655 branch_miss=    7341 cache_miss=      73 cache_ref=     14842 items=       100 avg_time=    516849 ns]
partial_tweets<sajson>/manual_time                        691408 ns       755041 ns         1012          10.689k           921.704M               0        13.179k    2.18773M              3.46426          1.45951k       3.19302G          5.87163M                    9.29768                     2.68389           145.951k    11.2137k   631.515k       871.062M/s    2.15909   13.2288k   2.20572M         3.49274   1.44632k/s 3.19018G/s     5.87163M               9.29768                  2.662        100       144.632k/s [BEST: throughput=  0.92 GB/s doc_throughput=  1459 docs/s instructions=     5871627 cycles=     2187729 branch_miss=   10689 cache_miss=       0 cache_ref=     13179 items=       100 avg_time=    691408 ns]
partial_tweets<rapidjson>/manual_time                    2852456 ns      2917134 ns          245          32.463k           244.674M          7.588k        22.792k    8.24056M              13.0489            387.44       3.19272G          21.8971M                     34.674                     2.65724            38.744k      33.57k   631.515k       211.137M/s    415.188   11.7874k   8.42043M         13.3337    350.575/s 2.95199G/s     21.8978M                34.675                2.60056        100       35.0575k/s [BEST: throughput=  0.24 GB/s doc_throughput=   387 docs/s instructions=    21897138 cycles=     8240561 branch_miss=   32463 cache_miss=    7588 cache_ref=     22792 items=       100 avg_time=   2852455 ns]
partial_tweets<rapidjson_insitu>/manual_time             1793275 ns      1855748 ns          390          25.342k           384.517M              86        14.839k    5.24373M              8.30342            608.88        3.1928G          13.3232M                    21.0972                     2.54078            60.888k    26.0953k   631.515k       335.844M/s    202.331   9.45944k   5.31806M         8.42112    557.639/s 2.96556G/s     13.3238M               21.0981                2.50538        100       55.7639k/s [BEST: throughput=  0.38 GB/s doc_throughput=   608 docs/s instructions=    13323172 cycles=     5243734 branch_miss=   25342 cache_miss=      86 cache_ref=     14839 items=       100 avg_time=   1793274 ns]
partial_tweets<nlohmann_json>/manual_time               10145957 ns     10233995 ns           69         152.083k           69.7119M               6        98.021k    28.8857M              45.7403           110.388       3.18864G          78.2038M                    123.835                     2.70735           11.0388k    234.934k   631.515k       59.3596M/s     96.913   139.332k   32.3548M         51.2336    98.5614/s 3.18893G/s     78.8331M               124.832                2.43652        100       9.85614k/s [BEST: throughput=  0.07 GB/s doc_throughput=   110 docs/s instructions=    78203785 cycles=    28885683 branch_miss=  152083 cache_miss=       6 cache_ref=     98021 items=       100 avg_time=  10145957 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 101476992 ns    107703488 ns            7          948.63k           454.043M        6.76078M       6.89752M    323.055M              7.02312           9.87077        3.1888G          1025.66M                    22.2976                     3.17489           9.87077M    948.636k   45.9988M       432.294M/s   6.80228M   6.89729M   323.563M         7.03418    9.85445/s 3.18854G/s     1025.66M               22.2976                 3.1699      1000k       9.85445M/s [BEST: throughput=  0.45 GB/s doc_throughput=     9 docs/s instructions=  1025663209 cycles=   323054873 branch_miss=  948630 cache_miss= 6760784 cache_ref=   6897522 items=   1000000 avg_time= 101476991 ns]
large_random<simdjson_ondemand>/manual_time             78072428 ns     84350301 ns            9         1014.98k           589.554M         3.4762M       3.57308M    248.817M              5.40921           12.8167       3.18902G          669.118M                    14.5464                     2.68919           12.8167M    1016.39k   45.9988M       561.887M/s   3.50979M   3.57319M   248.938M         5.41184    12.8086/s 3.18855G/s     669.118M               14.5464                2.68789      1000k       12.8086M/s [BEST: throughput=  0.59 GB/s doc_throughput=    12 docs/s instructions=   669118090 cycles=   248817262 branch_miss= 1014983 cache_miss= 3476202 cache_ref=   3573085 items=   1000000 avg_time=  78072427 ns]
large_random<simdjson_ondemand_unordered>/manual_time   73097774 ns     79316014 ns           10         946.846k           629.799M        3.48636M       3.57299M    232.912M              5.06343           13.6916       3.18894G          666.118M                    14.4812                     2.85996           13.6916M    947.332k   45.9988M       600.126M/s   3.51043M   3.57294M   233.062M          5.0667    13.6803/s 3.18836G/s     666.118M               14.4812                2.85812      1000k       13.6803M/s [BEST: throughput=  0.63 GB/s doc_throughput=    13 docs/s instructions=   666118333 cycles=   232911604 branch_miss=  946846 cache_miss= 3486365 cache_ref=   3572990 items=   1000000 avg_time=  73097774 ns]
large_random<yyjson>/manual_time                       152950030 ns    159248009 ns            5         665.072k           300.984M        4.20176M       4.50818M    346.169M              7.52561           6.54331       2.26509G           866.68M                    18.8414                     2.50364           6.54331M    667.927k   45.9988M       286.812M/s   4.20101M   4.42863M   346.547M         7.53383    6.53808/s 2.26575G/s      866.68M               18.8414                 2.5009      1000k       6.53808M/s [BEST: throughput=  0.30 GB/s doc_throughput=     6 docs/s instructions=   866680101 cycles=   346168653 branch_miss=  665072 cache_miss= 4201755 cache_ref=   4508177 items=   1000000 avg_time= 152950030 ns]
large_random<yyjson_insitu>/manual_time                126481808 ns    132734295 ns            6         665.445k           363.998M        3.48104M       3.60624M    302.539M              6.57711           7.91321       2.39405G          860.559M                    18.7083                     2.84446           7.91321M    667.748k   45.9988M       346.831M/s   3.48221M   3.60616M     302.8M         6.58278    7.90628/s 2.39402G/s     860.559M               18.7083                2.84201      1000k       7.90628M/s [BEST: throughput=  0.36 GB/s doc_throughput=     7 docs/s instructions=   860559333 cycles=   302538816 branch_miss=  665445 cache_miss= 3481041 cache_ref=   3606239 items=   1000000 avg_time= 126481807 ns]
large_random<sajson>/manual_time                       110613828 ns    116861538 ns            6         577.182k           416.343M        5.48895M       5.57683M    352.343M              7.65983           9.05117       3.18911G          1.10099G                    23.9353                     3.12478           9.05117M    577.251k   45.9988M       396.586M/s   5.47092M   5.57688M   352.685M         7.66727    9.04046/s 3.18843G/s     1.10099G               23.9353                3.12175      1000k       9.04046M/s [BEST: throughput=  0.42 GB/s doc_throughput=     9 docs/s instructions=  1100994443 cycles=   352342856 branch_miss=  577182 cache_miss= 5488949 cache_ref=   5576828 items=   1000000 avg_time= 110613828 ns]
large_random<rapidjson>/manual_time                    251834348 ns    258099030 ns            3         592.685k           188.617M         4.3653M       4.88862M    709.146M              15.4166           4.10048       2.90784G          1.99713G                     43.417                     2.81624           4.10048M    592.441k   45.9988M       174.193M/s   4.10426M   4.68628M   712.348M         15.4862    3.97086/s 2.82864G/s     1.99714G               43.4172                 2.8036      1000k       3.97086M/s [BEST: throughput=  0.19 GB/s doc_throughput=     4 docs/s instructions=  1997127413 cycles=   709146303 branch_miss=  592685 cache_miss= 4365297 cache_ref=   4888623 items=   1000000 avg_time= 251834347 ns]
large_random<rapidjson_lossless>/manual_time           287472727 ns    293731876 ns            3          610.87k           164.678M         4.3673M       4.89214M    822.118M              17.8726           3.58006       2.94323G           2.4771G                    53.8513                     3.01307           3.58006M    648.413k   45.9988M       152.598M/s   4.10486M   4.68565M    826.05M         17.9581    3.47859/s 2.87349G/s      2.4771G               53.8515                2.99873      1000k       3.47859M/s [BEST: throughput=  0.16 GB/s doc_throughput=     3 docs/s instructions=  2477095700 cycles=   822117699 branch_miss=  610870 cache_miss= 4367299 cache_ref=   4892140 items=   1000000 avg_time= 287472727 ns]
large_random<rapidjson_insitu>/manual_time             277573187 ns    283869706 ns            3         582.529k           170.455M        5.05913M       5.61834M     791.69M              17.2111           3.70564       2.93372G          1.72213G                    37.4386                     2.17525           3.70564M    582.854k   45.9988M       158.041M/s   4.81544M   5.42762M   794.418M         17.2704    3.60265/s 2.86201G/s     1.72214G               37.4387                 2.1678      1000k       3.60265M/s [BEST: throughput=  0.17 GB/s doc_throughput=     3 docs/s instructions=  1722127511 cycles=   791690197 branch_miss=  582529 cache_miss= 5059130 cache_ref=   5618343 items=   1000000 avg_time= 277573187 ns]
large_random<nlohmann_json>/manual_time               1445881591 ns   1452185158 ns            1         4.83564M           31.8137M        30.3832M       30.8925M    4.59639G              99.9242           0.69162       3.17895G          12.3636G                     268.78                     2.68984            691.62k    4.83564M   45.9988M       30.3399M/s   30.3832M   30.8925M   4.59639G         99.9242    0.69162/s 3.17895G/s     12.3636G                268.78                2.68984      1000k        691.62k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 12363552782 cycles=  4596390455 branch_miss= 4835642 cache_miss=30383186 cache_ref=  30892521 items=   1000000 avg_time=1445881591 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                       107651370 ns    126915360 ns            6         1018.21k           1.27674G        10.1902M       10.3177M     342.94M              2.49765           9.29856       3.18885G          983.199M                    7.16069                     2.86697           4.87512M    1018.33k   137.305M       1.18786G/s   10.2401M   10.3173M   343.264M         2.50001    9.28925/s 3.18866G/s     983.199M               7.16069                2.86427   524.288k       4.87024M/s [BEST: throughput=  1.28 GB/s doc_throughput=     9 docs/s instructions=   983198682 cycles=   342939998 branch_miss= 1018206 cache_miss=10190168 cache_ref=  10317687 items=    524288 avg_time= 107651370 ns]
kostya<simdjson_ondemand>/manual_time                   72154566 ns     91386651 ns           10          471.35k           1.90489G        6.41995M       6.47149M    229.833M              1.67389           13.8734       3.18857G          655.755M                     4.7759                     2.85318           7.27366M    470.951k   137.305M       1.77224G/s   6.43348M   6.47143M   230.044M         1.67542    13.8591/s 3.18821G/s     655.755M                4.7759                2.85057   524.288k       7.26618M/s [BEST: throughput=  1.90 GB/s doc_throughput=    13 docs/s instructions=   655755419 cycles=   229833283 branch_miss=  471350 cache_miss= 6419949 cache_ref=   6471490 items=    524288 avg_time=  72154565 ns]
kostya<yyjson>/manual_time                             232158639 ns    251478012 ns            3         418.418k           591.634M        8.48694M       8.65444M    505.679M              3.68289            4.3089       2.17892G          978.903M                     7.1294                     1.93582           2.25911M    418.357k   137.305M       564.029M/s   8.48951M   8.63908M   505.635M         3.68257     4.3074/s 2.17797G/s     978.903M                7.1294                1.93599   524.288k       2.25832M/s [BEST: throughput=  0.59 GB/s doc_throughput=     4 docs/s instructions=   978902904 cycles=   505678589 branch_miss=  418418 cache_miss= 8486938 cache_ref=   8654444 items=    524288 avg_time= 232158639 ns]
kostya<yyjson_insitu>/manual_time                      153202832 ns    172493939 ns            5         412.827k           896.463M        6.35073M       6.48986M    374.951M              2.73079           6.52899       2.44805G          960.633M                    6.99634                     2.56202           3.42307M    412.861k   137.305M       854.712M/s   6.34973M   6.49395M    375.05M         2.73151    6.52729/s 2.44806G/s     960.633M               6.99634                2.56135   524.288k       3.42218M/s [BEST: throughput=  0.90 GB/s doc_throughput=     6 docs/s instructions=   960632923 cycles=   374950670 branch_miss=  412827 cache_miss= 6350735 cache_ref=   6489859 items=    524288 avg_time= 153202831 ns]
kostya<sajson>/manual_time                             173776161 ns    193105647 ns            4         357.811k           791.155M        8.44762M       8.54037M    553.486M              4.03107           5.76202        3.1892G          1.52817G                    11.1298                     2.76099           3.02096M    358.319k   137.305M       753.523M/s   8.47956M   8.54023M   554.176M         4.03609    5.75453/s 3.18902G/s     1.52817G               11.1298                2.75756   524.288k       3.01703M/s [BEST: throughput=  0.79 GB/s doc_throughput=     5 docs/s instructions=  1528172904 cycles=   553486429 branch_miss=  357811 cache_miss= 8447618 cache_ref=   8540373 items=    524288 avg_time= 173776160 ns]
kostya<rapidjson>/manual_time                          328658682 ns    347942481 ns            2         947.955k           422.085M        5.23729M       5.76294M    939.405M              6.84174           3.07407        2.8878G           2.7303G                    19.8849                     2.90641            1.6117M    948.603k   137.305M        398.42M/s   5.11299M   5.65003M   941.604M         6.85775    3.04267/s 2.86499G/s      2.7303G               19.8849                2.89963   524.288k       1.59524M/s [BEST: throughput=  0.42 GB/s doc_throughput=     3 docs/s instructions=  2730299234 cycles=   939404825 branch_miss=  947955 cache_miss= 5237290 cache_ref=   5762940 items=    524288 avg_time= 328658681 ns]
kostya<rapidjson_lossless>/manual_time                 347253923 ns    366537284 ns            2         1.20779M           398.476M        5.24533M       5.74849M    1000.71M              7.28821           2.90212       2.90418G          3.00816G                    21.9086                     3.00603           1.52155M    1.15574M   137.305M       377.085M/s   5.11901M    5.6414M   1000.83M         7.28907    2.87974/s 2.88211G/s     3.00816G               21.9086                3.00568   524.288k       1.50981M/s [BEST: throughput=  0.40 GB/s doc_throughput=     2 docs/s instructions=  3008163015 cycles=  1000708054 branch_miss= 1207794 cache_miss= 5245328 cache_ref=   5748491 items=    524288 avg_time= 347253923 ns]
kostya<rapidjson_insitu>/manual_time                   313022474 ns    332363073 ns            2         442.148k           443.216M        7.38428M        7.8967M    890.265M              6.48385           3.22797       2.87375G          2.21202G                    16.1102                     2.48467           1.69238M    442.122k   137.305M       418.322M/s   7.26268M   7.79434M   892.002M          6.4965    3.19466/s 2.84964G/s     2.21202G               16.1102                2.47983   524.288k       1.67492M/s [BEST: throughput=  0.44 GB/s doc_throughput=     3 docs/s instructions=  2212015245 cycles=   890264977 branch_miss=  442148 cache_miss= 7384279 cache_ref=   7896704 items=    524288 avg_time= 313022473 ns]
kostya<nlohmann_json>/manual_time                     2166664443 ns   2185924233 ns            1         15.0983M           63.3716M        45.3532M       45.9726M    6.91048G              50.3294          0.461539       3.18946G          17.2658G                    125.748                     2.49849           241.979k    15.0983M   137.305M       60.4359M/s   45.3532M   45.9726M   6.91048G         50.3294   0.461539/s 3.18946G/s     17.2658G               125.748                2.49849   524.288k       241.979k/s [BEST: throughput=  0.06 GB/s doc_throughput=     0 docs/s instructions= 17265773072 cycles=  6910480716 branch_miss=15098329 cache_miss=45353219 cache_ref=  45972619 items=    524288 avg_time=2166664443 ns]
distinct_user_id<simdjson_dom>/manual_time                322849 ns       400768 ns         2167           3.737k            1.9746G               0        33.953k    1021.52k              1.61758          3.12677k       3.19407G          2.92867M                    4.63753                     2.86696           359.578k    3.82225k   631.515k       1.82173G/s    1.17536   34.0241k   1030.09k         1.63115   3.09742k/s 3.19063G/s     2.92867M               4.63753                2.84311        115       356.203k/s [BEST: throughput=  1.97 GB/s doc_throughput=  3126 docs/s instructions=     2928672 cycles=     1021525 branch_miss=    3737 cache_miss=       0 cache_ref=     33953 items=       115 avg_time=    322849 ns]
distinct_user_id<simdjson_ondemand>/manual_time           183317 ns       246524 ns         3816           1.678k           3.47251G               0         8.543k    581.047k             0.920084          5.49871k       3.19501G          1.87658M                    2.97155                     3.22965           632.351k     1.7762k   631.515k       3.20835G/s  0.0448113    8.2979k   585.005k        0.926352   5.45504k/s 3.19123G/s     1.87658M               2.97155                 3.2078        115       627.329k/s [BEST: throughput=  3.47 GB/s doc_throughput=  5498 docs/s instructions=     1876578 cycles=      581047 branch_miss=    1678 cache_miss=       0 cache_ref=      8543 items=       115 avg_time=    183316 ns]
distinct_user_id<yyjson>/manual_time                      691713 ns       780205 ns         1000           6.749k           1.56303G          7.162k        27.446k    1.29045M              2.04341          2.47505k       3.19391G          2.86134M                    4.53091                     2.21733            284.63k    7.61067k   631.515k       870.679M/s   2.24604k   24.6169k   1.49315M         2.36439   1.44569k/s 2.15862G/s     2.86154M               4.53123                1.91645        115       166.254k/s [BEST: throughput=  1.56 GB/s doc_throughput=  2475 docs/s instructions=     2861340 cycles=     1290446 branch_miss=    6749 cache_miss=    7162 cache_ref=     27446 items=       115 avg_time=    691712 ns]
distinct_user_id<yyjson_insitu>/manual_time               513349 ns       584733 ns         1375           7.221k           1.79912G          1.169k        13.344k    1.11568M              1.76667           2.8489k       3.17845G          2.86083M                     4.5301                      2.5642           327.623k    7.56347k   631.515k        1.1457G/s    69.5687   8.82853k   1.23568M         1.95669   1.94799k/s  2.4071G/s     2.86109M               4.53052                 2.3154        115       224.019k/s [BEST: throughput=  1.80 GB/s doc_throughput=  2848 docs/s instructions=     2860827 cycles=     1115679 branch_miss=    7221 cache_miss=    1169 cache_ref=     13344 items=       115 avg_time=    513349 ns]
distinct_user_id<sajson>/manual_time                      687995 ns       760276 ns         1014          10.835k           924.389M               2        12.872k    2.18153M              3.45444          1.46376k       3.19324G          5.81019M                     9.2004                     2.66336           168.333k    11.2698k   631.515k       875.383M/s    2.86982    13.006k   2.19454M         3.47504    1.4535k/s 3.18976G/s     5.81019M                9.2004                2.64757        115       167.152k/s [BEST: throughput=  0.92 GB/s doc_throughput=  1463 docs/s instructions=     5810189 cycles=     2181529 branch_miss=   10835 cache_miss=       2 cache_ref=     12872 items=       115 avg_time=    687995 ns]
distinct_user_id<rapidjson>/manual_time                  2839796 ns      2912663 ns          248          32.664k           244.794M             320         23.06k    8.23647M              13.0424           387.629        3.1927G          21.8257M                    34.5608                     2.64988           44.5774k    33.4544k   631.515k       212.079M/s    843.851   12.3857k   8.40155M         13.3038    352.138/s 2.95851G/s     21.8266M               34.5622                2.59792        115       40.4959k/s [BEST: throughput=  0.24 GB/s doc_throughput=   387 docs/s instructions=    21825668 cycles=     8236474 branch_miss=   32664 cache_miss=     320 cache_ref=     23060 items=       115 avg_time=   2839795 ns]
distinct_user_id<rapidjson_insitu>/manual_time           1765526 ns      1836870 ns          378          25.231k           385.779M          3.934k        14.859k    5.22657M              8.27624           610.879        3.1928G          13.2577M                    20.9936                      2.5366           70.2511k     29.257k   631.515k       341.122M/s   2.59826k   11.9378k   5.36832M          8.5007    566.404/s 3.04064G/s     13.2582M               20.9943                2.46971        115       65.1364k/s [BEST: throughput=  0.39 GB/s doc_throughput=   610 docs/s instructions=    13257742 cycles=     5226572 branch_miss=   25231 cache_miss=    3934 cache_ref=     14859 items=       115 avg_time=   1765525 ns]
distinct_user_id<nlohmann_json>/manual_time              9407957 ns      9499559 ns           70         127.818k           74.6588M             655        98.454k    26.9648M              42.6985           118.222       3.18782G          73.5725M                    116.502                     2.72847           13.5955k      191.4k   631.515k        64.016M/s    50.2571   105.535k    30.006M         47.5143    106.293/s 3.18943G/s      72.295M               114.479                2.40935        115       12.2237k/s [BEST: throughput=  0.07 GB/s doc_throughput=   118 docs/s instructions=    73572495 cycles=    26964754 branch_miss=  127818 cache_miss=     655 cache_ref=     98454 items=       115 avg_time=   9407957 ns]
find_tweet<simdjson_dom>/manual_time                      307540 ns       381983 ns         2278           3.431k           2.07192G               0        29.456k    973.488k              1.54151          3.28087k       3.19389G           2.8435M                    4.50266                     2.92094           3.28087k    3.60973k   631.515k       1.91241G/s  0.0680421    29.548k   981.286k         1.55386   3.25161k/s 3.19075G/s      2.8435M               4.50266                2.89773          1       3.25161k/s [BEST: throughput=  2.07 GB/s doc_throughput=  3280 docs/s instructions=     2843498 cycles=      973488 branch_miss=    3431 cache_miss=       0 cache_ref=     29456 items=         1 avg_time=    307540 ns]
find_tweet<simdjson_ondemand>/manual_time                 135984 ns       201247 ns         5145              875           4.67914G               0         7.523k    431.282k             0.682932          7.40938k       3.19553G           1.3681M                    2.16638                     3.17218           7.40938k     912.798   631.515k       4.32511G/s    0.11137   7.53707k   434.077k        0.687358   7.35382k/s 3.19213G/s      1.3681M               2.16638                3.15175          1       7.35382k/s [BEST: throughput=  4.68 GB/s doc_throughput=  7409 docs/s instructions=     1368102 cycles=      431282 branch_miss=     875 cache_miss=       0 cache_ref=      7523 items=         1 avg_time=    135983 ns]
find_tweet<yyjson>/manual_time                            774913 ns       859531 ns          976           9.711k           1.43586G             213        27.542k    1.36454M              2.16073          2.27367k        3.1025G           2.8006M                    4.43473                     2.05242           2.27367k    7.52907k   631.515k       777.196M/s    334.044   19.6144k   1.50244M          2.3791   1.29047k/s 1.93885G/s     2.80107M               4.43548                1.86435          1       1.29047k/s [BEST: throughput=  1.44 GB/s doc_throughput=  2273 docs/s instructions=     2800599 cycles=     1364536 branch_miss=    9711 cache_miss=     213 cache_ref=     27542 items=         1 avg_time=    774913 ns]
find_tweet<yyjson_insitu>/manual_time                     497336 ns       561609 ns         1408           6.783k              1.86G          1.114k        12.705k       1079k              1.70859           2.9453k       3.17798G          2.80028M                    4.43422                     2.59525            2.9453k    7.28462k   631.515k       1.18259G/s    7.52628   4.91758k   1.18506M         1.87653   2.01071k/s 2.38281G/s     2.80054M               4.43464                2.36321          1       2.01071k/s [BEST: throughput=  1.86 GB/s doc_throughput=  2945 docs/s instructions=     2800277 cycles=     1078999 branch_miss=    6783 cache_miss=    1114 cache_ref=     12705 items=         1 avg_time=    497336 ns]
find_tweet<sajson>/manual_time                            674135 ns       744221 ns         1035          10.427k           944.846M               2        12.679k    2.13422M              3.37953          1.49616k       3.19313G          5.71507M                    9.04978                     2.67782           1.49616k    10.9218k   631.515k       893.381M/s    5.01256   12.5842k   2.15075M         3.40569   1.48338k/s 3.19038G/s     5.71507M               9.04978                2.65725          1       1.48338k/s [BEST: throughput=  0.94 GB/s doc_throughput=  1496 docs/s instructions=     5715069 cycles=     2134222 branch_miss=   10427 cache_miss=       2 cache_ref=     12679 items=         1 avg_time=    674135 ns]
find_tweet<rapidjson>/manual_time                        2818290 ns      2886131 ns          249          32.108k           246.525M         11.932k        21.296k    8.17859M              12.9508           390.371       3.19269G          21.7417M                    34.4279                     2.65837            390.371    33.1778k   631.515k       213.697M/s    668.715   9.03236k   8.33312M         13.1954    354.825/s  2.9568G/s     21.7426M               34.4292                2.60918          1        354.825/s [BEST: throughput=  0.25 GB/s doc_throughput=   390 docs/s instructions=    21741725 cycles=     8178594 branch_miss=   32108 cache_miss=   11932 cache_ref=     21296 items=         1 avg_time=   2818289 ns]
find_tweet<rapidjson_insitu>/manual_time                 1792658 ns      1860112 ns          425          25.032k            387.89M          6.873k        13.127k    5.19805M              8.23107           614.221       3.19275G          13.1791M                     20.869                      2.5354            614.221    34.5123k   631.515k       335.959M/s   2.19966k   9.03621k   5.44062M         8.61519    557.831/s 3.03495G/s     13.1796M               20.8697                2.42244          1        557.831/s [BEST: throughput=  0.39 GB/s doc_throughput=   614 docs/s instructions=    13179102 cycles=     5198046 branch_miss=   25032 cache_miss=    6873 cache_ref=     13127 items=         1 avg_time=   1792657 ns]
find_tweet<nlohmann_json>/manual_time                    7845197 ns      7933643 ns           83          101.79k           87.1393M              27        75.592k    23.1255M              36.6192           137.984       3.19097G          63.6279M                    100.754                     2.75141            137.984    131.957k   631.515k       76.7679M/s    52.7108    81.947k    25.021M         39.6206    127.467/s 3.18934G/s     62.2804M               98.6206                2.48912          1        127.467/s [BEST: throughput=  0.09 GB/s doc_throughput=   137 docs/s instructions=    63627913 cycles=    23125549 branch_miss=  101790 cache_miss=      27 cache_ref=     75592 items=         1 avg_time=   7845197 ns]
top_tweet<simdjson_dom>/manual_time                       316482 ns       396377 ns         2212           3.631k           2.01238G               1         32.21k    1002.27k              1.58709          3.18659k       3.19383G          2.88039M                    4.56107                     2.87386           3.18659k    3.77864k   631.515k       1.85838G/s    1.31103   32.2367k   1009.88k         1.59914   3.15974k/s 3.19096G/s     2.88039M               4.56107                2.85221          1       3.15974k/s [BEST: throughput=  2.01 GB/s doc_throughput=  3186 docs/s instructions=     2880386 cycles=     1002272 branch_miss=    3631 cache_miss=       1 cache_ref=     32210 items=         1 avg_time=    316481 ns]
top_tweet<simdjson_ondemand>/manual_time                  196181 ns       262854 ns         3569           1.542k           3.26349G               7         8.733k    618.217k             0.978943          5.16772k       3.19477G          1.89218M                    2.99625                      3.0607           5.16772k    1.74798k   631.515k       2.99796G/s    3.63799   8.85981k   626.089k        0.991409   5.09733k/s 3.19138G/s     1.89218M               2.99625                3.02222          1       5.09733k/s [BEST: throughput=  3.26 GB/s doc_throughput=  5167 docs/s instructions=     1892177 cycles=      618217 branch_miss=    1542 cache_miss=       7 cache_ref=      8733 items=         1 avg_time=    196181 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time     193740 ns       261281 ns         3604           1.961k           3.28947G               2         9.799k    613.283k              0.97113          5.20885k        3.1945G          1.90297M                    3.01334                     3.10292           5.20885k    2.06461k   631.515k       3.03575G/s    1.20117   9.84108k   618.319k        0.979105   5.16157k/s  3.1915G/s     1.90297M               3.01334                3.07765          1       5.16157k/s [BEST: throughput=  3.29 GB/s doc_throughput=  5208 docs/s instructions=     1902970 cycles=      613283 branch_miss=    1961 cache_miss=       2 cache_ref=      9799 items=         1 avg_time=    193739 ns]
top_tweet<yyjson>/manual_time                             786585 ns       876065 ns         1056          10.297k            1.4518G             257        27.434k    1.38959M              2.20041          2.29892k       3.19456G          2.82787M                    4.47791                     2.03503           2.29892k    7.69313k   631.515k       765.664M/s    396.602   22.4604k   1.53866M         2.43646   1.27132k/s 1.95613G/s     2.82855M                 4.479                1.83832          1       1.27132k/s [BEST: throughput=  1.45 GB/s doc_throughput=  2298 docs/s instructions=     2827869 cycles=     1389594 branch_miss=   10297 cache_miss=     257 cache_ref=     27434 items=         1 avg_time=    786584 ns]
top_tweet<yyjson_insitu>/manual_time                      506981 ns       578020 ns         1395           6.767k           1.83246G          1.458k          13.4k    1092.22k              1.72953          2.90169k       3.16929G          2.82755M                     4.4774                      2.5888           2.90169k    7.40681k   631.515k       1.16009G/s    50.0215   7.64206k   1.21584M         1.92527   1.97246k/s 2.39819G/s     2.82781M               4.47782                2.32582          1       1.97246k/s [BEST: throughput=  1.83 GB/s doc_throughput=  2901 docs/s instructions=     2827548 cycles=     1092224 branch_miss=    6767 cache_miss=    1458 cache_ref=     13400 items=         1 avg_time=    506981 ns]
top_tweet<sajson>/manual_time                             678870 ns       752988 ns         1029          10.614k           938.273M               0        12.933k    2.14926M              3.40334          1.48575k       3.19326G          5.74506M                    9.09727                     2.67304           1.48575k    11.0879k   631.515k        887.15M/s    2.26142   13.0066k   2.16545M         3.42898   1.47304k/s 3.18979G/s     5.74506M               9.09727                2.65305          1       1.47304k/s [BEST: throughput=  0.94 GB/s doc_throughput=  1485 docs/s instructions=     5745061 cycles=     2149258 branch_miss=   10614 cache_miss=       0 cache_ref=     12933 items=         1 avg_time=    678869 ns]
top_tweet<rapidjson>/manual_time                         2829459 ns      2902604 ns          248          32.463k           245.661M           6.81k        22.045k    8.20747M              12.9965           389.002       3.19273G          21.8002M                    34.5205                     2.65614            389.002    33.2895k   631.515k       212.853M/s    757.081   10.5535k    8.3694M         13.2529    353.424/s 2.95795G/s     21.8008M               34.5215                2.60483          1        353.424/s [BEST: throughput=  0.25 GB/s doc_throughput=   389 docs/s instructions=    21800207 cycles=     8207471 branch_miss=   32463 cache_miss=    6810 cache_ref=     22045 items=         1 avg_time=   2829458 ns]
top_tweet<rapidjson_insitu>/manual_time                  1759309 ns      1831924 ns          417          25.349k           386.406M          3.966k        13.973k    5.21824M              8.26305           611.871       3.19289G          13.2329M                    20.9542                      2.5359            611.871    28.6384k   631.515k       342.327M/s   2.29944k   10.5364k   5.33516M         8.44819    568.405/s 3.03253G/s     13.2334M                20.955                2.48041          1        568.405/s [BEST: throughput=  0.39 GB/s doc_throughput=   611 docs/s instructions=    13232911 cycles=     5218238 branch_miss=   25349 cache_miss=    3966 cache_ref=     13973 items=         1 avg_time=   1759309 ns]
top_tweet<nlohmann_json>/manual_time                    11109483 ns     11200606 ns           65         190.192k           59.3698M             339       162.117k    33.9355M              53.7367           94.0116       3.19034G          85.7199M                    135.737                     2.52596            94.0116    237.132k   631.515k       54.2113M/s    96.8308   164.213k   35.4322M         56.1067    90.0132/s 3.18937G/s     86.0303M               136.228                2.42802          1        90.0132/s [BEST: throughput=  0.06 GB/s doc_throughput=    94 docs/s instructions=    85719904 cycles=    33935547 branch_miss=  190192 cache_miss=     339 cache_ref=    162117 items=         1 avg_time=  11109482 ns]
