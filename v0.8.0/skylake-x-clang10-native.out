run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-x-clang10-native.json -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-march=native
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-march=native -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
-- The CXX compiler identification is Clang 10.0.1
-- The C compiler identification is Clang 10.0.1
-- Check for working CXX compiler: /usr/bin/clang++-10
-- Check for working CXX compiler: /usr/bin/clang++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/clang-10
-- Check for working C compiler: /usr/bin/clang-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Success
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Success
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES -- failed to compile
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
make -f CMakeFiles/Makefile2 bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 10
make -f CMakeFiles/Makefile2 benchmark/CMakeFiles/bench_ondemand.dir/all
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/DependInfo.cmake --color=
Scanning dependencies of target benchmark
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_api_internal.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_name.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_name.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_register.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_register.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/benchmark_runner.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/benchmark_runner.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/colorprint.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/colorprint.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/commandlineflags.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/commandlineflags.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/complexity.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/complexity.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/console_reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/console_reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/counter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/counter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/csv_reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/csv_reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/json_reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/json_reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/reporter.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/reporter.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/sleep.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/sleep.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/statistics.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/statistics.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/string_util.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/string_util.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/sysinfo.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/sysinfo.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/clang++-10  -DHAVE_POSIX_REGEX -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native  -std=c++11  -Wall  -Wextra  -Wshadow  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wstrict-aliasing  -Wthread-safety -O3 -DNDEBUG  -Werror  -Wno-deprecated   -std=c++17 -o CMakeFiles/benchmark.dir/timers.cc.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/timers.cc
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/cmake -P CMakeFiles/benchmark.dir/cmake_clean_target.cmake
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/benchmark.dir/link.txt --verbose=1
/usr/bin/ar qc libbenchmark.a  CMakeFiles/benchmark.dir/benchmark.cc.o CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o CMakeFiles/benchmark.dir/benchmark_name.cc.o CMakeFiles/benchmark.dir/benchmark_register.cc.o CMakeFiles/benchmark.dir/benchmark_runner.cc.o CMakeFiles/benchmark.dir/colorprint.cc.o CMakeFiles/benchmark.dir/commandlineflags.cc.o CMakeFiles/benchmark.dir/complexity.cc.o CMakeFiles/benchmark.dir/console_reporter.cc.o CMakeFiles/benchmark.dir/counter.cc.o CMakeFiles/benchmark.dir/csv_reporter.cc.o CMakeFiles/benchmark.dir/json_reporter.cc.o CMakeFiles/benchmark.dir/reporter.cc.o CMakeFiles/benchmark.dir/sleep.cc.o CMakeFiles/benchmark.dir/statistics.cc.o CMakeFiles/benchmark.dir/string_util.cc.o CMakeFiles/benchmark.dir/sysinfo.cc.o CMakeFiles/benchmark.dir/timers.cc.o
/usr/bin/ranlib libbenchmark.a
[ 80%] Built target benchmark
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/CMakeFiles/generated-data.dir/DependInfo.cmake --color=
Scanning dependencies of target generated-data
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated && /usr/bin/ruby genfeaturejson.rb /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
[ 80%] Built target generated-data
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/src/CMakeFiles/simdjson.dir/DependInfo.cmake --color=
Scanning dependencies of target simdjson
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/clang++-10  -DSIMDJSON_THREADS_ENABLED=1 -Dsimdjson_EXPORTS -I/home/jkeiser/simdjson_benchmark_results/simdjson/src -I/home/jkeiser/simdjson_benchmark_results/simdjson/include  -march=native -O3 -DNDEBUG -fPIC   -fPIC -Werror -Wall -Wextra -Weffc++ -Wsign-compare -Wshadow -Wwrite-strings -Wpointer-arith -Winit-self -Wconversion -Wno-sign-conversion -pthread -std=c++17 -o CMakeFiles/simdjson.dir/simdjson.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/src/simdjson.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/simdjson.dir/link.txt --verbose=1
/usr/bin/clang++-10 -fPIC -march=native -O3 -DNDEBUG  -shared -Wl,-soname,libsimdjson.so.7 -o ../libsimdjson.so.7.0.0 CMakeFiles/simdjson.dir/simdjson.cpp.o  -pthread 
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_symlink_library ../libsimdjson.so.7.0.0 ../libsimdjson.so.7 ../libsimdjson.so
[ 80%] Built target simdjson
make -f dependencies/CMakeFiles/yyjson.dir/build.make dependencies/CMakeFiles/yyjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies/CMakeFiles/yyjson.dir/DependInfo.cmake --color=
Scanning dependencies of target yyjson
make -f dependencies/CMakeFiles/yyjson.dir/build.make dependencies/CMakeFiles/yyjson.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies && /usr/bin/clang-10  -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/yyjson/src  -O3 -DNDEBUG   -o CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o   -c /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/yyjson/src/yyjson.c
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies && /usr/bin/cmake -P CMakeFiles/yyjson.dir/cmake_clean_target.cmake
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/dependencies && /usr/bin/cmake -E cmake_link_script CMakeFiles/yyjson.dir/link.txt --verbose=1
/usr/bin/ar qc libyyjson.a  CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
/usr/bin/ranlib libyyjson.a
[ 90%] Built target yyjson
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark/CMakeFiles/bench_ondemand.dir/DependInfo.cmake --color=
Scanning dependencies of target bench_ondemand
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/clang++-10  -DRAPIDJSON_HAS_STDSTRING -DSAJSON_UNSORTED_OBJECT_KEYS -DSIMDJSON_BENCHMARK_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/\" -DSIMDJSON_COMPETITION_NLOHMANN_JSON -DSIMDJSON_COMPETITION_RAPIDJSON -DSIMDJSON_COMPETITION_SAJSON -DSIMDJSON_COMPETITION_YYJSON -DSIMDJSON_MINEFIELD_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/minefield/\" -DSIMDJSON_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/\" -DSIMDJSON_THREADS_ENABLED=1 -DSIMDJSON_USING_LIBRARY=1 -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/. -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/linux -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/yyjson/src -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/rapidjson/include -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/sajson/include -isystem /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/json  -march=native -O3 -DNDEBUG   -pthread -std=c++17 -o CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/bench_ondemand.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/cmake -E cmake_link_script CMakeFiles/bench_ondemand.dir/link.txt --verbose=1
/usr/bin/clang++-10  -march=native -O3 -DNDEBUG   CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o  -o bench_ondemand  -Wl,-rpath,/home/jkeiser/simdjson_benchmark_results/simdjson/build ../libsimdjson.so.7.0.0 ../_deps/google_benchmarks/src/libbenchmark.a ../dependencies/libyyjson.a -pthread /usr/lib/x86_64-linux-gnu/librt.so 
[100%] Built target bench_ondemand
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 0
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-x-clang10-native.json --benchmark_out_format=json
2021-01-24 20:38:50
Running benchmark/bench_ondemand
Run on (4 X 3200 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 1024 KiB (x4)
  L3 Unified 8448 KiB (x1)
Load Average: 0.74, 0.25, 0.08
***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.
simdjson::dom implementation:      haswell
simdjson::ondemand implementation: haswell

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                  324199 ns       394996 ns         2163           3.537k           1.96216G               0        34.798k    1028.09k              1.62797          3.10707k       3.19434G           2.9944M                    4.74161                     2.91259           310.707k    3.70447k   631.515k       1.81414G/s   0.496995   34.7317k   1034.39k         1.63795   3.08452k/s  3.1906G/s      2.9944M               4.74161                2.89485        100       308.452k/s [BEST: throughput=  1.96 GB/s doc_throughput=  3107 docs/s instructions=     2994397 cycles=     1028089 branch_miss=    3537 cache_miss=       0 cache_ref=     34798 items=       100 avg_time=    324199 ns]
partial_tweets<simdjson_ondemand>/manual_time             207760 ns       265416 ns         3364           1.773k           3.06216G               0        11.078k    658.882k              1.04334          4.84891k       3.19486G          1.92824M                    3.05335                     2.92653           484.891k    1.88243k   631.515k       2.83088G/s   0.172117   11.1484k   663.072k         1.04997   4.81325k/s 3.19153G/s     1.92824M               3.05335                2.90804        100       481.325k/s [BEST: throughput=  3.06 GB/s doc_throughput=  4848 docs/s instructions=     1928239 cycles=      658882 branch_miss=    1773 cache_miss=       0 cache_ref=     11078 items=       100 avg_time=    207759 ns]
partial_tweets<yyjson>/manual_time                        794231 ns       873943 ns          883          10.422k           1.42307G             303        28.002k    1.41742M              2.24448          2.25341k       3.19404G          2.90304M                    4.59695                     2.04812           225.341k    7.75319k   631.515k       758.293M/s    579.753   23.7321k   1.57021M         2.48641   1.25908k/s 1.97702G/s     2.90373M               4.59805                1.84927        100       125.908k/s [BEST: throughput=  1.42 GB/s doc_throughput=  2253 docs/s instructions=     2903042 cycles=     1417421 branch_miss=   10422 cache_miss=     303 cache_ref=     28002 items=       100 avg_time=    794230 ns]
partial_tweets<yyjson_insitu>/manual_time                 515856 ns       578245 ns         1370           7.446k           1.77681G             156        14.461k    1.13514M              1.79748          2.81357k       3.19378G          2.90294M                    4.59678                     2.55735           281.357k    7.49869k   631.515k       1.14013G/s    62.8642   8.94797k   1.24679M         1.97428   1.93853k/s 2.41693G/s      2.9032M                4.5972                2.32854        100       193.853k/s [BEST: throughput=  1.78 GB/s doc_throughput=  2813 docs/s instructions=     2902936 cycles=     1135135 branch_miss=    7446 cache_miss=     156 cache_ref=     14461 items=       100 avg_time=    515855 ns]
partial_tweets<sajson>/manual_time                        691409 ns       755302 ns         1011          10.744k           921.403M               0        13.192k    2.18845M               3.4654          1.45904k       3.19303G          5.87163M                    9.29768                       2.683           145.904k    11.2288k   631.515k       871.061M/s     1.8457    13.255k   2.20571M         3.49273   1.44632k/s 3.19017G/s     5.87163M               9.29768                2.66201        100       144.632k/s [BEST: throughput=  0.92 GB/s doc_throughput=  1459 docs/s instructions=     5871627 cycles=     2188453 branch_miss=   10744 cache_miss=       0 cache_ref=     13192 items=       100 avg_time=    691409 ns]
partial_tweets<rapidjson>/manual_time                    2850272 ns      2915883 ns          246          31.548k           244.994M          7.516k        22.545k    8.22975M              13.0318           387.946        3.1927G          21.8971M                     34.674                     2.66073           38.7946k    32.8634k   631.515k       211.299M/s    426.057   12.3798k   8.41878M         13.3311    350.844/s 2.95368G/s     21.8978M                34.675                2.60106        100       35.0844k/s [BEST: throughput=  0.24 GB/s doc_throughput=   387 docs/s instructions=    21897138 cycles=     8229748 branch_miss=   31548 cache_miss=    7516 cache_ref=     22545 items=       100 avg_time=   2850272 ns]
partial_tweets<rapidjson_insitu>/manual_time             1792807 ns      1855158 ns          391           25.43k           383.948M          5.108k        14.205k     5.2515M              8.31571           607.979        3.1928G          13.3232M                    21.0972                     2.53702           60.7979k    25.8473k   631.515k       335.931M/s    214.056   9.60391k   5.31895M         8.42252    557.785/s 2.96683G/s     13.3238M               21.0981                2.50496        100       55.7785k/s [BEST: throughput=  0.38 GB/s doc_throughput=   607 docs/s instructions=    13323167 cycles=     5251497 branch_miss=   25430 cache_miss=    5108 cache_ref=     14205 items=       100 avg_time=   1792806 ns]
partial_tweets<nlohmann_json>/manual_time                9897640 ns      9986094 ns           71         152.645k           66.3408M               7        98.345k     30.365M              48.0828            105.05       3.18985G          78.1937M                    123.819                     2.57512            10.505k    163.438k   631.515k       60.8488M/s    109.803   136.985k   31.5655M         49.9837    101.034/s 3.18919G/s     78.6377M               124.522                2.49126        100       10.1034k/s [BEST: throughput=  0.07 GB/s doc_throughput=   105 docs/s instructions=    78193739 cycles=    30365040 branch_miss=  152645 cache_miss=       7 cache_ref=     98345 items=       100 avg_time=   9897640 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 101473285 ns    107644553 ns            7         955.825k           454.375M        6.76229M       6.89684M    322.799M              7.01756           9.87798       3.18861G          1025.66M                    22.2976                      3.1774           9.87798M    956.465k   45.9988M       432.309M/s    6.8026M   6.89678M   323.536M         7.03358    9.85481/s 3.18839G/s     1025.66M               22.2976                3.17017      1000k       9.85481M/s [BEST: throughput=  0.45 GB/s doc_throughput=     9 docs/s instructions=  1025663209 cycles=   322799245 branch_miss=  955825 cache_miss= 6762290 cache_ref=   6896839 items=   1000000 avg_time= 101473284 ns]
large_random<simdjson_ondemand>/manual_time             78097400 ns     84189036 ns            9         1014.42k           589.439M        3.49032M       3.57332M    248.844M               5.4098           12.8142       3.18875G          669.118M                    14.5464                      2.6889           12.8142M    1015.53k   45.9988M       561.707M/s    3.5135M   3.57329M   249.012M         5.41345    12.8045/s 3.18848G/s     669.118M               14.5464                2.68709      1000k       12.8045M/s [BEST: throughput=  0.59 GB/s doc_throughput=    12 docs/s instructions=   669118091 cycles=   248844167 branch_miss= 1014421 cache_miss= 3490317 cache_ref=   3573323 items=   1000000 avg_time=  78097399 ns]
large_random<simdjson_ondemand_unordered>/manual_time   73094787 ns     79171914 ns           10         947.391k           629.595M        3.49845M       3.57296M    232.979M              5.06489           13.6872       3.18883G          666.118M                    14.4812                     2.85914           13.6872M    947.122k   45.9988M        600.15M/s   3.51358M   3.57308M   233.068M         5.06683    13.6809/s 3.18857G/s     666.118M               14.4812                2.85804      1000k       13.6809M/s [BEST: throughput=  0.63 GB/s doc_throughput=    13 docs/s instructions=   666118333 cycles=   232978878 branch_miss=  947391 cache_miss= 3498448 cache_ref=   3572964 items=   1000000 avg_time=  73094787 ns]
large_random<yyjson>/manual_time                       152156751 ns    158326266 ns            5          669.95k            302.44M        4.19971M       4.36544M    345.153M              7.50353           6.57495       2.26936G           866.68M                    18.8414                       2.511           6.57495M    667.988k   45.9988M       288.307M/s   4.20195M   4.36769M    345.37M         7.50825    6.57217/s 2.26983G/s      866.68M               18.8414                2.50942      1000k       6.57217M/s [BEST: throughput=  0.30 GB/s doc_throughput=     6 docs/s instructions=   866680093 cycles=   345152987 branch_miss=  669950 cache_miss= 4199707 cache_ref=   4365439 items=   1000000 avg_time= 152156751 ns]
large_random<yyjson_insitu>/manual_time                125671788 ns    131846468 ns            6         665.199k           366.291M        3.49041M       4.50962M    301.791M              6.56084           7.96306       2.40318G          860.559M                    18.7083                     2.85151           7.96306M    667.552k   45.9988M       349.067M/s   3.49474M   4.50365M   301.999M         6.56538    7.95724/s 2.40308G/s     860.559M               18.7083                2.84954      1000k       7.95724M/s [BEST: throughput=  0.37 GB/s doc_throughput=     7 docs/s instructions=   860559341 cycles=   301790644 branch_miss=  665199 cache_miss= 3490407 cache_ref=   4509620 items=   1000000 avg_time= 125671787 ns]
large_random<sajson>/manual_time                       110404806 ns    116572622 ns            6         577.752k           416.969M        5.46116M       5.57714M    351.813M              7.64832           9.06479       3.18911G          1.10099G                    23.9353                     3.12949           9.06479M    577.692k   45.9988M       397.336M/s   5.46671M   5.57729M   352.065M          7.6538    9.05758/s 3.18886G/s     1.10099G               23.9353                3.12724      1000k       9.05758M/s [BEST: throughput=  0.42 GB/s doc_throughput=     9 docs/s instructions=  1100994443 cycles=   351813173 branch_miss=  577752 cache_miss= 5461163 cache_ref=   5577143 items=   1000000 avg_time= 110404805 ns]
large_random<rapidjson>/manual_time                    251689492 ns    257846550 ns            3         598.051k           188.583M        4.37462M       4.92687M     709.73M              15.4293           4.09974       2.90971G          1.99713G                     43.417                     2.81392           4.09974M    595.028k   45.9988M       174.294M/s   4.10583M   4.74335M   712.723M         15.4944    3.97315/s 2.83176G/s     1.99714G               43.4172                2.80212      1000k       3.97315M/s [BEST: throughput=  0.19 GB/s doc_throughput=     4 docs/s instructions=  1997127495 cycles=   709730409 branch_miss=  598051 cache_miss= 4374625 cache_ref=   4926867 items=   1000000 avg_time= 251689492 ns]
large_random<rapidjson_lossless>/manual_time           287130816 ns    293298011 ns            2         703.133k           164.061M        4.37109M       4.94639M    825.989M              17.9568           3.56665       2.94601G           2.4771G                    53.8513                     2.99894           3.56665M    814.747k   45.9988M        152.78M/s    4.1765M   4.80673M    831.27M         18.0716    3.48273/s 2.89509G/s      2.4771G               53.8515                 2.9799      1000k       3.48273M/s [BEST: throughput=  0.16 GB/s doc_throughput=     3 docs/s instructions=  2477095525 cycles=   825989380 branch_miss=  703133 cache_miss= 4371089 cache_ref=   4946390 items=   1000000 avg_time= 287130816 ns]
large_random<rapidjson_insitu>/manual_time             277965537 ns    284114003 ns            3         584.297k           170.291M        5.08169M       5.77757M    793.407M              17.2484           3.70207       2.93725G          1.72213G                    37.4385                     2.17055           3.70207M    583.751k   45.9988M       157.818M/s    4.8216M   5.65287M   796.624M         17.3184    3.59757/s 2.86591G/s     1.72214G               37.4387                2.16179      1000k       3.59757M/s [BEST: throughput=  0.17 GB/s doc_throughput=     3 docs/s instructions=  1722127326 cycles=   793407212 branch_miss=  584297 cache_miss= 5081692 cache_ref=   5777570 items=   1000000 avg_time= 277965537 ns]
large_random<nlohmann_json>/manual_time               1438174182 ns   1444333839 ns            1         4.11078M           31.9841M         30.379M       30.9089M    4.57205G               99.395          0.695326       3.17907G          12.3636G                     268.78                     2.70416           695.326k    4.11078M   45.9988M       30.5025M/s    30.379M   30.9089M   4.57205G          99.395   0.695326/s 3.17907G/s     12.3636G                268.78                2.70416      1000k       695.326k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 12363550919 cycles=  4572049816 branch_miss= 4110781 cache_miss=30379018 cache_ref=  30908876 items=   1000000 avg_time=1438174182 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                       107605522 ns    126864356 ns            6         1016.81k           1.27729G        10.1936M       10.3182M     342.76M              2.49634           9.30259       3.18855G          983.199M                    7.16069                     2.86848           4.87723M    1017.72k   137.305M       1.18837G/s   10.2423M   10.3179M   343.091M         2.49875     9.2932/s 3.18842G/s     983.199M               7.16069                 2.8657   524.288k       4.87232M/s [BEST: throughput=  1.28 GB/s doc_throughput=     9 docs/s instructions=   983198682 cycles=   342759990 branch_miss= 1016809 cache_miss=10193610 cache_ref=  10318200 items=    524288 avg_time= 107605522 ns]
kostya<simdjson_ondemand>/manual_time                   72402503 ns     91594279 ns           10         470.295k           1.90192G        6.42326M       6.47115M    230.192M               1.6765           13.8518       3.18856G          655.755M                     4.7759                     2.84873           7.26232M    470.206k   137.305M       1.76617G/s   6.42384M   6.47113M   230.852M         1.68131    13.8117/s 3.18845G/s     655.755M                4.7759                2.84059   524.288k        7.2413M/s [BEST: throughput=  1.90 GB/s doc_throughput=    13 docs/s instructions=   655755419 cycles=   230191824 branch_miss=  470295 cache_miss= 6423264 cache_ref=   6471145 items=    524288 avg_time=  72402502 ns]
kostya<yyjson>/manual_time                             230636021 ns    249876635 ns            3         422.264k           595.491M        8.48943M       8.67463M    503.017M               3.6635           4.33699       2.18158G          978.903M                     7.1294                     1.94606           2.27383M    422.131k   137.305M       567.753M/s   8.49087M   8.68265M   502.925M         3.66283    4.33584/s  2.1806G/s     978.903M                7.1294                1.94642   524.288k       2.27323M/s [BEST: throughput=  0.60 GB/s doc_throughput=     4 docs/s instructions=   978902917 cycles=   503017194 branch_miss=  422264 cache_miss= 8489430 cache_ref=   8674631 items=    524288 avg_time= 230636020 ns]
kostya<yyjson_insitu>/manual_time                      152791127 ns    172112848 ns            5         419.057k           899.087M        6.35318M       6.54105M    374.634M              2.72848            6.5481       2.45314G          960.633M                    6.99635                     2.56419           3.43309M     417.99k   137.305M       857.015M/s   6.35378M   6.54506M    374.75M         2.72932    6.54488/s 2.45269G/s     960.633M               6.99635                 2.5634   524.288k        3.4314M/s [BEST: throughput=  0.90 GB/s doc_throughput=     6 docs/s instructions=   960633248 cycles=   374634275 branch_miss=  419057 cache_miss= 6353182 cache_ref=   6541045 items=    524288 avg_time= 152791126 ns]
kostya<sajson>/manual_time                             173981494 ns    193288246 ns            4         358.349k            790.49M         8.4612M       8.54053M    553.903M              4.03411           5.75718       3.18892G          1.52817G                    11.1298                     2.75892           3.01842M    358.726k   137.305M       752.633M/s   8.49113M    8.5408M   554.772M         4.04044    5.74774/s 3.18869G/s     1.52817G               11.1298                 2.7546   524.288k       3.01347M/s [BEST: throughput=  0.79 GB/s doc_throughput=     5 docs/s instructions=  1528172904 cycles=   553902781 branch_miss=  358349 cache_miss= 8461200 cache_ref=   8540529 items=    524288 avg_time= 173981493 ns]
kostya<rapidjson>/manual_time                          328661327 ns    347969188 ns            2         950.543k           422.075M        5.21504M       6.17081M    940.538M              6.84999             3.074       2.89121G           2.7303G                    19.8849                     2.90291           1.61166M    950.784k   137.305M       398.417M/s    5.0918M   6.10906M    942.78M         6.86632    3.04265/s 2.86855G/s      2.7303G               19.8849                2.89601   524.288k       1.59522M/s [BEST: throughput=  0.42 GB/s doc_throughput=     3 docs/s instructions=  2730299388 cycles=   940537634 branch_miss=  950543 cache_miss= 5215042 cache_ref=   6170813 items=    524288 avg_time= 328661327 ns]
kostya<rapidjson_lossless>/manual_time                 350601630 ns    369922729 ns            2         1.33559M           396.599M        5.21995M        6.2014M    1007.25M              7.33587           2.88845        2.9094G          3.00816G                    21.9086                      2.9865           1.51438M    1.43814M   137.305M       373.484M/s   5.09463M   6.13292M   1012.65M         7.37515    2.85224/s 2.88831G/s     3.00816G               21.9086                 2.9706   524.288k        1.4954M/s [BEST: throughput=  0.40 GB/s doc_throughput=     2 docs/s instructions=  3008163173 cycles=  1007252160 branch_miss= 1335593 cache_miss= 5219955 cache_ref=   6201398 items=    524288 avg_time= 350601630 ns]
kostya<rapidjson_insitu>/manual_time                   313375581 ns    332728723 ns            2         445.664k           442.679M        7.36028M       8.16209M    892.403M              6.49942           3.22406       2.87716G          2.21202G                    16.1102                     2.47872           1.69033M    444.978k   137.305M       417.851M/s   7.23757M   8.06933M   894.158M          6.5122    3.19106/s 2.85331G/s     2.21202G               16.1102                2.47385   524.288k       1.67303M/s [BEST: throughput=  0.44 GB/s doc_throughput=     3 docs/s instructions=  2212015395 cycles=   892402659 branch_miss=  445664 cache_miss= 7360281 cache_ref=   8162087 items=    524288 avg_time= 313375581 ns]
kostya<nlohmann_json>/manual_time                     2166204934 ns   2185437648 ns            1         15.0997M            63.385M         44.913M       45.5177M    6.90887G              50.3177          0.461637       3.18939G          17.2658G                    125.748                     2.49907           242.031k    15.0997M   137.305M       60.4487M/s    44.913M   45.5177M   6.90887G         50.3177   0.461637/s 3.18939G/s     17.2658G               125.748                2.49907   524.288k       242.031k/s [BEST: throughput=  0.06 GB/s doc_throughput=     0 docs/s instructions= 17265775072 cycles=  6908872641 branch_miss=15099720 cache_miss=44912959 cache_ref=  45517734 items=    524288 avg_time=2166204934 ns]
distinct_user_id<simdjson_dom>/manual_time                323410 ns       401583 ns         2170           3.699k           1.96913G               0        33.208k    1024.43k              1.62218          3.11811k       3.19429G          2.92867M                    4.63753                     2.85883           358.583k    3.77557k   631.515k       1.81857G/s   0.129032   33.3476k   1032.01k         1.63419   3.09205k/s 3.19104G/s     2.92867M               4.63753                2.83782        115       355.586k/s [BEST: throughput=  1.97 GB/s doc_throughput=  3118 docs/s instructions=     2928672 cycles=     1024432 branch_miss=    3699 cache_miss=       0 cache_ref=     33208 items=       115 avg_time=    323409 ns]
distinct_user_id<simdjson_ondemand>/manual_time           182470 ns       245448 ns         3834           1.632k           3.49301G               0         8.573k    577.602k             0.914629          5.53116k       3.19481G          1.87658M                    2.97155                     3.24891           636.083k    1.71753k   631.515k       3.22324G/s  0.0299948   8.68401k   582.406k        0.922236   5.48036k/s  3.1918G/s     1.87658M               2.97155                3.22211        115       630.242k/s [BEST: throughput=  3.49 GB/s doc_throughput=  5531 docs/s instructions=     1876578 cycles=      577602 branch_miss=    1632 cache_miss=       0 cache_ref=      8573 items=       115 avg_time=    182469 ns]
distinct_user_id<yyjson>/manual_time                      688788 ns       777722 ns         1000           6.656k           1.56385G            7.2k        27.415k     1.2896M              2.04207          2.47635k       3.19349G          2.86134M                    4.53091                     2.21879            284.78k    7.56382k   631.515k       874.376M/s   2.25848k   24.7262k   1.49007M         2.35952   1.45183k/s 2.16332G/s     2.86154M               4.53123                 1.9204        115        166.96k/s [BEST: throughput=  1.56 GB/s doc_throughput=  2476 docs/s instructions=     2861340 cycles=     1289596 branch_miss=    6656 cache_miss=    7200 cache_ref=     27415 items=       115 avg_time=    688787 ns]
distinct_user_id<yyjson_insitu>/manual_time               512315 ns       584255 ns         1379           7.415k           1.80337G             115        14.373k    1.11861M              1.77131          2.85562k       3.19432G          2.86103M                    4.53043                     2.55767           328.396k    7.61511k   631.515k       1.14801G/s    69.2473   8.98038k    1.2358M         1.95687   1.95192k/s 2.41218G/s      2.8613M               4.53085                2.31535        115       224.471k/s [BEST: throughput=  1.80 GB/s doc_throughput=  2855 docs/s instructions=     2861033 cycles=     1118611 branch_miss=    7415 cache_miss=     115 cache_ref=     14373 items=       115 avg_time=    512315 ns]
distinct_user_id<sajson>/manual_time                      687994 ns       760067 ns         1015          10.723k           925.238M               1        13.118k    2.17958M              3.45136          1.46511k       3.19333G          5.81019M                     9.2004                     2.66573           168.488k    11.2591k   631.515k       875.385M/s    2.40887   12.8943k   2.19467M         3.47524    1.4535k/s 3.18995G/s     5.81019M                9.2004                2.64741        115       167.153k/s [BEST: throughput=  0.93 GB/s doc_throughput=  1465 docs/s instructions=     5810189 cycles=     2179583 branch_miss=   10723 cache_miss=       1 cache_ref=     13118 items=       115 avg_time=    687993 ns]
distinct_user_id<rapidjson>/manual_time                  2836495 ns      2911222 ns          247          31.791k           245.277M          9.872k         22.82k    8.22016M              13.0166           388.395       3.19267G          21.8254M                    34.5604                     2.65511           44.6654k    33.0491k   631.515k       212.325M/s    862.794   13.6001k   8.39663M          13.296    352.548/s 2.96021G/s     21.8263M               34.5617                2.59941        115        40.543k/s [BEST: throughput=  0.25 GB/s doc_throughput=   388 docs/s instructions=    21825430 cycles=     8220160 branch_miss=   31791 cache_miss=    9872 cache_ref=     22820 items=       115 avg_time=   2836495 ns]
distinct_user_id<rapidjson_insitu>/manual_time           1782476 ns      1854814 ns          378          25.352k           384.558M          7.086k        14.151k     5.2432M              8.30257           608.946       3.19282G          13.2581M                    20.9942                     2.52864           70.0287k     31.363k   631.515k       337.878M/s   2.56381k   12.0242k   5.42221M         8.58603    561.017/s 3.04195G/s     13.2584M               20.9945                 2.4452        115        64.517k/s [BEST: throughput=  0.38 GB/s doc_throughput=   608 docs/s instructions=    13258131 cycles=     5243196 branch_miss=   25352 cache_miss=    7086 cache_ref=     14151 items=       115 avg_time=   1782476 ns]
distinct_user_id<nlohmann_json>/manual_time              9847193 ns      9939575 ns           76         127.281k           75.6195M             741        99.287k    26.6252M              42.1609           119.743       3.18818G          73.5729M                    116.502                     2.76328           13.7704k    247.606k   631.515k       61.1605M/s    107.592   108.048k   31.4054M         49.7302    101.552/s 3.18927G/s     72.3532M               114.571                2.30385        115       11.6785k/s [BEST: throughput=  0.08 GB/s doc_throughput=   119 docs/s instructions=    73572911 cycles=    26625234 branch_miss=  127281 cache_miss=     741 cache_ref=     99287 items=       115 avg_time=   9847192 ns]
find_tweet<simdjson_dom>/manual_time                      306455 ns       382284 ns         2255           3.413k           2.08069G               1        29.357k    969.425k              1.53508          3.29475k       3.19401G           2.8435M                    4.50266                     2.93318           3.29475k    3.57259k   631.515k       1.91919G/s   0.278492   29.3104k   977.764k         1.54828   3.26312k/s 3.19057G/s      2.8435M               4.50266                2.90816          1       3.26312k/s [BEST: throughput=  2.08 GB/s doc_throughput=  3294 docs/s instructions=     2843498 cycles=      969425 branch_miss=    3413 cache_miss=       1 cache_ref=     29357 items=         1 avg_time=    306454 ns]
find_tweet<simdjson_ondemand>/manual_time                 135631 ns       200992 ns         5156              864           4.69685G               0         7.396k    429.597k             0.680264          7.43743k        3.1951G           1.3681M                    2.16638                     3.18462           7.43743k     901.558   631.515k       4.33634G/s  0.0376261   7.44485k   432.984k        0.685628   7.37293k/s 3.19236G/s      1.3681M               2.16638                 3.1597          1       7.37293k/s [BEST: throughput=  4.70 GB/s doc_throughput=  7437 docs/s instructions=     1368102 cycles=      429597 branch_miss=     864 cache_miss=       0 cache_ref=      7396 items=         1 avg_time=    135631 ns]
find_tweet<yyjson>/manual_time                            772606 ns       858715 ns          980           9.584k           1.49443G             175        27.314k    1.34995M              2.13763          2.36642k       3.19454G          2.80059M                    4.43471                     2.07459           2.36642k    7.56717k   631.515k       779.518M/s    347.602   20.0971k   1.50423M         2.38194   1.29432k/s 1.94696G/s     2.80128M               4.43581                1.86227          1       1.29432k/s [BEST: throughput=  1.49 GB/s doc_throughput=  2366 docs/s instructions=     2800589 cycles=     1349947 branch_miss=    9584 cache_miss=     175 cache_ref=     27314 items=         1 avg_time=    772605 ns]
find_tweet<yyjson_insitu>/manual_time                     496315 ns       561733 ns         1411           6.878k            1.8588G          1.199k        12.927k    1080.17k              1.71044           2.9434k       3.17937G          2.80048M                    4.43455                     2.59264            2.9434k    7.32577k   631.515k       1.18502G/s    8.17293     5.393k   1.18561M          1.8774   2.01485k/s 2.38882G/s     2.80075M               4.43496                2.36229          1       2.01485k/s [BEST: throughput=  1.86 GB/s doc_throughput=  2943 docs/s instructions=     2800484 cycles=     1080169 branch_miss=    6878 cache_miss=    1199 cache_ref=     12927 items=         1 avg_time=    496315 ns]
find_tweet<sajson>/manual_time                            675430 ns       746057 ns         1033          10.597k           942.193M               0        12.335k    2.14033M              3.38919          1.49196k       3.19327G          5.71507M                    9.04978                     2.67019           1.49196k    11.0754k   631.515k       891.669M/s     2.8577    12.432k   2.15481M         3.41213   1.48054k/s 3.19028G/s     5.71507M               9.04978                2.65224          1       1.48054k/s [BEST: throughput=  0.94 GB/s doc_throughput=  1491 docs/s instructions=     5715069 cycles=     2140326 branch_miss=   10597 cache_miss=       0 cache_ref=     12335 items=         1 avg_time=    675429 ns]
find_tweet<rapidjson>/manual_time                        2813250 ns      2883403 ns          250          31.829k           246.207M         11.899k        21.373k    8.17585M              12.9464           389.867       3.18749G          21.7419M                    34.4282                     2.65929            389.867     32.454k   631.515k        214.08M/s     668.98   10.1454k   8.32294M         13.1793    355.461/s 2.95848G/s     21.7428M               34.4295                2.61239          1        355.461/s [BEST: throughput=  0.25 GB/s doc_throughput=   389 docs/s instructions=    21741913 cycles=     8175845 branch_miss=   31829 cache_miss=   11899 cache_ref=     21373 items=         1 avg_time=   2813249 ns]
find_tweet<rapidjson_insitu>/manual_time                 1779304 ns      1847634 ns          380          25.286k           387.434M              86        13.567k    5.20416M              8.24076           613.499       3.19275G          13.1792M                    20.8692                     2.53244            613.499    32.9384k   631.515k        338.48M/s    2.4797k   9.35882k   5.41768M         8.57886    562.017/s 3.04483G/s     13.1797M               20.8699                2.43272          1        562.017/s [BEST: throughput=  0.39 GB/s doc_throughput=   613 docs/s instructions=    13179243 cycles=     5204162 branch_miss=   25286 cache_miss=      86 cache_ref=     13567 items=         1 avg_time=   1779304 ns]
find_tweet<nlohmann_json>/manual_time                    8300906 ns      8390432 ns           85          102.39k           89.0926M             797        77.348k    22.5969M               35.782           141.078       3.18791G          63.6093M                    100.725                     2.81496            141.078    199.138k   631.515k       72.5535M/s    97.9294    81.493k   26.4744M          41.922    120.469/s 3.18934G/s     62.2483M               98.5698                2.35126          1        120.469/s [BEST: throughput=  0.09 GB/s doc_throughput=   141 docs/s instructions=    63609310 cycles=    22596876 branch_miss=  102390 cache_miss=     797 cache_ref=     77348 items=         1 avg_time=   8300905 ns]
top_tweet<simdjson_dom>/manual_time                       314991 ns       396111 ns         2222           3.645k            2.0209G               0        32.178k    998.024k              1.58036          3.20008k       3.19376G          2.88039M                    4.56107                     2.88609           3.20008k    3.69035k   631.515k       1.86718G/s    0.19892   32.2854k      1005k         1.59141    3.1747k/s 3.19056G/s     2.88039M               4.56107                2.86606          1        3.1747k/s [BEST: throughput=  2.02 GB/s doc_throughput=  3200 docs/s instructions=     2880386 cycles=      998024 branch_miss=    3645 cache_miss=       0 cache_ref=     32178 items=         1 avg_time=    314990 ns]
top_tweet<simdjson_ondemand>/manual_time                  195900 ns       263169 ns         3573           1.554k           3.26651G               0          8.72k    617.546k              0.97788           5.1725k       3.19426G          1.89218M                    2.99625                     3.06403            5.1725k    1.73772k   631.515k       3.00227G/s  0.0534565   8.80327k   625.159k        0.989936   5.10465k/s 3.19122G/s     1.89218M               2.99625                3.02671          1       5.10465k/s [BEST: throughput=  3.27 GB/s doc_throughput=  5172 docs/s instructions=     1892177 cycles=      617546 branch_miss=    1554 cache_miss=       0 cache_ref=      8720 items=         1 avg_time=    195899 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time     193191 ns       261504 ns         3612           1.979k           3.29775G               1         9.503k     611.79k             0.968766          5.22196k       3.19474G          1.90297M                    3.01334                      3.1105           5.22196k    2.05597k   631.515k       3.04437G/s    1.35659    9.5978k   616.591k        0.976368   5.17624k/s 3.19162G/s     1.90297M               3.01334                3.08628          1       5.17624k/s [BEST: throughput=  3.30 GB/s doc_throughput=  5221 docs/s instructions=     1902970 cycles=      611790 branch_miss=    1979 cache_miss=       1 cache_ref=      9503 items=         1 avg_time=    193190 ns]
top_tweet<yyjson>/manual_time                             783050 ns       873311 ns          970           9.653k           1.47473G             248        27.454k     1.3678M              2.16591          2.33522k       3.19412G          2.82787M                    4.47791                     2.06745           2.33522k    7.67537k   631.515k        769.12M/s    402.406   22.6138k   1.53679M          2.4335   1.27706k/s 1.96257G/s     2.82855M                 4.479                1.84056          1       1.27706k/s [BEST: throughput=  1.47 GB/s doc_throughput=  2335 docs/s instructions=     2827869 cycles=     1367803 branch_miss=    9653 cache_miss=     248 cache_ref=     27454 items=         1 avg_time=    783050 ns]
top_tweet<yyjson_insitu>/manual_time                      505774 ns       577442 ns         1396           7.015k           1.82694G          1.216k        13.021k    1099.21k              1.74059          2.89295k       3.17995G          2.82776M                    4.47773                     2.57254           2.89295k    7.41975k   631.515k       1.16286G/s    49.8675   7.75759k   1.21524M         1.92432   1.97717k/s 2.40273G/s     2.82802M               4.47815                2.32713          1       1.97717k/s [BEST: throughput=  1.83 GB/s doc_throughput=  2892 docs/s instructions=     2827755 cycles=     1099208 branch_miss=    7015 cache_miss=    1216 cache_ref=     13021 items=         1 avg_time=    505774 ns]
top_tweet<sajson>/manual_time                             678324 ns       753135 ns         1032          10.508k           938.821M               2        12.841k    2.14807M              3.40146          1.48662k       3.19336G          5.74506M                    9.09727                     2.67452           1.48662k    11.0291k   631.515k       887.864M/s    4.70155   12.9315k   2.16397M         3.42664   1.47422k/s 3.19017G/s     5.74506M               9.09727                2.65487          1       1.47422k/s [BEST: throughput=  0.94 GB/s doc_throughput=  1486 docs/s instructions=     5745061 cycles=     2148072 branch_miss=   10508 cache_miss=       2 cache_ref=     12841 items=         1 avg_time=    678324 ns]
top_tweet<rapidjson>/manual_time                         2823950 ns      2898340 ns          249          32.081k           245.718M         11.209k        22.079k    8.20542M              12.9932           389.093       3.19267G          21.8001M                    34.5203                     2.65679            389.093    32.7279k   631.515k       213.269M/s    767.357   10.8531k   8.35754M         13.2341    354.114/s 2.95952G/s     21.8007M               34.5213                2.60851          1        354.114/s [BEST: throughput=  0.25 GB/s doc_throughput=   389 docs/s instructions=    21800116 cycles=     8205424 branch_miss=   32081 cache_miss=   11209 cache_ref=     22079 items=         1 avg_time=   2823949 ns]
top_tweet<rapidjson_insitu>/manual_time                  1733583 ns      1806742 ns          393          25.624k           386.618M             375        14.455k     5.2154M              8.25855           612.208       3.19291G          13.2331M                    20.9546                     2.53732            612.208    25.5003k   631.515k       347.407M/s   2.47338k   10.5952k    5.2655M         8.33789     576.84/s 3.03735G/s     13.2334M                20.955                2.51322          1         576.84/s [BEST: throughput=  0.39 GB/s doc_throughput=   612 docs/s instructions=    13233135 cycles=     5215399 branch_miss=   25624 cache_miss=     375 cache_ref=     14455 items=         1 avg_time=   1733583 ns]
top_tweet<nlohmann_json>/manual_time                    10739919 ns     10832184 ns           67         194.211k           60.3353M              56       165.366k    33.3794M              52.8561           95.5406       3.18909G          85.9107M                    136.039                     2.57376            95.5406    220.816k   631.515k       56.0767M/s    159.209   164.735k   34.2521M          54.238    93.1106/s 3.18923G/s     86.1196M                136.37                2.51429          1        93.1106/s [BEST: throughput=  0.06 GB/s doc_throughput=    95 docs/s instructions=    85910695 cycles=    33379425 branch_miss=  194211 cache_miss=      56 cache_ref=    165366 items=         1 avg_time=  10739918 ns]
