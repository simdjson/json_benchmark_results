run_benchmark: v0.8.0 /home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-x-clang10-fallback.json -DSIMDJSON_IMPLEMENTATION=fallback
git reset --hard v0.8.0
HEAD is now at c96ff018 Version 0.8.
cmake -DSIMDJSON_IMPLEMENTATION=fallback ..
-- The CXX compiler identification is Clang 10.0.1
-- The C compiler identification is Clang 10.0.1
-- Check for working CXX compiler: /usr/bin/clang++-10
-- Check for working CXX compiler: /usr/bin/clang++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/clang-10
-- Check for working C compiler: /usr/bin/clang-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Including implementation fallback due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation westmere due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation haswell due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation arm64 due to SIMDJSON_IMPLEMENTATION=fallback
-- Excluding implementation ppc64 due to SIMDJSON_IMPLEMENTATION=fallback
-- Selected implementation fallback as builtin implementation based on fallback.
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-c96ff018
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Success
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Success
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES -- failed to compile
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.8.0/skylake-x-clang10-fallback.json --benchmark_out_format=json
2021-01-23 05:29:04
Running benchmark/bench_ondemand
Run on (4 X 3200 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 1024 KiB (x4)
  L3 Unified 8448 KiB (x1)
Load Average: 0.64, 0.37, 0.63
***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.
simdjson::dom implementation:      fallback
simdjson::ondemand implementation: fallback
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                 1679929 ns      1752088 ns          416          38.298k           377.758M               0        33.894k    5.33745M              8.45182           598.177       3.19274G          15.3669M                    24.3334                     2.87907           59.8177k    38.8367k   631.515k       358.503M/s    2.16827   34.1556k   5.35854M         8.48521    595.263/s 3.18974G/s     15.3669M               24.3334                2.86774        100       59.5263k/s [BEST: throughput=  0.38 GB/s doc_throughput=   598 docs/s instructions=    15366881 cycles=     5337451 branch_miss=   38298 cache_miss=       0 cache_ref=     33894 items=       100 avg_time=   1679928 ns]
partial_tweets<simdjson_ondemand>/manual_time            1310431 ns      1368605 ns          534          32.642k           485.115M               0        13.419k    4.15636M              6.58156           768.176       3.19281G          11.0591M                    17.5121                     2.66078           76.8176k    33.2268k   631.515k       459.589M/s   0.177903   13.4516k   4.18008M         6.61913    763.108/s 3.18985G/s     11.0591M               17.5121                2.64568        100       76.3108k/s [BEST: throughput=  0.49 GB/s doc_throughput=   768 docs/s instructions=    11059134 cycles=     4156356 branch_miss=   32642 cache_miss=       0 cache_ref=     13419 items=       100 avg_time=   1310431 ns]
partial_tweets<yyjson>/manual_time                        792975 ns       872934 ns          886           9.977k           1.44091G             199        27.733k    1.40005M              2.21698          2.28167k       3.19446G          2.90334M                    4.59742                     2.07374           228.167k    7.64425k   631.515k       759.494M/s    549.587   23.9772k   1.56615M         2.47999   1.26107k/s 1.97503G/s     2.90403M               4.59852                1.85425        100       126.107k/s [BEST: throughput=  1.44 GB/s doc_throughput=  2281 docs/s instructions=     2903341 cycles=     1400053 branch_miss=    9977 cache_miss=     199 cache_ref=     27733 items=       100 avg_time=    792974 ns]
partial_tweets<yyjson_insitu>/manual_time                 514055 ns       577048 ns         1375            6.86k           1.78388G           1.43k        14.185k    1.12207M              1.77678          2.82476k       3.16957G          2.90303M                    4.59693                     2.58722           282.476k    7.39172k   631.515k       1.14413G/s    67.2735   9.57895k   1.24207M         1.96681   1.94532k/s 2.41622G/s     2.90329M               4.59734                2.33746        100       194.532k/s [BEST: throughput=  1.78 GB/s doc_throughput=  2824 docs/s instructions=     2903030 cycles=     1122065 branch_miss=    6860 cache_miss=    1430 cache_ref=     14185 items=       100 avg_time=    514055 ns]
partial_tweets<sajson>/manual_time                        682072 ns       747106 ns         1028           10.52k           934.957M               0        13.878k    2.15679M              3.41527           1.4805k       3.19313G          5.87179M                    9.29794                     2.72246            148.05k    10.8925k   631.515k       882.986M/s    2.01459    13.935k   2.17587M         3.44548   1.46612k/s 3.19009G/s     5.87179M               9.29794                2.69859        100       146.612k/s [BEST: throughput=  0.93 GB/s doc_throughput=  1480 docs/s instructions=     5871791 cycles=     2156794 branch_miss=   10520 cache_miss=       0 cache_ref=     13878 items=       100 avg_time=    682071 ns]
partial_tweets<rapidjson>/manual_time                    2855165 ns      2921317 ns          245          30.048k           246.544M          7.739k        22.421k    8.17803M              12.9499           390.401       3.19271G          21.9149M                    34.7021                     2.67973           39.0401k    33.2145k   631.515k       210.937M/s    421.918   12.4736k    8.4195M         13.3322    350.242/s 2.94887G/s     21.9156M               34.7032                2.60296        100       35.0242k/s [BEST: throughput=  0.25 GB/s doc_throughput=   390 docs/s instructions=    21914898 cycles=     8178031 branch_miss=   30048 cache_miss=    7739 cache_ref=     22421 items=       100 avg_time=   2855165 ns]
partial_tweets<rapidjson_insitu>/manual_time             1761396 ns      1824542 ns          398          26.094k           390.692M          4.295k        14.724k    5.16078M              8.17206           618.658       3.19275G          13.3443M                    21.1306                     2.58571           61.8658k    26.0799k   631.515k       341.922M/s    207.234   9.87588k   5.21961M         8.26522    567.732/s 2.96334G/s     13.3447M               21.1312                2.55664        100       56.7732k/s [BEST: throughput=  0.39 GB/s doc_throughput=   618 docs/s instructions=    13344293 cycles=     5160776 branch_miss=   26094 cache_miss=    4295 cache_ref=     14724 items=       100 avg_time=   1761395 ns]
partial_tweets<nlohmann_json>/manual_time                9512317 ns      9600885 ns           74         154.191k           69.2407M              12        97.993k    29.0801M              46.0481           109.642        3.1884G          78.2449M                      123.9                     2.69067           10.9642k    162.708k   631.515k       63.3137M/s    61.8649   145.488k   30.3365M         48.0377    105.127/s 3.18918G/s     79.1386M               125.315                2.60869        100       10.5127k/s [BEST: throughput=  0.07 GB/s doc_throughput=   109 docs/s instructions=    78244923 cycles=    29080063 branch_miss=  154191 cache_miss=      12 cache_ref=     97993 items=       100 avg_time=   9512317 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 154008902 ns    160189046 ns            5          1.2988M           299.302M        6.79833M        6.8963M    490.093M              10.6545           6.50673        3.1889G          1.60866G                    34.9717                     3.28235           6.50673M    1.30153M   45.9988M        284.84M/s   6.81964M   6.89626M   491.077M         10.6759    6.49313/s 3.18863G/s     1.60866G               34.9717                3.27577      1000k       6.49313M/s [BEST: throughput=  0.30 GB/s doc_throughput=     6 docs/s instructions=  1608656379 cycles=   490092779 branch_miss= 1298798 cache_miss= 6798331 cache_ref=   6896301 items=   1000000 avg_time= 154008902 ns]
large_random<simdjson_ondemand>/manual_time            118351445 ns    124480662 ns            6         1.30561M           389.683M        3.49629M       3.57337M    376.426M              8.18338           8.47159       3.18893G          1.21498G                    26.4133                     3.22767           8.47159M    1.30508M   45.9988M       370.658M/s   3.51793M   3.57347M   377.386M         8.20425    8.44941/s 3.18869G/s     1.21498G               26.4133                3.21946      1000k       8.44941M/s [BEST: throughput=  0.39 GB/s doc_throughput=     8 docs/s instructions=  1214977543 cycles=   376425648 branch_miss= 1305610 cache_miss= 3496290 cache_ref=   3573372 items=   1000000 avg_time= 118351445 ns]
large_random<simdjson_ondemand_unordered>/manual_time  119089163 ns    125180323 ns            6         1.33124M           387.624M        3.54238M       3.57388M    378.434M              8.22704           8.42683         3.189G          1.21398G                    26.3915                      3.2079           8.42683M    1.34491M   45.9988M       368.361M/s   3.52583M    3.5738M   379.738M         8.25539    8.39707/s 3.18869G/s     1.21398G               26.3915                3.19688      1000k       8.39707M/s [BEST: throughput=  0.39 GB/s doc_throughput=     8 docs/s instructions=  1213977542 cycles=   378433765 branch_miss= 1331242 cache_miss= 3542382 cache_ref=   3573882 items=   1000000 avg_time= 119089162 ns]
large_random<yyjson>/manual_time                       151598241 ns    157714702 ns            5         667.337k           303.556M        4.20252M       4.40596M    343.013M                7.457           6.59922       2.26362G           866.68M                    18.8414                     2.52667           6.59922M    666.076k   45.9988M       289.369M/s   4.20767M   4.40855M   343.242M         7.46197    6.59638/s 2.26415G/s      866.68M               18.8414                2.52499      1000k       6.59638M/s [BEST: throughput=  0.30 GB/s doc_throughput=     6 docs/s instructions=   866680103 cycles=   343012874 branch_miss=  667337 cache_miss= 4202516 cache_ref=   4405963 items=   1000000 avg_time= 151598241 ns]
large_random<yyjson_insitu>/manual_time                125447078 ns    131560582 ns            6         663.757k           366.904M        3.48596M       3.69057M    300.005M              6.52203           7.97639       2.39296G           860.56M                    18.7083                     2.86848           7.97639M    666.072k   45.9988M       349.692M/s   3.48472M     3.696M   300.267M         6.52772    7.97149/s 2.39357G/s      860.56M               18.7083                2.86598      1000k       7.97149M/s [BEST: throughput=  0.37 GB/s doc_throughput=     7 docs/s instructions=   860559542 cycles=   300005285 branch_miss=  663757 cache_miss= 3485956 cache_ref=   3690574 items=   1000000 avg_time= 125447078 ns]
large_random<sajson>/manual_time                       107544202 ns    113598127 ns            6         581.794k           428.131M        5.42739M       5.57726M    342.629M              7.44865           9.30744         3.189G          1.13399G                    24.6526                     3.30967           9.30744M    582.695k   45.9988M       407.905M/s   5.47572M   5.57729M   342.937M         7.45534     9.2985/s  3.1888G/s     1.13399G               24.6526                 3.3067      1000k        9.2985M/s [BEST: throughput=  0.43 GB/s doc_throughput=     9 docs/s instructions=  1133989156 cycles=   342628872 branch_miss=  581794 cache_miss= 5427385 cache_ref=   5577261 items=   1000000 avg_time= 107544201 ns]
large_random<rapidjson>/manual_time                    250062538 ns    256164486 ns            3          619.81k            190.15M        4.35394M       4.94942M    702.802M              15.2787           4.13382       2.90525G          2.02013G                     43.917                     2.87439           4.13382M    643.019k   45.9988M       175.428M/s   4.09905M   4.75639M   706.697M         15.3634      3.999/s 2.82608G/s     2.02014G               43.9171                2.85856      1000k         3.999M/s [BEST: throughput=  0.19 GB/s doc_throughput=     4 docs/s instructions=  2020126139 cycles=   702801547 branch_miss=  619810 cache_miss= 4353940 cache_ref=   4949418 items=   1000000 avg_time= 250062538 ns]
large_random<rapidjson_lossless>/manual_time           286330536 ns    292432346 ns            2         611.453k           164.105M        4.35202M       4.92147M    825.869M              17.9541           3.56759       2.94636G          2.48209G                      53.96                     3.00543           3.56759M    609.239k   45.9988M       153.207M/s   4.15584M   4.78919M   828.646M         18.0145    3.49247/s 2.89402G/s      2.4821G               53.9601                2.99537      1000k       3.49247M/s [BEST: throughput=  0.16 GB/s doc_throughput=     3 docs/s instructions=  2482093246 cycles=   825868535 branch_miss=  611453 cache_miss= 4352023 cache_ref=   4921472 items=   1000000 avg_time= 286330536 ns]
large_random<rapidjson_insitu>/manual_time             275986159 ns    282113391 ns            3         591.797k           171.329M        5.04656M       5.65739M    788.141M               17.134           3.72465       2.93555G          1.75113G                     38.069                     2.22184           3.72465M    591.093k   45.9988M       158.949M/s   4.79906M   5.47155M   790.156M         17.1778    3.62337/s 2.86303G/s     1.75113G               38.0692                2.21619      1000k       3.62337M/s [BEST: throughput=  0.17 GB/s doc_throughput=     3 docs/s instructions=  1751125985 cycles=   788140870 branch_miss=  591797 cache_miss= 5046558 cache_ref=   5657391 items=   1000000 avg_time= 275986159 ns]
large_random<nlohmann_json>/manual_time               1451560425 ns   1457640796 ns            1         4.11383M           31.6892M        30.3969M       30.9407M    4.61477G              100.324          0.688914       3.17918G          12.3806G                     269.15                     2.68281           688.914k    4.11383M   45.9988M       30.2212M/s   30.3969M   30.9407M   4.61477G         100.324   0.688914/s 3.17918G/s     12.3806G                269.15                2.68281      1000k       688.914k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 12380550498 cycles=  4614769879 branch_miss= 4113827 cache_miss=30396912 cache_ref=  30940733 items=   1000000 avg_time=1451560425 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                       236368761 ns    255295573 ns            3         740.552k           581.319M        10.2369M       10.3167M    753.312M              5.48641           4.23378       3.18936G          2.66735G                    19.4264                     3.54083           2.21972M    738.832k   137.305M       553.983M/s   10.2652M   10.3166M   753.847M         5.49031    4.23068/s 3.18928G/s     2.66735G               19.4264                3.53831   524.288k       2.21809M/s [BEST: throughput=  0.58 GB/s doc_throughput=     4 docs/s instructions=  2667347919 cycles=   753312079 branch_miss=  740552 cache_miss=10236915 cache_ref=  10316659 items=    524288 avg_time= 236368761 ns]
kostya<simdjson_ondemand>/manual_time                  198130448 ns    217070118 ns            4         716.623k           693.836M         6.4342M       6.47199M    631.204M               4.5971           5.05325       3.18963G          2.21354G                    16.1213                     3.50685           2.64936M    735.307k   137.305M       660.899M/s   6.44482M   6.47205M    631.93M         4.60239    5.04718/s 3.18947G/s     2.21354G               16.1213                3.50282   524.288k       2.64618M/s [BEST: throughput=  0.69 GB/s doc_throughput=     5 docs/s instructions=  2213541011 cycles=   631204300 branch_miss=  716623 cache_miss= 6434205 cache_ref=   6471986 items=    524288 avg_time= 198130447 ns]
kostya<yyjson>/manual_time                             229896255 ns    248854401 ns            3          416.11k           597.294M        8.49847M       8.76647M     500.27M              3.64349           4.35012       2.17623G          978.903M                     7.1294                     1.95675           2.28072M    416.802k   137.305M        569.58M/s   8.49815M    8.7679M    500.52M         3.64532    4.34979/s 2.17716G/s     978.903M                7.1294                1.95577   524.288k       2.28054M/s [BEST: throughput=  0.60 GB/s doc_throughput=     4 docs/s instructions=   978902609 cycles=   500269638 branch_miss=  416110 cache_miss= 8498467 cache_ref=   8766469 items=    524288 avg_time= 229896255 ns]
kostya<yyjson_insitu>/manual_time                      151719532 ns    170661119 ns            5         413.659k           905.201M         6.3643M       7.81624M    372.101M              2.71003           6.59263       2.45312G          960.633M                    6.99635                     2.58164           3.45644M    412.874k   137.305M       863.068M/s   6.36643M   7.81235M   372.176M         2.71058    6.59111/s 2.45306G/s     960.633M               6.99635                2.58112   524.288k       3.45564M/s [BEST: throughput=  0.91 GB/s doc_throughput=     6 docs/s instructions=   960633239 cycles=   372101217 branch_miss=  413659 cache_miss= 6364301 cache_ref=   7816239 items=    524288 avg_time= 151719532 ns]
kostya<sajson>/manual_time                             162944156 ns    181941725 ns            4         354.891k           842.943M        8.46714M       8.53988M    519.461M              3.78326            6.1392       3.18907G          1.54442G                    11.2481                     2.97313           3.21871M    354.967k   137.305M       803.614M/s   8.49094M   8.53954M   519.623M         3.78444    6.13707/s 3.18896G/s     1.54442G               11.2481                 2.9722   524.288k       3.21759M/s [BEST: throughput=  0.84 GB/s doc_throughput=     6 docs/s instructions=  1544424224 cycles=   519460734 branch_miss=  354891 cache_miss= 8467141 cache_ref=   8539881 items=    524288 avg_time= 162944155 ns]
kostya<rapidjson>/manual_time                          328444100 ns    347433974 ns            2         1.15931M           422.622M        5.23441M       5.86729M    937.651M              6.82896           3.07798       2.88607G          2.74288G                    19.9766                     2.92527           1.61375M    1.17295M   137.305M        398.68M/s   5.11261M   5.76294M   940.228M         6.84774    3.04466/s 2.86267G/s     2.74288G               19.9766                2.91725   524.288k       1.59628M/s [BEST: throughput=  0.42 GB/s doc_throughput=     3 docs/s instructions=  2742881799 cycles=   937650982 branch_miss= 1159306 cache_miss= 5234408 cache_ref=   5867288 items=    524288 avg_time= 328444100 ns]
kostya<rapidjson_lossless>/manual_time                 352502291 ns    371493810 ns            2         988.953k           393.375M        5.23899M       5.84385M    1015.71M              7.39751           2.86497          2.91G          3.00974G                    21.9201                     2.96317           1.50207M     986.22k   137.305M       371.471M/s   5.11473M   5.74645M   1018.09M         7.41481    2.83686/s 2.88818G/s     3.00974G               21.9201                2.95626   524.288k       1.48733M/s [BEST: throughput=  0.39 GB/s doc_throughput=     2 docs/s instructions=  3009735087 cycles=  1015714898 branch_miss=  988953 cache_miss= 5238989 cache_ref=   5843850 items=    524288 avg_time= 352502290 ns]
kostya<rapidjson_insitu>/manual_time                   315260526 ns    334268902 ns            2         1056.53k           439.731M         7.3754M       7.96275M    898.845M              6.54634           3.20258       2.87863G          2.22722G                     16.221                     2.47787           1.67908M     1032.8k   137.305M       415.352M/s   7.25467M   7.87059M   899.957M         6.55444    3.17198/s 2.85465G/s     2.22722G                16.221                2.47481   524.288k       1.66303M/s [BEST: throughput=  0.44 GB/s doc_throughput=     3 docs/s instructions=  2227219238 cycles=   898844997 branch_miss= 1056533 cache_miss= 7375401 cache_ref=   7962751 items=    524288 avg_time= 315260525 ns]
kostya<nlohmann_json>/manual_time                     2174437991 ns   2193388260 ns            1         14.8505M            63.145M        45.3348M       45.9769M    6.93533G              50.5104          0.459889       3.18948G          17.2831G                    125.874                     2.49203           241.114k    14.8505M   137.305M       60.2198M/s   45.3348M   45.9769M   6.93533G         50.5104   0.459889/s 3.18948G/s     17.2831G               125.874                2.49203   524.288k       241.114k/s [BEST: throughput=  0.06 GB/s doc_throughput=     0 docs/s instructions= 17283074674 cycles=  6935329565 branch_miss=14850484 cache_miss=45334798 cache_ref=  45976923 items=    524288 avg_time=2174437991 ns]
distinct_user_id<simdjson_dom>/manual_time               1673016 ns      1753438 ns          418           38.16k           379.555M               1        34.279k    5.31231M              8.41202           601.023       3.19282G           15.301M                     24.229                     2.88029           69.1176k    38.8702k   631.515k       359.984M/s    1.67225   34.4474k   5.33632M         8.45003    597.723/s 3.18964G/s      15.301M                24.229                2.86733        115       68.7381k/s [BEST: throughput=  0.38 GB/s doc_throughput=   601 docs/s instructions=    15301003 cycles=     5312314 branch_miss=   38160 cache_miss=       1 cache_ref=     34279 items=       115 avg_time=   1673016 ns]
distinct_user_id<simdjson_ondemand>/manual_time          1292575 ns      1355195 ns          541          31.635k           491.731M               4         8.513k    4.10055M              6.49319           778.653        3.1929G          10.6781M                    16.9087                     2.60406           89.5451k    32.3885k   631.515k       465.938M/s    4.20702   8.71834k   4.12308M         6.52886    773.649/s 3.18981G/s     10.6781M               16.9087                2.58983        115       88.9697k/s [BEST: throughput=  0.49 GB/s doc_throughput=   778 docs/s instructions=    10678083 cycles=     4100547 branch_miss=   31635 cache_miss=       4 cache_ref=      8513 items=       115 avg_time=   1292575 ns]
distinct_user_id<yyjson>/manual_time                      687425 ns       776801 ns         1000           6.515k           1.56862G          7.162k        27.321k     1.2856M              2.03575           2.4839k       3.19332G           2.8612M                    4.53069                     2.22557           285.649k    7.42453k   631.515k        876.11M/s   2.23939k   24.9202k   1.48587M         2.35286    1.4547k/s  2.1615G/s     2.86168M               4.53146                1.92593        115       167.291k/s [BEST: throughput=  1.57 GB/s doc_throughput=  2483 docs/s instructions=     2861196 cycles=     1285604 branch_miss=    6515 cache_miss=    7162 cache_ref=     27321 items=       115 avg_time=    687425 ns]
distinct_user_id<yyjson_insitu>/manual_time               510148 ns       582620 ns         1384           6.991k           1.81157G          1.256k        14.417k    1.10809M              1.75465          2.86862k       3.17868G          2.86097M                    4.53033                      2.5819           329.891k    7.45423k   631.515k       1.15289G/s    73.2341   9.85297k   1.22946M         1.94685   1.96022k/s 2.41001G/s     2.86124M               4.53075                2.32723        115       225.425k/s [BEST: throughput=  1.81 GB/s doc_throughput=  2868 docs/s instructions=     2860973 cycles=     1108087 branch_miss=    6991 cache_miss=    1256 cache_ref=     14417 items=       115 avg_time=    510147 ns]
distinct_user_id<sajson>/manual_time                      677014 ns       749615 ns         1034          10.285k           940.907M               0          13.5k    2.14314M              3.39365          1.48992k       3.19311G          5.81023M                    9.20046                     2.71108           171.341k    10.8724k   631.515k       889.583M/s    1.34043   13.6138k   2.15962M         3.41974   1.47708k/s 3.18992G/s     5.81023M               9.20046                2.69039        115       169.864k/s [BEST: throughput=  0.94 GB/s doc_throughput=  1489 docs/s instructions=     5810227 cycles=     2143142 branch_miss=   10285 cache_miss=       0 cache_ref=     13500 items=       115 avg_time=    677013 ns]
distinct_user_id<rapidjson>/manual_time                  2831466 ns      2905797 ns          247          30.256k           247.769M             789         23.03k    8.13767M              12.8859            392.34       3.19273G          21.8427M                    34.5877                     2.68414           45.1191k     32.384k   631.515k       212.702M/s    854.834   13.3152k   8.36661M         13.2485    353.174/s 2.95487G/s     21.8436M               34.5892                 2.6108        115        40.615k/s [BEST: throughput=  0.25 GB/s doc_throughput=   392 docs/s instructions=    21842662 cycles=     8137669 branch_miss=   30256 cache_miss=     789 cache_ref=     23030 items=       115 avg_time=   2831466 ns]
distinct_user_id<rapidjson_insitu>/manual_time           1751111 ns      1822938 ns          410          26.474k           391.888M              37        15.026k     5.1451M              8.14723           620.552        3.1928G          13.2779M                    21.0255                     2.58069           71.3635k    31.3443k   631.515k        343.93M/s   2.40028k   12.4209k   5.31216M         8.41177    571.066/s 3.03359G/s     13.2782M               21.0259                2.49958        115       65.6726k/s [BEST: throughput=  0.39 GB/s doc_throughput=   620 docs/s instructions=    13277911 cycles=     5145099 branch_miss=   26474 cache_miss=      37 cache_ref=     15026 items=       115 avg_time=   1751110 ns]
distinct_user_id<nlohmann_json>/manual_time              8817167 ns      8908200 ns           82         129.688k           75.3442M              17        97.723k    26.7328M              42.3312           119.307       3.18941G          73.6528M                    116.629                     2.75515           13.7203k    142.129k   631.515k       68.3053M/s     54.561   105.759k   28.1199M         44.5277    113.415/s 3.18922G/s     72.3135M               114.508                2.57161        115       13.0427k/s [BEST: throughput=  0.08 GB/s doc_throughput=   119 docs/s instructions=    73652790 cycles=    26732784 branch_miss=  129688 cache_miss=      17 cache_ref=     97723 items=       115 avg_time=   8817166 ns]
find_tweet<simdjson_dom>/manual_time                     1914544 ns      1991362 ns          338          38.122k           382.166M              50        30.395k    5.27613M              8.35472           605.157       3.19289G          15.2157M                    24.0939                     2.88387            605.157    67.0826k   631.515k       314.571M/s    107.654   30.5724k   6.10658M         9.66974    522.318/s 3.18958G/s     15.2157M               24.0939                2.49169          1        522.318/s [BEST: throughput=  0.38 GB/s doc_throughput=   605 docs/s instructions=    15215683 cycles=     5276129 branch_miss=   38122 cache_miss=      50 cache_ref=     30395 items=         1 avg_time=   1914544 ns]
find_tweet<simdjson_ondemand>/manual_time                1230060 ns      1295620 ns          569          30.993k           516.371M               0         7.907k    3.90507M              6.18365            817.67       3.19306G          10.1723M                    16.1078                      2.6049             817.67    31.5345k   631.515k       489.618M/s  0.0984183    7.8803k   3.92379M         6.21329    812.968/s 3.18992G/s     10.1723M               16.1078                2.59247          1        812.968/s [BEST: throughput=  0.52 GB/s doc_throughput=   817 docs/s instructions=    10172314 cycles=     3905068 branch_miss=   30993 cache_miss=       0 cache_ref=      7907 items=         1 avg_time=   1230060 ns]
find_tweet<yyjson>/manual_time                            772637 ns       859134 ns         1039           9.755k            1.4816G             201        27.323k    1.36156M              2.15602          2.34611k       3.19437G           2.8006M                    4.43473                      2.0569           2.34611k    7.46037k   631.515k       779.486M/s    338.878   20.6837k   1.50462M         2.38255   1.29427k/s 1.94738G/s     2.80128M               4.43581                1.86179          1       1.29427k/s [BEST: throughput=  1.48 GB/s doc_throughput=  2346 docs/s instructions=     2800598 cycles=     1361560 branch_miss=    9755 cache_miss=     201 cache_ref=     27323 items=         1 avg_time=    772636 ns]
find_tweet<yyjson_insitu>/manual_time                     495320 ns       560137 ns         1413           6.931k           1.86377G              83        14.438k    1082.26k              1.71375          2.95127k       3.19403G          2.80028M                    4.43422                     2.58744           2.95127k    7.19506k   631.515k        1.1874G/s     7.1097    6.3424k   1.18242M         1.87235    2.0189k/s 2.38718G/s     2.80054M               4.43464                2.36848          1        2.0189k/s [BEST: throughput=  1.86 GB/s doc_throughput=  2951 docs/s instructions=     2800276 cycles=     1082256 branch_miss=    6931 cache_miss=      83 cache_ref=     14438 items=         1 avg_time=    495319 ns]
find_tweet<sajson>/manual_time                            664997 ns       735282 ns         1053          10.223k           958.657M               4        13.129k    2.10351M              3.33089          1.51803k       3.19318G          5.71503M                    9.04972                      2.7169           1.51803k    10.6694k   631.515k       905.658M/s    7.50237   13.2089k   2.12144M         3.35929   1.50377k/s 3.19016G/s     5.71503M               9.04972                2.69393          1       1.50377k/s [BEST: throughput=  0.96 GB/s doc_throughput=  1518 docs/s instructions=     5715034 cycles=     2103510 branch_miss=   10223 cache_miss=       4 cache_ref=     13129 items=         1 avg_time=    664996 ns]
find_tweet<rapidjson>/manual_time                        2821228 ns      2889627 ns          249          29.512k           249.105M          11.95k        21.247k    8.09408M              12.8169           394.456       3.19276G          21.7591M                    34.4554                     2.68827            394.456    32.9801k   631.515k       213.474M/s    664.185   9.75748k   8.33368M         13.1963    354.456/s 2.95392G/s     21.7598M               34.4566                2.61107          1        354.456/s [BEST: throughput=  0.25 GB/s doc_throughput=   394 docs/s instructions=    21759102 cycles=     8094084 branch_miss=   29512 cache_miss=   11950 cache_ref=     21247 items=         1 avg_time=   2821228 ns]
find_tweet<rapidjson_insitu>/manual_time                 1716815 ns      1783950 ns          413          25.663k           395.321M          6.868k        13.911k    5.10037M               8.0764           625.988       3.19277G          13.1993M                     20.901                     2.58791            625.988    28.7449k   631.515k       350.801M/s   2.25733k    9.5734k   5.20594M         8.24358    582.474/s 3.03233G/s     13.1995M               20.9014                2.53547          1        582.474/s [BEST: throughput=  0.40 GB/s doc_throughput=   625 docs/s instructions=    13199274 cycles=     5100365 branch_miss=   25663 cache_miss=    6868 cache_ref=     13911 items=         1 avg_time=   1716814 ns]
find_tweet<nlohmann_json>/manual_time                    7551433 ns      7640046 ns           96         103.054k           89.1935M             949         77.12k    22.5863M              35.7653           141.237       3.19003G           63.662M                    100.808                     2.81861            141.237    116.648k   631.515k       79.7544M/s    46.5104   81.0361k   24.0836M         38.1363    132.425/s 3.18928G/s     62.3023M               98.6553                2.58692          1        132.425/s [BEST: throughput=  0.09 GB/s doc_throughput=   141 docs/s instructions=    63662021 cycles=    22586302 branch_miss=  103054 cache_miss=     949 cache_ref=     77120 items=         1 avg_time=   7551432 ns]
top_tweet<simdjson_dom>/manual_time                      1666432 ns      1747993 ns          420          38.296k           380.711M              25        32.725k    5.29619M              8.38648           602.854       3.19283G          15.2526M                    24.1523                     2.87992            602.854    38.8627k   631.515k       361.407M/s    19.6738   32.9309k   5.31546M         8.41699    600.084/s 3.18972G/s     15.2526M               24.1524                2.86947          1        600.084/s [BEST: throughput=  0.38 GB/s doc_throughput=   602 docs/s instructions=    15252571 cycles=     5296186 branch_miss=   38296 cache_miss=      25 cache_ref=     32725 items=         1 avg_time=   1666432 ns]
top_tweet<simdjson_ondemand>/manual_time                 1290502 ns      1357215 ns          542           31.86k           492.407M              15        10.277k    4.09484M              6.48416           779.723       3.19284G          10.6981M                    16.9404                     2.61258            779.723    32.4681k   631.515k       466.686M/s    15.8985   10.1958k   4.11655M         6.51853    774.892/s 3.18988G/s     10.6981M               16.9404                2.59881          1        774.892/s [BEST: throughput=  0.49 GB/s doc_throughput=   779 docs/s instructions=    10698114 cycles=     4094844 branch_miss=   31860 cache_miss=      15 cache_ref=     10277 items=         1 avg_time=   1290501 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time    1301312 ns      1368378 ns          538          32.068k           488.363M               0        10.311k    4.12899M              6.53823            773.32       3.19303G          10.9238M                    17.2978                     2.64563             773.32    32.7866k   631.515k       462.809M/s   0.197026   10.5216k   4.15116M         6.57334    768.455/s 3.18998G/s     10.9238M               17.2978                 2.6315          1        768.455/s [BEST: throughput=  0.49 GB/s doc_throughput=   773 docs/s instructions=    10923792 cycles=     4128990 branch_miss=   32068 cache_miss=       0 cache_ref=     10311 items=         1 avg_time=   1301312 ns]
top_tweet<yyjson>/manual_time                             782098 ns       871864 ns         1033           9.864k           1.46811G             256        27.435k    1.37414M              2.17595          2.32474k       3.19452G          2.82787M                    4.47791                     2.05792           2.32474k    7.54186k   631.515k       770.056M/s    398.141   22.8989k   1.53388M         2.42889   1.27861k/s 1.96124G/s     2.82855M                 4.479                1.84405          1       1.27861k/s [BEST: throughput=  1.47 GB/s doc_throughput=  2324 docs/s instructions=     2827869 cycles=     1374142 branch_miss=    9864 cache_miss=     256 cache_ref=     27435 items=         1 avg_time=    782098 ns]
top_tweet<yyjson_insitu>/manual_time                      504336 ns       575817 ns         1000           6.877k           1.83566G          1.181k        13.804k    1093.65k              1.73179          2.90676k       3.17898G          2.82776M                    4.47773                     2.58561           2.90676k    7.31321k   631.515k       1.16618G/s     55.587   8.64888k   1.21169M          1.9187   1.98281k/s 2.40255G/s     2.82802M               4.47815                2.33394          1       1.98281k/s [BEST: throughput=  1.84 GB/s doc_throughput=  2906 docs/s instructions=     2827755 cycles=     1093653 branch_miss=    6877 cache_miss=    1181 cache_ref=     13804 items=         1 avg_time=    504335 ns]
top_tweet<sajson>/manual_time                             668346 ns       742363 ns         1045          10.299k           953.639M               2        13.453k    2.11453M              3.34834          1.51008k       3.19311G          5.74503M                    9.09721                     2.71693           1.51008k    10.6969k   631.515k       901.119M/s    6.00478   13.4764k   2.13216M         3.37626   1.49623k/s  3.1902G/s     5.74503M               9.09721                2.69447          1       1.49623k/s [BEST: throughput=  0.95 GB/s doc_throughput=  1510 docs/s instructions=     5745026 cycles=     2114530 branch_miss=   10299 cache_miss=       2 cache_ref=     13453 items=         1 avg_time=    668346 ns]
top_tweet<rapidjson>/manual_time                         2834573 ns      2908097 ns          247           29.89k           247.655M         12.278k        22.034k     8.1413M              12.8917           392.161        3.1927G          21.8177M                    34.5481                     2.67987            392.161     33.327k   631.515k       212.469M/s    773.008   11.2651k    8.3776M         13.2659    352.787/s 2.95551G/s     21.8183M               34.5491                2.60436          1        352.787/s [BEST: throughput=  0.25 GB/s doc_throughput=   392 docs/s instructions=    21817656 cycles=     8141301 branch_miss=   29890 cache_miss=   12278 cache_ref=     22034 items=         1 avg_time=   2834572 ns]
top_tweet<rapidjson_insitu>/manual_time                  1755179 ns      1827714 ns          386          25.905k           389.401M             958        14.718k     5.1779M              8.19918           616.614       3.19277G          13.2537M                    20.9872                     2.55967            616.614    30.7118k   631.515k       343.133M/s   2.46211k   11.2601k   5.33439M         8.44698    569.742/s 3.03923G/s      13.254M               20.9876                2.48463          1        569.742/s [BEST: throughput=  0.39 GB/s doc_throughput=   616 docs/s instructions=    13253731 cycles=     5177904 branch_miss=   25905 cache_miss=     958 cache_ref=     14718 items=         1 avg_time=   1755179 ns]
top_tweet<nlohmann_json>/manual_time                    10602731 ns     10694023 ns           66         200.489k            60.013M              29       126.633k     33.555M              53.1342           95.0302       3.18874G          86.1863M                    136.475                     2.56851            95.0302    198.519k   631.515k       56.8023M/s    71.8333   163.552k   33.8138M         53.5439    94.3153/s 3.18916G/s     86.1147M               136.362                2.54674          1        94.3153/s [BEST: throughput=  0.06 GB/s doc_throughput=    95 docs/s instructions=    86186311 cycles=    33555028 branch_miss=  200489 cache_miss=      29 cache_ref=    126633 items=         1 avg_time=  10602731 ns]
