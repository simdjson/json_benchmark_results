run_benchmark: v0.7.0 /home/jkeiser/simdjson_benchmark_results/v0.7.0/skylake-clang11-native.json -DCMAKE_CXX_FLAGS=-march=native
git reset --hard v0.7.0
HEAD is now at cbacec07 Releasing 0.7.0.
cmake -DCMAKE_CXX_FLAGS=-march=native ..
-- The CXX compiler identification is Clang 11.0.0
-- The C compiler identification is Clang 11.0.0
-- Check for working CXX compiler: /usr/bin/clang++-11
-- Check for working CXX compiler: /usr/bin/clang++-11 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/clang-11
-- Check for working C compiler: /usr/bin/clang-11 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-cbacec07
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Success
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Success
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES -- failed to compile
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 80%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 90%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/skylake-clang11-native.json --benchmark_out_format=json
2021-01-23 04:39:12
Running benchmark/bench_ondemand
Run on (4 X 3200 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 1024 KiB (x4)
  L3 Unified 8448 KiB (x1)
Load Average: 1.08, 1.05, 0.83
***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.
On Demand implementation: haswell
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                         Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PartialTweets<OnDemand>      199204 ns       199200 ns         3518           2.007k           3.45557G               0         6.668k    583.821k             0.924477          5.47187k       3.19459G          1.85915M                    2.94394                     3.18444           547.187k    2.18263k   631.515k       2.95254G/s  0.0196134   6.71143k   590.255k        0.934664   5.02009k/s 2.96313G/s     1.85915M               2.94394                3.14973        100       502.009k/s [best: throughput=  3.46 GB/s doc_throughput=  5471 docs/s instructions=     1859145 cycles=      583821 branch_miss=    2007 cache_miss=       0 cache_ref=      6668 items=       100 avg_time=    184931 ns]
PartialTweets<Iter>          216419 ns       216413 ns         3229           3.007k           3.16911G               0         7.908k    636.412k              1.00775          5.01827k       3.19369G          1.76829M                    2.80008                     2.77853           501.827k    3.26749k   631.515k       2.71769G/s  0.0396408   7.97015k   644.623k         1.02076   4.62079k/s 2.97867G/s     1.76829M               2.80008                2.74314        100       462.079k/s [best: throughput=  3.17 GB/s doc_throughput=  5018 docs/s instructions=     1768291 cycles=      636412 branch_miss=    3007 cache_miss=       0 cache_ref=      7908 items=       100 avg_time=    201997 ns]
PartialTweets<Dom>           340067 ns       340061 ns         2074           3.697k           1.98005G               0        28.976k     1018.5k               1.6128           3.1354k       3.19342G          2.93688M                    4.65054                     2.88352            313.54k     4.0332k   631.515k       1.72953G/s     0.1027   29.0034k   1031.01k          1.6326   2.94065k/s 3.03184G/s     2.93688M               4.65054                2.84855        100       294.065k/s [best: throughput=  1.98 GB/s doc_throughput=  3135 docs/s instructions=     2936884 cycles=     1018505 branch_miss=    3697 cache_miss=       0 cache_ref=     28976 items=       100 avg_time=    323164 ns]
Creating a source file spanning 44921 KB 
LargeRandom<Dom>          101523361 ns    101519217 ns            7         900.593k           454.334M        6.81616M       6.89599M    322.816M              7.01793            9.8771       3.18849G          1019.45M                    22.1626                     3.15799            9.8771M    901.409k   45.9988M       432.114M/s   6.80353M   6.89584M   323.476M         7.03228    9.85035/s 3.18636G/s     1019.45M               22.1626                3.15155      1000k       9.85035M/s [best: throughput=  0.45 GB/s doc_throughput=     9 docs/s instructions=  1019451750 cycles=   322816251 branch_miss=  900593 cache_miss= 6816159 cache_ref=   6895991 items=   1000000 avg_time= 101493754 ns]
LargeRandomSum<Dom>       100880205 ns    100879325 ns            7         900.189k           457.211M        6.39312M       6.51992M    320.836M              6.97487           9.93964       3.18899G          1012.45M                    22.0104                     3.15567           9.93964M    900.797k   45.9988M       434.855M/s   6.43535M   6.51988M   321.568M          6.9908    9.91283/s 3.18765G/s     1012.45M               22.0104                3.14848      1000k       9.91283M/s [best: throughput=  0.46 GB/s doc_throughput=     9 docs/s instructions=  1012451748 cycles=   320835692 branch_miss=  900189 cache_miss= 6393122 cache_ref=   6519920 items=   1000000 avg_time= 100850308 ns]
LargeRandom<OnDemand>      70739725 ns     70737711 ns           10         956.997k           651.086M         3.4662M       3.57238M    225.263M              4.89715           14.1544       3.18847G          626.908M                    13.6288                       2.783           14.1544M    956.704k   45.9988M       620.148M/s   3.49571M   3.57285M   225.365M         4.89938    14.1367/s 3.18593G/s     626.908M               13.6288                2.78174      1000k       14.1367M/s [best: throughput=  0.65 GB/s doc_throughput=    14 docs/s instructions=   626907657 cycles=   225263001 branch_miss=  956997 cache_miss= 3466205 cache_ref=   3572382 items=   1000000 avg_time=  70712207 ns]
LargeRandomSum<OnDemand>   72445456 ns     72442359 ns           10         905.009k            635.76M        3.11761M       3.19695M    230.738M              5.01619           13.8212       3.18909G          622.908M                    13.5418                     2.69963           13.8212M    907.291k   45.9988M       605.555M/s   3.11912M     3.197M   230.913M         5.01999    13.8041/s 3.18754G/s     622.908M               13.5418                2.69758      1000k       13.8041M/s [best: throughput=  0.64 GB/s doc_throughput=    13 docs/s instructions=   622907844 cycles=   230738389 branch_miss=  905009 cache_miss= 3117614 cache_ref=   3196946 items=   1000000 avg_time=  72416985 ns]
LargeRandom<Iter>          67133397 ns     67132755 ns           10         942.573k           685.804M        3.51383M       3.57323M    213.896M              4.65003           14.9092       3.18901G          574.908M                    12.4983                     2.68779           14.9092M    941.657k   45.9988M       653.449M/s   3.48489M   3.57326M   213.953M         4.65128    14.8959/s 3.18701G/s     574.908M               12.4983                2.68707      1000k       14.8959M/s [best: throughput=  0.69 GB/s doc_throughput=    14 docs/s instructions=   574907630 cycles=   213895662 branch_miss=  942573 cache_miss= 3513828 cache_ref=   3573227 items=   1000000 avg_time=  67104145 ns]
LargeRandomSum<Iter>       69914375 ns     69912195 ns           10          975.75k           658.729M        3.11811M        3.1962M    222.667M              4.84072           14.3206       3.18872G          559.907M                    12.1722                     2.51455           14.3206M    977.814k   45.9988M       627.471M/s   3.11968M   3.19624M   222.811M         4.84384    14.3037/s 3.18701G/s     559.907M               12.1722                2.51293      1000k       14.3037M/s [best: throughput=  0.66 GB/s doc_throughput=    14 docs/s instructions=   559907376 cycles=   222667286 branch_miss=  975750 cache_miss= 3118106 cache_ref=   3196200 items=   1000000 avg_time=  69884559 ns]
Creating a source file spanning 134087 KB 
Kostya<Dom>               107979513 ns    107975665 ns            6            1019k           1.27315G        10.2937M       10.3174M     343.79M              2.50384           9.27239       3.18776G          971.471M                    7.07528                     2.82577           4.86141M    1019.16k   137.305M        1.1843G/s   10.2182M   10.3175M   344.137M         2.50637    9.26135/s 3.18717G/s     971.471M               7.07528                2.82292   524.288k       4.85561M/s [best: throughput=  1.27 GB/s doc_throughput=     9 docs/s instructions=   971471361 cycles=   343789947 branch_miss= 1019005 cache_miss=10293727 cache_ref=  10317389 items=    524288 avg_time= 107948021 ns]
KostyaSum<Dom>            106413217 ns    106410286 ns            7         1018.94k           1.29402G        10.0072M        10.121M    338.353M              2.46424           9.42443       3.18878G          968.326M                    7.05237                     2.86188           4.94112M    1018.85k   137.305M       1.20172G/s   10.0321M   10.1213M   339.195M         2.47038    9.39759/s 3.18761G/s     968.326M               7.05237                2.85478   524.288k       4.92704M/s [best: throughput=  1.29 GB/s doc_throughput=     9 docs/s instructions=   968325633 cycles=   338352866 branch_miss= 1018940 cache_miss=10007249 cache_ref=  10121031 items=    524288 avg_time= 106382157 ns]
Kostya<OnDemand>           66130205 ns     66129566 ns           11         457.002k           2.07858G        6.35076M       6.47022M    210.639M               1.5341           15.1384       3.18874G          619.387M                    4.51103                     2.94051           7.93688M     457.68k   137.305M       1.93371G/s    6.3867M   6.47012M   210.751M         1.53491    15.1218/s 3.18694G/s     619.387M               4.51103                2.93895   524.288k       7.92819M/s [best: throughput=  2.08 GB/s doc_throughput=    15 docs/s instructions=   619386954 cycles=   210639089 branch_miss=  457002 cache_miss= 6350757 cache_ref=   6470217 items=    524288 avg_time=  66099842 ns]
KostyaSum<OnDemand>        66113098 ns     66111024 ns           11         454.544k           2.07896G        6.17871M       6.27278M    210.584M              1.53369           15.1412       3.18849G          616.766M                    4.49194                     2.92884           7.93834M    454.793k   137.305M       1.93425G/s   6.19963M    6.2728M   210.687M         1.53445    15.1261/s 3.18687G/s     616.766M               4.49194                 2.9274   524.288k       7.93042M/s [best: throughput=  2.08 GB/s doc_throughput=    15 docs/s instructions=   616765515 cycles=   210583816 branch_miss=  454544 cache_miss= 6178707 cache_ref=   6272777 items=    524288 avg_time=  66082443 ns]
Kostya<Iter>               65377130 ns     65375231 ns           11         458.447k           2.10336G        6.41422M       6.47141M    208.085M              1.51549           15.3189       3.18763G          596.318M                    4.34302                     2.86575           8.03152M    458.321k   137.305M       1.95602G/s   6.38681M   6.47152M   208.351M         1.51743    15.2963/s   3.187G/s     596.318M               4.34302                2.86209   524.288k       8.01967M/s [best: throughput=  2.10 GB/s doc_throughput=    15 docs/s instructions=   596318124 cycles=   208084540 branch_miss=  458447 cache_miss= 6414221 cache_ref=   6471408 items=    524288 avg_time=  65347717 ns]
KostyaSum<Iter>            64107896 ns     64107312 ns           11         462.809k           2.14467G        6.17485M       6.27305M    204.132M              1.48671           15.6197       3.18849G          588.978M                    4.28956                     2.88528           8.18923M    464.306k   137.305M       1.99471G/s   6.15307M   6.27317M    204.24M         1.48749    15.5988/s 3.18591G/s     588.978M               4.28956                2.88376   524.288k       8.17829M/s [best: throughput=  2.14 GB/s doc_throughput=    15 docs/s instructions=   588978133 cycles=   204132205 branch_miss=  462809 cache_miss= 6174848 cache_ref=   6273052 items=    524288 avg_time=  64075949 ns]
DistinctUserID<Dom>          376770 ns       376762 ns         1859           4.567k            1.7821G               2        37.421k     1.1316M              1.79188          2.82195k       3.19332G          3.31661M                    5.25183                      2.9309           324.524k    4.69967k   631.515k       1.56105G/s    1.19903   37.5202k    1.1411M         1.80693   2.65419k/s  3.0287G/s     3.31661M               5.25183                 2.9065        115       305.232k/s [best: throughput=  1.78 GB/s doc_throughput=  2821 docs/s instructions=     3316612 cycles=     1131602 branch_miss=    4567 cache_miss=       2 cache_ref=     37421 items=       115 avg_time=    357667 ns]
On Demand implementation: haswell
DistinctUserID<OnDemand>     204995 ns       204993 ns         3410           1.869k           3.37987G               0         2.245k    596.687k              0.94485            5.352k       3.19347G          1.81653M                    2.87646                     3.04436            615.48k    1.99267k   631.515k       2.86909G/s   4.39883m   2.26302k   600.984k        0.951654   4.87821k/s 2.93172G/s     1.81653M               2.87646                3.02259        115       560.994k/s [best: throughput=  3.38 GB/s doc_throughput=  5352 docs/s instructions=     1816528 cycles=      596687 branch_miss=    1869 cache_miss=       0 cache_ref=      2245 items=       115 avg_time=    188323 ns]
