run_benchmark: v0.8.0~35 /home/jkeiser/simdjson_benchmark_results/v0.7.0/3/skylake-gcc10.2.json 
git reset --hard v0.8.0~35
HEAD is now at 91b07ba0 Allow build without download (#1334)
cmake ..
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- git Version: v0.2.1-91b07ba0
-- Version: 0.2.1
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 90%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/3/skylake-gcc10.2.json --benchmark_out_format=json
2021-01-23 05:10:21
Running benchmark/bench_ondemand
Run on (4 X 3200 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 1024 KiB (x4)
  L3 Unified 8448 KiB (x1)
Load Average: 1.05, 1.01, 1.00
***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.
On Demand implementation: fallback
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                         Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PartialTweets<OnDemand>     1319632 ns      1319604 ns          531           33.04k           487.113M               2         7.757k    4.13917M              6.55435           771.341       3.19271G          10.6701M                     16.896                     2.57783           77.1341k    33.5335k   631.515k       456.394M/s    2.45763   7.68245k   4.16154M         6.58978    757.803/s 3.15363G/s     10.6701M                16.896                2.56397        100       75.7803k/s [best: throughput=  0.49 GB/s doc_throughput=   771 docs/s instructions=    10670065 cycles=     4139170 branch_miss=   33040 cache_miss=       2 cache_ref=      7757 items=       100 avg_time=   1304543 ns]
PartialTweets<Dom>           320990 ns       320983 ns         2182           3.848k           2.09192G               0        31.533k    964.268k              1.52691          3.31254k       3.19418G           2.9625M                    4.69111                     3.07228           331.254k    4.01612k   631.515k       1.83232G/s   0.203483   31.6432k    971.46k          1.5383   3.11543k/s 3.02652G/s      2.9625M               4.69111                3.04954        100       311.543k/s [best: throughput=  2.09 GB/s doc_throughput=  3312 docs/s instructions=     2962504 cycles=      964268 branch_miss=    3848 cache_miss=       0 cache_ref=     31533 items=       100 avg_time=    304509 ns]
Creating a source file spanning 44921 KB 
LargeRandom<Dom>           98702027 ns     98697816 ns            7          876.94k           466.746M        6.80888M       6.89534M    314.245M               6.8316           10.1469       3.18862G          974.113M                    21.1769                     3.09985           10.1469M    875.975k   45.9988M       444.466M/s    6.7839M   6.89545M   314.611M         6.83954    10.1319/s 3.18761G/s     974.113M               21.1769                3.09625      1000k       10.1319M/s [best: throughput=  0.47 GB/s doc_throughput=    10 docs/s instructions=   974112698 cycles=   314245239 branch_miss=  876940 cache_miss= 6808881 cache_ref=   6895338 items=   1000000 avg_time=  98675302 ns]
LargeRandomSum<Dom>        98276903 ns     98276003 ns            7         876.652k           469.453M        6.40979M       6.51956M     312.43M              6.79213           10.2058       3.18859G          979.113M                    21.2856                     3.13387           10.2058M    878.398k   45.9988M       446.374M/s   6.44166M   6.51939M   313.268M         6.81035    10.1754/s 3.18763G/s     979.113M               21.2856                3.12548      1000k       10.1754M/s [best: throughput=  0.47 GB/s doc_throughput=    10 docs/s instructions=   979112710 cycles=   312429516 branch_miss=  876652 cache_miss= 6409789 cache_ref=   6519556 items=   1000000 avg_time=  98249397 ns]
LargeRandom<OnDemand>     147302109 ns    147297893 ns            5         2.36972M            312.62M        3.50484M       3.57301M    469.297M              10.2024           6.79626       3.18947G          1.25797G                     27.348                     2.68055           6.79626M    2.37711M   45.9988M       297.817M/s   3.52434M   3.57298M    469.71M         10.2113    6.78896/s 3.18884G/s     1.25797G                27.348                2.67819      1000k       6.78896M/s [best: throughput=  0.31 GB/s doc_throughput=     6 docs/s instructions=  1257973698 cycles=   469297488 branch_miss= 2369719 cache_miss= 3504837 cache_ref=   3573007 items=   1000000 avg_time= 147274291 ns]
LargeRandomSum<OnDemand>  144439911 ns    144438536 ns            5         2.39305M            318.67M        3.13261M       3.19655M    460.399M              10.0089           6.92778       3.18954G          1.22397G                    26.6088                     2.65851           6.92778M    2.39451M   45.9988M       303.713M/s   3.14066M   3.19654M   460.601M         10.0133    6.92336/s 3.18891G/s     1.22397G               26.6088                2.65734      1000k       6.92336M/s [best: throughput=  0.32 GB/s doc_throughput=     6 docs/s instructions=  1223973691 cycles=   460398968 branch_miss= 2393051 cache_miss= 3132610 cache_ref=   3196550 items=   1000000 avg_time= 144411939 ns]
Creating a source file spanning 134087 KB 
Kostya<Dom>                95262250 ns     95259287 ns            7         480.974k           1.44332G        10.2291M       10.3163M    303.332M              2.20918           10.5118       3.18855G          944.977M                    6.88232                     3.11533           5.51119M    480.774k   137.305M       1.34239G/s   10.1997M   10.3163M   303.624M         2.21131    10.4977/s 3.18734G/s     944.977M               6.88232                3.11233   524.288k        5.5038M/s [best: throughput=  1.44 GB/s doc_throughput=    10 docs/s instructions=   944977199 cycles=   303331746 branch_miss=  480974 cache_miss=10229062 cache_ref=  10316282 items=    524288 avg_time=  95233756 ns]
KostyaSum<Dom>             94450184 ns     94449296 ns            7         478.051k           1.45626G        9.95896M       10.1193M    300.636M              2.18955           10.6061       3.18856G          947.599M                    6.90141                     3.15198           5.56063M    479.505k   137.305M        1.3539G/s   10.0106M   10.1195M   301.044M         2.19252    10.5877/s 3.18736G/s     947.599M               6.90141                3.14771   524.288k         5.551M/s [best: throughput=  1.46 GB/s doc_throughput=    10 docs/s instructions=   947598653 cycles=   300636119 branch_miss=  478051 cache_miss= 9958963 cache_ref=  10119273 items=    524288 avg_time=  94420640 ns]
Kostya<OnDemand>          339732882 ns    339722265 ns            2         3.33074M           404.411M        6.43781M       6.47165M    1082.91M              7.88693           2.94535       3.18956G          2.86185G                     20.843                     2.64273           1.54421M     3.3362M   137.305M       385.445M/s   6.44842M    6.4717M   1083.46M         7.89091    2.94358/s 3.18926G/s     2.86185G                20.843                 2.6414   524.288k       1.54328M/s [best: throughput=  0.40 GB/s doc_throughput=     2 docs/s instructions=  2861852805 cycles=  1082914824 branch_miss= 3330741 cache_miss= 6437808 cache_ref=   6471654 items=    524288 avg_time= 339697919 ns]
KostyaSum<OnDemand>       340706841 ns    340689452 ns            2         3.38189M           403.091M        6.25382M       6.27381M    1086.41M              7.91239           2.93573       3.18941G          2.85923G                    20.8239                     2.63182           1.53917M    3.38202M   137.305M       384.351M/s   6.24406M   6.27377M   1086.52M         7.91319    2.93522/s 3.18918G/s     2.85923G               20.8239                2.63155   524.288k        1.5389M/s [best: throughput=  0.40 GB/s doc_throughput=     2 docs/s instructions=  2859231374 cycles=  1086410125 branch_miss= 3381889 cache_miss= 6253820 cache_ref=   6273805 items=    524288 avg_time= 340669158 ns]
DistinctUserID<Dom>          319061 ns       319052 ns         2190           4.158k           2.11747G               0        31.287k    952.562k              1.50838            3.353k       3.19394G          2.91304M                    4.61278                     3.05811           385.595k    4.31029k   631.515k       1.84341G/s  0.0789954   31.5157k   958.981k         1.51854   3.13429k/s 3.00572G/s     2.91304M               4.61278                3.03764        115       360.443k/s [best: throughput=  2.12 GB/s doc_throughput=  3353 docs/s instructions=     2913038 cycles=      952562 branch_miss=    4158 cache_miss=       0 cache_ref=     31287 items=       115 avg_time=    300597 ns]
On Demand implementation: fallback
DistinctUserID<OnDemand>    1293205 ns      1293176 ns          540          32.464k           498.985M               3         4.798k    4.04078M              6.39855            790.14       3.19278G          10.3373M                    16.3691                     2.55825           90.8661k    33.0837k   631.515k       465.721M/s    1.53333   4.84925k   4.07222M         6.44833     773.29/s 3.14901G/s     10.3373M               16.3691                 2.5385        115       88.9283k/s [best: throughput=  0.50 GB/s doc_throughput=   790 docs/s instructions=    10337348 cycles=     4040782 branch_miss=   32464 cache_miss=       3 cache_ref=      4798 items=       115 avg_time=   1276355 ns]
FindTweet<Dom>               302723 ns       302716 ns         2310           3.754k           2.24657G               0        26.717k     897.79k              1.42164          3.55743k       3.19382G          2.82293M                    4.47009                     3.14431           3.55743k    3.91536k   631.515k       1.94289G/s  0.0138528   26.9109k   904.409k         1.43213   3.30343k/s 2.98765G/s     2.82293M               4.47009                 3.1213          1       3.30343k/s [best: throughput=  2.25 GB/s doc_throughput=  3557 docs/s instructions=     2822930 cycles=      897790 branch_miss=    3754 cache_miss=       0 cache_ref=     26717 items=         1 avg_time=    283444 ns]
On Demand implementation: fallback
FindTweet<OnDemand>         1225202 ns      1225191 ns          572          31.612k             527.3M               0          2.34k    3.82393M              6.05518           834.976       3.19289G          9.73183M                    15.4103                     2.54498            834.976    32.3433k   631.515k       491.564M/s   0.263986   2.55927k    3.8543M         6.10325    816.199/s 3.14587G/s     9.73183M               15.4103                2.52493          1        816.199/s [best: throughput=  0.53 GB/s doc_throughput=   834 docs/s instructions=     9731831 cycles=     3823934 branch_miss=   31612 cache_miss=       0 cache_ref=      2340 items=         1 avg_time=   1208037 ns]
