run_benchmark: v0.8.0~35 /home/jkeiser/simdjson_benchmark_results/v0.7.0/3/skylake-gcc10.2-native.json -DCMAKE_CXX_FLAGS=-march=native
git reset --hard v0.8.0~35
HEAD is now at 91b07ba0 Allow build without download (#1334)
cmake -DCMAKE_CXX_FLAGS=-march=native ..
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- git Version: v0.2.1-91b07ba0
-- Version: 0.2.1
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 90%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/3/skylake-gcc10.2-native.json --benchmark_out_format=json
2021-01-23 05:01:05
Running benchmark/bench_ondemand
Run on (4 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 256 KiB (x4)
  L3 Unified 8192 KiB (x1)
Load Average: 1.00, 1.00, 1.00
On Demand implementation: haswell
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                         Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PartialTweets<OnDemand>      173542 ns       173541 ns         4028           1.673k           3.83783G               0        58.332k    607.598k             0.962128          6.07718k       3.69248G          2.12486M                     3.3647                     3.49715           607.718k    1.76006k   631.515k       3.38908G/s   5.46177m   58.3777k   611.026k        0.967556   5.76233k/s 3.52093G/s     2.12486M                3.3647                3.47753        100       576.233k/s [best: throughput=  3.84 GB/s doc_throughput=  6077 docs/s instructions=     2124860 cycles=      607598 branch_miss=    1673 cache_miss=       0 cache_ref=     58332 items=       100 avg_time=    165559 ns]
PartialTweets<Dom>           268248 ns       268201 ns         2611           3.777k            2.4429G               0        93.197k    954.457k              1.51138          3.86832k       3.69215G          2.91501M                    4.61589                      3.0541           386.832k    3.88157k   631.515k       2.19292G/s   0.262735   93.1581k   959.493k         1.51935   3.72855k/s 3.57751G/s     2.91501M               4.61589                3.03807        100       372.855k/s [best: throughput=  2.44 GB/s doc_throughput=  3868 docs/s instructions=     2915006 cycles=      954457 branch_miss=    3777 cache_miss=       0 cache_ref=     93197 items=       100 avg_time=    260059 ns]
Creating a source file spanning 44921 KB 
LargeRandom<Dom>           91758405 ns     91741230 ns            8         867.094k           502.871M        10.8113M       15.4031M    337.289M              7.33257           10.9323       3.68734G          972.675M                    21.1457                      2.8838           10.9323M    867.366k   45.9988M       478.169M/s    10.853M   15.4046M    338.35M         7.35562    10.9002/s 3.68809G/s     972.675M               21.1457                2.87476      1000k       10.9002M/s [best: throughput=  0.50 GB/s doc_throughput=    10 docs/s instructions=   972674943 cycles=   337289367 branch_miss=  867094 cache_miss=10811282 cache_ref=  15403121 items=   1000000 avg_time=  91744116 ns]
LargeRandomSum<Dom>        91677835 ns     91661501 ns            8         867.387k           504.441M        10.2607M       14.5583M     336.35M              7.31216           10.9664       3.68856G          977.675M                    21.2544                     2.90672           10.9664M    867.304k   45.9988M       478.585M/s   10.2724M   14.5609M   338.051M         7.34914    10.9097/s 3.68804G/s     977.675M               21.2544                2.89209      1000k       10.9097M/s [best: throughput=  0.50 GB/s doc_throughput=    10 docs/s instructions=   977674958 cycles=   336350317 branch_miss=  867387 cache_miss=10260666 cache_ref=  14558328 items=   1000000 avg_time=  91663711 ns]
LargeRandom<OnDemand>      59584979 ns     59583300 ns           12         895.068k           775.121M        5.50174M        8.0129M    218.925M              4.75937           16.8509       3.68909G          633.053M                    13.7624                     2.89164           16.8509M    894.419k   45.9988M       736.244M/s   5.57292M   8.01509M   219.312M         4.76779    16.7832/s 3.68077G/s     633.053M               13.7624                2.88653      1000k       16.7832M/s [best: throughput=  0.78 GB/s doc_throughput=    16 docs/s instructions=   633052839 cycles=   218925325 branch_miss=  895068 cache_miss= 5501745 cache_ref=   8012903 items=   1000000 avg_time=  59571851 ns]
LargeRandomSum<OnDemand>   55806385 ns     55795101 ns           13         868.439k           825.241M        4.93007M       7.14969M    205.627M              4.47027           17.9405       3.68905G          587.052M                    12.7623                     2.85494           17.9405M    868.744k   45.9988M       786.231M/s   4.98185M   7.15106M   205.764M         4.47325    17.9227/s 3.68785G/s     587.052M               12.7623                2.85304      1000k       17.9227M/s [best: throughput=  0.83 GB/s doc_throughput=    17 docs/s instructions=   587052268 cycles=   205626895 branch_miss=  868439 cache_miss= 4930067 cache_ref=   7149692 items=   1000000 avg_time=  55793843 ns]
Creating a source file spanning 134087 KB 
Kostya<Dom>                86132897 ns     86132043 ns            8         439.757k           1.59627G        15.5555M       22.2505M    317.205M              2.31022           11.6257       3.68773G          937.516M                    6.82798                     2.95556           6.09523M    439.828k   137.305M       1.48464G/s    15.579M   22.2157M   317.633M         2.31334    11.6101/s 3.68775G/s     937.516M               6.82798                2.95157   524.288k       6.08703M/s [best: throughput=  1.60 GB/s doc_throughput=    11 docs/s instructions=   937516410 cycles=   317204617 branch_miss=  439757 cache_miss=15555545 cache_ref=  22250517 items=    524288 avg_time=  86117692 ns]
KostyaSum<Dom>             85969860 ns     85953313 ns            8         439.545k           1.60448G        15.2894M       21.8049M      315.7M              2.29926           11.6855       3.68911G          940.138M                    6.84708                     2.97795           6.12656M    440.762k   137.305M       1.48773G/s   15.3135M   21.7415M   317.004M         2.30876    11.6342/s 3.68809G/s     940.138M               6.84708                 2.9657   524.288k       6.09968M/s [best: throughput=  1.60 GB/s doc_throughput=    11 docs/s instructions=   940137862 cycles=   315699619 branch_miss=  439545 cache_miss=15289446 cache_ref=  21804902 items=    524288 avg_time=  85955071 ns]
Kostya<OnDemand>           61221021 ns     61220121 ns           11         451.806k           2.24718G        9.89499M       14.0468M    225.391M              1.64154           16.3663       3.68883G          661.413M                    4.81711                     2.93451           8.58068M    451.775k   137.305M       2.08878G/s   9.93588M   13.9936M   225.756M         1.64419    16.3345/s 3.68761G/s     661.413M               4.81711                2.92977   524.288k       8.56398M/s [best: throughput=  2.25 GB/s doc_throughput=    16 docs/s instructions=   661412846 cycles=   225391301 branch_miss=  451806 cache_miss= 9894991 cache_ref=  14046806 items=    524288 avg_time=  61207558 ns]
KostyaSum<OnDemand>        61732585 ns     61717476 ns           11         459.075k           2.22739G        9.60595M        13.591M    227.397M              1.65615           16.2222       3.68888G          653.024M                    4.75601                     2.87173           8.50509M    459.274k   137.305M       2.07195G/s   9.62296M   13.5907M    227.59M         1.65755    16.2029/s 3.68761G/s     653.024M               4.75601                 2.8693   524.288k       8.49497M/s [best: throughput=  2.23 GB/s doc_throughput=    16 docs/s instructions=   653023950 cycles=   227397050 branch_miss=  459075 cache_miss= 9605946 cache_ref=  13590950 items=    524288 avg_time=  61719654 ns]
DistinctUserID<Dom>          272580 ns       272574 ns         2610           4.045k           2.40293G               0        94.223k    970.407k              1.53663          3.80503k       3.69243G          2.86553M                    4.53755                     2.95292           437.578k    4.24094k   631.515k       2.15774G/s  0.0720307   94.2418k    975.65k         1.54494   3.66873k/s  3.5794G/s     2.86553M               4.53756                2.93705        115       421.904k/s [best: throughput=  2.40 GB/s doc_throughput=  3805 docs/s instructions=     2865534 cycles=      970407 branch_miss=    4045 cache_miss=       0 cache_ref=     94223 items=       115 avg_time=    264405 ns]
On Demand implementation: haswell
DistinctUserID<OnDemand>     183949 ns       183916 ns         3803           1.632k           3.61854G               0        56.361k    644.507k              1.02057          5.72994k       3.69298G          2.08894M                    3.30782                     3.24114           658.943k     1.8132k   631.515k       3.19789G/s   0.021036   56.3745k   649.263k          1.0281   5.43726k/s 3.53021G/s     2.08894M               3.30782                 3.2174        115       625.285k/s [best: throughput=  3.62 GB/s doc_throughput=  5729 docs/s instructions=     2088936 cycles=      644507 branch_miss=    1632 cache_miss=       0 cache_ref=     56361 items=       115 avg_time=    175965 ns]
FindTweet<Dom>               258560 ns       258560 ns         2755            3.56k           2.53848G               4         83.55k    918.567k              1.45455          4.01966k       3.69233G          2.77543M                    4.39488                     3.02148           4.01966k    3.70715k   631.515k        2.2747G/s    3.04392   83.6188k   924.155k         1.46339   3.86758k/s 3.57424G/s     2.77543M               4.39488                3.00321          1       3.86758k/s [best: throughput=  2.54 GB/s doc_throughput=  4019 docs/s instructions=     2775433 cycles=      918567 branch_miss=    3560 cache_miss=       4 cache_ref=     83550 items=         1 avg_time=    250446 ns]
On Demand implementation: haswell
FindTweet<OnDemand>          127506 ns       127484 ns         5489              694            5.3036G               0        29.999k    439.751k             0.696343          8.39821k       3.69312G          1.48024M                    2.34396                      3.3661           8.39821k     734.436   631.515k       4.61349G/s   5.28329m   29.9724k   441.192k        0.698625   7.84415k/s 3.46078G/s     1.48024M               2.34396                 3.3551          1       7.84415k/s [best: throughput=  5.30 GB/s doc_throughput=  8398 docs/s instructions=     1480244 cycles=      439751 branch_miss=     694 cache_miss=       0 cache_ref=     29999 items=         1 avg_time=    119557 ns]
