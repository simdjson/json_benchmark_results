run_benchmark: v0.8.0~35 /home/jkeiser/simdjson_benchmark_results/v0.7.0/3/skylake-x-gcc10.2-native.json -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-march=native
git reset --hard v0.8.0~35
HEAD is now at 91b07ba0 Allow build without download (#1334)
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-march=native -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- git Version: v0.2.1-91b07ba0
-- Version: 0.2.1
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
make -f CMakeFiles/Makefile2 bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 10
make -f CMakeFiles/Makefile2 benchmark/CMakeFiles/bench_ondemand.dir/all
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/DependInfo.cmake --color=
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build
make[3]: Nothing to be done for '_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build'.
[ 80%] Built target benchmark
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/CMakeFiles/generated-data.dir/DependInfo.cmake --color=
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/build
make[3]: Nothing to be done for 'jsonexamples/generated/CMakeFiles/generated-data.dir/build'.
[ 80%] Built target generated-data
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/src/CMakeFiles/simdjson.dir/DependInfo.cmake --color=
Scanning dependencies of target simdjson
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/g++-10  -DSIMDJSON_THREADS_ENABLED=1 -Dsimdjson_EXPORTS -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/src  -march=native -O3 -DNDEBUG -fPIC   -pthread -fPIC -Werror -Wall -Wextra -Weffc++ -Wsign-compare -Wshadow -Wwrite-strings -Wpointer-arith -Winit-self -Wconversion -Wno-sign-conversion -std=c++17 -o CMakeFiles/simdjson.dir/simdjson.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/src/simdjson.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/simdjson.dir/link.txt --verbose=1
/usr/bin/g++-10 -fPIC -march=native -O3 -DNDEBUG  -shared -Wl,-soname,libsimdjson.so.6 -o ../libsimdjson.so.6.0.0 CMakeFiles/simdjson.dir/simdjson.cpp.o  -pthread 
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_symlink_library ../libsimdjson.so.6.0.0 ../libsimdjson.so.6 ../libsimdjson.so
[ 90%] Built target simdjson
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark/CMakeFiles/bench_ondemand.dir/DependInfo.cmake --color=
Scanning dependencies of target bench_ondemand
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/g++-10  -DSIMDJSON_BENCHMARK_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/\" -DSIMDJSON_MINEFIELD_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/minefield/\" -DSIMDJSON_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/\" -DSIMDJSON_THREADS_ENABLED=1 -DSIMDJSON_USING_LIBRARY=1 -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/. -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/linux -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native -O3 -DNDEBUG   -pthread -std=c++17 -o CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/bench_ondemand.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/cmake -E cmake_link_script CMakeFiles/bench_ondemand.dir/link.txt --verbose=1
/usr/bin/g++-10  -march=native -O3 -DNDEBUG   CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o  -o bench_ondemand  -Wl,-rpath,/home/jkeiser/simdjson_benchmark_results/simdjson/build ../libsimdjson.so.6.0.0 ../_deps/google_benchmarks/src/libbenchmark.a -pthread /usr/lib/x86_64-linux-gnu/librt.so 
[100%] Built target bench_ondemand
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 0
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/3/skylake-x-gcc10.2-native.json --benchmark_out_format=json
2021-01-24 21:31:47
Running benchmark/bench_ondemand
Run on (4 X 3200 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 1024 KiB (x4)
  L3 Unified 8448 KiB (x1)
Load Average: 1.01, 1.00, 1.00
***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.
On Demand implementation: haswell
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                         Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PartialTweets<OnDemand>      244144 ns       244125 ns         2867           2.372k            2.7718G               0         3.964k    727.583k              1.15212          4.38912k       3.19345G          2.21746M                    3.51134                     3.04771           438.912k     2.4855k   631.515k       2.40919G/s   6.62714m   4.14545k   732.196k         1.15943   4.09626k/s 2.99927G/s     2.21746M               3.51134                3.02851        100       409.626k/s [best: throughput=  2.77 GB/s doc_throughput=  4389 docs/s instructions=     2217464 cycles=      727583 branch_miss=    2372 cache_miss=       0 cache_ref=      3964 items=       100 avg_time=    229459 ns]
PartialTweets<Dom>           340742 ns       340736 ns         2052            3.66k           1.96518G               2        30.287k     1026.2k              1.62499          3.11184k       3.19338G          3.07043M                    4.86201                     2.99203           311.184k    3.85443k   631.515k        1.7261G/s    1.29678   30.7239k   1034.16k         1.63759   2.93482k/s 3.03509G/s     3.07043M               4.86201                  2.969        100       293.482k/s [best: throughput=  1.97 GB/s doc_throughput=  3111 docs/s instructions=     3070434 cycles=     1026203 branch_miss=    3660 cache_miss=       2 cache_ref=     30287 items=       100 avg_time=    324176 ns]
Creating a source file spanning 44921 KB 
LargeRandom<Dom>           98986133 ns     98976488 ns            7         851.504k           465.461M        6.78177M       6.89549M    315.059M              6.84929            10.119       3.18808G          989.581M                    21.5132                     3.14094            10.119M     851.26k   45.9988M       443.215M/s   6.80943M   6.89542M   315.487M         6.85859    10.1034/s 3.18749G/s     989.581M               21.5132                3.13668      1000k       10.1034M/s [best: throughput=  0.47 GB/s doc_throughput=    10 docs/s instructions=   989581013 cycles=   315059079 branch_miss=  851504 cache_miss= 6781775 cache_ref=   6895492 items=   1000000 avg_time=  98958602 ns]
LargeRandomSum<Dom>        98820527 ns     98817754 ns            7         851.073k           465.897M        6.42473M       6.51993M    314.795M              6.84356           10.1285       3.18839G          994.581M                    21.6219                     3.15945           10.1285M    851.194k   45.9988M       443.927M/s   6.43448M   6.51992M   314.983M         6.84764    10.1196/s 3.18752G/s     994.581M               21.6219                3.15757      1000k       10.1196M/s [best: throughput=  0.47 GB/s doc_throughput=    10 docs/s instructions=   994581028 cycles=   314795360 branch_miss=  851073 cache_miss= 6424733 cache_ref=   6519931 items=   1000000 avg_time=  98792472 ns]
LargeRandom<OnDemand>      65904460 ns     65902717 ns           11         866.679k            699.11M        3.46133M       3.57226M    209.806M              4.56113           15.1984       3.18873G          640.959M                    13.9343                       3.055           15.1984M    866.855k   45.9988M       665.646M/s   3.48393M   3.57239M   210.035M         4.56611    15.1739/s 3.18705G/s     640.959M               13.9343                3.05167      1000k       15.1739M/s [best: throughput=  0.70 GB/s doc_throughput=    15 docs/s instructions=   640958909 cycles=   209806371 branch_miss=  866679 cache_miss= 3461333 cache_ref=   3572263 items=   1000000 avg_time=  65877117 ns]
LargeRandomSum<OnDemand>   63500737 ns     63494317 ns           11         872.536k           725.827M        3.08229M       3.19625M    202.106M              4.39372           15.7793       3.18908G          594.958M                    12.9342                      2.9438           15.7793M    873.037k   45.9988M       690.894M/s   3.11982M    3.1963M   202.376M         4.39961    15.7494/s 3.18732G/s     594.958M               12.9342                2.93986      1000k       15.7494M/s [best: throughput=  0.73 GB/s doc_throughput=    15 docs/s instructions=   594958338 cycles=   202105632 branch_miss=  872536 cache_miss= 3082289 cache_ref=   3196252 items=   1000000 avg_time=  63473792 ns]
Creating a source file spanning 134087 KB 
Kostya<Dom>                99002744 ns     99001810 ns            7         449.219k           1.39038G        10.1432M       10.3148M    314.857M              2.29312           10.1262        3.1883G          972.126M                    7.08005                     3.08752           5.30905M    449.231k   137.305M       1.29165G/s   10.2074M   10.3147M   315.521M         2.29795    10.1008/s 3.18702G/s     972.126M               7.08005                3.08102   524.288k       5.29574M/s [best: throughput=  1.39 GB/s doc_throughput=    10 docs/s instructions=   972125798 cycles=   314856634 branch_miss=  449219 cache_miss=10143168 cache_ref=  10314807 items=    524288 avg_time=  98972486 ns]
KostyaSum<Dom>             98320744 ns     98311005 ns            7         447.595k            1.3989G        9.94792M       10.1184M    312.834M              2.27839           10.1882       3.18723G          974.747M                    7.09914                     3.11586           5.34158M    448.005k   137.305M       1.30072G/s   10.0194M   10.1181M   313.314M         2.28189    10.1718/s 3.18697G/s     974.747M               7.09914                3.11108   524.288k       5.33295M/s [best: throughput=  1.40 GB/s doc_throughput=    10 docs/s instructions=   974747256 cycles=   312834188 branch_miss=  447595 cache_miss= 9947923 cache_ref=  10118366 items=    524288 avg_time=  98290823 ns]
Kostya<OnDemand>           70462251 ns     70461584 ns           10         459.711k           1.95409G        6.32695M       6.47077M    224.059M              1.63183           14.2318       3.18875G          685.012M                    4.98898                     3.05729           7.46154M    460.764k   137.305M       1.81482G/s   6.37752M   6.47106M   224.561M         1.63549    14.1921/s   3.187G/s     685.012M               4.98898                3.05045   524.288k       7.44076M/s [best: throughput=  1.95 GB/s doc_throughput=    14 docs/s instructions=   685012177 cycles=   224058914 branch_miss=  459711 cache_miss= 6326947 cache_ref=   6470767 items=    524288 avg_time=  70432922 ns]
KostyaSum<OnDemand>        69531681 ns     69529534 ns           10         483.827k           1.97755G        6.19153M       6.27339M    221.395M              1.61243           14.4026       3.18866G          676.623M                    4.92789                     3.05619           7.55112M    483.908k   137.305M       1.83915G/s    6.1972M    6.2734M   221.586M         1.61383    14.3824/s 3.18694G/s     676.623M               4.92789                3.05354   524.288k       7.54051M/s [best: throughput=  1.98 GB/s doc_throughput=    14 docs/s instructions=   676623278 cycles=   221394528 branch_miss=  483827 cache_miss= 6191533 cache_ref=   6273386 items=    524288 avg_time=  69502414 ns]
DistinctUserID<Dom>          341438 ns       341430 ns         2016           3.956k           1.97505G               3        30.023k    1021.09k              1.61689          3.12748k       3.19344G          3.02096M                    4.78367                     2.95857            359.66k    4.13955k   631.515k       1.72259G/s    2.93651   30.4542k   1029.29k         1.62988   2.92886k/s 3.01465G/s     3.02096M               4.78367                2.93499        115       336.819k/s [best: throughput=  1.98 GB/s doc_throughput=  3127 docs/s instructions=     3020962 cycles=     1021090 branch_miss=    3956 cache_miss=       3 cache_ref=     30023 items=       115 avg_time=    322638 ns]
On Demand implementation: haswell
DistinctUserID<OnDemand>     234764 ns       234760 ns         3001            2.04k           2.91288G               0         2.489k     692.36k              1.09635          4.61252k       3.19353G          2.17925M                    3.45083                     3.14757            530.44k    2.21065k   631.515k        2.5053G/s   999.667u   2.47912k   697.265k         1.10412   4.25967k/s 2.97012G/s     2.17925M               3.45083                3.12543        115       489.862k/s [best: throughput=  2.91 GB/s doc_throughput=  4612 docs/s instructions=     2179253 cycles=      692360 branch_miss=    2040 cache_miss=       0 cache_ref=      2489 items=       115 avg_time=    218487 ns]
FindTweet<Dom>               330479 ns       330470 ns         2119           3.585k            2.0423G               1          25.6k    987.473k              1.56366          3.23397k       3.19346G          2.93086M                      4.641                     2.96804           3.23397k    3.72117k   631.515k       1.77972G/s    1.61822   25.4401k     993.2k         1.57273   3.02599k/s 3.00541G/s     2.93086M                 4.641                2.95093          1       3.02599k/s [best: throughput=  2.04 GB/s doc_throughput=  3233 docs/s instructions=     2930861 cycles=      987473 branch_miss=    3585 cache_miss=       1 cache_ref=     25600 items=         1 avg_time=    311321 ns]
On Demand implementation: haswell
FindTweet<OnDemand>          168091 ns       168089 ns         4163           1.224k           4.17738G               0         1.591k    482.913k              0.76469          6.61485k        3.1944G          1.57077M                     2.4873                      3.2527           6.61485k    1.26725k   631.515k         3.499G/s   1.68148m   1.60039k   485.198k        0.768308   5.94922k/s 2.88655G/s     1.57077M                2.4873                3.23738          1       5.94922k/s [best: throughput=  4.18 GB/s doc_throughput=  6614 docs/s instructions=     1570770 cycles=      482913 branch_miss=    1224 cache_miss=       0 cache_ref=      1591 items=         1 avg_time=    151987 ns]
