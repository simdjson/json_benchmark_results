run_benchmark: v0.8.0~24 /home/jkeiser/simdjson_benchmark_results/v0.7.0/14/skylake-gcc10.2-native.json -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-march=native
git reset --hard v0.8.0~24
HEAD is now at 0314889c Merge pull request #1357 from simdjson/jkeiser/ondemand-quickstart
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-march=native -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- git Version: v0.2.1-0314889c
-- Version: 0.2.1
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
make -f CMakeFiles/Makefile2 bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 8
make -f CMakeFiles/Makefile2 benchmark/CMakeFiles/bench_ondemand.dir/all
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/DependInfo.cmake --color=
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build
make[3]: Nothing to be done for '_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build'.
[ 87%] Built target benchmark
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/CMakeFiles/generated-data.dir/DependInfo.cmake --color=
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/build
make[3]: Nothing to be done for 'jsonexamples/generated/CMakeFiles/generated-data.dir/build'.
[ 87%] Built target generated-data
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/src/CMakeFiles/simdjson.dir/DependInfo.cmake --color=
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/build
make[3]: Nothing to be done for 'src/CMakeFiles/simdjson.dir/build'.
[ 87%] Built target simdjson
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark/CMakeFiles/bench_ondemand.dir/DependInfo.cmake --color=
Scanning dependencies of target bench_ondemand
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/g++-10  -DSIMDJSON_BENCHMARK_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/\" -DSIMDJSON_MINEFIELD_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/minefield/\" -DSIMDJSON_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/\" -DSIMDJSON_THREADS_ENABLED=1 -DSIMDJSON_USING_LIBRARY=1 -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/. -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/linux -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native -O3 -DNDEBUG   -pthread -std=c++17 -o CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/bench_ondemand.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/cmake -E cmake_link_script CMakeFiles/bench_ondemand.dir/link.txt --verbose=1
/usr/bin/g++-10  -march=native -O3 -DNDEBUG   CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o  -o bench_ondemand  -Wl,-rpath,/home/jkeiser/simdjson_benchmark_results/simdjson/build ../libsimdjson.so.6.0.0 ../_deps/google_benchmarks/src/libbenchmark.a -pthread /usr/lib/x86_64-linux-gnu/librt.so 
[100%] Built target bench_ondemand
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 0
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/14/skylake-gcc10.2-native.json --benchmark_out_format=json
2021-01-25 02:18:53
Running benchmark/bench_ondemand
Run on (4 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 256 KiB (x4)
  L3 Unified 8192 KiB (x1)
Load Average: 1.00, 1.00, 0.97
On Demand implementation: haswell
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                               Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PartialTweets<OnDemand>            190231 ns       190230 ns         3681           1.651k            3.4909G               0        54.442k    667.994k              1.05776          5.52782k       3.69255G          2.14687M                    3.39955                      3.2139           552.782k    1.81444k   631.515k       3.09175G/s   1.62999m   54.3993k   672.916k         1.06556   5.25679k/s 3.53738G/s     2.14687M               3.39955                3.19039        100       525.679k/s [best: throughput=  3.49 GB/s doc_throughput=  5527 docs/s instructions=     2146868 cycles=      667994 branch_miss=    1651 cache_miss=       0 cache_ref=     54442 items=       100 avg_time=    182338 ns]
PartialTweets<Dom>                 268800 ns       268802 ns         2603           3.647k           2.43807G               0        86.993k     956.38k              1.51442          3.86068k       3.69227G          2.91501M                    4.61589                     3.04796           386.068k    3.78678k   631.515k       2.18802G/s   0.257395   87.0784k   962.036k         1.52338   3.72021k/s 3.57898G/s     2.91501M               4.61589                3.03004        100       372.021k/s [best: throughput=  2.44 GB/s doc_throughput=  3860 docs/s instructions=     2915006 cycles=      956380 branch_miss=    3647 cache_miss=       0 cache_ref=     86993 items=       100 avg_time=    260686 ns]
Creating a source file spanning 44921 KB 
LargeRandom<Dom>                 91942678 ns     91943198 ns            8          872.69k           500.922M        10.9146M       15.2303M     338.75M              7.36432           10.8899       3.68895G          972.675M                    21.1457                     2.87137           10.8899M    872.432k   45.9988M       477.119M/s   10.9289M   15.2292M   339.109M         7.37214    10.8763/s 3.68825G/s     972.675M               21.1457                2.86832      1000k       10.8763M/s [best: throughput=  0.50 GB/s doc_throughput=    10 docs/s instructions=   972674943 cycles=   338749679 branch_miss=  872690 cache_miss=10914592 cache_ref=  15230297 items=   1000000 avg_time=  91928739 ns]
LargeRandom<OnDemand>            58223553 ns     58223912 ns           12         863.035k           790.925M        5.54666M       7.88683M    214.542M              4.66409           17.1945       3.68895G          644.053M                    14.0015                     3.00198           17.1945M    863.115k   45.9988M       753.434M/s   5.62514M   7.88875M   214.719M         4.66793    17.1751/s 3.68781G/s     644.053M               14.0015                2.99951      1000k       17.1751M/s [best: throughput=  0.79 GB/s doc_throughput=    17 docs/s instructions=   644052562 cycles=   214542499 branch_miss=  863035 cache_miss= 5546659 cache_ref=   7886829 items=   1000000 avg_time=  58210044 ns]
LargeRandom<OnDemandUnordered>   62408157 ns     62408540 ns           11           865.4k           737.746M        5.57611M        7.8871M    230.014M              5.00044           16.0384       3.68905G          648.053M                    14.0885                     2.81745           16.0384M    866.985k   45.9988M       702.914M/s   5.60729M   7.88873M   230.169M          5.0038    16.0234/s  3.6881G/s     648.053M               14.0885                2.81555      1000k       16.0234M/s [best: throughput=  0.74 GB/s doc_throughput=    16 docs/s instructions=   648052565 cycles=   230014002 branch_miss=  865400 cache_miss= 5576111 cache_ref=   7887097 items=   1000000 avg_time=  62395928 ns]
Creating a source file spanning 134087 KB 
Kostya<Dom>                      86146509 ns     86147011 ns            8         439.957k           1.59634G        15.6718M       21.9969M    317.277M              2.31075           11.6263       3.68875G          937.516M                    6.82798                     2.95488           6.09551M    441.153k   137.305M       1.48438G/s    15.732M   22.0746M   317.698M         2.31381    11.6081/s 3.68786G/s     937.516M               6.82798                2.95097   524.288k       6.08597M/s [best: throughput=  1.60 GB/s doc_throughput=    11 docs/s instructions=   937516413 cycles=   317277318 branch_miss=  439957 cache_miss=15671779 cache_ref=  21996939 items=    524288 avg_time=  86131719 ns]
KostyaSum<Dom>                   86131038 ns     86131577 ns            8         440.287k           1.59732G        15.4354M       21.6033M    317.093M               2.3094           11.6334       3.68886G          940.138M                    6.84708                     2.96487           6.09924M    440.515k   137.305M       1.48465G/s   15.4524M    21.635M   317.658M         2.31352    11.6101/s 3.68805G/s     940.138M               6.84708                2.95959   524.288k       6.08706M/s [best: throughput=  1.60 GB/s doc_throughput=    11 docs/s instructions=   940137866 cycles=   317092667 branch_miss=  440287 cache_miss=15435357 cache_ref=  21603266 items=    524288 avg_time=  86116788 ns]
Kostya<OnDemand>                 63448463 ns     63447872 ns           11          453.16k            2.1663G         9.9984M        13.948M    233.818M              1.70291           15.7773       3.68902G          687.627M                    5.00803                     2.94086           8.27185M    453.294k   137.305M       2.01544G/s   10.0199M    13.948M   234.005M         1.70427     15.761/s 3.68815G/s     687.627M               5.00803                2.93851   524.288k       8.26329M/s [best: throughput=  2.17 GB/s doc_throughput=    15 docs/s instructions=   687627124 cycles=   233818333 branch_miss=  453160 cache_miss= 9998403 cache_ref=  13947960 items=    524288 avg_time=  63434920 ns]
KostyaSum<OnDemand>              62710202 ns     62710601 ns           11         452.714k           2.19387G        9.68483M       13.4831M    230.885M              1.68155           15.9781        3.6891G          684.481M                    4.98512                     2.96459            8.3771M    452.502k   137.305M       2.03913G/s   9.69862M   13.4337M   231.287M         1.68448    15.9463/s 3.68817G/s     684.481M               4.98512                2.95944   524.288k       8.36044M/s [best: throughput=  2.19 GB/s doc_throughput=    15 docs/s instructions=   684481392 cycles=   230885310 branch_miss=  452714 cache_miss= 9684827 cache_ref=  13483119 items=    524288 avg_time=  62697136 ns]
DistinctUserID<Dom>                265060 ns       265062 ns         2587           3.917k           2.47407G               0        88.486k    942.429k              1.49233          3.91768k       3.69214G          2.86553M                    4.53755                     3.04058           450.533k    4.11407k   631.515k        2.2189G/s  0.0827213   88.4142k   948.201k         1.50147   3.77271k/s 3.57729G/s     2.86553M               4.53756                3.02207        115       433.861k/s [best: throughput=  2.47 GB/s doc_throughput=  3917 docs/s instructions=     2865534 cycles=      942429 branch_miss=    3917 cache_miss=       0 cache_ref=     88486 items=       115 avg_time=    256940 ns]
On Demand implementation: haswell
DistinctUserID<OnDemand>           185277 ns       185278 ns         3859           1.703k           3.59416G               0        53.357k    648.777k              1.02733          5.69133k        3.6924G          2.11376M                    3.34713                     3.25807           654.502k    1.87853k   631.515k       3.17438G/s  0.0580461   53.3909k   654.559k         1.03649   5.39728k/s 3.53284G/s     2.11376M               3.34713                3.22929        115       620.688k/s [best: throughput=  3.59 GB/s doc_throughput=  5691 docs/s instructions=     2113763 cycles=      648777 branch_miss=    1703 cache_miss=       0 cache_ref=     53357 items=       115 avg_time=    177358 ns]
FindTweet<Dom>                     256620 ns       256613 ns         2769           3.418k           2.55879G               0        83.484k     911.21k               1.4429          4.05183k       3.69207G          2.77501M                    4.39422                     3.04542           4.05183k    3.59131k   631.515k       2.29195G/s   0.341278   83.6509k   916.917k         1.45193   3.89692k/s 3.57315G/s     2.77501M               4.39422                3.02646          1       3.89692k/s [best: throughput=  2.56 GB/s doc_throughput=  4051 docs/s instructions=     2775014 cycles=      911210 branch_miss=    3418 cache_miss=       0 cache_ref=     83484 items=         1 avg_time=    248498 ns]
On Demand implementation: haswell
FindTweet<OnDemand>                127427 ns       127403 ns         5496              715           5.30899G               0        29.785k    439.332k             0.695679          8.40675k       3.69336G          1.48077M                    2.34479                      3.3705           8.40675k      762.67   631.515k        4.6164G/s   8.00582m    29.967k   441.079k        0.698446   7.84909k/s 3.46207G/s     1.48077M               2.34479                3.35714          1       7.84909k/s [best: throughput=  5.31 GB/s doc_throughput=  8406 docs/s instructions=     1480767 cycles=      439332 branch_miss=     715 cache_miss=       0 cache_ref=     29785 items=         1 avg_time=    119523 ns]
