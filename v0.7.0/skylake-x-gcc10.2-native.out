run_benchmark: v0.7.0 /home/jkeiser/simdjson_benchmark_results/v0.7.0/skylake-gcc10.2-native.json -DCMAKE_CXX_FLAGS=-march=native
git reset --hard v0.7.0
HEAD is now at cbacec07 Releasing 0.7.0.
cmake -DCMAKE_CXX_FLAGS=-march=native ..
-- The CXX compiler identification is GNU 10.2.0
-- The C compiler identification is GNU 10.2.0
-- Check for working CXX compiler: /usr/bin/g++-10
-- Check for working CXX compiler: /usr/bin/g++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/gcc-10
-- Check for working C compiler: /usr/bin/gcc-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-cbacec07
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Failed
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Failed
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 80%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 90%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/skylake-gcc10.2-native.json --benchmark_out_format=json
2021-01-23 04:42:13
Running benchmark/bench_ondemand
Run on (4 X 3200 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 1024 KiB (x4)
  L3 Unified 8448 KiB (x1)
Load Average: 1.01, 1.03, 0.87
***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.
On Demand implementation: haswell
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                         Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PartialTweets<OnDemand>      235270 ns       235267 ns         2977           2.493k           2.87942G               0         5.568k    700.364k              1.10902          4.55955k       3.19334G          2.20449M                     3.4908                     3.14764           455.955k     2.5401k   631.515k        2.4999G/s   0.270742   5.59811k   704.271k         1.11521   4.25048k/s 2.99349G/s     2.20449M                3.4908                3.13018        100       425.048k/s [best: throughput=  2.88 GB/s doc_throughput=  4559 docs/s instructions=     2204493 cycles=      700364 branch_miss=    2493 cache_miss=       0 cache_ref=      5568 items=       100 avg_time=    220710 ns]
PartialTweets<Iter>          494122 ns       494112 ns         1417           3.961k           1.32631G               0         2.513k    1.52034M              2.40746           2.1002k       3.19302G          4.32972M                    6.85608                     2.84785            210.02k    4.16919k   631.515k       1.19031G/s   2.82287m   2.66804k    1.5289M         2.42101   2.02383k/s 3.09424G/s     4.32972M               6.85608                2.83191        100       202.383k/s [best: throughput=  1.33 GB/s doc_throughput=  2100 docs/s instructions=     4329716 cycles=     1520344 branch_miss=    3961 cache_miss=       0 cache_ref=      2513 items=       100 avg_time=    479197 ns]
PartialTweets<Dom>           338333 ns       338325 ns         2070            3.74k           1.98355G               4        32.495k    1016.64k              1.60984          3.14094k       3.19321G          3.07043M                    4.86201                     3.02018           314.094k    3.93685k   631.515k        1.7384G/s    3.10531   32.5934k   1025.61k         1.62404   2.95574k/s 3.03143G/s     3.07043M               4.86201                2.99377        100       295.574k/s [best: throughput=  1.98 GB/s doc_throughput=  3140 docs/s instructions=     3070434 cycles=     1016640 branch_miss=    3740 cache_miss=       4 cache_ref=     32495 items=       100 avg_time=    321492 ns]
Creating a source file spanning 44921 KB 
LargeRandom<Dom>           97721259 ns     97720375 ns            7         850.582k           471.904M        6.74084M       6.89585M    310.811M              6.75695           10.2591       3.18863G          989.581M                    21.5132                     3.18387           10.2591M    851.004k   45.9988M       448.912M/s   6.79937M   6.89571M   311.498M         6.77188    10.2333/s 3.18765G/s     989.581M               21.5132                3.17684      1000k       10.2333M/s [best: throughput=  0.47 GB/s doc_throughput=    10 docs/s instructions=   989581014 cycles=   310811219 branch_miss=  850582 cache_miss= 6740837 cache_ref=   6895846 items=   1000000 avg_time=  97692603 ns]
LargeRandomSum<Dom>        98165668 ns     98162000 ns            7         852.222k           469.818M        6.41501M       6.51889M    312.209M              6.78732           10.2137       3.18881G          994.581M                    21.6219                     3.18563           10.2137M    853.434k   45.9988M       446.892M/s   6.39632M   6.51905M   312.903M         6.80241    10.1872/s 3.18761G/s     994.581M               21.6219                3.17856      1000k       10.1872M/s [best: throughput=  0.47 GB/s doc_throughput=    10 docs/s instructions=   994581027 cycles=   312208581 branch_miss=  852222 cache_miss= 6415010 cache_ref=   6518893 items=   1000000 avg_time=  98136755 ns]
LargeRandom<OnDemand>      65499295 ns     65498658 ns           11         870.774k           703.593M        3.44591M       3.57262M    208.451M              4.53167           15.2959       3.18845G          641.959M                     13.956                     3.07966           15.2959M    870.778k   45.9988M       669.752M/s   3.48106M   3.57263M   208.764M         4.53848    15.2675/s 3.18731G/s     641.959M                13.956                3.07504      1000k       15.2675M/s [best: throughput=  0.70 GB/s doc_throughput=    15 docs/s instructions=   641958637 cycles=   208451162 branch_miss=  870774 cache_miss= 3445905 cache_ref=   3572623 items=   1000000 avg_time=  65471945 ns]
LargeRandomSum<OnDemand>   66854546 ns     66853902 ns           10         868.916k           689.435M        3.11806M       3.19638M    212.748M              4.62508           14.9881       3.18869G          634.959M                    13.8038                     2.98456           14.9881M    868.389k   45.9988M       656.175M/s   3.12971M   3.19635M   213.094M         4.63259     14.958/s 3.18745G/s     634.959M               13.8038                2.97972      1000k        14.958M/s [best: throughput=  0.69 GB/s doc_throughput=    14 docs/s instructions=   634958637 cycles=   212747835 branch_miss=  868916 cache_miss= 3118055 cache_ref=   3196383 items=   1000000 avg_time=  66826353 ns]
LargeRandom<Iter>          63804202 ns     63801876 ns           11         890.911k           721.866M         3.5112M       3.57226M    203.211M              4.41776           15.6931       3.18903G          578.958M                    12.5864                     2.84904           15.6931M    889.236k   45.9988M       687.564M/s   3.48355M   3.57233M   203.345M         4.42067    15.6735/s 3.18714G/s     578.958M               12.5864                2.84717      1000k       15.6735M/s [best: throughput=  0.72 GB/s doc_throughput=    15 docs/s instructions=   578958330 cycles=   203211497 branch_miss=  890911 cache_miss= 3511205 cache_ref=   3572259 items=   1000000 avg_time=  63775101 ns]
LargeRandomSum<Iter>       62024954 ns     62022505 ns           11         871.419k           743.399M        3.09258M       3.19595M     197.31M              4.28947           16.1613       3.18878G          588.959M                    12.8038                     2.98494           16.1613M    871.745k   45.9988M       707.289M/s   3.12253M   3.19598M   197.674M         4.29738    16.1232/s 3.18714G/s     588.959M               12.8038                2.97944      1000k       16.1232M/s [best: throughput=  0.74 GB/s doc_throughput=    16 docs/s instructions=   588958629 cycles=   197310213 branch_miss=  871419 cache_miss= 3092578 cache_ref=   3195949 items=   1000000 avg_time=  61996100 ns]
Creating a source file spanning 134087 KB 
Kostya<Dom>                97527193 ns     97523889 ns            7         482.074k           1.41097G        10.1466M       10.3149M    310.287M              2.25984           10.2762       3.18857G          972.126M                    7.08005                     3.13299           5.38769M    481.907k   137.305M       1.31122G/s   10.2049M   10.3148M   310.841M         2.26387    10.2539/s 3.18733G/s     972.126M               7.08005                3.12741   524.288k         5.376M/s [best: throughput=  1.41 GB/s doc_throughput=    10 docs/s instructions=   972125805 cycles=   310286820 branch_miss=  482074 cache_miss=10146622 cache_ref=  10314912 items=    524288 avg_time=  97495864 ns]
KostyaSum<Dom>             96682657 ns     96679095 ns            7         481.068k           1.42256G        9.99523M       10.1179M    307.734M              2.24125           10.3606       3.18831G          974.747M                    7.09914                     3.16749           5.43194M    481.144k   137.305M       1.32268G/s   10.0211M   10.1179M   308.131M         2.24414    10.3435/s 3.18715G/s     974.747M               7.09914                3.16342   524.288k       5.42297M/s [best: throughput=  1.42 GB/s doc_throughput=    10 docs/s instructions=   974747259 cycles=   307734454 branch_miss=  481068 cache_miss= 9995232 cache_ref=  10117943 items=    524288 avg_time=  96651127 ns]
Kostya<OnDemand>           68927345 ns     68926715 ns           10         462.119k           1.99416G        6.36039M       6.47044M    219.544M              1.59895           14.5236       3.18855G          679.769M                     4.9508                     3.09628           7.61453M    461.988k   137.305M       1.85523G/s   6.38628M   6.47036M   219.665M         1.59983    14.5082/s 3.18694G/s     679.769M                4.9508                3.09457   524.288k       7.60646M/s [best: throughput=  1.99 GB/s doc_throughput=    14 docs/s instructions=   679769176 cycles=   219543611 branch_miss=  462119 cache_miss= 6360387 cache_ref=   6470442 items=    524288 avg_time=  68896546 ns]
KostyaSum<OnDemand>        68411483 ns     68408894 ns           10         464.315k           2.01078G        6.17519M       6.27292M    217.733M              1.58576           14.6446       3.18862G          675.575M                    4.92025                     3.10277           7.67801M    464.319k   137.305M       1.86928G/s   6.19422M   6.27295M   218.019M         1.58784     14.618/s   3.187G/s     675.575M               4.92025                 3.0987   524.288k       7.66403M/s [best: throughput=  2.01 GB/s doc_throughput=    14 docs/s instructions=   675575020 cycles=   217732551 branch_miss=  464315 cache_miss= 6175186 cache_ref=   6272915 items=    524288 avg_time=  68381517 ns]
Kostya<Iter>               68796063 ns     68793314 ns           10         472.829k           1.99777G        6.34796M       6.47035M     219.16M              1.59615           14.5498       3.18874G          664.041M                    4.83625                     3.02994           7.62831M    473.609k   137.305M       1.85883G/s   6.38189M   6.47033M   219.249M          1.5968    14.5363/s 3.18707G/s     664.041M               4.83625                3.02871   524.288k       7.62121M/s [best: throughput=  2.00 GB/s doc_throughput=    14 docs/s instructions=   664040641 cycles=   219159850 branch_miss=  472829 cache_miss= 6347960 cache_ref=   6470346 items=    524288 avg_time=  68764633 ns]
KostyaSum<Iter>           145170990 ns    145169653 ns            5         482.494k           946.767M        6.19946M       6.27423M    462.484M               3.3683           6.89535       3.18899G          1.29004G                    9.39544                     2.78937           3.61515M    484.863k   137.305M       902.008M/s    6.2067M   6.27448M   462.825M         3.37078    6.88849/s 3.18817G/s     1.29004G               9.39544                2.78732   524.288k       3.61155M/s [best: throughput=  0.95 GB/s doc_throughput=     6 docs/s instructions=  1290040168 cycles=   462484492 branch_miss=  482494 cache_miss= 6199459 cache_ref=   6274226 items=    524288 avg_time= 145138906 ns]
DistinctUserID<Dom>          372242 ns       372239 ns         1882           4.619k           1.80685G               0        38.855k    1.11609M              1.76732          2.86114k       3.19329G          3.38813M                    5.36508                     3.03571           329.031k    4.86601k   631.515k       1.58002G/s   0.300744   38.8765k   1.12464M         1.78085   2.68645k/s 3.02127G/s     3.38813M               5.36508                3.01265        115       308.941k/s [best: throughput=  1.81 GB/s doc_throughput=  2861 docs/s instructions=     3388128 cycles=     1116090 branch_miss=    4619 cache_miss=       0 cache_ref=     38855 items=       115 avg_time=    352561 ns]
On Demand implementation: haswell
DistinctUserID<OnDemand>     223648 ns       223646 ns         3135            2.31k           3.11527G               2         3.509k     647.31k              1.02501          4.93301k       3.19319G          2.16115M                    3.42217                     3.33866           567.296k    2.42727k   631.515k        2.6298G/s    1.82967   3.57863k   660.272k         1.04554   4.47135k/s 2.95231G/s     2.16115M               3.42217                3.27312        115       514.205k/s [best: throughput=  3.12 GB/s doc_throughput=  4933 docs/s instructions=     2161151 cycles=      647310 branch_miss=    2310 cache_miss=       2 cache_ref=      3509 items=       115 avg_time=    206901 ns]
