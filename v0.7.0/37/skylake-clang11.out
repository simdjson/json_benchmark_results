run_benchmark: v0.8.0~1 /home/jkeiser/simdjson_benchmark_results/v0.7.0/37/skylake-clang11.json 
git reset --hard v0.8.0~1
HEAD is now at 1005c62e It seems that we export too many targets. (#1385)
cmake ..
-- The CXX compiler identification is Clang 11.0.0
-- The C compiler identification is Clang 11.0.0
-- Check for working CXX compiler: /usr/bin/clang++-11
-- Check for working CXX compiler: /usr/bin/clang++-11 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/clang-11
-- Check for working C compiler: /usr/bin/clang-11 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-1005c62e
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Success
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Success
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES -- failed to compile
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/37/skylake-clang11.json --benchmark_out_format=json
2021-01-23 04:28:38
Running benchmark/bench_ondemand
Run on (4 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 256 KiB (x4)
  L3 Unified 8192 KiB (x1)
Load Average: 1.00, 0.96, 0.76
simdjson::dom implementation:      haswell
simdjson::ondemand implementation: fallback

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                  275560 ns       303846 ns         2598           3.365k           2.30621G               0        87.601k    1011.16k              1.60117          3.65187k       3.69265G           2.9828M                    4.72325                     2.94987           365.187k    3.51403k   631.515k       2.13436G/s   0.546189   87.7039k   1017.01k         1.61044   3.62898k/s 3.69072G/s      2.9828M               4.72325                 2.9329        100       362.898k/s [BEST: throughput=  2.31 GB/s doc_throughput=  3651 docs/s instructions=     2982801 cycles=     1011165 branch_miss=    3365 cache_miss=       0 cache_ref=     87601 items=       100 avg_time=    275559 ns]
partial_tweets<simdjson_ondemand>/manual_time             201394 ns       229380 ns         3476           2.066k           3.16183G               0        55.551k    737.602k              1.16799          5.00673k       3.69298G          2.26558M                    3.58753                     3.07154           500.673k    2.26002k   631.515k       2.92037G/s  0.0362486   55.5901k   743.406k         1.17718   4.96539k/s  3.6913G/s     2.26558M               3.58753                3.04756        100       496.539k/s [BEST: throughput=  3.16 GB/s doc_throughput=  5006 docs/s instructions=     2265576 cycles=      737602 branch_miss=    2066 cache_miss=       0 cache_ref=     55551 items=       100 avg_time=    201393 ns]
partial_tweets<yyjson>/manual_time                        646784 ns       677048 ns         1086           9.946k           1.71572G             141        75.333k    1.32203M              2.09343          2.71684k       3.59175G           2.9199M                    4.62365                     2.20864           271.684k     7.4829k   631.515k       931.161M/s    915.088   49.4654k   1.52728M         2.41845   1.54611k/s 2.36135G/s      2.9206M               4.62474                1.91228        100       154.611k/s [BEST: throughput=  1.72 GB/s doc_throughput=  2716 docs/s instructions=     2919903 cycles=     1322034 branch_miss=    9946 cache_miss=     141 cache_ref=     75333 items=       100 avg_time=    646783 ns]
partial_tweets<yyjson_insitu>/manual_time                 433065 ns       462119 ns         1617           6.954k           1.99382G             574        45.448k    1.15684M              1.83185          3.15719k       3.65237G           2.9198M                    4.62348                     2.52394           315.719k     7.3196k   631.515k        1.3581G/s    162.667    31.939k   1.25583M          1.9886   2.30912k/s 2.89987G/s     2.92006M               4.62389                 2.3252        100       230.912k/s [BEST: throughput=  1.99 GB/s doc_throughput=  3157 docs/s instructions=     2919795 cycles=     1156840 branch_miss=    6954 cache_miss=     574 cache_ref=     45448 items=       100 avg_time=    433064 ns]
partial_tweets<sajson>/manual_time                        598266 ns       626764 ns         1170          10.216k           1062.76M               0         45.89k    2.19382M               3.4739          1.68288k       3.69193G          5.87949M                    9.31013                     2.68002           168.288k      10.62k   631.515k       1006.68M/s     1.5547    45.807k   2.20763M         3.49577    1.6715k/s 3.69005G/s     5.87949M               9.31013                2.66325        100        167.15k/s [BEST: throughput=  1.06 GB/s doc_throughput=  1682 docs/s instructions=     5879487 cycles=     2193820 branch_miss=   10216 cache_miss=       0 cache_ref=     45890 items=       100 avg_time=    598265 ns]
partial_tweets<rapidjson>/manual_time                    2390547 ns      2419410 ns          293          30.501k            286.98M         16.092k        53.029k    8.12334M              12.8633           454.431        3.6915G          21.8948M                    34.6702                     2.69529           45.4431k    30.5329k   631.515k       251.934M/s    623.925   32.7078k   8.23703M         13.0433    418.314/s 3.44567G/s     21.8957M               34.6717                 2.6582        100       41.8314k/s [BEST: throughput=  0.29 GB/s doc_throughput=   454 docs/s instructions=    21894774 cycles=     8123339 branch_miss=   30501 cache_miss=   16092 cache_ref=     53029 items=       100 avg_time=   2390547 ns]
partial_tweets<rapidjson_insitu>/manual_time             1521968 ns      1550501 ns          461           25.71k           448.244M             175        42.165k    5.20103M               8.2358           709.792       3.69165G          13.3566M                      21.15                     2.56806           70.9792k    25.7962k   631.515k       395.711M/s    277.824   33.6631k   5.26842M         8.34251    657.044/s 3.46158G/s     13.3572M                21.151                2.53533        100       65.7044k/s [BEST: throughput=  0.45 GB/s doc_throughput=   709 docs/s instructions=    13356568 cycles=     5201034 branch_miss=   25710 cache_miss=     175 cache_ref=     42165 items=       100 avg_time=   1521967 ns]
partial_tweets<nlohmann_json>/manual_time                8535265 ns      8570267 ns           82         151.703k            76.139M              21       227.319k    30.6005M              48.4557           120.566       3.68937G          80.3072M                    127.166                     2.62438           12.0566k    163.269k   631.515k       70.5613M/s    76.3537   357.954k   31.4898M         49.8639    117.161/s 3.68937G/s     80.7684M               127.896                2.56491        100       11.7161k/s [BEST: throughput=  0.08 GB/s doc_throughput=   120 docs/s instructions=    80307176 cycles=    30600494 branch_miss=  151703 cache_miss=      21 cache_ref=    227319 items=       100 avg_time=   8535265 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                  89254219 ns     92644238 ns            8         929.052k           515.876M        10.9669M       15.2324M    328.946M              7.15118            11.215       3.68912G          1038.74M                    22.5819                     3.15778            11.215M    936.407k   45.9988M       491.493M/s   10.9752M   15.2383M   329.259M         7.15799     11.204/s   3.689G/s     1038.74M               22.5819                3.15478      1000k        11.204M/s [BEST: throughput=  0.52 GB/s doc_throughput=    11 docs/s instructions=  1038738106 cycles=   328945601 branch_miss=  929052 cache_miss=10966881 cache_ref=  15232417 items=   1000000 avg_time=  89254218 ns]
large_random<simdjson_ondemand>/manual_time             65378959 ns     68733113 ns           11         927.169k           703.973M        5.68925M       7.90049M    241.054M              5.24044           15.3042       3.68913G          672.195M                    14.6133                     2.78857           15.3042M    927.975k   45.9988M       670.978M/s   5.70357M   7.89943M   241.178M         5.24313    15.2954/s 3.68892G/s     672.195M               14.6133                2.78714      1000k       15.2954M/s [BEST: throughput=  0.70 GB/s doc_throughput=    15 docs/s instructions=   672194575 cycles=   241053787 branch_miss=  927169 cache_miss= 5689251 cache_ref=   7900487 items=   1000000 avg_time=  65378959 ns]
large_random<simdjson_ondemand_unordered>/manual_time   65533523 ns     68885998 ns           11         998.174k           702.266M        5.66871M       7.89245M    241.644M              5.25328            15.267        3.6892G          669.195M                    14.5481                     2.76934            15.267M    998.521k   45.9988M       669.396M/s   5.70193M    7.8971M   241.748M         5.25553    15.2594/s 3.68892G/s     669.195M               14.5481                2.76815      1000k       15.2594M/s [BEST: throughput=  0.70 GB/s doc_throughput=    15 docs/s instructions=   669194588 cycles=   241644400 branch_miss=  998174 cache_miss= 5668709 cache_ref=   7892453 items=   1000000 avg_time=  65533522 ns]
large_random<yyjson>/manual_time                       124420677 ns    127837078 ns            6         735.629k            369.99M         5.8469M       8.96228M    340.275M              7.39749           8.04348         2.737G          855.681M                    18.6023                     2.51467           8.04348M    735.339k   45.9988M       352.577M/s   5.85953M   8.99213M   340.346M         7.39901    8.03725/s 2.73544G/s     855.681M               18.6023                2.51415      1000k       8.03725M/s [BEST: throughput=  0.37 GB/s doc_throughput=     8 docs/s instructions=   855680746 cycles=   340275373 branch_miss=  735629 cache_miss= 5846903 cache_ref=   8962281 items=   1000000 avg_time= 124420676 ns]
large_random<yyjson_insitu>/manual_time                106611510 ns    110034179 ns            7         734.965k           431.677M        5.00484M       7.67484M    308.176M              6.69965           9.38452       2.89208G           849.56M                    18.4692                     2.75674           9.38452M    735.455k   45.9988M       411.474M/s   5.00666M   7.67008M   308.209M         6.70037    9.37985/s 2.89095G/s      849.56M               18.4692                2.75644      1000k       9.37985M/s [BEST: throughput=  0.43 GB/s doc_throughput=     9 docs/s instructions=   849560188 cycles=   308175588 branch_miss=  734965 cache_miss= 5004839 cache_ref=   7674837 items=   1000000 avg_time= 106611509 ns]
large_random<sajson>/manual_time                        92494773 ns     95881706 ns            8         589.737k           497.954M        8.21071M       12.1315M    340.789M              7.40865           10.8254       3.68917G          1.12599G                    24.4787                     3.30407           10.8254M    589.417k   45.9988M       474.274M/s   8.25115M   12.0282M   341.217M         7.41796    10.8114/s 3.68904G/s     1.12599G               24.4787                3.29992      1000k       10.8114M/s [BEST: throughput=  0.50 GB/s doc_throughput=    10 docs/s instructions=  1125990565 cycles=   340789034 branch_miss=  589737 cache_miss= 8210713 cache_ref=  12131522 items=   1000000 avg_time=  92494772 ns]
large_random<rapidjson>/manual_time                    215983128 ns    219399377 ns            3          601.53k           218.971M        7.04414M       10.7187M    717.063M              15.5888           4.76036       3.41348G          2.01514G                    43.8086                     2.81027           4.76036M    600.697k   45.9988M       203.108M/s   6.52994M   10.0569M    720.23M         15.6576    4.62999/s 3.33466G/s     2.01515G               43.8088                2.79793      1000k       4.62999M/s [BEST: throughput=  0.22 GB/s doc_throughput=     4 docs/s instructions=  2015144093 cycles=   717063480 branch_miss=  601530 cache_miss= 7044140 cache_ref=  10718734 items=   1000000 avg_time= 215983128 ns]
large_random<rapidjson_lossless>/manual_time           244820256 ns    248233336 ns            3          584.17k           192.309M        7.02941M       10.7365M    824.621M               17.927           4.18074       3.44753G          2.48011G                    53.9169                     3.00758           4.18074M    584.363k   45.9988M       179.184M/s   6.52098M   10.0805M   826.754M         17.9734    4.08463/s 3.37698G/s     2.48012G               53.9171                2.99983      1000k       4.08463M/s [BEST: throughput=  0.19 GB/s doc_throughput=     4 docs/s instructions=  2480111159 cycles=   824621060 branch_miss=  584170 cache_miss= 7029412 cache_ref=  10736533 items=   1000000 avg_time= 244820256 ns]
large_random<rapidjson_insitu>/manual_time             235984462 ns    239391520 ns            3         585.476k           199.564M        8.12415M       12.2909M      792.5M              17.2287           4.33847       3.43824G          1.73714G                     37.765                     2.19198           4.33847M    584.968k   45.9988M       185.893M/s   7.63338M   11.6392M   794.126M         17.2641    4.23757/s 3.36516G/s     1.73715G               37.7652                 2.1875      1000k       4.23757M/s [BEST: throughput=  0.20 GB/s doc_throughput=     4 docs/s instructions=  1737143885 cycles=   792499793 branch_miss=  585476 cache_miss= 8124145 cache_ref=  12290884 items=   1000000 avg_time= 235984462 ns]
large_random<nlohmann_json>/manual_time               1261145537 ns   1264551236 ns            1         4.11441M           36.4738M        47.0768M        60.507M    4.64008G              100.874           0.79293       3.67926G          12.7486G                     277.15                     2.74749            792.93k    4.11441M   45.9988M       34.7841M/s   47.0768M    60.507M   4.64008G         100.874    0.79293/s 3.67926G/s     12.7486G                277.15                2.74749      1000k        792.93k/s [BEST: throughput=  0.04 GB/s doc_throughput=     0 docs/s instructions= 12748552337 cycles=  4640077306 branch_miss= 4114414 cache_miss=47076796 cache_ref=  60507046 items=   1000000 avg_time=1261145537 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                        92079906 ns    102474844 ns            8         1018.17k           1.49276G        15.8738M       22.2563M    339.328M              2.47134           10.8718       3.68912G          984.675M                    7.17144                     2.90184           5.69998M    1018.16k   137.305M       1.38874G/s   15.8815M   22.1633M   339.685M         2.47394    10.8601/s 3.68902G/s     984.675M               7.17144                2.89879   524.288k       5.69384M/s [BEST: throughput=  1.49 GB/s doc_throughput=    10 docs/s instructions=   984674892 cycles=   339327911 branch_miss= 1018174 cache_miss=15873772 cache_ref=  22256329 items=    524288 avg_time=  92079906 ns]
kostya<simdjson_ondemand>/manual_time                   60903748 ns     71256733 ns           11           463.3k           2.25802G         10.096M       13.9239M    224.323M              1.63376           16.4453       3.68906G          650.941M                    4.74084                      2.9018           8.62206M    459.799k   137.305M       2.09963G/s   10.1175M   13.8536M    224.66M         1.63621    16.4194/s 3.68878G/s     650.941M               4.74084                2.89744   524.288k       8.60847M/s [BEST: throughput=  2.26 GB/s doc_throughput=    16 docs/s instructions=   650940574 cycles=   224323238 branch_miss=  463300 cache_miss=10096025 cache_ref=  13923917 items=    524288 avg_time=  60903748 ns]
kostya<yyjson>/manual_time                             176186714 ns    186641422 ns            4         411.971k           780.277M        11.3498M       16.3736M    453.378M              3.30198            5.6828       2.57646G          974.184M                    7.09504                     2.14872           2.97943M    412.247k   137.305M       743.213M/s   11.3485M   16.3766M   453.431M         3.30236     5.6758/s 2.57358G/s     974.185M               7.09504                2.14848   524.288k       2.97575M/s [BEST: throughput=  0.78 GB/s doc_throughput=     5 docs/s instructions=   974184486 cycles=   453377932 branch_miss=  411971 cache_miss=11349837 cache_ref=  16373633 items=    524288 avg_time= 176186714 ns]
kostya<yyjson_insitu>/manual_time                      123142997 ns    133603855 ns            6         416.018k           1.11552G        8.72345M       12.3317M    360.175M              2.62317           8.12443       2.92622G          955.915M                    6.96198                     2.65403           4.25954M    416.838k   137.305M       1063.35M/s   8.72517M   12.3579M   360.248M         2.62371    8.12064/s 2.92545G/s     955.915M               6.96198                2.65349   524.288k       4.25755M/s [BEST: throughput=  1.12 GB/s doc_throughput=     8 docs/s instructions=   955914813 cycles=   360174834 branch_miss=  416018 cache_miss= 8723455 cache_ref=  12331673 items=    524288 avg_time= 123142996 ns]
kostya<sajson>/manual_time                             148255335 ns    158708617 ns            5         414.758k           928.566M        12.3814M       17.1999M    545.501M              3.97292            6.7628       3.68912G          1.53761G                    11.1985                     2.81871           3.54566M    416.753k   137.305M       883.235M/s   12.3869M    17.171M   546.924M         3.98328    6.74512/s 3.68907G/s     1.53761G               11.1985                2.81138   524.288k       3.53639M/s [BEST: throughput=  0.93 GB/s doc_throughput=     6 docs/s instructions=  1537609229 cycles=   545501286 branch_miss=  414758 cache_miss=12381429 cache_ref=  17199894 items=    524288 avg_time= 148255335 ns]
kostya<rapidjson>/manual_time                          283326767 ns    293823663 ns            2         978.379k           488.775M        8.32716M       12.1343M    955.669M              6.96019           3.55978       3.40197G          2.73925G                    19.9501                     2.86631           1.86635M    980.221k   137.305M       462.167M/s   8.10062M    11.916M   957.498M         6.97351    3.52949/s 3.37948G/s     2.73925G               19.9501                2.86084   524.288k       1.85047M/s [BEST: throughput=  0.49 GB/s doc_throughput=     3 docs/s instructions=  2739246106 cycles=   955668819 branch_miss=  978379 cache_miss= 8327161 cache_ref=  12134294 items=    524288 avg_time= 283326767 ns]
kostya<rapidjson_lossless>/manual_time                 298104202 ns    308588925 ns            2         1028.39k           464.314M        8.31863M       12.1242M    1010.02M              7.35607           3.38162       3.41552G           3.0082G                    21.9089                     2.97834           1.77294M    1035.04k   137.305M       439.257M/s   8.09758M   11.9192M   1011.69M         7.36819    3.35453/s 3.39374G/s      3.0082G               21.9089                2.97344   524.288k       1.75874M/s [BEST: throughput=  0.46 GB/s doc_throughput=     3 docs/s instructions=  3008196541 cycles=  1010024494 branch_miss= 1028391 cache_miss= 8318627 cache_ref=  12124160 items=    524288 avg_time= 298104202 ns]
kostya<rapidjson_insitu>/manual_time                   272645462 ns    283104605 ns            3         967.778k           509.465M        12.0463M       15.9899M    913.543M              6.65338           3.71046       3.38967G          2.22201G                     16.183                      2.4323           1.94535M    977.881k   137.305M       480.273M/s   11.7478M   15.6236M   915.623M         6.66854    3.66777/s 3.35829G/s     2.22201G                16.183                2.42678   524.288k       1.92297M/s [BEST: throughput=  0.51 GB/s doc_throughput=     3 docs/s instructions=  2222010698 cycles=   913542648 branch_miss=  967778 cache_miss=12046296 cache_ref=  15989931 items=    524288 avg_time= 272645461 ns]
kostya<nlohmann_json>/manual_time                     1952724049 ns   1963191179 ns            1         14.1581M           70.3146M        69.5427M        87.051M    7.20446G              52.4705          0.512105       3.68944G          17.7632G                     129.37                     2.46559           268.491k    14.1581M   137.305M       67.0572M/s   69.5427M    87.051M   7.20446G         52.4705   0.512105/s 3.68944G/s     17.7632G                129.37                2.46559   524.288k       268.491k/s [BEST: throughput=  0.07 GB/s doc_throughput=     0 docs/s instructions= 17763209370 cycles=  7204458368 branch_miss=14158059 cache_miss=69542700 cache_ref=  87051010 items=    524288 avg_time=1952724049 ns]
distinct_user_id<simdjson_dom>/manual_time                263154 ns       293363 ns         2658           3.572k           2.41415G               0        88.955k    965.904k               1.5295          3.82279k       3.69245G          2.91782M                    4.62036                     3.02082           439.621k    3.76041k   631.515k       2.23498G/s   0.579759   88.9238k   971.166k         1.53784   3.80005k/s 3.69048G/s     2.91782M               4.62036                3.00445        115       437.006k/s [BEST: throughput=  2.41 GB/s doc_throughput=  3822 docs/s instructions=     2917824 cycles=      965904 branch_miss=    3572 cache_miss=       0 cache_ref=     88955 items=       115 avg_time=    263154 ns]
distinct_user_id<simdjson_ondemand>/manual_time           154173 ns       183818 ns         4533           1.714k           4.13233G               0        53.196k    564.456k             0.893812          6.54352k       3.69353G          1.88383M                    2.98303                     3.33742           752.505k    1.71566k   631.515k       3.81484G/s  0.0176484   53.0914k   569.087k        0.901146   6.48624k/s 3.69123G/s     1.88383M               2.98303                3.31026        115       745.917k/s [BEST: throughput=  4.13 GB/s doc_throughput=  6543 docs/s instructions=     1883829 cycles=      564456 branch_miss=    1714 cache_miss=       0 cache_ref=     53196 items=       115 avg_time=    154172 ns]
distinct_user_id<yyjson>/manual_time                      552481 ns       585556 ns         1000           6.687k           1.89415G         16.087k        73.025k    1.23106M              1.94938          2.99938k       3.69242G          2.87805M                    4.55737                     2.33786           344.929k    7.32801k   631.515k        1090.1M/s   7.14005k   55.3986k    1.4469M         2.29116   1.81002k/s 2.61892G/s     2.87824M               4.55768                1.98924        115       208.152k/s [BEST: throughput=  1.89 GB/s doc_throughput=  2999 docs/s instructions=     2878046 cycles=     1231060 branch_miss=    6687 cache_miss=   16087 cache_ref=     73025 items=       115 avg_time=    552481 ns]
distinct_user_id<yyjson_insitu>/manual_time               425662 ns       458166 ns         1645           6.969k           2.04373G             348        43.994k    1.13766M              1.80147          3.23624k       3.68173G          2.87753M                    4.55655                     2.52935           372.167k    7.39276k   631.515k       1.38172G/s    49.8675   30.4002k    1.2382M         1.96068   2.34928k/s 2.90888G/s     2.87779M               4.55697                2.32417        115       270.167k/s [BEST: throughput=  2.04 GB/s doc_throughput=  3236 docs/s instructions=     2877530 cycles=     1137658 branch_miss=    6969 cache_miss=     348 cache_ref=     43994 items=       115 avg_time=    425661 ns]
distinct_user_id<sajson>/manual_time                      593601 ns       623749 ns         1178          10.063k           1071.97M               0        45.447k    2.17494M                3.444          1.69745k       3.69185G          5.81792M                    9.21265                     2.67498           195.207k      10.53k   631.515k       1014.59M/s   0.667233   45.4493k   2.19041M          3.4685   1.68463k/s 3.69004G/s     5.81792M               9.21265                2.65609        115       193.733k/s [BEST: throughput=  1.07 GB/s doc_throughput=  1697 docs/s instructions=     5817924 cycles=     2174940 branch_miss=   10063 cache_miss=       0 cache_ref=     45447 items=       115 avg_time=    593600 ns]
distinct_user_id<rapidjson>/manual_time                  2374415 ns      2404505 ns          296           29.93k            289.01M          9.062k        53.019k     8.0664M              12.7731           457.646       3.69156G          21.8228M                    34.5563                      2.7054           52.6293k    30.5857k   631.515k       253.646M/s   1.27143k   34.8221k   8.21406M         13.0069    421.156/s  3.4594G/s     21.8235M               34.5573                2.65684        115        48.433k/s [BEST: throughput=  0.29 GB/s doc_throughput=   457 docs/s instructions=    21822835 cycles=     8066397 branch_miss=   29930 cache_miss=    9062 cache_ref=     53019 items=       115 avg_time=   2374414 ns]
distinct_user_id<rapidjson_insitu>/manual_time           1540445 ns      1570634 ns          439          25.824k           418.018M              22        33.758k    5.24021M              8.29785           661.929       3.46865G            13.29M                    21.0447                     2.53616           76.1219k    32.9433k   631.515k       390.965M/s   2.91819k   36.5982k   5.41746M         8.57851    649.163/s 3.51681G/s     13.2901M               21.0448                 2.4532        115       74.6538k/s [BEST: throughput=  0.42 GB/s doc_throughput=   661 docs/s instructions=    13290037 cycles=     5240214 branch_miss=   25824 cache_miss=      22 cache_ref=     33758 items=       115 avg_time=   1540444 ns]
distinct_user_id<nlohmann_json>/manual_time              8165691 ns      8199241 ns           90         128.489k           81.4517M          2.448k       218.401k    28.5934M              45.2775           128.978       3.68793G          75.7542M                    119.956                     2.64936           14.8325k    152.183k   631.515k       73.7549M/s    98.5667   481.686k   30.1256M         47.7037    122.464/s 3.68929G/s     74.3378M               117.713                2.46759        115       14.0833k/s [BEST: throughput=  0.08 GB/s doc_throughput=   128 docs/s instructions=    75754195 cycles=    28593392 branch_miss=  128489 cache_miss=    2448 cache_ref=    218401 items=       115 avg_time=   8165690 ns]
find_tweet<simdjson_dom>/manual_time                      251176 ns       280006 ns         2784           3.232k            2.5292G               0        78.466k     921.96k              1.45992          4.00497k       3.69242G           2.8325M                    4.48525                     3.07226           4.00497k    3.37878k   631.515k       2.34156G/s    0.12931   78.4348k   927.033k         1.46795   3.98128k/s 3.69078G/s      2.8325M               4.48525                3.05545          1       3.98128k/s [BEST: throughput=  2.53 GB/s doc_throughput=  4004 docs/s instructions=     2832504 cycles=      921960 branch_miss=    3232 cache_miss=       0 cache_ref=     78466 items=         1 avg_time=    251175 ns]
find_tweet<simdjson_ondemand>/manual_time                 108332 ns       136369 ns         6452              798           5.85305G               0        30.816k    398.578k             0.631146          9.26827k       3.69413G          1.37796M                    2.18199                     3.45719           9.26827k     840.898   631.515k       5.42911G/s  0.0441723    30.718k   399.974k        0.633356   9.23092k/s 3.69213G/s     1.37796M               2.18199                3.44513          1       9.23092k/s [BEST: throughput=  5.85 GB/s doc_throughput=  9268 docs/s instructions=     1377960 cycles=      398578 branch_miss=     798 cache_miss=       0 cache_ref=     30816 items=         1 avg_time=    108331 ns]
find_tweet<yyjson>/manual_time                            616332 ns       646652 ns         1143           9.499k           1.85184G             444        64.092k    1.25935M              1.99418          2.93237k       3.69289G          2.81716M                    4.46095                     2.23699           2.93237k    7.28895k   631.515k       977.168M/s    1027.65   39.6198k   1.47367M         2.33355    1.6225k/s 2.39103G/s     2.81763M                4.4617                1.91198          1        1.6225k/s [BEST: throughput=  1.85 GB/s doc_throughput=  2932 docs/s instructions=     2817155 cycles=     1259352 branch_miss=    9499 cache_miss=     444 cache_ref=     64092 items=         1 avg_time=    616331 ns]
find_tweet<yyjson_insitu>/manual_time                     415360 ns       445113 ns         1685           6.643k           2.11551G             707        35.754k    1098.75k              1.73986           3.3499k       3.68071G          2.81683M                    4.46043                     2.56367            3.3499k    7.12752k   631.515k       1.41599G/s    15.8131   21.9565k   1.20073M         1.90135   2.40755k/s 2.89082G/s     2.81709M               4.46085                2.34615          1       2.40755k/s [BEST: throughput=  2.12 GB/s doc_throughput=  3349 docs/s instructions=     2816831 cycles=     1098750 branch_miss=    6643 cache_miss=     707 cache_ref=     35754 items=         1 avg_time=    415359 ns]
find_tweet<sajson>/manual_time                            582498 ns       612030 ns         1200           9.984k           1092.16M               0        36.063k    2.13476M              3.38038          1.72942k        3.6919G          5.72273M                    9.06191                     2.68073           1.72942k    10.4326k   631.515k       1033.93M/s    1.54583   36.1732k   2.14936M          3.4035   1.71674k/s 3.68991G/s     5.72273M               9.06191                2.66252          1       1.71674k/s [BEST: throughput=  1.09 GB/s doc_throughput=  1729 docs/s instructions=     5722731 cycles=     2134762 branch_miss=    9984 cache_miss=       0 cache_ref=     36063 items=         1 avg_time=    582498 ns]
find_tweet<rapidjson>/manual_time                        2361054 ns      2389728 ns          292          29.764k           290.897M             223        44.775k    8.01398M              12.6901           460.634       3.69151G          21.7395M                    34.4244                      2.7127            460.634    30.2552k   631.515k       255.081M/s    1028.96   27.2098k   8.16573M         12.9304     423.54/s 3.45851G/s     21.7404M               34.4259                 2.6624          1         423.54/s [BEST: throughput=  0.29 GB/s doc_throughput=   460 docs/s instructions=    21739532 cycles=     8013975 branch_miss=   29764 cache_miss=     223 cache_ref=     44775 items=         1 avg_time=   2361054 ns]
find_tweet<rapidjson_insitu>/manual_time                 1525905 ns      1555279 ns          444          25.492k           451.756M         10.762k        36.246k    5.16042M              8.17149           715.353       3.69152G          13.2116M                    20.9205                     2.56018            715.353    32.2271k   631.515k        394.69M/s   2.68909k   27.6936k   5.36404M         8.49393    655.349/s 3.51532G/s     13.2121M               20.9213                2.46308          1        655.349/s [BEST: throughput=  0.45 GB/s doc_throughput=   715 docs/s instructions=    13211590 cycles=     5160419 branch_miss=   25492 cache_miss=   10762 cache_ref=     36246 items=         1 avg_time=   1525904 ns]
find_tweet<nlohmann_json>/manual_time                    6953428 ns      6983514 ns          104         100.209k           94.8542M          2.259k       163.887k    24.5491M              38.8733           150.201       3.68729G          65.8732M                     104.31                     2.68333            150.201    115.705k   631.515k       86.6133M/s    86.5096    377.72k   25.6548M         40.6242    143.814/s 3.68952G/s      64.467M               102.083                2.51286          1        143.814/s [BEST: throughput=  0.09 GB/s doc_throughput=   150 docs/s instructions=    65873213 cycles=    24549073 branch_miss=  100209 cache_miss=    2259 cache_ref=    163887 items=         1 avg_time=   6953428 ns]
top_tweet<simdjson_dom>/manual_time                       257533 ns       285754 ns         2720           3.429k           2.46619G               0        86.161k    945.503k               1.4972           3.9052k       3.69238G          2.86939M                    4.54366                     3.03478            3.9052k    3.54881k   631.515k       2.28376G/s   0.269118   86.1421k   950.382k         1.50492     3.883k/s 3.69033G/s     2.86939M               4.54366                 3.0192          1         3.883k/s [BEST: throughput=  2.47 GB/s doc_throughput=  3905 docs/s instructions=     2869391 cycles=      945503 branch_miss=    3429 cache_miss=       0 cache_ref=     86161 items=         1 avg_time=    257533 ns]
top_tweet<simdjson_ondemand>/manual_time                  150451 ns       178347 ns         4652           1.467k           4.22071G               0        53.084k    552.629k             0.875085          6.68346k       3.69348G          1.90456M                    3.01585                     3.44636           6.68346k    1.54838k   631.515k       3.90921G/s  0.0268702   53.0712k   555.377k        0.879437   6.64668k/s 3.69142G/s     1.90456M               3.01585                 3.4293          1       6.64668k/s [BEST: throughput=  4.22 GB/s doc_throughput=  6683 docs/s instructions=     1904556 cycles=      552629 branch_miss=    1467 cache_miss=       0 cache_ref=     53084 items=         1 avg_time=    150451 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time     169136 ns       197194 ns         4136           1.722k           3.76559G               0        53.749k      619.4k             0.980816          5.96278k       3.69335G          2.13001M                    3.37286                     3.43883           5.96278k    1.90465k   631.515k       3.47735G/s  0.0367505    53.842k   624.309k        0.988589   5.91242k/s 3.69117G/s     2.13001M               3.37286                 3.4118          1       5.91242k/s [BEST: throughput=  3.77 GB/s doc_throughput=  5962 docs/s instructions=     2130014 cycles=      619400 branch_miss=    1722 cache_miss=       0 cache_ref=     53749 items=         1 avg_time=    169135 ns]
top_tweet<yyjson>/manual_time                             621458 ns       651169 ns         1135           9.307k           1.83677G             207        68.704k    1.26955M              2.01032          2.90852k       3.69249G          2.84442M                    4.50412                      2.2405           2.90852k    7.39889k   631.515k       969.108M/s    972.036   44.7224k   1.49298M         2.36412   1.60912k/s 2.40238G/s     2.84511M               4.50522                1.90567          1       1.60912k/s [BEST: throughput=  1.84 GB/s doc_throughput=  2908 docs/s instructions=     2844421 cycles=     1269546 branch_miss=    9307 cache_miss=     207 cache_ref=     68704 items=         1 avg_time=    621457 ns]
top_tweet<yyjson_insitu>/manual_time                      420854 ns       450018 ns         1663           6.898k           2.06906G             532        40.522k    1.12365M               1.7793          3.27634k       3.68146G          2.84431M                    4.50395                     2.53131           3.27634k    7.24655k   631.515k        1.3975G/s    48.5502   27.1067k   1.22138M         1.93404   2.37612k/s 2.90214G/s     2.84458M               4.50437                2.32899          1       2.37612k/s [BEST: throughput=  2.07 GB/s doc_throughput=  3276 docs/s instructions=     2844313 cycles=     1123652 branch_miss=    6898 cache_miss=     532 cache_ref=     40522 items=         1 avg_time=    420853 ns]
top_tweet<sajson>/manual_time                             586686 ns       615300 ns         1192          10.018k           1083.59M               0        41.435k    2.15165M              3.40712          1.71586k       3.69192G          5.75272M                     9.1094                     2.67363           1.71586k    10.4702k   631.515k       1026.54M/s   0.567114    41.461k   2.16498M         3.42823   1.70449k/s 3.69018G/s     5.75272M                9.1094                2.65717          1       1.70449k/s [BEST: throughput=  1.08 GB/s doc_throughput=  1715 docs/s instructions=     5752722 cycles=     2151649 branch_miss=   10018 cache_miss=       0 cache_ref=     41435 items=         1 avg_time=    586686 ns]
top_tweet<rapidjson>/manual_time                         2372588 ns      2401220 ns          296          30.245k           288.917M             321        49.213k    8.05824M              12.7602           457.499       3.68664G          21.7986M                    34.5179                     2.70513            457.499    30.6826k   631.515k       253.841M/s   1.13984k   31.4489k   8.20804M         12.9974    421.481/s 3.45953G/s     21.7995M               34.5194                2.65587          1        421.481/s [BEST: throughput=  0.29 GB/s doc_throughput=   457 docs/s instructions=    21798589 cycles=     8058245 branch_miss=   30245 cache_miss=     321 cache_ref=     49213 items=         1 avg_time=   2372587 ns]
top_tweet<rapidjson_insitu>/manual_time                  1537332 ns      1566120 ns          441           25.88k           446.623M             120        40.374k    5.20019M              8.23447           707.225       3.67771G          13.2666M                    21.0076                     2.55118            707.225     32.605k   631.515k       391.756M/s   2.86127k   32.9434k   5.40742M         8.56261    650.477/s  3.5174G/s     13.2669M               21.0081                2.45347          1        650.477/s [BEST: throughput=  0.45 GB/s doc_throughput=   707 docs/s instructions=    13266638 cycles=     5200194 branch_miss=   25880 cache_miss=     120 cache_ref=     40374 items=         1 avg_time=   1537332 ns]
top_tweet<nlohmann_json>/manual_time                     9346616 ns      9375726 ns           75         187.225k           67.7985M             100       384.508k    34.3648M              54.4165           107.358       3.68935G          87.5845M                     138.69                     2.54867            107.358    189.526k   631.515k       64.4361M/s    171.947   405.749k   34.4806M         54.5999    106.991/s  3.6891G/s      87.589M               138.697                2.54024          1        106.991/s [BEST: throughput=  0.07 GB/s doc_throughput=   107 docs/s instructions=    87584515 cycles=    34364812 branch_miss=  187225 cache_miss=     100 cache_ref=    384508 items=         1 avg_time=   9346615 ns]
