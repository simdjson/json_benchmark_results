run_benchmark: v0.8.0~1 /home/jkeiser/simdjson_benchmark_results/v0.7.0/37/skylake-gcc10.2-native.json -DCMAKE_CXX_FLAGS=-march=native
git reset --hard v0.8.0~1
HEAD is now at 1005c62e It seems that we export too many targets. (#1385)
cmake -DCMAKE_CXX_FLAGS=-march=native ..
-- The CXX compiler identification is GNU 10.2.0
-- The C compiler identification is GNU 10.2.0
-- Check for working CXX compiler: /usr/bin/g++-10
-- Check for working CXX compiler: /usr/bin/g++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/gcc-10
-- Check for working C compiler: /usr/bin/gcc-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-1005c62e
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Failed
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Failed
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/37/skylake-gcc10.2-native.json --benchmark_out_format=json
2021-01-23 05:21:05
Running benchmark/bench_ondemand
Run on (32 X 3300 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x32)
  L1 Instruction 32 KiB (x32)
  L2 Unified 256 KiB (x16)
Load Average: 1.02, 1.03, 1.00
simdjson::dom implementation:      arm64
simdjson::ondemand implementation: arm64

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
partial_tweets<simdjson_dom>/manual_time                 1576626 ns      1646065 ns          444          16.876k           401.488M         25.933k       905.485k    5.03561M              7.97386           635.753       3.20141G          3.92139M                    6.20949                    0.778731           63.5753k    17.1984k   631.515k       381.993M/s    25.922k   906.088k   5.04207M         7.98409    634.266/s 3.19801G/s     3.92139M               6.20949               0.777733        100       63.4266k/s [BEST: throughput=  0.40 GB/s doc_throughput=   635 docs/s instructions=     3921387 cycles=     5035614 branch_miss=   16876 cache_miss=   25933 cache_ref=    905485 items=       100 avg_time=   1576625 ns]
partial_tweets<simdjson_ondemand>/manual_time            1068244 ns      1137709 ns          655           6.918k           592.558M         22.781k        402.48k    3.41257M              5.40378           938.313       3.20206G          2.75757M                    4.36659                    0.808061           93.8313k    7.05557k   631.515k       563.785M/s   22.7907k   402.913k   3.41663M         5.41021    936.115/s 3.19836G/s     2.75756M               4.36658               0.807101        100       93.6115k/s [BEST: throughput=  0.59 GB/s doc_throughput=   938 docs/s instructions=     2757566 cycles=     3412571 branch_miss=    6918 cache_miss=   22781 cache_ref=    402480 items=       100 avg_time=   1068244 ns]
partial_tweets<yyjson>/manual_time                       1246768 ns      1318111 ns          563          48.169k           574.285M         24.446k       1.49102M    3.52091M              5.57534           909.377       3.20184G          3.54892M                    5.61968                     1.00795           90.9377k    48.1337k   631.515k       483.057M/s   24.3887k   1.49236M   3.76107M         5.95562    802.074/s 3.01665G/s     3.54899M                5.6198               0.943612        100       80.2074k/s [BEST: throughput=  0.57 GB/s doc_throughput=   909 docs/s instructions=     3548915 cycles=     3520911 branch_miss=   48169 cache_miss=   24446 cache_ref=   1491015 items=       100 avg_time=   1246767 ns]
partial_tweets<yyjson_insitu>/manual_time                1164648 ns      1237128 ns          600          48.004k           596.301M         14.526k       1.33325M    3.39155M              5.37049           944.239       3.20243G          3.45008M                    5.46317                     1.01726           94.4239k    48.0111k   631.515k       517.117M/s   14.5001k   1.33347M   3.61192M         5.71946    858.628/s  3.1013G/s     3.45022M               5.46341               0.955231        100       85.8628k/s [BEST: throughput=  0.60 GB/s doc_throughput=   944 docs/s instructions=     3450075 cycles=     3391547 branch_miss=   48004 cache_miss=   14526 cache_ref=   1333253 items=       100 avg_time=   1164648 ns]
partial_tweets<sajson>/manual_time                       1487123 ns      1558535 ns          471          68.572k           425.873M         12.718k       1.87486M    4.74728M               7.5173           674.367       3.20141G          5.31238M                    8.41212                     1.11904           67.4367k    69.2838k   631.515k       404.983M/s   12.7133k   1.87638M   4.75622M         7.53145    672.439/s 3.19827G/s     5.31238M               8.41213                1.11693        100       67.2439k/s [BEST: throughput=  0.43 GB/s doc_throughput=   674 docs/s instructions=     5312383 cycles=     4747285 branch_miss=   68572 cache_miss=   12718 cache_ref=   1874861 items=       100 avg_time=   1487122 ns]
partial_tweets<rapidjson>/manual_time                    2812274 ns      2885267 ns          251          74.758k           229.745M         12.979k       6.24573M    8.74767M              13.8519           363.799        3.1824G          13.3636M                    21.1612                     1.52768           36.3799k     74.759k   631.515k       214.154M/s   13.1886k   6.25334M   8.78366M         13.9089    355.584/s 3.12333G/s     13.3642M               21.1621                1.52148        100       35.5584k/s [BEST: throughput=  0.23 GB/s doc_throughput=   363 docs/s instructions=    13363605 cycles=     8747673 branch_miss=   74758 cache_miss=   12979 cache_ref=   6245729 items=       100 avg_time=   2812273 ns]
partial_tweets<rapidjson_insitu>/manual_time             2132684 ns      2206239 ns          328          59.323k           304.475M         13.713k       3.42894M     6.6392M              10.5131           482.135       3.20099G          9.76601M                    15.4644                     1.47096           48.2135k    59.5111k   631.515k       282.395M/s    13.865k   3.43049M   6.66846M         10.5595    468.893/s 3.12679G/s     9.76654M               15.4653                1.46459        100       46.8893k/s [BEST: throughput=  0.30 GB/s doc_throughput=   482 docs/s instructions=     9766009 cycles=     6639197 branch_miss=   59323 cache_miss=   13713 cache_ref=   3428941 items=       100 avg_time=   2132684 ns]
partial_tweets<nlohmann_json>/manual_time               17084951 ns     17181708 ns           41          365.79k           39.8888M          196.8k        38.697M    50.6307M              80.1735           63.1637       3.19802G          68.9792M                    109.228                      1.3624           6.31637k    382.328k   631.515k       35.2509M/s   252.376k   38.9459M   54.6133M         86.4799     58.531/s 3.19658G/s     69.3949M               109.886                1.27066        100        5.8531k/s [BEST: throughput=  0.04 GB/s doc_throughput=    63 docs/s instructions=    68979194 cycles=    50630737 branch_miss=  365790 cache_miss=  196800 cache_ref=  38696981 items=       100 avg_time=  17084951 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 311165006 ns    314792680 ns            2         1.92202M           147.833M        3.98209M       246.818M    994.747M              21.6255           3.21385       3.19696G          1.10647G                    24.0544                     1.11232           3.21385M    1.92246M   45.9988M       140.979M/s   3.98207M   246.821M   994.806M         21.6268    3.21373/s 3.19704G/s     1.10647G               24.0544                1.11225      1000k       3.21373M/s [BEST: throughput=  0.15 GB/s doc_throughput=     3 docs/s instructions=  1106473020 cycles=   994746780 branch_miss= 1922024 cache_miss= 3982092 cache_ref= 246818339 items=   1000000 avg_time= 311165006 ns]
large_random<simdjson_ondemand>/manual_time            182726072 ns    186327934 ns            4         1.17506M           251.781M        2.31737M       134.425M    584.142M              12.6991           5.47365       3.19739G          689.959M                    14.9995                     1.18115           5.47365M    1.17427M   45.9988M       240.074M/s   2.31739M   134.425M   584.135M         12.6989    5.47267/s 3.19678G/s     689.959M               14.9995                1.18116      1000k       5.47267M/s [BEST: throughput=  0.25 GB/s doc_throughput=     5 docs/s instructions=   689958571 cycles=   584142220 branch_miss= 1175062 cache_miss= 2317369 cache_ref= 134425096 items=   1000000 avg_time= 182726072 ns]
large_random<simdjson_ondemand_unordered>/manual_time  185468884 ns    189075990 ns            4         1.20721M           248.034M        2.31737M       138.382M    592.922M              12.8899           5.39219       3.19715G          694.959M                    15.1082                     1.17209           5.39219M    1.20685M   45.9988M       236.524M/s   2.31738M   138.381M   592.921M         12.8899    5.39174/s 3.19688G/s     694.959M               15.1082                1.17209      1000k       5.39174M/s [BEST: throughput=  0.25 GB/s doc_throughput=     5 docs/s instructions=   694958571 cycles=   592921639 branch_miss= 1207210 cache_miss= 2317373 cache_ref= 138381680 items=   1000000 avg_time= 185468884 ns]
large_random<yyjson>/manual_time                       203790862 ns    207404712 ns            3         1.56956M           225.772M        4.91204M       234.843M    625.768M               13.604           4.90822       3.07141G          908.191M                    19.7438                     1.45132           4.90822M    1.56426M   45.9988M       215.259M/s   4.91209M   234.839M   626.124M         13.6118    4.90699/s 3.07238G/s     908.191M               19.7438                 1.4505      1000k       4.90699M/s [BEST: throughput=  0.23 GB/s doc_throughput=     4 docs/s instructions=   908191374 cycles=   625768257 branch_miss= 1569556 cache_miss= 4912038 cache_ref= 234842816 items=   1000000 avg_time= 203790862 ns]
large_random<yyjson_insitu>/manual_time                197915035 ns    201524379 ns            4         1.56428M           232.567M        4.19514M       223.322M     613.81M              13.3441           5.05594       3.10339G          901.004M                    19.5876                     1.46789           5.05594M    1.56245M   45.9988M        221.65M/s    4.1952M   223.326M   614.167M         13.3518    5.05267/s 3.10318G/s     901.004M               19.5876                1.46703      1000k       5.05267M/s [BEST: throughput=  0.23 GB/s doc_throughput=     5 docs/s instructions=   901003551 cycles=   613810043 branch_miss= 1564279 cache_miss= 4195137 cache_ref= 223322333 items=   1000000 avg_time= 197915035 ns]
large_random<sajson>/manual_time                       178928099 ns    182533146 ns            4         1.66243M           274.835M        3.44462M       222.126M    534.839M              11.6273           5.97483       3.19557G          955.996M                    20.7831                     1.78744           5.97483M    1.66168M   45.9988M        245.17M/s   3.44464M   222.126M   571.905M         12.4331    5.58884/s 3.19628G/s     955.996M               20.7831                 1.6716      1000k       5.58884M/s [BEST: throughput=  0.27 GB/s doc_throughput=     5 docs/s instructions=   955995641 cycles=   534839302 branch_miss= 1662435 cache_miss= 3444616 cache_ref= 222126464 items=   1000000 avg_time= 178928099 ns]
large_random<rapidjson>/manual_time                    350639960 ns    354258102 ns            2         1.96246M            131.48M        4.95511M       755.622M     1091.1M              23.7203           2.85833       3.11873G          1.65551G                    35.9903                     1.51728           2.85833M     1.9713M   45.9988M       125.108M/s   4.95585M   755.633M   1091.37M         23.7262    2.85193/s 3.11252G/s     1.65551G               35.9904                1.51691      1000k       2.85193M/s [BEST: throughput=  0.13 GB/s doc_throughput=     2 docs/s instructions=  1655507605 cycles=  1091102895 branch_miss= 1962456 cache_miss= 4955109 cache_ref= 755622305 items=   1000000 avg_time= 350639960 ns]
large_random<rapidjson_lossless>/manual_time           393192879 ns    396831313 ns            2         2.28819M           117.204M        4.95419M       953.166M    1.22724G              26.6799           2.54797       3.12698G          1.97048G                    42.8377                     1.60562           2.54797M    2.27608M   45.9988M       111.568M/s   4.95493M   953.164M   1.22719G         26.6787    2.54328/s 3.12108G/s     1.97049G               42.8378                 1.6057      1000k       2.54328M/s [BEST: throughput=  0.12 GB/s doc_throughput=     2 docs/s instructions=  1970483369 cycles=  1227243028 branch_miss= 2288190 cache_miss= 4954195 cache_ref= 953165861 items=   1000000 avg_time= 393192879 ns]
large_random<rapidjson_insitu>/manual_time             332698735 ns    336336501 ns            2         2.06868M           138.599M        5.67167M       734.557M    1033.87M               22.476           3.01309       3.11514G          1.55051G                    33.7076                     1.49971           3.01309M    2.08017M   45.9988M       131.855M/s   5.67243M   734.569M   1034.27M         22.4846    3.00572/s 3.10872G/s     1.55051G               33.7077                1.49914      1000k       3.00572M/s [BEST: throughput=  0.14 GB/s doc_throughput=     3 docs/s instructions=  1550507445 cycles=  1033868893 branch_miss= 2068677 cache_miss= 5671670 cache_ref= 734556927 items=   1000000 avg_time= 332698735 ns]
large_random<nlohmann_json>/manual_time               2679467406 ns   2683068947 ns            1          12.825M           17.1671M        27.2705M       5.83346G    8.56224G              186.141          0.373208        3.1955G          12.0941G                    262.922                     1.41249           373.208k     12.825M   45.9988M       16.3719M/s   27.2705M   5.83346G   8.56224G         186.141   0.373208/s  3.1955G/s     12.0941G               262.922                1.41249      1000k       373.208k/s [BEST: throughput=  0.02 GB/s doc_throughput=     0 docs/s instructions= 12094072244 cycles=  8562237173 branch_miss=12824978 cache_miss=27270508 cache_ref=5833458117 items=   1000000 avg_time=2679467406 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                       380020387 ns    390786002 ns            2         1.10532M           361.337M        6.94701M       246.893M    1.21477G              8.84724           2.63164       3.19683G          1.14604G                    8.34671                    0.943425           1.37973M    1.10447M   137.305M       344.572M/s     6.947M   246.891M   1.21486G          8.8479    2.63144/s 3.19683G/s     1.14604G               8.34671               0.943354   524.288k       1.37963M/s [BEST: throughput=  0.36 GB/s doc_throughput=     2 docs/s instructions=  1146044372 cycles=  1214770278 branch_miss= 1105319 cache_miss= 6947006 cache_ref= 246892924 items=    524288 avg_time= 380020386 ns]
kostya<simdjson_ondemand>/manual_time                  261180352 ns    271918831 ns            3         1.47949M           526.408M        5.28216M       138.582M    833.932M              6.07357           3.83386       3.19718G          796.596M                    5.80166                     0.95523           2.01005M    1.51769M   137.305M       501.356M/s   5.28214M   138.692M    834.99M         6.08128    3.82877/s 3.19699G/s     796.596M               5.80166               0.954019   524.288k       2.00738M/s [BEST: throughput=  0.53 GB/s doc_throughput=     3 docs/s instructions=   796596295 cycles=   833931775 branch_miss= 1479495 cache_miss= 5282160 cache_ref= 138582057 items=    524288 avg_time= 261180352 ns]
kostya<yyjson>/manual_time                             293960906 ns    304714646 ns            2          1041.3k           467.443M        7.98014M       344.745M    896.571M              6.52978           3.40441        3.0523G          1052.15M                    7.66289                     1.17353           1.78489M    1024.95k   137.305M       445.448M/s    7.9831M   344.694M   897.301M         6.53509    3.40181/s 3.05245G/s     1052.15M               7.66289                1.17257   524.288k       1.78353M/s [BEST: throughput=  0.47 GB/s doc_throughput=     3 docs/s instructions=  1052152507 cycles=   896571127 branch_miss= 1041299 cache_miss= 7980141 cache_ref= 344744619 items=    524288 avg_time= 293960906 ns]
kostya<yyjson_insitu>/manual_time                      275935493 ns    286670823 ns            3         1047.81k           498.109M        5.83887M       310.449M    859.332M              6.25856           3.62776       3.11745G           1030.7M                    7.50663                     1.19942           1.90199M    1022.84k   137.305M       474.547M/s   5.84307M   310.376M   860.277M         6.26545    3.62404/s 3.11768G/s      1030.7M               7.50663                 1.1981   524.288k       1.90004M/s [BEST: throughput=  0.50 GB/s doc_throughput=     3 docs/s instructions=  1030698369 cycles=   859331828 branch_miss= 1047814 cache_miss= 5838872 cache_ref= 310448926 items=    524288 avg_time= 275935492 ns]
kostya<sajson>/manual_time                             402092030 ns    412830158 ns            2         7.17596M           341.826M        4.64372M       424.628M    1.28419G              9.35283           2.48954       3.19704G          1.38919G                    10.1176                     1.08177           1.30523M     7.1841M   137.305M       325.657M/s    4.6438M   424.577M   1.28545G         9.36199    2.48699/s  3.1969G/s     1.38919G               10.1176                1.08071   524.288k        1.3039M/s [BEST: throughput=  0.34 GB/s doc_throughput=     2 docs/s instructions=  1389192347 cycles=  1284190013 branch_miss= 7175957 cache_miss= 4643718 cache_ref= 424628389 items=    524288 avg_time= 402092030 ns]
kostya<rapidjson>/manual_time                          561108078 ns    571866892 ns            1         7.16762M           244.703M        5.38964M       970.837M    1.75874G               12.809           1.78219       3.13441G          2.37304G                     17.283                     1.34928            934.38k    7.16762M   137.305M       233.367M/s   5.38964M   970.837M   1.75874G          12.809    1.78219/s 3.13441G/s     2.37304G                17.283                1.34928   524.288k        934.38k/s [BEST: throughput=  0.24 GB/s doc_throughput=     1 docs/s instructions=  2373037554 cycles=  1758740284 branch_miss= 7167623 cache_miss= 5389640 cache_ref= 970837212 items=    524288 avg_time= 561108078 ns]
kostya<rapidjson_lossless>/manual_time                 598150027 ns    608863758 ns            1          8.7751M           229.549M         5.3892M       1098.51M    1.87676G              13.6685           1.67182       3.13761G          2.55706G                    18.6232                     1.36248           876.516k     8.7751M   137.305M       218.915M/s    5.3892M   1098.51M   1.87676G         13.6685    1.67182/s 3.13761G/s     2.55706G               18.6232                1.36248   524.288k       876.516k/s [BEST: throughput=  0.23 GB/s doc_throughput=     1 docs/s instructions=  2557055998 cycles=  1876759165 branch_miss= 8775102 cache_miss= 5389201 cache_ref=1098509194 items=    524288 avg_time= 598150027 ns]
kostya<rapidjson_insitu>/manual_time                   544100919 ns    554873358 ns            1         6.83909M           252.352M        6.36167M         863.1M     1.7046G              12.4147           1.83789       3.13287G          2.17212G                    15.8197                     1.27427           963.586k    6.83909M   137.305M       240.662M/s   6.36167M     863.1M    1.7046G         12.4147    1.83789/s 3.13287G/s     2.17212G               15.8197                1.27427   524.288k       963.586k/s [BEST: throughput=  0.25 GB/s doc_throughput=     1 docs/s instructions=  2172119365 cycles=  1704596802 branch_miss= 6839088 cache_miss= 6361666 cache_ref= 863099909 items=    524288 avg_time= 544100919 ns]
kostya<nlohmann_json>/manual_time                     4157311109 ns   4168075998 ns            1         26.6401M           33.0274M        38.3094M       7.87154G    13.2901G              96.7927           0.24054       3.19681G          15.0753G                    109.794                     1.13432           126.112k    26.6401M   137.305M       31.4973M/s   38.3094M   7.87154G   13.2901G         96.7927    0.24054/s 3.19681G/s     15.0753G               109.794                1.13432   524.288k       126.112k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 15075316944 cycles= 13290126637 branch_miss=26640093 cache_miss=38309384 cache_ref=7871538605 items=    524288 avg_time=4157311109 ns]
distinct_user_id<simdjson_dom>/manual_time               1565519 ns      1649801 ns          447          16.745k           404.298M         26.437k       889.869k    5.00054M              7.91833           640.203       3.20136G          3.85168M                    6.09911                    0.770252           73.6234k    16.9335k   631.515k       384.703M/s   26.4404k   890.399k   5.00635M         7.92752    638.766/s 3.19788G/s     3.85168M               6.09911               0.769359        115        73.458k/s [BEST: throughput=  0.40 GB/s doc_throughput=   640 docs/s instructions=     3851677 cycles=     5000544 branch_miss=   16745 cache_miss=   26437 cache_ref=    889869 items=       115 avg_time=   1565519 ns]
distinct_user_id<simdjson_ondemand>/manual_time          1057222 ns      1141375 ns          662           6.843k           598.726M         22.391k       400.779k     3.3771M              5.34761           948.078       3.20175G          2.73848M                    4.33636                    0.810897           109.029k    6.96384k   631.515k       569.663M/s    22.401k   400.787k   3.38136M         5.35436    945.875/s 3.19834G/s     2.73848M               4.33636               0.809876        115       108.776k/s [BEST: throughput=  0.60 GB/s doc_throughput=   948 docs/s instructions=     2738478 cycles=     3377098 branch_miss=    6843 cache_miss=   22391 cache_ref=    400779 items=       115 avg_time=   1057221 ns]
distinct_user_id<yyjson>/manual_time                     1194457 ns      1282028 ns          607          47.863k             582.8M         24.166k       1.47654M    3.46957M              5.49405           922.861       3.20193G          3.51488M                    5.56579                     1.01306           106.129k    47.6525k   631.515k       504.212M/s   24.1975k   1.47731M   3.69358M         5.84876      837.2/s 3.09227G/s     3.51474M               5.56556                0.95158        115        96.278k/s [BEST: throughput=  0.58 GB/s doc_throughput=   922 docs/s instructions=     3514879 cycles=     3469574 branch_miss=   47863 cache_miss=   24166 cache_ref=   1476543 items=       115 avg_time=   1194457 ns]
distinct_user_id<yyjson_insitu>/manual_time              1144380 ns      1232121 ns          610          47.669k           606.844M         14.285k       1.31819M    3.33235M              5.27675           960.934       3.20217G          3.41557M                    5.40854                     1.02498           110.507k    47.6355k   631.515k       526.276M/s   14.3304k   1.31844M   3.54674M         5.61624    873.836/s 3.09927G/s     3.41572M               5.40877                0.96306        115       100.491k/s [BEST: throughput=  0.61 GB/s doc_throughput=   960 docs/s instructions=     3415573 cycles=     3332346 branch_miss=   47669 cache_miss=   14285 cache_ref=   1318186 items=       115 avg_time=   1144379 ns]
distinct_user_id<sajson>/manual_time                     1472026 ns      1558838 ns          475          68.849k           430.342M         12.744k       1.86061M    4.69815M               7.4395           681.444       3.20153G          5.24709M                    8.30874                     1.11684           78.3661k    69.2166k   631.515k       409.137M/s   12.7928k   1.86146M   4.70754M         7.45437    679.336/s   3.198G/s     5.24709M               8.30874                1.11461        115       78.1236k/s [BEST: throughput=  0.43 GB/s doc_throughput=   681 docs/s instructions=     5247094 cycles=     4698154 branch_miss=   68849 cache_miss=   12744 cache_ref=   1860606 items=       115 avg_time=   1472025 ns]
distinct_user_id<rapidjson>/manual_time                  2786115 ns      2875389 ns          251          74.575k           232.816M         13.705k       6.24769M    8.68239M              13.7485           368.663       3.20088G          13.3287M                    21.1059                     1.53514           42.3963k    74.6576k   631.515k       216.165M/s   13.9896k   6.25023M   8.72143M         13.8103    358.923/s 3.13032G/s     13.3293M               21.1069                1.52834        115       41.2761k/s [BEST: throughput=  0.23 GB/s doc_throughput=   368 docs/s instructions=    13328688 cycles=     8682387 branch_miss=   74575 cache_miss=   13705 cache_ref=   6247692 items=       115 avg_time=   2786114 ns]
distinct_user_id<rapidjson_insitu>/manual_time           2121475 ns      2212316 ns          335            59.4k           306.208M         14.179k       3.41792M     6.6019M              10.4541           484.878       3.20111G          9.72946M                    15.4065                     1.47374           55.7609k    59.5081k   631.515k       283.887M/s   14.3471k   3.41924M   6.63142M         10.5008     471.37/s 3.12585G/s     9.72994M               15.4073                1.46725        115       54.2076k/s [BEST: throughput=  0.31 GB/s doc_throughput=   484 docs/s instructions=     9729461 cycles=     6601897 branch_miss=   59400 cache_miss=   14179 cache_ref=   3417922 items=       115 avg_time=   2121475 ns]
distinct_user_id<nlohmann_json>/manual_time             16023904 ns     16117606 ns           44         329.835k           42.8976M        161.378k       36.3677M     47.066M              74.5286           67.9281        3.1971G            64.35M                    101.898                     1.36723           7.81173k    343.881k   631.515k       37.5851M/s   217.897k   35.8272M   51.2215M         81.1089    62.4068/s 3.19657G/s     62.7958M               99.4368                1.22597        115       7.17678k/s [BEST: throughput=  0.04 GB/s doc_throughput=    67 docs/s instructions=    64349971 cycles=    47065955 branch_miss=  329835 cache_miss=  161378 cache_ref=  36367719 items=       115 avg_time=  16023904 ns]
find_tweet<simdjson_dom>/manual_time                     1519551 ns      1607096 ns          461          16.549k           416.541M         23.476k       874.266k    4.85378M              7.68593            659.59        3.2015G          3.76236M                    5.95767                     0.77514             659.59    16.7631k   631.515k        396.34M/s   23.4758k   874.685k   4.85912M         7.69438    658.089/s 3.19773G/s     3.76236M               5.95767               0.774288          1        658.089/s [BEST: throughput=  0.42 GB/s doc_throughput=   659 docs/s instructions=     3762357 cycles=     4853779 branch_miss=   16549 cache_miss=   23476 cache_ref=    874266 items=         1 avg_time=   1519551 ns]
find_tweet<simdjson_ondemand>/manual_time                 915571 ns      1004049 ns          765           3.991k            691.23M         11.557k       194.119k    2.92573M              4.63287           1094.56       3.20238G          2.05905M                    3.26049                    0.703774            1094.56    4.10717k   631.515k       657.797M/s   11.5578k   194.108k   2.92844M         4.63716    1092.21/s 3.19848G/s     2.05905M               3.26049               0.703122          1        1092.21/s [BEST: throughput=  0.69 GB/s doc_throughput=  1094 docs/s instructions=     2059051 cycles=     2925727 branch_miss=    3991 cache_miss=   11557 cache_ref=    194119 items=         1 avg_time=    915570 ns]
find_tweet<yyjson>/manual_time                           1188223 ns      1280317 ns          592          47.672k           601.934M         21.695k       1.46006M    3.35926M              5.31937           953.158       3.20191G          3.45933M                    5.47783                     1.02979            953.158    47.5955k   631.515k       506.857M/s    21.709k   1.46114M   3.57532M          5.6615    841.593/s 3.00897G/s     3.45952M               5.47813               0.967611          1        841.593/s [BEST: throughput=  0.60 GB/s doc_throughput=   953 docs/s instructions=     3459332 cycles=     3359261 branch_miss=   47672 cache_miss=   21695 cache_ref=   1460061 items=         1 avg_time=   1188223 ns]
find_tweet<yyjson_insitu>/manual_time                    1106497 ns      1200151 ns          635          47.837k           627.866M         11.817k        1.3021M    3.22086M              5.10021           994.223       3.20225G          3.36031M                    5.32103                      1.0433            994.223    47.5714k   631.515k       544.294M/s   11.8132k   1.30221M   3.42636M         5.42562    903.753/s 3.09658G/s     3.36046M               5.32127               0.980767          1        903.753/s [BEST: throughput=  0.63 GB/s doc_throughput=   994 docs/s instructions=     3360309 cycles=     3220858 branch_miss=   47837 cache_miss=   11817 cache_ref=   1302100 items=         1 avg_time=   1106496 ns]
find_tweet<sajson>/manual_time                           1427290 ns      1522361 ns          490          68.855k           443.547M         10.222k       1.83994M    4.55847M              7.21831           702.354       3.20166G          5.16187M                    8.17379                     1.13237            702.354    69.1281k   631.515k        421.96M/s   10.2149k    1.8407M   4.56467M         7.22813    700.628/s 3.19814G/s     5.16187M               8.17379                1.13083          1        700.628/s [BEST: throughput=  0.44 GB/s doc_throughput=   702 docs/s instructions=     5161871 cycles=     4558474 branch_miss=   68855 cache_miss=   10222 cache_ref=   1839943 items=         1 avg_time=   1427290 ns]
find_tweet<rapidjson>/manual_time                        2758062 ns      2855167 ns          253          74.561k           235.095M         10.973k        6.2381M    8.59808M               13.615           372.271       3.20082G           13.284M                    21.0351                       1.545            372.271    74.6004k   631.515k       218.363M/s   11.2172k    6.2394M   8.63028M          13.666    362.573/s 3.12911G/s     13.2846M                21.036                 1.5393          1        362.573/s [BEST: throughput=  0.24 GB/s doc_throughput=   372 docs/s instructions=    13284007 cycles=     8598078 branch_miss=   74561 cache_miss=   10973 cache_ref=   6238101 items=         1 avg_time=   2758062 ns]
find_tweet<rapidjson_insitu>/manual_time                 2096386 ns      2196393 ns          339          59.335k           309.664M         10.822k       3.40604M    6.52822M              10.3374           490.351       3.20112G          9.68499M                    15.3361                     1.48356            490.351    59.3966k   631.515k       287.285M/s   10.9908k   3.40684M   6.54986M         10.3717    477.011/s 3.12436G/s     9.68566M               15.3372                1.47876          1        477.011/s [BEST: throughput=  0.31 GB/s doc_throughput=   490 docs/s instructions=     9684986 cycles=     6528219 branch_miss=   59335 cache_miss=   10822 cache_ref=   3406041 items=         1 avg_time=   2096385 ns]
find_tweet<nlohmann_json>/manual_time                   13023155 ns     13126485 ns           55         253.066k           53.0852M         88.499k       31.0055M    38.0361M                60.23             84.06       3.19732G          54.4226M                    86.1779                     1.43081              84.06    268.698k   631.515k       46.2453M/s    139.15k   30.4612M   41.6316M         65.9233    76.7863/s 3.19673G/s     52.8619M               83.7065                1.26976          1        76.7863/s [BEST: throughput=  0.05 GB/s doc_throughput=    84 docs/s instructions=    54422645 cycles=    38036150 branch_miss=  253066 cache_miss=   88499 cache_ref=  31005458 items=         1 avg_time=  13023155 ns]
top_tweet<simdjson_dom>/manual_time                      1552596 ns      1655104 ns          451          16.755k           407.831M         25.565k       880.953k    4.95723M              7.84975           645.798       3.20137G          3.80075M                    6.01846                    0.766707            645.798    16.9884k   631.515k       387.905M/s   25.5614k   881.525k   4.96509M         7.86219    644.083/s 3.19793G/s     3.80074M               6.01845               0.765493          1        644.083/s [BEST: throughput=  0.41 GB/s doc_throughput=   645 docs/s instructions=     3800745 cycles=     4957234 branch_miss=   16755 cache_miss=   25565 cache_ref=    880953 items=         1 avg_time=   1552595 ns]
top_tweet<simdjson_ondemand>/manual_time                 1053235 ns      1158101 ns          665           6.486k           601.119M         22.442k       380.003k    3.36413M              5.32708           951.868       3.20221G          2.70591M                    4.28478                     0.80434            951.868    6.66385k   631.515k       571.819M/s   22.4393k   380.248k   3.36877M         5.33443    949.455/s  3.1985G/s     2.70591M               4.28479               0.803233          1        949.455/s [BEST: throughput=  0.60 GB/s doc_throughput=   951 docs/s instructions=     2705905 cycles=     3364132 branch_miss=    6486 cache_miss=   22442 cache_ref=    380003 items=         1 avg_time=   1053235 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time    1068422 ns      1175044 ns          655           6.784k           592.472M         22.712k       394.362k    3.41275M              5.40407           938.175       3.20176G          2.73439M                    4.32989                    0.801228            938.175    6.87566k   631.515k       563.691M/s   22.7155k   394.495k    3.4171M         5.41096     935.96/s 3.19827G/s     2.73439M               4.32989               0.800208          1         935.96/s [BEST: throughput=  0.59 GB/s doc_throughput=   938 docs/s instructions=     2734392 cycles=     3412750 branch_miss=    6784 cache_miss=   22712 cache_ref=    394362 items=         1 avg_time=   1068422 ns]
top_tweet<yyjson>/manual_time                            1210414 ns      1322230 ns          582          48.012k           589.571M         23.329k       1.46778M    3.42982M               5.4311           933.582       3.20202G          3.48273M                    5.51488                     1.01543            933.582    47.8758k   631.515k       497.565M/s    23.383k   1.46825M   3.64723M         5.77537    826.164/s 3.01321G/s     3.48294M               5.51522               0.954954          1        826.164/s [BEST: throughput=  0.59 GB/s doc_throughput=   933 docs/s instructions=     3482730 cycles=     3429819 branch_miss=   48012 cache_miss=   23329 cache_ref=   1467778 items=         1 avg_time=   1210413 ns]
top_tweet<yyjson_insitu>/manual_time                     1349308 ns      1320242 ns          620          47.846k           615.093M         13.442k       1.30886M     3.2877M              5.20605           973.995       3.20221G          3.38373M                    5.35812                     1.02921            973.995     47.806k   631.515k       446.347M/s   13.4931k   1.30945M   3.50721M         5.55365    741.121/s 2.59927G/s     3.38388M               5.35836               0.964835          1        741.121/s [BEST: throughput=  0.62 GB/s doc_throughput=   973 docs/s instructions=     3383734 cycles=     3287701 branch_miss=   47846 cache_miss=   13442 cache_ref=   1308860 items=         1 avg_time=   1349307 ns]
top_tweet<sajson>/manual_time                            1448067 ns      1563280 ns          483          68.901k           437.349M         11.783k       1.84785M    4.62276M              7.32011           692.539       3.20144G          5.18707M                     8.2137                     1.12207            692.539    69.2737k   631.515k       415.906M/s   11.7904k   1.84849M   4.63065M         7.33261    690.576/s 3.19782G/s     5.18707M                8.2137                1.12016          1        690.576/s [BEST: throughput=  0.44 GB/s doc_throughput=   692 docs/s instructions=     5187073 cycles=     4622759 branch_miss=   68901 cache_miss=   11783 cache_ref=   1847854 items=         1 avg_time=   1448067 ns]
top_tweet<rapidjson>/manual_time                         2788268 ns      2907773 ns          251          74.716k           233.026M         12.866k       6.24862M    8.67434M              13.7358           368.996        3.2008G          13.3179M                    21.0888                     1.53532            368.996    74.7545k   631.515k       215.998M/s    13.098k   6.24745M   8.72462M         13.8154    358.646/s 3.12905G/s     13.3185M               21.0898                1.52654          1        358.646/s [BEST: throughput=  0.23 GB/s doc_throughput=   368 docs/s instructions=    13317864 cycles=     8674341 branch_miss=   74716 cache_miss=   12866 cache_ref=   6248619 items=         1 avg_time=   2788268 ns]
top_tweet<rapidjson_insitu>/manual_time                  2117784 ns      2239244 ns          335          59.651k           306.644M         13.057k       3.41679M    6.59192M              10.4383           485.568       3.20083G          9.71685M                    15.3866                     1.47405            485.568    59.5914k   631.515k       284.382M/s   13.2406k   3.41672M   6.61761M         10.4789    472.192/s 3.12478G/s     9.71733M               15.3873                1.46841          1        472.192/s [BEST: throughput=  0.31 GB/s doc_throughput=   485 docs/s instructions=     9716846 cycles=     6591921 branch_miss=   59651 cache_miss=   13057 cache_ref=   3416793 items=         1 avg_time=   2117783 ns]
top_tweet<nlohmann_json>/manual_time                    18562863 ns     18690684 ns           38          422.06k            34.178M        346.096k       42.1627M    59.0969M              93.5796           54.1206       3.19836G          76.0976M                      120.5                     1.28768            54.1206    427.018k   631.515k       32.4443M/s   336.549k   42.3924M   59.3368M         93.9594     53.871/s 3.19653G/s     76.7134M               121.475                1.29285          1         53.871/s [BEST: throughput=  0.03 GB/s doc_throughput=    54 docs/s instructions=    76097630 cycles=    59096895 branch_miss=  422060 cache_miss=  346096 cache_ref=  42162693 items=         1 avg_time=  18562863 ns]
