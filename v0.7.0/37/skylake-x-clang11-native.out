run_benchmark: v0.8.0~1 /home/jkeiser/simdjson_benchmark_results/v0.7.0/37/skylake-clang11-native.json -DCMAKE_CXX_FLAGS=-march=native
git reset --hard v0.8.0~1
HEAD is now at 1005c62e It seems that we export too many targets. (#1385)
cmake -DCMAKE_CXX_FLAGS=-march=native ..
-- The CXX compiler identification is Clang 11.0.0
-- The C compiler identification is Clang 11.0.0
-- Check for working CXX compiler: /usr/bin/clang++-11
-- Check for working CXX compiler: /usr/bin/clang++-11 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/clang-11
-- Check for working C compiler: /usr/bin/clang-11 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-1005c62e
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Success
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Success
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES -- failed to compile
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/37/skylake-clang11-native.json --benchmark_out_format=json
2021-01-23 04:52:44
Running benchmark/bench_ondemand
Run on (4 X 3200 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 1024 KiB (x4)
  L3 Unified 8448 KiB (x1)
Load Average: 1.00, 1.00, 0.95
***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.
simdjson::dom implementation:      haswell
simdjson::ondemand implementation: haswell

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                  323274 ns       393221 ns         2165           3.761k           1.96646G               0        33.098k    1025.68k              1.62415          3.11388k       3.19384G          2.93219M                     4.6431                     2.85878           311.388k    3.88207k   631.515k       1.81934G/s   0.439261   33.1446k   1031.44k         1.63327   3.09335k/s  3.1906G/s     2.93219M                4.6431                2.84282        100       309.335k/s [BEST: throughput=  1.97 GB/s doc_throughput=  3113 docs/s instructions=     2932189 cycles=     1025678 branch_miss=    3761 cache_miss=       0 cache_ref=     33098 items=       100 avg_time=    323273 ns]
partial_tweets<simdjson_ondemand>/manual_time             205193 ns       263281 ns         3408           1.878k           3.10406G               0            13k    649.913k              1.02913          4.91526k       3.19449G          1.88084M                     2.9783                     2.89398           491.526k    2.03287k   631.515k        2.8663G/s  0.0601526   13.0215k   654.785k         1.03685   4.87346k/s 3.19107G/s     1.88084M                2.9783                2.87245        100       487.346k/s [BEST: throughput=  3.10 GB/s doc_throughput=  4915 docs/s instructions=     1880838 cycles=      649913 branch_miss=    1878 cache_miss=       0 cache_ref=     13000 items=       100 avg_time=    205193 ns]
partial_tweets<yyjson>/manual_time                        791420 ns       871312 ns          889           9.651k           1.39667G             235        27.974k      1.394M              2.20738          2.21162k       3.08299G          2.91951M                    4.62303                     2.09435           221.162k    7.55763k   631.515k       760.987M/s    541.022     23.71k   1.56137M         2.47242   1.26355k/s 1.97287G/s      2.9202M               4.62412                1.87028        100       126.355k/s [BEST: throughput=  1.40 GB/s doc_throughput=  2211 docs/s instructions=     2919512 cycles=     1393996 branch_miss=    9651 cache_miss=     235 cache_ref=     27974 items=       100 avg_time=    791419 ns]
partial_tweets<yyjson_insitu>/manual_time                 512930 ns       575414 ns         1377            6.97k           1.78857G          1.325k        13.768k    1.12199M              1.77666           2.8322k       3.17769G           2.9194M                    4.62286                     2.60199            283.22k    7.29951k   631.515k       1.14664G/s    62.6609   9.30481k   1.23748M         1.95954   1.94958k/s 2.41257G/s     2.91967M               4.62327                2.35937        100       194.958k/s [BEST: throughput=  1.79 GB/s doc_throughput=  2832 docs/s instructions=     2919403 cycles=     1121987 branch_miss=    6970 cache_miss=    1325 cache_ref=     13768 items=       100 avg_time=    512930 ns]
partial_tweets<sajson>/manual_time                        690994 ns       755682 ns         1012          10.814k           923.535M               0         13.15k     2.1835M              3.45756          1.46241k       3.19317G          5.87892M                    9.30924                     2.69243           146.241k    10.9824k   631.515k       871.585M/s    1.87846   13.3042k   2.20429M         3.49048   1.44719k/s 3.19003G/s     5.87892M               9.30924                2.66704        100       144.719k/s [BEST: throughput=  0.92 GB/s doc_throughput=  1462 docs/s instructions=     5878924 cycles=     2183499 branch_miss=   10814 cache_miss=       0 cache_ref=     13150 items=       100 avg_time=    690993 ns]
partial_tweets<rapidjson>/manual_time                    2542415 ns      2607509 ns          276          32.154k           277.386M          7.203k        22.448k    7.26887M              11.5102            439.24       3.19278G          21.8957M                    34.6716                     3.01225            43.924k    33.0575k   631.515k       236.885M/s    382.891   12.2842k   7.42892M         11.7636    393.327/s 2.92199G/s     21.8963M               34.6727                2.94744        100       39.3327k/s [BEST: throughput=  0.28 GB/s doc_throughput=   439 docs/s instructions=    21895663 cycles=     7268869 branch_miss=   32154 cache_miss=    7203 cache_ref=     22448 items=       100 avg_time=   2542414 ns]
partial_tweets<rapidjson_insitu>/manual_time             1829215 ns      1891655 ns          382          24.841k           376.834M              98        14.142k    5.35054M              8.47255           596.715       3.19275G          13.3197M                    21.0917                     2.48942           59.6715k    25.3853k   631.515k       329.245M/s    220.586   9.94326k   5.43703M         8.60951    546.683/s 2.97233G/s     13.3203M               21.0927                2.44993        100       54.6683k/s [BEST: throughput=  0.38 GB/s doc_throughput=   596 docs/s instructions=    13319746 cycles=     5350542 branch_miss=   24841 cache_miss=      98 cache_ref=     14142 items=       100 avg_time=   1829214 ns]
partial_tweets<nlohmann_json>/manual_time               10030207 ns     10118796 ns           70         150.715k            65.547M               4        98.103k    30.7327M               48.665           103.793       3.18984G          80.8882M                    128.086                       2.632           10.3793k    163.194k   631.515k       60.0446M/s    284.914   138.474k   31.9871M         50.6513    99.6988/s 3.18907G/s     81.4836M               129.029                2.54739        100       9.96988k/s [BEST: throughput=  0.07 GB/s doc_throughput=   103 docs/s instructions=    80888224 cycles=    30732666 branch_miss=  150715 cache_miss=       4 cache_ref=     98103 items=       100 avg_time=  10030206 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 101828171 ns    107946825 ns            7         901.271k           453.539M         6.7915M       6.89544M    323.375M              7.03008           9.85981       3.18842G          1020.45M                    22.1843                     3.15563           9.85981M      900.4k   45.9988M       430.803M/s   6.80599M   6.89552M   324.643M         7.05764    9.82047/s 3.18814G/s     1020.45M               22.1843                3.14331      1000k       9.82047M/s [BEST: throughput=  0.45 GB/s doc_throughput=     9 docs/s instructions=  1020451782 cycles=   323375198 branch_miss=  901271 cache_miss= 6791504 cache_ref=   6895440 items=   1000000 avg_time= 101828170 ns]
large_random<simdjson_ondemand>/manual_time             72238500 ns     78255962 ns           10         917.981k           637.858M        3.51541M       3.57335M    229.959M              4.99925           13.8668       3.18881G          654.908M                    14.2375                     2.84793           13.8668M    925.427k   45.9988M       607.264M/s   3.51237M   3.57315M   230.326M         5.00722     13.843/s 3.18841G/s     654.908M               14.2375                2.84339      1000k        13.843M/s [BEST: throughput=  0.64 GB/s doc_throughput=    13 docs/s instructions=   654907679 cycles=   229959380 branch_miss=  917981 cache_miss= 3515409 cache_ref=   3573348 items=   1000000 avg_time=  72238500 ns]
large_random<simdjson_ondemand_unordered>/manual_time   73338392 ns     79364876 ns           10         905.327k            627.94M        3.47519M        3.5731M    233.602M              5.07843           13.6512       3.18895G          658.908M                    14.3245                     2.82065           13.6512M    905.802k   45.9988M       598.157M/s   3.51096M   3.57282M   233.837M         5.08355    13.6354/s 3.18846G/s     658.908M               14.3245                2.81781      1000k       13.6354M/s [BEST: throughput=  0.63 GB/s doc_throughput=    13 docs/s instructions=   658907678 cycles=   233601689 branch_miss=  905327 cache_miss= 3475193 cache_ref=   3573103 items=   1000000 avg_time=  73338392 ns]
large_random<yyjson>/manual_time                       145191799 ns    151341686 ns            5         676.411k           316.906M        4.20084M       4.38616M    322.756M              7.01663           6.88945       2.22361G          855.681M                    18.6023                     2.65117           6.88945M    677.147k   45.9988M       302.137M/s   4.20071M   4.32752M   322.891M         7.01955    6.88744/s 2.22389G/s     855.681M               18.6023                2.65006      1000k       6.88744M/s [BEST: throughput=  0.32 GB/s doc_throughput=     6 docs/s instructions=   855680749 cycles=   322756387 branch_miss=  676411 cache_miss= 4200841 cache_ref=   4386156 items=   1000000 avg_time= 145191798 ns]
large_random<yyjson_insitu>/manual_time                119091017 ns    125201705 ns            6          676.01k           386.674M        3.48162M       3.59877M    279.641M              6.07931           8.40619       2.35072G           849.56M                    18.4692                     3.03804           8.40619M    676.155k   45.9988M       368.356M/s   3.48354M   3.60776M   280.051M         6.08822    8.39694/s 2.35157G/s      849.56M               18.4692                3.03359      1000k       8.39694M/s [BEST: throughput=  0.39 GB/s doc_throughput=     8 docs/s instructions=   849559981 cycles=   279641025 branch_miss=  676010 cache_miss= 3481619 cache_ref=   3598767 items=   1000000 avg_time= 119091017 ns]
large_random<sajson>/manual_time                       105796250 ns    111888923 ns            7         584.465k           435.387M        5.42035M       5.57616M    336.908M              7.32428           9.46518        3.1889G             1093M                    23.7614                      3.2442           9.46518M    584.837k   45.9988M       414.645M/s   5.46201M   5.57622M   337.347M         7.33381    9.45213/s 3.18864G/s        1093M               23.7614                3.23998      1000k       9.45213M/s [BEST: throughput=  0.44 GB/s doc_throughput=     9 docs/s instructions=  1092995859 cycles=   336908036 branch_miss=  584465 cache_miss= 5420348 cache_ref=   5576160 items=   1000000 avg_time= 105796249 ns]
large_random<rapidjson>/manual_time                    251378687 ns    257528562 ns            3         612.246k           188.959M         4.3739M       4.89847M    708.123M              15.3944           4.10791        2.9089G          2.00013G                    43.4822                     2.82455           4.10791M     617.87k   45.9988M       174.509M/s   4.11072M   4.69696M   711.691M          15.472    3.97806/s 2.83115G/s     2.00014G               43.4824                 2.8104      1000k       3.97806M/s [BEST: throughput=  0.19 GB/s doc_throughput=     4 docs/s instructions=  2000127024 cycles=   708122856 branch_miss=  612246 cache_miss= 4373901 cache_ref=   4898471 items=   1000000 avg_time= 251378686 ns]
large_random<rapidjson_lossless>/manual_time           287511745 ns    293635880 ns            3          583.19k           164.387M         4.4076M       4.89858M    824.283M              17.9197           3.57372       2.94576G          2.47709G                    53.8513                     3.00515           3.57372M    591.139k   45.9988M       152.578M/s   4.12662M   4.69945M   826.953M         17.9777    3.47812/s 2.87624G/s      2.4771G               53.8515                2.99546      1000k       3.47812M/s [BEST: throughput=  0.16 GB/s doc_throughput=     3 docs/s instructions=  2477094908 cycles=   824283252 branch_miss=  583190 cache_miss= 4407600 cache_ref=   4898585 items=   1000000 avg_time= 287511745 ns]
large_random<rapidjson_insitu>/manual_time             276815317 ns    282932781 ns            3         588.904k            170.88M         5.0599M       5.62795M    790.406M              17.1832           3.71487       2.93625G          1.72813G                     37.569                     2.18638           3.71487M    588.689k   45.9988M       158.473M/s   4.81365M   5.43707M   792.723M         17.2336    3.61252/s 2.86373G/s     1.72814G               37.5692                   2.18      1000k       3.61252M/s [BEST: throughput=  0.17 GB/s doc_throughput=     3 docs/s instructions=  1728126993 cycles=   790405514 branch_miss=  588904 cache_miss= 5059897 cache_ref=   5627948 items=   1000000 avg_time= 276815317 ns]
large_random<nlohmann_json>/manual_time               1482888232 ns   1488974670 ns            1         4.04198M           31.0197M        30.3682M       30.9146M    4.71457G              102.493           0.67436       3.17932G          12.7846G                    277.932                     2.71171            674.36k    4.04198M   45.9988M       29.5827M/s   30.3682M   30.9146M   4.71457G         102.493    0.67436/s 3.17932G/s     12.7846G               277.932                2.71171      1000k        674.36k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 12784550651 cycles=  4714571257 branch_miss= 4041979 cache_miss=30368190 cache_ref=  30914571 items=   1000000 avg_time=1482888232 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                       109674510 ns    128366256 ns            6         1053.35k            1.2535G        10.1955M       10.3188M    349.213M              2.54333           9.12932       3.18807G          971.996M                     7.0791                     2.78339           4.78639M    1053.37k   137.305M       1.16595G/s   10.2378M   10.3187M    349.69M         2.54681    9.11789/s 3.18843G/s     971.996M                7.0791                2.77959   524.288k        4.7804M/s [BEST: throughput=  1.25 GB/s doc_throughput=     9 docs/s instructions=   971995680 cycles=   349212560 branch_miss= 1053351 cache_miss=10195475 cache_ref=  10318830 items=    524288 avg_time= 109674510 ns]
kostya<simdjson_ondemand>/manual_time                   70449491 ns     89139137 ns           10         467.802k           1.95108G        6.42146M       6.47012M    224.395M              1.63428           14.2098       3.18861G          638.786M                    4.65231                     2.84671           7.45004M    468.018k   137.305M       1.81513G/s   6.43702M    6.4702M   224.625M         1.63595    14.1946/s 3.18845G/s     638.786M               4.65231                2.84379   524.288k       7.44204M/s [BEST: throughput=  1.95 GB/s doc_throughput=    14 docs/s instructions=   638785640 cycles=   224394523 branch_miss=  467802 cache_miss= 6421458 cache_ref=   6470124 items=    524288 avg_time=  70449491 ns]
kostya<yyjson>/manual_time                             225968761 ns    244762219 ns            3         421.647k           607.826M        8.48753M        8.6211M    488.186M              3.55549           4.42683       2.16112G          974.185M                    7.09504                     1.99552           2.32094M    421.188k   137.305M       579.479M/s   8.48942M   8.63806M   488.077M         3.55469    4.42539/s 2.15993G/s     974.185M               7.09504                1.99597   524.288k       2.32018M/s [BEST: throughput=  0.61 GB/s doc_throughput=     4 docs/s instructions=   974184819 cycles=   488186129 branch_miss=  421647 cache_miss= 8487533 cache_ref=   8621101 items=    524288 avg_time= 225968761 ns]
kostya<yyjson_insitu>/manual_time                      147633780 ns    166427649 ns            5          419.77k            930.24M        6.35843M        7.7164M     359.67M              2.61949           6.77499       2.43676G          955.915M                    6.96198                     2.65776           3.55205M     418.71k   137.305M       886.953M/s   6.35971M   7.72068M   359.668M         2.61949    6.77352/s 2.43622G/s     955.915M               6.96198                2.65777   524.288k       3.55127M/s [BEST: throughput=  0.93 GB/s doc_throughput=     6 docs/s instructions=   955915145 cycles=   359669741 branch_miss=  419770 cache_miss= 6358430 cache_ref=   7716405 items=    524288 avg_time= 147633779 ns]
kostya<sajson>/manual_time                             163193408 ns    181950472 ns            4         355.739k           842.201M        8.44571M       8.54003M    519.824M              3.78591            6.1338        3.1885G          1.52083G                    11.0763                     2.92567           3.21588M    355.805k   137.305M       802.387M/s   8.48569M   8.54043M   520.374M         3.78991     6.1277/s 3.18869G/s     1.52083G               11.0763                2.92258   524.288k       3.21268M/s [BEST: throughput=  0.84 GB/s doc_throughput=     6 docs/s instructions=  1520833626 cycles=   519824365 branch_miss=  355739 cache_miss= 8445715 cache_ref=   8540027 items=    524288 avg_time= 163193408 ns]
kostya<rapidjson>/manual_time                          320047316 ns    338815544 ns            2         970.928k            433.49M        5.24927M       5.83782M    912.984M              6.64931           3.15713       2.88241G          2.73082G                    19.8887                      2.9911           1.65525M     968.84k   137.305M        409.14M/s   5.12297M   5.72369M   914.991M         6.66393    3.12454/s 2.85892G/s     2.73083G               19.8888                2.98454   524.288k       1.63816M/s [BEST: throughput=  0.43 GB/s doc_throughput=     3 docs/s instructions=  2730823674 cycles=   912983744 branch_miss=  970928 cache_miss= 5249266 cache_ref=   5837820 items=    524288 avg_time= 320047315 ns]
kostya<rapidjson_lossless>/manual_time                 337791637 ns    356574575 ns            2         954.439k           410.487M        5.24954M       5.82499M    969.277M               7.0593            2.9896       2.89775G          3.00711G                     21.901                     3.10243           1.56741M     954.88k   137.305M       387.648M/s   5.12272M   5.71846M   971.193M         7.07325     2.9604/s 2.87512G/s     3.00712G                21.901                3.09631   524.288k        1.5521M/s [BEST: throughput=  0.41 GB/s doc_throughput=     2 docs/s instructions=  3007114441 cycles=   969277352 branch_miss=  954439 cache_miss= 5249542 cache_ref=   5824988 items=    524288 avg_time= 337791637 ns]
kostya<rapidjson_insitu>/manual_time                   312466674 ns    331318080 ns            2         665.328k           444.677M        7.37978M       7.95199M    887.853M              6.46628           3.23861       2.87541G          2.21411G                    16.1255                     2.49378           1.69796M    721.444k   137.305M       419.066M/s   7.26023M   7.85532M    891.12M         6.49008    3.20034/s 2.85189G/s     2.21411G               16.1255                2.48464   524.288k        1.6779M/s [BEST: throughput=  0.44 GB/s doc_throughput=     3 docs/s instructions=  2214112545 cycles=   887852665 branch_miss=  665328 cache_miss= 7379776 cache_ref=   7951992 items=    524288 avg_time= 312466673 ns]
kostya<nlohmann_json>/manual_time                     2278434040 ns   2297197605 ns            1         13.7891M           60.2629M        45.4021M       45.9874M    7.26706G              52.9264          0.438898        3.1895G          17.8932G                    130.317                     2.46223           230.109k    13.7891M   137.305M       57.4712M/s   45.4021M   45.9874M   7.26706G         52.9264   0.438898/s  3.1895G/s     17.8932G               130.317                2.46223   524.288k       230.109k/s [BEST: throughput=  0.06 GB/s doc_throughput=     0 docs/s instructions= 17893173005 cycles=  7267055401 branch_miss=13789060 cache_miss=45402083 cache_ref=  45987394 items=    524288 avg_time=2278434040 ns]
distinct_user_id<simdjson_dom>/manual_time                324091 ns       403379 ns         2157           3.896k           1.96538G               4        33.873k    1026.24k              1.62504          3.11216k       3.19382G          2.86747M                    4.54061                     2.79415           357.899k    4.03772k   631.515k       1.81475G/s    2.80343   33.9358k   1034.04k          1.6374   3.08556k/s 3.19059G/s     2.86747M               4.54061                2.77307        115       354.839k/s [BEST: throughput=  1.97 GB/s doc_throughput=  3112 docs/s instructions=     2867465 cycles=     1026239 branch_miss=    3896 cache_miss=       4 cache_ref=     33873 items=       115 avg_time=    324090 ns]
distinct_user_id<simdjson_ondemand>/manual_time           199720 ns       262990 ns         3499           2.042k           3.19683G               3         9.485k    631.079k              0.99931          5.06216k       3.19462G          1.82938M                    2.89681                     2.89881           582.149k    2.20474k   631.515k       2.94484G/s    3.33552   9.49808k   637.365k         1.00926   5.00701k/s 3.19129G/s     1.82938M               2.89681                2.87023        115       575.806k/s [BEST: throughput=  3.20 GB/s doc_throughput=  5062 docs/s instructions=     1829381 cycles=      631079 branch_miss=    2042 cache_miss=       3 cache_ref=      9485 items=       115 avg_time=    199720 ns]
distinct_user_id<yyjson>/manual_time                      686282 ns       775222 ns         1000           6.432k           1.56752G          7.187k        27.451k    1.28656M              2.03725          2.48217k       3.19345G          2.87791M                    4.55715                     2.23691           285.449k    7.39136k   631.515k       877.568M/s   2.26216k    24.714k   1.48164M         2.34617   1.45713k/s 2.15894G/s     2.87811M               4.55746                1.94251        115       167.569k/s [BEST: throughput=  1.57 GB/s doc_throughput=  2482 docs/s instructions=     2877909 cycles=     1286557 branch_miss=    6432 cache_miss=    7187 cache_ref=     27451 items=       115 avg_time=    686282 ns]
distinct_user_id<yyjson_insitu>/manual_time               509345 ns       580536 ns         1388           7.403k           1.80899G             151          15.2k    1.11489M              1.76542          2.86453k       3.19363G          2.87739M                    4.55633                     2.58088            329.42k    7.40581k   631.515k       1.15471G/s    66.4388   9.35862k    1.2262M         1.94167    1.9633k/s  2.4074G/s     2.87766M               4.55675                2.34682        115        225.78k/s [BEST: throughput=  1.81 GB/s doc_throughput=  2864 docs/s instructions=     2877392 cycles=     1114889 branch_miss=    7403 cache_miss=     151 cache_ref=     15200 items=       115 avg_time=    509345 ns]
distinct_user_id<sajson>/manual_time                      687564 ns       759470 ns         1015          10.725k           928.722M               0        13.169k    2.17129M              3.43822          1.47063k       3.19315G          5.81759M                    9.21211                     2.67933           169.122k    11.0714k   631.515k       875.933M/s    1.84828   13.1223k   2.19322M         3.47295   1.45441k/s 3.18984G/s     5.81759M               9.21211                2.65253        115       167.257k/s [BEST: throughput=  0.93 GB/s doc_throughput=  1470 docs/s instructions=     5817587 cycles=     2171287 branch_miss=   10725 cache_miss=       0 cache_ref=     13169 items=       115 avg_time=    687563 ns]
distinct_user_id<rapidjson>/manual_time                  2530862 ns      2604488 ns          278          31.748k           278.032M         12.693k         22.78k    7.25195M              11.4834           440.262       3.19276G          21.8231M                    34.5568                     3.00928           50.6301k    33.2285k   631.515k       237.966M/s    784.169   13.3284k   7.41324M         11.7388    395.122/s 2.92914G/s     21.8241M               34.5583                2.94393        115       45.4391k/s [BEST: throughput=  0.28 GB/s doc_throughput=   440 docs/s instructions=    21823144 cycles=     7251951 branch_miss=   31748 cache_miss=   12693 cache_ref=     22780 items=       115 avg_time=   2530862 ns]
distinct_user_id<rapidjson_insitu>/manual_time           1808450 ns      1880063 ns          392          24.583k           378.446M             291        14.821k    5.32789M              8.43668           599.267       3.19283G          13.2539M                    20.9875                     2.48765           68.9158k    27.1225k   631.515k       333.025M/s   1.84441k   12.0972k   5.46233M         8.64956     552.96/s 3.02045G/s     13.2544M               20.9883                2.42651        115       63.5904k/s [BEST: throughput=  0.38 GB/s doc_throughput=   599 docs/s instructions=    13253910 cycles=     5327887 branch_miss=   24583 cache_miss=     291 cache_ref=     14821 items=       115 avg_time=   1808450 ns]
distinct_user_id<nlohmann_json>/manual_time              9358048 ns      9449147 ns           77         125.782k           70.7282M          1.337k        99.556k    28.4554M              45.0589           111.998       3.18694G          76.3329M                    120.873                     2.68255           12.8797k    140.068k   631.515k       64.3574M/s    221.623   106.643k   29.8442M          47.258     106.86/s 3.18914G/s      75.018M                118.79                2.51366        115       12.2889k/s [BEST: throughput=  0.07 GB/s doc_throughput=   111 docs/s instructions=    76332898 cycles=    28455396 branch_miss=  125782 cache_miss=    1337 cache_ref=     99556 items=       115 avg_time=   9358047 ns]
find_tweet<simdjson_dom>/manual_time                      316963 ns       392503 ns         2207           3.522k           2.00557G               0        30.731k    1005.68k              1.59249          3.17581k       3.19386G          2.78229M                    4.40574                     2.76657           3.17581k    3.64944k   631.515k       1.85556G/s   0.247848   30.7963k   1011.37k          1.6015   3.15494k/s 3.19081G/s     2.78229M               4.40574                2.75102          1       3.15494k/s [BEST: throughput=  2.01 GB/s doc_throughput=  3175 docs/s instructions=     2782291 cycles=     1005683 branch_miss=    3522 cache_miss=       0 cache_ref=     30731 items=         1 avg_time=    316963 ns]
find_tweet<simdjson_ondemand>/manual_time                 133349 ns       198480 ns         5242              988           4.77314G               0         7.656k    422.679k              0.66931          7.55824k       3.19471G          1.32079M                    2.09146                     3.12481           7.55824k     1026.04   631.515k       4.41056G/s   0.249332   7.66026k   425.643k        0.674002   7.49911k/s 3.19194G/s     1.32079M               2.09146                3.10305          1       7.49911k/s [BEST: throughput=  4.77 GB/s doc_throughput=  7558 docs/s instructions=     1320790 cycles=      422679 branch_miss=     988 cache_miss=       0 cache_ref=      7656 items=         1 avg_time=    133349 ns]
find_tweet<yyjson>/manual_time                            769016 ns       854942 ns         1009           9.278k           1.50228G             239        27.341k    1.34275M              2.12623          2.37885k       3.19419G          2.81716M                    4.46096                     2.09806           2.37885k    7.33414k   631.515k       783.156M/s    339.866   19.9534k   1.49277M         2.36379   1.30036k/s 1.94114G/s     2.81764M               4.46172                1.88752          1       1.30036k/s [BEST: throughput=  1.50 GB/s doc_throughput=  2378 docs/s instructions=     2817163 cycles=     1342746 branch_miss=    9278 cache_miss=     239 cache_ref=     27341 items=         1 avg_time=    769016 ns]
find_tweet<yyjson_insitu>/manual_time                     493773 ns       557680 ns         1417           6.652k           1.87235G             993        13.217k    1072.24k              1.69789          2.96485k       3.17904G          2.81684M                    4.46045                     2.62706           2.96485k    7.15216k   631.515k       1.19112G/s    6.86803   5.54204k    1.1771M         1.86394   2.02522k/s  2.3839G/s      2.8171M               4.46086                2.39325          1       2.02522k/s [BEST: throughput=  1.87 GB/s doc_throughput=  2964 docs/s instructions=     2816839 cycles=     1072241 branch_miss=    6652 cache_miss=     993 cache_ref=     13217 items=         1 avg_time=    493773 ns]
find_tweet<sajson>/manual_time                            674821 ns       744978 ns         1037          10.556k           945.515M               1        12.871k    2.13266M              3.37705          1.49722k       3.19305G          5.72247M                    9.06149                     2.68326           1.49722k    10.8238k   631.515k       892.473M/s    3.31051   13.0206k   2.15268M         3.40875   1.48187k/s    3.19G/s     5.72247M               9.06149                 2.6583          1       1.48187k/s [BEST: throughput=  0.95 GB/s doc_throughput=  1497 docs/s instructions=     5722466 cycles=     2132658 branch_miss=   10556 cache_miss=       1 cache_ref=     12871 items=         1 avg_time=    674821 ns]
find_tweet<rapidjson>/manual_time                        2528284 ns      2597085 ns          278          32.063k           279.624M          9.556k        21.079k    7.21063M               11.418           442.782       3.19274G          21.7393M                     34.424                      3.0149            442.782    32.9092k   631.515k       238.209M/s    610.155   9.99077k   7.40552M         11.7266    395.525/s 2.92907G/s     21.7401M               34.4254                2.93567          1        395.525/s [BEST: throughput=  0.28 GB/s doc_throughput=   442 docs/s instructions=    21739295 cycles=     7210625 branch_miss=   32063 cache_miss=    9556 cache_ref=     21079 items=         1 avg_time=   2528283 ns]
find_tweet<rapidjson_insitu>/manual_time                 1814940 ns      1882187 ns          386          23.961k           381.073M             482        13.718k    5.29113M              8.37847           603.427       3.19281G          13.1753M                     20.863                     2.49007            603.427    29.7024k   631.515k       331.834M/s   1.69138k    9.1935k   5.48636M         8.68761    550.982/s 3.02289G/s     13.1756M               20.8634                2.40151          1        550.982/s [BEST: throughput=  0.38 GB/s doc_throughput=   603 docs/s instructions=    13175270 cycles=     5291130 branch_miss=   23961 cache_miss=     482 cache_ref=     13718 items=         1 avg_time=   1814940 ns]
find_tweet<nlohmann_json>/manual_time                    8160413 ns      8249474 ns           89          99.311k           82.1451M             841        77.106k    24.5096M              38.8108           130.076       3.18812G          66.4587M                    105.237                     2.71154            130.076    113.975k   631.515k       73.8026M/s    132.382   82.0076k   26.0253M         41.2109    122.543/s 3.18922G/s     65.1006M               103.086                2.50143          1        122.543/s [BEST: throughput=  0.08 GB/s doc_throughput=   130 docs/s instructions=    66458738 cycles=    24509626 branch_miss=   99311 cache_miss=     841 cache_ref=     77106 items=         1 avg_time=   8160412 ns]
top_tweet<simdjson_dom>/manual_time                       315573 ns       396170 ns         2217           3.617k           2.01663G               2        33.124k    1000.11k              1.58367          3.19332k       3.19368G          2.81918M                    4.46415                     2.81886           3.19332k    3.77142k   631.515k       1.86374G/s   0.448354    33.066k   1006.84k         1.59433   3.16884k/s 3.19052G/s     2.81918M               4.46415                2.80002          1       3.16884k/s [BEST: throughput=  2.02 GB/s doc_throughput=  3193 docs/s instructions=     2819178 cycles=     1000113 branch_miss=    3617 cache_miss=       2 cache_ref=     33124 items=         1 avg_time=    315572 ns]
top_tweet<simdjson_ondemand>/manual_time                  184419 ns       251024 ns         3789           2.072k           3.46786G               0         9.599k    581.703k             0.921123          5.49134k       3.19433G          1.84358M                     2.9193                     3.16928           5.49134k    2.20412k   631.515k       3.18918G/s  0.0525205   9.67907k   588.548k        0.931962   5.42245k/s 3.19137G/s     1.84358M                2.9193                3.13242          1       5.42245k/s [BEST: throughput=  3.47 GB/s doc_throughput=  5491 docs/s instructions=     1843579 cycles=      581703 branch_miss=    2072 cache_miss=       0 cache_ref=      9599 items=         1 avg_time=    184418 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time     187646 ns       255346 ns         3732           2.109k           3.41795G               0        10.247k    590.271k              0.93469          5.41231k       3.19473G          1.85914M                    2.94394                     3.14964           5.41231k    2.37206k   631.515k       3.13433G/s   0.993301   10.4368k   598.862k        0.948294   5.32919k/s 3.19145G/s     1.85914M               2.94394                3.10446          1       5.32919k/s [BEST: throughput=  3.42 GB/s doc_throughput=  5412 docs/s instructions=     1859144 cycles=      590271 branch_miss=    2109 cache_miss=       0 cache_ref=     10247 items=         1 avg_time=    187645 ns]
top_tweet<yyjson>/manual_time                             779989 ns       869859 ns          986           9.483k           1.48186G             216        27.435k    1.36138M              2.15573          2.34652k        3.1945G          2.84445M                    4.50417                     2.08939           2.34652k    7.48974k   631.515k       772.139M/s    400.063   22.5046k   1.52706M         2.41809   1.28207k/s  1.9578G/s     2.84491M                4.5049                  1.863          1       1.28207k/s [BEST: throughput=  1.48 GB/s doc_throughput=  2346 docs/s instructions=     2844453 cycles=     1361377 branch_miss=    9483 cache_miss=     216 cache_ref=     27435 items=         1 avg_time=    779988 ns]
top_tweet<yyjson_insitu>/manual_time                      503176 ns       573942 ns         1000           6.863k           1.83911G           1.31k        13.355k    1091.18k              1.72788          2.91223k       3.17777G          2.84432M                    4.50396                     2.60664           2.91223k    7.26516k   631.515k       1.16886G/s      50.45    8.1306k   1.20704M         1.91134   1.98738k/s 2.39884G/s     2.84458M               4.50438                2.35666          1       1.98738k/s [BEST: throughput=  1.84 GB/s doc_throughput=  2912 docs/s instructions=     2844321 cycles=     1091182 branch_miss=    6863 cache_miss=    1310 cache_ref=     13355 items=         1 avg_time=    503175 ns]
top_tweet<sajson>/manual_time                             679472 ns       753989 ns         1030          10.713k           938.477M              32        13.356k    2.14874M              3.40252          1.48607k       3.19319G          5.75246M                    9.10898                     2.67712           1.48607k    10.9151k   631.515k       886.365M/s    34.9825   13.2674k   2.16753M         3.43227   1.47173k/s 3.19003G/s     5.75246M               9.10898                2.65392          1       1.47173k/s [BEST: throughput=  0.94 GB/s doc_throughput=  1486 docs/s instructions=     5752458 cycles=     2148745 branch_miss=   10713 cache_miss=      32 cache_ref=     13356 items=         1 avg_time=    679471 ns]
top_tweet<rapidjson>/manual_time                         2526659 ns      2600114 ns          278           31.78k            277.92M          9.609k        22.217k    7.24181M              11.4674           440.084         3.187G          21.7972M                    34.5158                     3.00991            440.084    33.2868k   631.515k       238.362M/s    699.914    11.024k   7.40058M         11.7188     395.78/s   2.929G/s     21.7981M               34.5171                2.94545          1         395.78/s [BEST: throughput=  0.28 GB/s doc_throughput=   440 docs/s instructions=    21797214 cycles=     7241811 branch_miss=   31780 cache_miss=    9609 cache_ref=     22217 items=         1 avg_time=   2526658 ns]
top_tweet<rapidjson_insitu>/manual_time                  1842329 ns      1915150 ns          380          24.878k           378.075M          7.058k        14.106k     5.3329M              8.44462            598.68        3.1927G           13.229M                     20.948                     2.48063             598.68     32.377k   631.515k       326.901M/s    1.8293k   10.7471k   5.57473M         8.82755    542.791/s 3.02592G/s     13.2294M               20.9487                2.37311          1        542.791/s [BEST: throughput=  0.38 GB/s doc_throughput=   598 docs/s instructions=    13228950 cycles=     5332905 branch_miss=   24878 cache_miss=    7058 cache_ref=     14106 items=         1 avg_time=   1842328 ns]
top_tweet<nlohmann_json>/manual_time                    11027566 ns     11119267 ns           64         191.016k           57.6852M             422       164.436k    34.9135M              55.2853           91.3442       3.18914G          88.3906M                    139.966                     2.53171            91.3442    196.147k   631.515k        54.614M/s    244.469   165.094k    35.169M         55.6899    90.6818/s 3.18919G/s     88.7737M               140.573                 2.5242          1        90.6818/s [BEST: throughput=  0.06 GB/s doc_throughput=    91 docs/s instructions=    88390628 cycles=    34913466 branch_miss=  191016 cache_miss=     422 cache_ref=    164436 items=         1 avg_time=  11027565 ns]
