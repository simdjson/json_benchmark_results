run_benchmark: v0.8.0~1 /home/jkeiser/simdjson_benchmark_results/v0.7.0/37/skylake-gcc10.2.json 
git reset --hard v0.8.0~1
HEAD is now at 1005c62e It seems that we export too many targets. (#1385)
cmake ..
-- The CXX compiler identification is GNU 10.2.0
-- The C compiler identification is GNU 10.2.0
-- Check for working CXX compiler: /usr/bin/g++-10
-- Check for working CXX compiler: /usr/bin/g++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/gcc-10
-- Check for working C compiler: /usr/bin/gcc-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-1005c62e
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Failed
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Failed
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/37/skylake-gcc10.2.json --benchmark_out_format=json
2021-01-23 04:45:03
Running benchmark/bench_ondemand
Run on (4 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 256 KiB (x4)
  L3 Unified 8192 KiB (x1)
Load Average: 1.00, 1.00, 0.95
simdjson::dom implementation:      haswell
simdjson::ondemand implementation: fallback
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                  264272 ns       292981 ns         2649           3.923k           2.40359G               0        92.824k    970.143k              1.53622          3.80607k       3.69244G           2.9625M                     4.6911                     3.05368           380.607k    4.07139k   631.515k       2.22553G/s    2.93847   92.8984k   975.277k         1.54435   3.78398k/s 3.69043G/s      2.9625M                4.6911                 3.0376        100       378.398k/s [BEST: throughput=  2.40 GB/s doc_throughput=  3806 docs/s instructions=     2962503 cycles=      970143 branch_miss=    3923 cache_miss=       0 cache_ref=     92824 items=       100 avg_time=    264271 ns]
partial_tweets<simdjson_ondemand>/manual_time             190834 ns       219335 ns         3669           2.241k            3.3312G               0        58.713k    700.103k              1.10861          5.27493k       3.69299G          2.46019M                    3.89569                     3.51404           527.493k    2.38023k   631.515k       3.08197G/s   0.108204   58.5732k   704.166k         1.11504   5.24016k/s 3.68994G/s     2.46019M               3.89569                3.49376        100       524.016k/s [BEST: throughput=  3.33 GB/s doc_throughput=  5274 docs/s instructions=     2460189 cycles=      700103 branch_miss=    2241 cache_miss=       0 cache_ref=     58713 items=       100 avg_time=    190833 ns]
partial_tweets<yyjson>/manual_time                        703480 ns       734328 ns         1000           9.838k           1.53035G             289        78.714k     1.5237M              2.41276           2.4233k       3.69238G          2.90845M                    4.60552                     1.90881            242.33k    7.53976k   631.515k       856.115M/s    900.983   51.1593k   1.73452M         2.74661    1.4215k/s 2.46563G/s     2.90894M               4.60629                1.67708        100        142.15k/s [BEST: throughput=  1.53 GB/s doc_throughput=  2423 docs/s instructions=     2908453 cycles=     1523697 branch_miss=    9838 cache_miss=     289 cache_ref=     78714 items=       100 avg_time=    703480 ns]
partial_tweets<yyjson_insitu>/manual_time                 488599 ns       517932 ns         1433           7.301k           1.70727G              36        48.334k    1.36575M              2.16266          2.70346k       3.69225G          2.90814M                    4.60501                     2.12933           270.346k    7.33259k   631.515k       1.20373G/s    150.692   33.5938k   1.46153M         2.31433   2.04667k/s 2.99127G/s      2.9084M               4.60543                1.98996        100       204.667k/s [BEST: throughput=  1.71 GB/s doc_throughput=  2703 docs/s instructions=     2908136 cycles=     1365754 branch_miss=    7301 cache_miss=      36 cache_ref=     48334 items=       100 avg_time=    488599 ns]
partial_tweets<sajson>/manual_time                        543246 ns       572014 ns         1289          11.182k           1.17495G               0        48.654k    1.98434M              3.14218          1.86052k        3.6919G          6.05184M                    9.58305                     3.04981           186.052k    11.4023k   631.515k       1108.63M/s     1.7533   48.5792k   2.00441M         3.17397   1.84079k/s  3.6897G/s     6.05184M               9.58305                3.01926        100       184.079k/s [BEST: throughput=  1.17 GB/s doc_throughput=  1860 docs/s instructions=     6051839 cycles=     1984336 branch_miss=   11182 cache_miss=       0 cache_ref=     48654 items=       100 avg_time=    543245 ns]
partial_tweets<rapidjson>/manual_time                    1474295 ns      1503619 ns          482          28.485k           495.783M          9.807k        55.069k    4.70232M              7.44609           785.069       3.69164G          13.4095M                    21.2339                     2.85168           78.5069k    28.4773k   631.515k       408.507M/s    470.911   34.2698k   4.84617M         7.67388     678.29/s 3.28711G/s     13.4102M                21.235                2.76718        100        67.829k/s [BEST: throughput=  0.50 GB/s doc_throughput=   785 docs/s instructions=    13409512 cycles=     4702320 branch_miss=   28485 cache_miss=    9807 cache_ref=     55069 items=       100 avg_time=   1474294 ns]
partial_tweets<rapidjson_insitu>/manual_time              979967 ns      1009032 ns          716           23.76k           736.483M              20        45.443k    3.16568M              5.01284          1.16622k       3.69187G          9.75483M                    15.4467                     3.08143           116.622k    23.8858k   631.515k       614.571M/s    210.419   35.1401k   3.26872M           5.176    1020.44/s 3.33554G/s     9.75543M               15.4477                2.98448        100       102.044k/s [BEST: throughput=  0.74 GB/s doc_throughput=  1166 docs/s instructions=     9754825 cycles=     3165685 branch_miss=   23760 cache_miss=      20 cache_ref=     45443 items=       100 avg_time=    979967 ns]
partial_tweets<nlohmann_json>/manual_time                7793019 ns      7828388 ns           90         137.852k           83.8531M              53       233.897k    27.7813M              43.9915           132.781       3.68882G           71.212M                    112.764                     2.56331           13.2781k    150.711k   631.515k       77.2819M/s    70.3222    368.93k   28.7457M         45.5187     128.32/s 3.68865G/s     71.6677M               113.485                2.49316        100        12.832k/s [BEST: throughput=  0.08 GB/s doc_throughput=   132 docs/s instructions=    71212020 cycles=    27781280 branch_miss=  137852 cache_miss=      53 cache_ref=    233897 items=       100 avg_time=   7793018 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                  92122105 ns     95500303 ns            8         879.793k           502.586M        10.8246M       15.3895M    337.651M              7.34043           10.9261        3.6892G          983.113M                    21.3726                     2.91163           10.9261M    876.032k   45.9988M       476.192M/s   10.8706M   15.3951M   339.714M         7.38528    10.8552/s 3.68765G/s     983.113M               21.3726                2.89394      1000k       10.8552M/s [BEST: throughput=  0.50 GB/s doc_throughput=    10 docs/s instructions=   983112701 cycles=   337650846 branch_miss=  879793 cache_miss=10824589 cache_ref=  15389517 items=   1000000 avg_time=  92122104 ns]
large_random<simdjson_ondemand>/manual_time             59781039 ns     63151462 ns           12         879.836k           774.921M        5.73976M       8.00265M    218.963M              4.76019           16.8466       3.68877G           642.49M                    13.9675                     2.93424           16.8466M    895.232k   45.9988M       733.809M/s   5.66215M   8.00023M   220.501M         4.79362    16.7277/s 3.68847G/s      642.49M               13.9675                2.91378      1000k       16.7277M/s [BEST: throughput=  0.77 GB/s doc_throughput=    16 docs/s instructions=   642489790 cycles=   218962791 branch_miss=  879836 cache_miss= 5739759 cache_ref=   8002645 items=   1000000 avg_time=  59781039 ns]
large_random<simdjson_ondemand_unordered>/manual_time   63029637 ns     66393254 ns           11         895.587k           730.461M        5.63971M       8.01336M    232.308M              5.05031             15.88       3.68905G           646.49M                    14.0545                      2.7829             15.88M    895.836k   45.9988M       695.988M/s   5.65837M   8.01467M   232.485M         5.05416    15.8656/s  3.6885G/s      646.49M               14.0545                2.78078      1000k       15.8656M/s [BEST: throughput=  0.73 GB/s doc_throughput=    15 docs/s instructions=   646489795 cycles=   232307955 branch_miss=  895587 cache_miss= 5639715 cache_ref=   8013361 items=   1000000 avg_time=  63029637 ns]
large_random<yyjson>/manual_time                       127910413 ns    131306775 ns            5         661.627k           360.248M        5.77416M       8.92473M    351.678M              7.64538           7.83169       2.75423G          944.149M                    20.5255                      2.6847           7.83169M    659.433k   45.9988M       342.958M/s   5.77059M   8.92414M   351.698M         7.64581    7.81797/s 2.74956G/s     944.149M               20.5255                2.68455      1000k       7.81797M/s [BEST: throughput=  0.36 GB/s doc_throughput=     7 docs/s instructions=   944149408 cycles=   351677960 branch_miss=  661627 cache_miss= 5774160 cache_ref=   8924734 items=   1000000 avg_time= 127910412 ns]
large_random<yyjson_insitu>/manual_time                109654486 ns    113076078 ns            6         659.202k           419.669M        4.93332M       7.63034M    319.137M              6.93794           9.12347       2.91163G          938.029M                    20.3925                     2.93927           9.12347M    658.784k   45.9988M       400.055M/s    4.9336M   7.63271M   319.116M         6.93749    9.11955/s 2.91019G/s     938.029M               20.3925                2.93946      1000k       9.11955M/s [BEST: throughput=  0.42 GB/s doc_throughput=     9 docs/s instructions=   938028856 cycles=   319136608 branch_miss=  659202 cache_miss= 4933316 cache_ref=   7630338 items=   1000000 avg_time= 109654486 ns]
large_random<sajson>/manual_time                        93595826 ns     96988404 ns            7         592.612k           492.147M        8.27586M       12.2208M    344.818M              7.49623           10.6991       3.68925G          1099.99M                    23.9134                     3.19006           10.6991M     593.08k   45.9988M       468.695M/s   8.31983M   12.0826M   345.254M         7.50572    10.6842/s 3.68878G/s     1099.99M               23.9134                3.18602      1000k       10.6842M/s [BEST: throughput=  0.49 GB/s doc_throughput=    10 docs/s instructions=  1099987387 cycles=   344817559 branch_miss=  592612 cache_miss= 8275856 cache_ref=  12220816 items=   1000000 avg_time=  93595826 ns]
large_random<rapidjson>/manual_time                    173178938 ns    176618692 ns            4          608.25k           276.991M        6.96684M        10.804M    554.569M              12.0562            6.0217       3.33945G          1.66014G                     36.091                     2.99357            6.0217M    606.879k   45.9988M       253.309M/s   6.40895M   10.0479M    559.95M         12.1731    5.77437/s 3.23336G/s     1.66015G               36.0912                2.96482      1000k       5.77437M/s [BEST: throughput=  0.28 GB/s doc_throughput=     6 docs/s instructions=  1660142576 cycles=   554569184 branch_miss=  608250 cache_miss= 6966841 cache_ref=  10803980 items=   1000000 avg_time= 173178937 ns]
large_random<rapidjson_lossless>/manual_time           200688556 ns    204075273 ns            4         596.605k           237.375M        6.95256M        10.776M     656.41M              14.2702           5.16046       3.38738G          2.02311G                    43.9818                     3.08208           5.16046M    596.747k   45.9988M       218.587M/s   6.39735M   10.0345M   661.305M         14.3766    4.98285/s 3.29518G/s     2.02312G                43.982                3.05928      1000k       4.98285M/s [BEST: throughput=  0.24 GB/s doc_throughput=     5 docs/s instructions=  2023109644 cycles=   656409732 branch_miss=  596605 cache_miss= 6952556 cache_ref=  10776026 items=   1000000 avg_time= 200688556 ns]
large_random<rapidjson_insitu>/manual_time             161572516 ns    164958249 ns            5         582.579k           298.705M        8.03827M       12.3694M    510.091M              11.0892           6.49376       3.31241G          1.49214G                    32.4387                     2.92524           6.49376M    581.504k   45.9988M       271.506M/s   7.47256M   11.5455M   515.481M         11.2064    6.18917/s  3.1904G/s     1.49215G               32.4389                2.89468      1000k       6.18917M/s [BEST: throughput=  0.30 GB/s doc_throughput=     6 docs/s instructions=  1492140208 cycles=   510090912 branch_miss=  582579 cache_miss= 8038270 cache_ref=  12369437 items=   1000000 avg_time= 161572515 ns]
large_random<nlohmann_json>/manual_time               1226457294 ns   1229865401 ns            1         5.55795M           37.5054M        46.5021M       61.1163M    4.51123G              98.0729          0.815357       3.67826G          11.9494G                    259.776                      2.6488           815.357k    5.55795M   45.9988M       35.7679M/s   46.5021M   61.1163M   4.51123G         98.0729   0.815357/s 3.67826G/s     11.9494G               259.776                 2.6488      1000k       815.357k/s [BEST: throughput=  0.04 GB/s doc_throughput=     0 docs/s instructions= 11949361637 cycles=  4511232049 branch_miss= 5557949 cache_miss=46502058 cache_ref=  61116306 items=   1000000 avg_time=1226457294 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                        85700921 ns     95866116 ns            8         458.623k           1.60662G        15.5526M       22.0583M    315.154M              2.29528           11.7011       3.68765G          945.501M                    6.88614                     3.00012           6.13474M    458.605k   137.305M       1.49211G/s   15.5306M   22.0914M   316.066M         2.30192    11.6685/s 3.68801G/s     945.501M               6.88614                2.99147   524.288k       6.11765M/s [BEST: throughput=  1.61 GB/s doc_throughput=    11 docs/s instructions=   945501407 cycles=   315154079 branch_miss=  458623 cache_miss=15552572 cache_ref=  22058314 items=    524288 avg_time=  85700921 ns]
kostya<simdjson_ondemand>/manual_time                   58353447 ns     68477534 ns           12         507.882k            2.3572G        9.94994M       13.9229M    214.903M              1.56515           17.1676       3.68937G          676.213M                     4.9249                      3.1466           9.00077M    509.819k   137.305M       2.19139G/s   9.96408M   13.8605M   215.221M         1.56746    17.1369/s 3.68822G/s     676.213M                4.9249                3.14196   524.288k        8.9847M/s [BEST: throughput=  2.36 GB/s doc_throughput=    17 docs/s instructions=   676213306 cycles=   214902946 branch_miss=  507882 cache_miss= 9949941 cache_ref=  13922944 items=    524288 avg_time=  58353447 ns]
kostya<yyjson>/manual_time                             207492174 ns    217712705 ns            3         413.397k           662.544M        11.2859M       16.0303M    567.828M              4.13553           4.82534       2.73997G          984.045M                    7.16686                       1.733           2.52987M    413.075k   137.305M        631.08M/s    11.285M   16.0136M   567.974M         4.13659    4.81946/s 2.73733G/s     984.045M               7.16686                1.73255   524.288k       2.52678M/s [BEST: throughput=  0.66 GB/s doc_throughput=     4 docs/s instructions=   984045264 cycles=   567828332 branch_miss=  413397 cache_miss=11285888 cache_ref=  16030289 items=    524288 avg_time= 207492174 ns]
kostya<yyjson_insitu>/manual_time                      153595218 ns    163814806 ns            5         416.301k           894.484M        8.74122M       12.1628M    471.854M              3.43654           6.51458       3.07393G          965.775M                     7.0338                     2.04677           3.41552M    416.093k   137.305M       852.528M/s   8.74272M   12.1478M   471.895M         3.43684    6.51062/s 3.07233G/s     965.775M                7.0338                2.04659   524.288k       3.41344M/s [BEST: throughput=  0.89 GB/s doc_throughput=     6 docs/s instructions=   965775269 cycles=   471854052 branch_miss=  416301 cache_miss= 8741217 cache_ref=  12162834 items=    524288 avg_time= 153595217 ns]
kostya<sajson>/manual_time                             135271267 ns    145488216 ns            5         443.166k           1019.46M        12.3563M       17.3086M     496.82M              3.61836           7.42475       3.68876G          1.62034G                     11.801                     3.26143           3.89271M     440.62k   137.305M       968.012M/s   12.3606M   17.3068M   498.954M         3.63391    7.39255/s 3.68854G/s     1.62034G                11.801                3.24748   524.288k       3.87583M/s [BEST: throughput=  1.02 GB/s doc_throughput=     7 docs/s instructions=  1620343050 cycles=   496819559 branch_miss=  443166 cache_miss=12356313 cache_ref=  17308641 items=    524288 avg_time= 135271266 ns]
kostya<rapidjson>/manual_time                          238032571 ns    248265558 ns            3         1030.58k            584.75M        8.05397M       12.1091M    784.801M              5.71575           4.25877       3.34229G          2.29873G                    16.7418                     2.92906           2.23282M    1029.02k   137.305M       550.111M/s    7.7476M   11.6493M   787.177M         5.73305    4.20111/s 3.30701G/s     2.29873G               16.7418                2.92022   524.288k       2.20259M/s [BEST: throughput=  0.58 GB/s doc_throughput=     4 docs/s instructions=  2298730017 cycles=   784800926 branch_miss= 1030584 cache_miss= 8053970 cache_ref=  12109056 items=    524288 avg_time= 238032571 ns]
kostya<rapidjson_lossless>/manual_time                 252557571 ns    262779190 ns            3          945.83k           550.981M        8.05812M       11.9543M    837.543M              6.09987           4.01283       3.36091G          2.50529G                    18.2462                     2.99124           2.10388M    945.947k   137.305M       518.473M/s   7.75665M   11.6985M   840.543M         6.12173    3.95949/s 3.32813G/s     2.50529G               18.2462                2.98056   524.288k       2.07591M/s [BEST: throughput=  0.55 GB/s doc_throughput=     4 docs/s instructions=  2505290951 cycles=   837542717 branch_miss=  945830 cache_miss= 8058119 cache_ref=  11954259 items=    524288 avg_time= 252557571 ns]
kostya<rapidjson_insitu>/manual_time                   218944236 ns    229175679 ns            3         994.369k           636.931M        11.1139M       15.7207M      714.2M              5.20156            4.6388       3.31303G          2.03228G                    14.8012                     2.84553           2.43207M    995.735k   137.305M       598.071M/s   10.8317M   15.3435M   717.143M         5.22299    4.56737/s 3.27546G/s     2.03228G               14.8012                2.83385   524.288k       2.39462M/s [BEST: throughput=  0.64 GB/s doc_throughput=     4 docs/s instructions=  2032275561 cycles=   714199950 branch_miss=  994369 cache_miss=11113940 cache_ref=  15720705 items=    524288 avg_time= 218944236 ns]
kostya<nlohmann_json>/manual_time                     1640114433 ns   1650219889 ns            1         6.39225M           83.7167M        69.0447M       86.6768M    6.04971G              44.0604          0.609714       3.68859G           15.147G                    110.317                     2.50376           319.665k    6.39225M   137.305M       79.8385M/s   69.0447M   86.6768M   6.04971G         44.0604   0.609714/s 3.68859G/s      15.147G               110.317                2.50376   524.288k       319.665k/s [BEST: throughput=  0.08 GB/s doc_throughput=     0 docs/s instructions= 15147048671 cycles=  6049713952 branch_miss= 6392248 cache_miss=69044695 cache_ref=  86676755 items=    524288 avg_time=1640114433 ns]
distinct_user_id<simdjson_dom>/manual_time                259270 ns       290220 ns         2698           4.049k           2.45286G               0        94.635k    950.673k              1.50538          3.88408k       3.69249G          2.90343M                    4.59756                     3.05408            446.67k     4.2227k   631.515k       2.26847G/s    5.21016   94.5792k   956.639k         1.51483   3.85699k/s 3.68975G/s     2.90343M               4.59756                3.03503        115       443.554k/s [BEST: throughput=  2.45 GB/s doc_throughput=  3884 docs/s instructions=     2903428 cycles=      950673 branch_miss=    4049 cache_miss=       0 cache_ref=     94635 items=       115 avg_time=    259269 ns]
distinct_user_id<simdjson_ondemand>/manual_time           183830 ns       214151 ns         3808           2.036k           3.45827G               0        57.164k    674.519k               1.0681          5.47615k       3.69377G          2.15107M                    3.40621                     3.18905           629.757k    2.15409k   631.515k        3.1994G/s   0.125788   57.3256k   678.385k         1.07422   5.43982k/s 3.69029G/s     2.15108M               3.40621                3.17088        115       625.579k/s [BEST: throughput=  3.46 GB/s doc_throughput=  5476 docs/s instructions=     2151075 cycles=      674519 branch_miss=    2036 cache_miss=       0 cache_ref=     57164 items=       115 avg_time=    183829 ns]
distinct_user_id<yyjson>/manual_time                      610628 ns       644411 ns         1000           6.742k           1.60431G          21.75k        76.264k    1.45342M              2.30149          2.54042k       3.69231G          2.87509M                    4.55268                     1.97815           292.148k    7.40132k   631.515k       986.295M/s   7.26309k   57.5281k   1.66086M         2.62996   1.63766k/s 2.71992G/s     2.87528M                 4.553                 1.7312        115       188.331k/s [BEST: throughput=  1.60 GB/s doc_throughput=  2540 docs/s instructions=     2875088 cycles=     1453425 branch_miss=    6742 cache_miss=   21750 cache_ref=     76264 items=       115 avg_time=    610628 ns]
distinct_user_id<yyjson_insitu>/manual_time               483522 ns       516238 ns         1448           6.943k           1.73528G             504        46.558k    1.33988M               2.1217          2.74781k       3.68175G          2.87457M                    4.55186                     2.14539           315.998k    7.45353k   631.515k       1.21638G/s    47.6782   32.2369k   1.45172M          2.2988   2.06816k/s  3.0024G/s     2.87483M               4.55228                1.98029        115       237.838k/s [BEST: throughput=  1.74 GB/s doc_throughput=  2747 docs/s instructions=     2874571 cycles=     1339884 branch_miss=    6943 cache_miss=     504 cache_ref=     46558 items=       115 avg_time=    483522 ns]
distinct_user_id<sajson>/manual_time                      538297 ns       569360 ns         1298          11.017k           1.18757G               0        47.744k     1.9632M              3.10872          1.88052k       3.69183G           5.9843M                    9.47611                     3.04824           216.259k    11.3391k   631.515k       1118.82M/s   0.998459   47.7863k   1.98603M         3.14487   1.85771k/s 3.68947G/s     5.98431M               9.47611                3.01319        115       213.637k/s [BEST: throughput=  1.19 GB/s doc_throughput=  1880 docs/s instructions=     5984305 cycles=     1963202 branch_miss=   11017 cache_miss=       0 cache_ref=     47744 items=       115 avg_time=    538297 ns]
distinct_user_id<rapidjson>/manual_time                  1467710 ns      1498409 ns          481           27.85k           496.117M          9.261k        55.123k    4.69908M              7.44096           785.598       3.69158G          13.3502M                    21.1399                     2.84102           90.3437k    28.4256k   631.515k        410.34M/s     887.36   35.4455k   4.85261M         7.68407    681.334/s 3.30624G/s     13.3509M                21.141                2.75128        115       78.3534k/s [BEST: throughput=  0.50 GB/s doc_throughput=   785 docs/s instructions=    13350168 cycles=     4699077 branch_miss=   27850 cache_miss=    9261 cache_ref=     55123 items=       115 avg_time=   1467709 ns]
distinct_user_id<rapidjson_insitu>/manual_time            960511 ns       991226 ns          811          23.507k           739.814M          2.482k        45.628k    3.15137M              4.99018          1.17149k       3.69181G           9.7063M                    15.3699                     3.08002           134.721k    23.9365k   631.515k        627.02M/s   1.64969k   36.6055k   3.24854M         5.14404    1041.11/s 3.38209G/s     9.70664M               15.3704                  2.988        115       119.728k/s [BEST: throughput=  0.74 GB/s doc_throughput=  1171 docs/s instructions=     9706295 cycles=     3151373 branch_miss=   23507 cache_miss=    2482 cache_ref=     45628 items=       115 avg_time=    960511 ns]
distinct_user_id<nlohmann_json>/manual_time              8574766 ns      8608013 ns           99         116.068k           90.6619M          1.935k       221.661k    25.6879M              40.6766           143.563       3.68781G          66.6361M                    105.518                     2.59407           16.5097k    276.269k   631.515k       70.2363M/s     38.202   498.348k   31.6271M         50.0813    116.621/s 3.68839G/s     65.2504M               103.324                2.06312        115       13.4114k/s [BEST: throughput=  0.09 GB/s doc_throughput=   143 docs/s instructions=    66636133 cycles=    25687859 branch_miss=  116068 cache_miss=    1935 cache_ref=    221661 items=       115 avg_time=   8574766 ns]
find_tweet<simdjson_dom>/manual_time                      315458 ns       344941 ns         2218           11.86k           2.01679G               0        84.013k     1.1562M              1.83083          3.19357k        3.6924G          2.82239M                    4.46923                     2.44109           3.19357k    12.1204k   631.515k       1.86441G/s   0.234445   83.9894k   1.16406M         1.84329   3.16999k/s 3.69007G/s     2.82239M               4.46923                 2.4246          1       3.16999k/s [BEST: throughput=  2.02 GB/s doc_throughput=  3193 docs/s instructions=     2822388 cycles=     1156198 branch_miss=   11860 cache_miss=       0 cache_ref=     84013 items=         1 avg_time=    315458 ns]
find_tweet<simdjson_ondemand>/manual_time                 133381 ns       162223 ns         5252           2.979k           4.83875G               0        32.961k    482.073k              0.76336          7.66213k       3.69371G          1.50672M                    2.38588                     3.12551           7.66213k    3.36362k   631.515k       4.40952G/s   0.488195   32.9402k   492.253k        0.779479   7.49734k/s 3.69059G/s     1.50672M               2.38588                3.06087          1       7.49734k/s [BEST: throughput=  4.84 GB/s doc_throughput=  7662 docs/s instructions=     1506722 cycles=      482073 branch_miss=    2979 cache_miss=       0 cache_ref=     32961 items=         1 avg_time=    133380 ns]
find_tweet<yyjson>/manual_time                            674464 ns       705425 ns         1105           9.372k           1.58913G             140        68.951k    1.46742M              2.32366          2.51638k       3.69259G          2.82414M                      4.472                     1.92455           2.51638k    7.34069k   631.515k       892.946M/s    1012.93   41.4349k   1.68863M         2.67393   1.48266k/s 2.50366G/s     2.82482M               4.47308                1.67285          1       1.48266k/s [BEST: throughput=  1.59 GB/s doc_throughput=  2516 docs/s instructions=     2824136 cycles=     1467423 branch_miss=    9372 cache_miss=     140 cache_ref=     68951 items=         1 avg_time=    674463 ns]
find_tweet<yyjson_insitu>/manual_time                     473352 ns       503655 ns         1479           6.892k           1.76817G             543        38.341k    1.31537M              2.08288          2.79989k       3.68288G          2.82402M                    4.47181                     2.14694           2.79989k    7.18975k   631.515k       1.24251G/s    11.6768   23.5633k   1.41508M         2.24077   2.11259k/s 2.98949G/s     2.82428M               4.47223                1.99585          1       2.11259k/s [BEST: throughput=  1.77 GB/s doc_throughput=  2799 docs/s instructions=     2824018 cycles=     1315367 branch_miss=    6892 cache_miss=     543 cache_ref=     38341 items=         1 avg_time=    473351 ns]
find_tweet<sajson>/manual_time                            525828 ns       555701 ns         1332          10.599k           1.21751G               0          38.4k    1.91492M              3.03227          1.92792k       3.69181G          5.89219M                    9.33024                     3.07698           1.92792k    11.1273k   631.515k       1.11851G/s   0.692943   38.2877k   1.94004M         3.07205   1.90176k/s 3.68951G/s     5.89219M               9.33024                3.03714          1       1.90176k/s [BEST: throughput=  1.22 GB/s doc_throughput=  1927 docs/s instructions=     5892186 cycles=     1914923 branch_miss=   10599 cache_miss=       0 cache_ref=     38400 items=         1 avg_time=    525827 ns]
find_tweet<rapidjson>/manual_time                        1435136 ns      1464138 ns          492          28.934k           507.648M             194        47.415k    4.59233M              7.27192           803.857       3.69157G          13.2815M                    21.0312                     2.89211            803.857    28.4282k   631.515k       419.653M/s    615.311   28.1213k   4.73231M         7.49359    696.798/s 3.29747G/s     13.2823M               21.0325                2.80673          1        696.798/s [BEST: throughput=  0.51 GB/s doc_throughput=   803 docs/s instructions=    13281530 cycles=     4592326 branch_miss=   28934 cache_miss=     194 cache_ref=     47415 items=         1 avg_time=   1435135 ns]
find_tweet<rapidjson_insitu>/manual_time                  949100 ns       978940 ns          818          23.834k            746.05M              22        36.128k    3.12493M              4.94831          1.18137k       3.69169G          9.64822M                    15.2779                      3.0875           1.18137k    23.8439k   631.515k       634.559M/s   1.79896k   27.8482k    3.2139M         5.08919    1053.63/s 3.38626G/s     9.64855M               15.2784                3.00213          1        1053.63/s [BEST: throughput=  0.75 GB/s doc_throughput=  1181 docs/s instructions=     9648222 cycles=     3124932 branch_miss=   23834 cache_miss=      22 cache_ref=     36128 items=         1 avg_time=    949100 ns]
find_tweet<nlohmann_json>/manual_time                    6575102 ns      6604354 ns          117          91.522k           106.854M          1.727k       168.661k    21.7955M               34.513           169.202       3.68784G          57.0487M                    90.3362                     2.61746            169.202    148.054k   631.515k        91.597M/s    153.103   396.604k   24.2456M         38.3928    152.089/s 3.68749G/s     55.6704M               88.1537                 2.2961          1        152.089/s [BEST: throughput=  0.11 GB/s doc_throughput=   169 docs/s instructions=    57048691 cycles=    21795470 branch_miss=   91522 cache_miss=    1727 cache_ref=    168661 items=         1 avg_time=   6575102 ns]
top_tweet<simdjson_dom>/manual_time                       326744 ns       355692 ns         2141          12.506k           1.94726G               0        92.545k    1.19753M              1.89627          3.08347k       3.69253G          2.85646M                    4.52318                      2.3853           3.08347k    12.7424k   631.515k       1.80002G/s    4.47875   92.7173k   1.20563M         1.90912    3.0605k/s 3.68985G/s     2.85646M               4.52318                2.36925          1        3.0605k/s [BEST: throughput=  1.95 GB/s doc_throughput=  3083 docs/s instructions=     2856456 cycles=     1197525 branch_miss=   12506 cache_miss=       0 cache_ref=     92545 items=         1 avg_time=    326743 ns]
top_tweet<simdjson_ondemand>/manual_time                  200178 ns       228842 ns         3497           5.285k           3.17783G               0        57.173k    733.845k              1.16204          5.03208k       3.69277G           2.1282M                    3.36998                     2.90006           5.03208k    5.43775k   631.515k       2.93811G/s  0.0597655   57.0827k   738.718k         1.16976   4.99556k/s 3.69031G/s      2.1282M               3.36999                2.88093          1       4.99556k/s [BEST: throughput=  3.18 GB/s doc_throughput=  5032 docs/s instructions=     2128196 cycles=      733845 branch_miss=    5285 cache_miss=       0 cache_ref=     57173 items=         1 avg_time=    200177 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time     209512 ns       238289 ns         3342           5.585k           3.03848G               0        57.692k     767.43k              1.21522          4.81142k       3.69243G           2.3491M                    3.71979                       3.061           4.81142k    5.76822k   631.515k        2.8072G/s   0.571215    57.839k   773.164k          1.2243   4.77299k/s  3.6903G/s      2.3491M               3.71978                3.03829          1       4.77299k/s [BEST: throughput=  3.04 GB/s doc_throughput=  4811 docs/s instructions=     2349101 cycles=      767430 branch_miss=    5585 cache_miss=       0 cache_ref=     57692 items=         1 avg_time=    209512 ns]
top_tweet<yyjson>/manual_time                             679300 ns       709349 ns         1106          10.008k           1.55399G              86        73.528k    1.50056M              2.37613          2.46074k       3.69249G          2.84501M                    4.50506                     1.89596           2.46074k    7.44098k   631.515k       886.588M/s    960.654   46.5474k   1.70578M         2.70109    1.4721k/s 2.51108G/s      2.8455M               4.50582                1.66815          1        1.4721k/s [BEST: throughput=  1.55 GB/s doc_throughput=  2460 docs/s instructions=     2845010 cycles=     1500562 branch_miss=   10008 cache_miss=      86 cache_ref=     73528 items=         1 avg_time=    679300 ns]
top_tweet<yyjson_insitu>/manual_time                      478885 ns       508479 ns         1462           6.927k           1.74643G             273        42.647k    1.33144M              2.10833          2.76546k       3.68205G          2.84469M                    4.50455                     2.13655           2.76546k    7.32946k   631.515k       1.22815G/s    40.3653   28.7241k    1.4348M         2.27199   2.08818k/s 2.99612G/s     2.84496M               4.50497                1.98283          1       2.08818k/s [BEST: throughput=  1.75 GB/s doc_throughput=  2765 docs/s instructions=     2844694 cycles=     1331444 branch_miss=    6927 cache_miss=     273 cache_ref=     42647 items=         1 avg_time=    478884 ns]
top_tweet<sajson>/manual_time                             531835 ns       560671 ns         1316          10.868k           1.20246G               0        43.697k    1.93891M              3.07025          1.90408k       3.69183G          5.91933M                    9.37322                     3.05292           1.90408k    11.3507k   631.515k       1.10588G/s   0.791033   43.7224k   1.96188M         3.10662   1.88028k/s 3.68889G/s     5.91933M               9.37322                3.01717          1       1.88028k/s [BEST: throughput=  1.20 GB/s doc_throughput=  1904 docs/s instructions=     5919331 cycles=     1938906 branch_miss=   10868 cache_miss=       0 cache_ref=     43697 items=         1 avg_time=    531834 ns]
top_tweet<rapidjson>/manual_time                         1441573 ns      1470563 ns          491          28.488k           505.982M             192        51.275k    4.60758M              7.29608           801.219       3.69168G          13.3316M                    21.1106                     2.89342            801.219    28.3746k   631.515k        417.78M/s    744.749   32.1408k   4.75584M         7.53085    693.687/s 3.29907G/s     13.3326M                21.112                2.80341          1        693.687/s [BEST: throughput=  0.51 GB/s doc_throughput=   801 docs/s instructions=    13331646 cycles=     4607581 branch_miss=   28488 cache_miss=     192 cache_ref=     51275 items=         1 avg_time=   1441572 ns]
top_tweet<rapidjson_insitu>/manual_time                   954900 ns       983818 ns          813           24.16k           739.107M               8        41.434k    3.15437M              4.99493          1.17037k       3.69179G          9.68936M                     15.343                     3.07172           1.17037k    23.8536k   631.515k       630.704M/s   1.88392k   33.2647k   3.23453M         5.12186    1047.23/s  3.3873G/s      9.6899M               15.3439                2.99576          1        1047.23/s [BEST: throughput=  0.74 GB/s doc_throughput=  1170 docs/s instructions=     9689359 cycles=     3154372 branch_miss=   24160 cache_miss=       8 cache_ref=     41434 items=         1 avg_time=    954900 ns]
top_tweet<nlohmann_json>/manual_time                     8595100 ns      8624853 ns           82         178.907k           73.6467M               4       404.052k    31.6379M              50.0984           116.619       3.68958G          78.3196M                    124.019                      2.4755            116.619    180.179k   631.515k       70.0701M/s    152.939   410.839k   31.7027M          50.201    116.345/s 3.68846G/s     78.3248M               124.027                 2.4706          1        116.345/s [BEST: throughput=  0.07 GB/s doc_throughput=   116 docs/s instructions=    78319637 cycles=    31637894 branch_miss=  178907 cache_miss=       4 cache_ref=    404052 items=         1 avg_time=   8595100 ns]
