run_benchmark: v0.8.0~1 /home/jkeiser/simdjson_benchmark_results/v0.7.0/37/skylake-gcc10.2-native.json -DCMAKE_CXX_FLAGS=-march=native
git reset --hard v0.8.0~1
HEAD is now at 1005c62e It seems that we export too many targets. (#1385)
cmake -DCMAKE_CXX_FLAGS=-march=native ..
-- The CXX compiler identification is GNU 10.2.0
-- The C compiler identification is GNU 10.2.0
-- Check for working CXX compiler: /usr/bin/g++-10
-- Check for working CXX compiler: /usr/bin/g++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/gcc-10
-- Check for working C compiler: /usr/bin/gcc-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-1005c62e
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Failed
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Failed
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/37/skylake-gcc10.2-native.json --benchmark_out_format=json
2021-01-23 05:11:52
Running benchmark/bench_ondemand
Run on (4 X 3200 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 1024 KiB (x4)
  L3 Unified 8448 KiB (x1)
Load Average: 1.01, 1.01, 1.00
***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.
simdjson::dom implementation:      haswell
simdjson::ondemand implementation: haswell

Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                  326429 ns       396712 ns         2143           4.229k           1.95003G               0        33.714k    1034.44k              1.63802          3.08786k        3.1942G          3.07044M                    4.86202                     2.96822           308.786k    4.38259k   631.515k       1.80175G/s   0.938871   33.9406k   1041.57k         1.64932   3.06346k/s 3.19081G/s     3.07044M               4.86202                2.94789        100       306.346k/s [BEST: throughput=  1.95 GB/s doc_throughput=  3087 docs/s instructions=     3070441 cycles=     1034437 branch_miss=    4229 cache_miss=       0 cache_ref=     33714 items=       100 avg_time=    326428 ns]
partial_tweets<simdjson_ondemand>/manual_time             241044 ns       298143 ns         2904           2.376k           2.63674G               0         9.586k    765.135k              1.21159          4.17526k       3.19464G          2.23641M                    3.54133                     2.92289           417.526k    2.47659k   631.515k       2.43999G/s  0.0702479     9.591k   769.154k         1.21795   4.14863k/s 3.19093G/s     2.23641M               3.54133                2.90762        100       414.863k/s [BEST: throughput=  2.64 GB/s doc_throughput=  4175 docs/s instructions=     2236405 cycles=      765135 branch_miss=    2376 cache_miss=       0 cache_ref=      9586 items=       100 avg_time=    241043 ns]
partial_tweets<yyjson>/manual_time                        867162 ns       946669 ns          810           9.943k           1.23756G             252        27.652k    1.62958M              2.58043          1.95967k       3.19343G          2.90846M                    4.60553                     1.78479           195.967k    7.75772k   631.515k       694.518M/s    565.281   23.2836k   1.80374M         2.85621   1.15319k/s 2.08005G/s     2.90915M               4.60663                1.61285        100       115.319k/s [BEST: throughput=  1.24 GB/s doc_throughput=  1959 docs/s instructions=     2908461 cycles=     1629580 branch_miss=    9943 cache_miss=     252 cache_ref=     27652 items=       100 avg_time=    867162 ns]
partial_tweets<yyjson_insitu>/manual_time                 588842 ns       650710 ns         1199           6.978k           1.47847G          1.343k        13.513k    1.35482M              2.14534          2.34115k       3.17183G          2.90835M                    4.60536                     2.14668           234.115k    7.45852k   631.515k       1022.79M/s    66.9483   8.43402k   1.48041M         2.34422   1.69825k/s  2.5141G/s     2.90861M               4.60577                1.96474        100       169.825k/s [BEST: throughput=  1.48 GB/s doc_throughput=  2341 docs/s instructions=     2908353 cycles=     1354815 branch_miss=    6978 cache_miss=    1343 cache_ref=     13513 items=       100 avg_time=    588842 ns]
partial_tweets<sajson>/manual_time                        611551 ns       675773 ns         1141          10.061k            1043.1M               0        13.372k    1.93316M              3.06115          1.65175k       3.19309G          6.04845M                    9.57768                     3.12879           165.175k     10.611k   631.515k       984.807M/s    1.62752   13.5743k   1.95099M         3.08938   1.63519k/s 3.19023G/s     6.04845M               9.57768                 3.1002        100       163.519k/s [BEST: throughput=  1.04 GB/s doc_throughput=  1651 docs/s instructions=     6048450 cycles=     1933160 branch_miss=   10061 cache_miss=       0 cache_ref=     13372 items=       100 avg_time=    611550 ns]
partial_tweets<rapidjson>/manual_time                    1910109 ns      1974402 ns          367          26.473k           383.377M          9.734k        22.824k     5.2593M              8.32807           607.075       3.19279G          13.1153M                     20.768                     2.49374           60.7075k     27.023k   631.515k       315.301M/s    336.188    11.271k    5.4129M          8.5713     523.53/s 2.83382G/s     13.1162M               20.7695                2.42314        100        52.353k/s [BEST: throughput=  0.38 GB/s doc_throughput=   607 docs/s instructions=    13115327 cycles=     5259300 branch_miss=   26473 cache_miss=    9734 cache_ref=     22824 items=       100 avg_time=   1910109 ns]
partial_tweets<rapidjson_insitu>/manual_time             1425847 ns      1487928 ns          493          24.547k            499.23M              87        14.327k    4.03902M              6.39577           790.527       3.19296G          9.82264M                    15.5541                     2.43193           79.0527k    24.5568k   631.515k       422.387M/s     183.59   9.06416k   4.15097M         6.57304    701.337/s 2.91123G/s     9.82324M                15.555                2.36649        100       70.1337k/s [BEST: throughput=  0.50 GB/s doc_throughput=   790 docs/s instructions=     9822636 cycles=     4039024 branch_miss=   24547 cache_miss=      87 cache_ref=     14327 items=       100 avg_time=   1425847 ns]
partial_tweets<nlohmann_json>/manual_time                9096713 ns      9186319 ns           76         134.296k           72.7865M              22         98.53k     27.674M              43.8216           115.257       3.18962G          70.6927M                    111.941                     2.55448           11.5257k    147.226k   631.515k       66.2063M/s    101.868   142.059k     29.01M         45.9371     109.93/s 3.18906G/s     71.5172M               113.247                2.46526        100        10.993k/s [BEST: throughput=  0.07 GB/s doc_throughput=   115 docs/s instructions=    70692662 cycles=    27673987 branch_miss=  134296 cache_miss=      22 cache_ref=     98530 items=       100 avg_time=   9096712 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 104629709 ns    110682002 ns            7           853.2k           440.591M        6.75283M       6.89508M    332.903M              7.23722           9.57832       3.18866G          998.581M                    21.7089                     2.99961           9.57832M      853.2k   45.9988M       419.268M/s   6.80206M   6.89523M   333.591M         7.25217    9.55751/s  3.1883G/s     998.581M               21.7089                2.99343      1000k       9.55751M/s [BEST: throughput=  0.44 GB/s doc_throughput=     9 docs/s instructions=   998581028 cycles=   332903272 branch_miss=  853200 cache_miss= 6752834 cache_ref=   6895082 items=   1000000 avg_time= 104629708 ns]
large_random<simdjson_ondemand>/manual_time             66028061 ns     72071666 ns           11         866.839k           697.005M         3.4915M       3.57293M    210.443M              4.57497           15.1527       3.18878G          651.959M                    14.1734                     3.09803           15.1527M    867.173k   45.9988M       664.382M/s   3.51367M   3.57287M   210.538M         4.57703    15.1451/s 3.18861G/s     651.959M               14.1734                3.09664      1000k       15.1451M/s [BEST: throughput=  0.70 GB/s doc_throughput=    15 docs/s instructions=   651958679 cycles=   210443247 branch_miss=  866839 cache_miss= 3491495 cache_ref=   3572928 items=   1000000 avg_time=  66028061 ns]
large_random<simdjson_ondemand_unordered>/manual_time   70720254 ns     76764350 ns           10         865.481k           650.856M        3.51502M       3.57261M    225.369M              4.89945           14.1494       3.18884G          651.959M                    14.1734                     2.89285           14.1494M     865.68k   45.9988M       620.301M/s    3.5131M   3.57252M    225.49M         4.90208    14.1402/s 3.18847G/s     651.959M               14.1734                 2.8913      1000k       14.1402M/s [BEST: throughput=  0.65 GB/s doc_throughput=    14 docs/s instructions=   651958685 cycles=   225368753 branch_miss=  865481 cache_miss= 3515017 cache_ref=   3572612 items=   1000000 avg_time=  70720253 ns]
large_random<yyjson>/manual_time                       157172937 ns    163280066 ns            4         657.452k           293.013M        4.20041M       4.31048M    360.625M              7.83987           6.37001       2.29718G           942.15M                    20.4821                     2.61255           6.37001M    661.163k   45.9988M       279.106M/s    4.2016M   4.31414M   361.219M         7.85279    6.36242/s 2.29822G/s      942.15M               20.4821                2.60825      1000k       6.36242M/s [BEST: throughput=  0.29 GB/s doc_throughput=     6 docs/s instructions=   942149622 cycles=   360624548 branch_miss=  657452 cache_miss= 4200409 cache_ref=   4310475 items=   1000000 avg_time= 157172937 ns]
large_random<yyjson_insitu>/manual_time                131109148 ns    137219133 ns            5         657.953k           351.228M         3.4817M       3.59659M    318.145M              6.91639            7.6356       2.42923G          936.029M                     20.349                     2.94214            7.6356M    660.747k   45.9988M        334.59M/s   3.48559M   3.60022M   318.523M         6.92459    7.62723/s 2.42945G/s     936.029M                20.349                2.93866      1000k       7.62723M/s [BEST: throughput=  0.35 GB/s doc_throughput=     7 docs/s instructions=   936028851 cycles=   318145325 branch_miss=  657953 cache_miss= 3481702 cache_ref=   3596588 items=   1000000 avg_time= 131109147 ns]
large_random<sajson>/manual_time                       103705771 ns    109870248 ns            7          595.99k           444.154M        5.44468M       5.57729M    330.265M              7.17986           9.65578       3.18896G          1066.99M                    23.1961                     3.23072           9.65578M     595.62k   45.9988M       423.003M/s   5.47273M   5.57719M   330.694M         7.18919    9.64266/s 3.18877G/s     1066.99M               23.1961                3.22653      1000k       9.64266M/s [BEST: throughput=  0.44 GB/s doc_throughput=     9 docs/s instructions=  1066991832 cycles=   330264705 branch_miss=  595990 cache_miss= 5444676 cache_ref=   5577287 items=   1000000 avg_time= 103705771 ns]
large_random<rapidjson>/manual_time                    208482075 ns    214626640 ns            4           595.5k           231.053M        4.36972M       4.89075M    566.691M              12.3197           5.02302        2.8465G          1.66512G                    36.1993                     2.93833           5.02302M    594.985k   45.9988M       210.415M/s    4.0801M   4.65937M   572.188M         12.4392    4.79658/s 2.74455G/s     1.66513G               36.1995                2.91011      1000k       4.79658M/s [BEST: throughput=  0.23 GB/s doc_throughput=     5 docs/s instructions=  1665122221 cycles=   566690553 branch_miss=  595500 cache_miss= 4369717 cache_ref=   4890753 items=   1000000 avg_time= 208482074 ns]
large_random<rapidjson_lossless>/manual_time           241857311 ns    247950928 ns            3         605.347k           196.745M        4.37292M       4.89236M     677.57M              14.7302           4.27718       2.89809G          2.04909G                    44.5466                     3.02417           4.27718M    611.252k   45.9988M       181.379M/s   4.11332M   4.68975M   681.339M         14.8121    4.13467/s 2.81711G/s      2.0491G               44.5468                3.00745      1000k       4.13467M/s [BEST: throughput=  0.20 GB/s doc_throughput=     4 docs/s instructions=  2049087725 cycles=   677569962 branch_miss=  605347 cache_miss= 4372923 cache_ref=   4892360 items=   1000000 avg_time= 241857311 ns]
large_random<rapidjson_insitu>/manual_time             189602333 ns    195711363 ns            4         661.425k           255.412M        5.06508M       5.61935M    506.282M              11.0064           5.55258       2.81117G          1.49712G                     32.547                     2.95709           5.55258M    660.977k   45.9988M       231.368M/s   4.79556M   5.39187M   512.095M         11.1328     5.2742/s 2.70089G/s     1.49713G               32.5472                2.92354      1000k        5.2742M/s [BEST: throughput=  0.26 GB/s doc_throughput=     5 docs/s instructions=  1497122150 cycles=   506281861 branch_miss=  661425 cache_miss= 5065081 cache_ref=   5619349 items=   1000000 avg_time= 189602333 ns]
large_random<nlohmann_json>/manual_time               1433007447 ns   1439186931 ns            1         4.50185M           32.0995M        30.4309M       30.8973M    4.55554G              99.0361          0.697833         3.179G          11.9244G                    259.232                     2.61755           697.833k    4.50185M   45.9988M       30.6124M/s   30.4309M   30.8973M   4.55554G         99.0361   0.697833/s   3.179G/s     11.9244G               259.232                2.61755      1000k       697.833k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 11924360906 cycles=  4555537660 branch_miss= 4501852 cache_miss=30430929 cache_ref=  30897265 items=   1000000 avg_time=1433007447 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                        99628109 ns    118766846 ns            7         451.241k           1.38137G        10.2076M       10.3139M    316.926M              2.30819           10.0606       3.18846G           972.65M                    7.08386                     3.06901           5.27464M    451.464k   137.305M       1.28353G/s   10.2382M    10.314M   317.659M         2.31352    10.0373/s 3.18844G/s      972.65M               7.08386                3.06194   524.288k       5.26245M/s [BEST: throughput=  1.38 GB/s doc_throughput=    10 docs/s instructions=   972650011 cycles=   316926285 branch_miss=  451241 cache_miss=10207563 cache_ref=  10313863 items=    524288 avg_time=  99628109 ns]
kostya<simdjson_ondemand>/manual_time                   69133510 ns     88214085 ns           10         469.172k           1.98902G        6.43655M       6.47026M    220.112M              1.60309           14.4861       3.18857G          700.216M                    5.09972                     3.18118           7.59489M    470.579k   137.305M       1.84969G/s   6.43875M   6.47024M   220.439M         1.60547    14.4648/s  3.1886G/s     700.216M               5.09972                3.17646   524.288k        7.5837M/s [BEST: throughput=  1.99 GB/s doc_throughput=    14 docs/s instructions=   700216390 cycles=   220111888 branch_miss=  469172 cache_miss= 6436551 cache_ref=   6470256 items=    524288 avg_time=  69133509 ns]
kostya<yyjson>/manual_time                             264612101 ns    283754666 ns            3         417.045k           519.059M        8.48552M       8.61578M    611.454M              4.45326           3.78034        2.3115G          983.521M                    7.16304                     1.60849           1.98199M    414.432k   137.305M       494.854M/s   8.49342M   8.62045M   611.352M         4.45251    3.77912/s 2.31037G/s     983.521M               7.16304                1.60876   524.288k       1.98135M/s [BEST: throughput=  0.52 GB/s doc_throughput=     3 docs/s instructions=   983520981 cycles=   611454214 branch_miss=  417045 cache_miss= 8485521 cache_ref=   8615780 items=    524288 avg_time= 264612101 ns]
kostya<yyjson_insitu>/manual_time                      186810225 ns    205936321 ns            4         412.008k            735.13M        6.34942M       6.53403M    483.603M              3.52211           5.35399       2.58921G          965.251M                    7.02998                     1.99596           2.80703M    412.663k   137.305M       700.948M/s   6.34886M   6.57805M   483.732M         3.52305    5.35303/s 2.58943G/s     965.251M               7.02998                1.99543   524.288k       2.80653M/s [BEST: throughput=  0.74 GB/s doc_throughput=     5 docs/s instructions=   965250986 cycles=   483603463 branch_miss=  412008 cache_miss= 6349418 cache_ref=   6534034 items=    524288 avg_time= 186810225 ns]
kostya<sajson>/manual_time                             155418747 ns    174536346 ns            4         370.245k            884.76M        8.45368M       8.54507M    494.898M              3.60437           6.44376         3.189G          1.60357G                    11.6789                      3.2402           3.37839M    370.567k   137.305M       842.525M/s   8.48852M   8.54501M   495.601M         3.60949    6.43423/s 3.18881G/s     1.60357G               11.6789                 3.2356   524.288k       3.37339M/s [BEST: throughput=  0.88 GB/s doc_throughput=     6 docs/s instructions=  1603566988 cycles=   494897992 branch_miss=  370245 cache_miss= 8453679 cache_ref=   8545069 items=    524288 avg_time= 155418747 ns]
kostya<rapidjson>/manual_time                          293056708 ns    312250335 ns            2         1088.47k            473.08M        5.24258M       5.75207M    828.104M              6.03113           3.44546        2.8532G          2.29089G                    16.6847                     2.76643           1.80642M    1033.17k   137.305M       446.822M/s   5.11851M    5.6441M   828.548M         6.03436    3.41231/s 2.82726G/s     2.29089G               16.6847                2.76494   524.288k       1.78903M/s [BEST: throughput=  0.47 GB/s doc_throughput=     3 docs/s instructions=  2290888628 cycles=   828103862 branch_miss= 1088470 cache_miss= 5242584 cache_ref=   5752066 items=    524288 avg_time= 293056708 ns]
kostya<rapidjson_lossless>/manual_time                 318291616 ns    337493930 ns            2         959.284k           436.144M        5.23954M       5.74858M    906.756M              6.60396           3.17646       2.88027G          2.50794G                    18.2654                     2.76583           1.66538M    959.164k   137.305M       411.397M/s   5.11688M   5.63799M   909.295M         6.62245    3.14177/s  2.8568G/s     2.50794G               18.2654                2.75811   524.288k       1.64719M/s [BEST: throughput=  0.44 GB/s doc_throughput=     3 docs/s instructions=  2507935127 cycles=   906756365 branch_miss=  959284 cache_miss= 5239536 cache_ref=   5748577 items=    524288 avg_time= 318291616 ns]
kostya<rapidjson_insitu>/manual_time                   283604570 ns    302746882 ns            2         1008.15k           489.948M        7.38232M       7.89215M    796.462M              5.80068           3.56832       2.84203G          2.04115G                    14.8658                     2.56277           1.87082M    1010.71k   137.305M       461.714M/s    7.2546M   7.78211M   798.801M         5.81771    3.52604/s  2.8166G/s     2.04116G               14.8658                2.55527   524.288k       1.84866M/s [BEST: throughput=  0.49 GB/s doc_throughput=     3 docs/s instructions=  2041153601 cycles=   796462332 branch_miss= 1008148 cache_miss= 7382318 cache_ref=   7892146 items=    524288 avg_time= 283604570 ns]
kostya<nlohmann_json>/manual_time                     1931076263 ns   1950264523 ns            1         5.07201M           71.1028M        46.0296M       46.5713M    6.15892G              44.8557          0.517846       3.18937G          15.1099G                    110.046                     2.45334             271.5k    5.07201M   137.305M       67.8089M/s   46.0296M   46.5713M   6.15892G         44.8557   0.517846/s 3.18937G/s     15.1099G               110.046                2.45334   524.288k         271.5k/s [BEST: throughput=  0.07 GB/s doc_throughput=     0 docs/s instructions= 15109884663 cycles=  6158915464 branch_miss= 5072012 cache_miss=46029605 cache_ref=  46571327 items=    524288 avg_time=1931076263 ns]
distinct_user_id<simdjson_dom>/manual_time                326005 ns       404488 ns         2148           4.329k           1.95104G               1        34.325k     1033.7k              1.63686          3.08946k       3.19358G          3.01136M                    4.76848                     2.91319           355.288k    4.40014k   631.515k       1.80409G/s    1.38222   34.2865k   1040.15k         1.64707   3.06744k/s 3.19059G/s     3.01137M               4.76848                2.89513        115       352.755k/s [BEST: throughput=  1.95 GB/s doc_throughput=  3089 docs/s instructions=     3011365 cycles=     1033700 branch_miss=    4329 cache_miss=       1 cache_ref=     34325 items=       115 avg_time=    326005 ns]
distinct_user_id<simdjson_ondemand>/manual_time           225699 ns       290079 ns         3103           2.151k           2.81636G               2         9.011k    716.276k              1.13422          4.45969k       3.19437G          2.19251M                    3.47183                     3.06099           512.864k    2.26683k   631.515k       2.60588G/s   0.918788   9.11602k   720.243k          1.1405   4.43068k/s 3.19117G/s     2.19251M               3.47183                3.04413        115       509.529k/s [BEST: throughput=  2.82 GB/s doc_throughput=  4459 docs/s instructions=     2192511 cycles=      716276 branch_miss=    2151 cache_miss=       2 cache_ref=      9011 items=       115 avg_time=    225698 ns]
distinct_user_id<yyjson>/manual_time                      763638 ns       853196 ns         1000           6.831k           1.31853G          7.098k         27.33k    1.52941M              2.42181          2.08788k       3.19323G           2.8748M                    4.55224                     1.87968           240.107k    7.59835k   631.515k       788.672M/s   2.22578k   24.3928k   1.72897M         2.73781   1.30952k/s 2.26412G/s     2.87529M               4.55301                1.66301        115       150.595k/s [BEST: throughput=  1.32 GB/s doc_throughput=  2087 docs/s instructions=     2874805 cycles=     1529409 branch_miss=    6831 cache_miss=    7098 cache_ref=     27330 items=       115 avg_time=    763638 ns]
distinct_user_id<yyjson_insitu>/manual_time               587079 ns       658937 ns         1202           7.192k           1.48759G            1032        13.231k    1.34748M              2.13372          2.35559k       3.17411G          2.87458M                    4.55188                      2.1333           270.893k    7.57056k   631.515k       1025.86M/s     68.386    8.5589k   1.47458M         2.33499   1.70335k/s 2.51172G/s     2.87484M               4.55229                 1.9496        115       195.885k/s [BEST: throughput=  1.49 GB/s doc_throughput=  2355 docs/s instructions=     2874578 cycles=     1347478 branch_miss=    7192 cache_miss=    1032 cache_ref=     13231 items=       115 avg_time=    587079 ns]
distinct_user_id<sajson>/manual_time                      605917 ns       678294 ns         1155          10.156k           1051.38M               0        13.472k    1.91794M              3.03705          1.66485k       3.19308G          5.98102M                     9.4709                     3.11846           191.458k    10.6025k   631.515k       993.964M/s    1.48831    13.502k   1.93297M         3.06085   1.65039k/s 3.19016G/s     5.98102M                9.4709                3.09421        115       189.795k/s [BEST: throughput=  1.05 GB/s doc_throughput=  1664 docs/s instructions=     5981016 cycles=     1917941 branch_miss=   10156 cache_miss=       0 cache_ref=     13472 items=       115 avg_time=    605916 ns]
distinct_user_id<rapidjson>/manual_time                  1912706 ns      1985592 ns          369          26.735k           383.117M             827        23.171k    5.26295M              8.33385           606.663       3.19284G          13.0565M                    20.6749                     2.48083           69.7663k    26.9259k   631.515k       314.873M/s    627.285   11.9976k   5.43783M         8.61077    522.819/s 2.84301G/s     13.0573M               20.6761                2.40119        115       60.1242k/s [BEST: throughput=  0.38 GB/s doc_throughput=   606 docs/s instructions=    13056480 cycles=     5262952 branch_miss=   26735 cache_miss=     827 cache_ref=     23171 items=       115 avg_time=   1912706 ns]
distinct_user_id<rapidjson_insitu>/manual_time           1397702 ns      1468653 ns          523          24.505k           501.726M              10        14.502k    4.01895M              6.36399            794.48       3.19298G          9.77477M                    15.4783                     2.43217           91.3652k    24.5563k   631.515k       430.893M/s   1.39459k   10.8965k   4.13008M         6.53996     715.46/s 2.95491G/s     9.77529M               15.4791                2.36685        115       82.2779k/s [BEST: throughput=  0.50 GB/s doc_throughput=   794 docs/s instructions=     9774766 cycles=     4018953 branch_miss=   24505 cache_miss=      10 cache_ref=     14502 items=       115 avg_time=   1397701 ns]
distinct_user_id<nlohmann_json>/manual_time              8696087 ns      8788361 ns           85          112.86k           78.8851M              12        98.949k    25.5309M               40.428           124.914       3.18917G           66.142M                    104.735                     2.59067           14.3651k     151.91k   631.515k       69.2564M/s    30.8588    108.29k   27.7335M         43.9158    114.994/s 3.18919G/s     64.8433M               102.679                2.33808        115       13.2243k/s [BEST: throughput=  0.08 GB/s doc_throughput=   124 docs/s instructions=    66142033 cycles=    25530896 branch_miss=  112860 cache_miss=      12 cache_ref=     98949 items=       115 avg_time=   8696086 ns]
find_tweet<simdjson_dom>/manual_time                      311240 ns       386397 ns         2250           4.128k           2.04401G               4        29.985k    986.807k               1.5626          3.23668k       3.19397G          2.93033M                    4.64015                      2.9695           3.23668k    4.21187k   631.515k       1.88968G/s    4.72889   30.0326k     993.1k         1.57257   3.21295k/s 3.19078G/s     2.93033M               4.64015                2.95069          1       3.21295k/s [BEST: throughput=  2.04 GB/s doc_throughput=  3236 docs/s instructions=     2930326 cycles=      986807 branch_miss=    4128 cache_miss=       4 cache_ref=     29985 items=         1 avg_time=    311240 ns]
find_tweet<simdjson_ondemand>/manual_time                 152290 ns       218129 ns         4599            1.31k           4.18169G              10         7.448k    482.478k             0.764001          6.62168k       3.19482G          1.56921M                    2.48484                      3.2524           6.62168k    1.39361k   631.515k       3.86201G/s    13.5092   7.43109k   486.063k        0.769678   6.56643k/s  3.1917G/s     1.56921M               2.48484                3.22841          1       6.56643k/s [BEST: throughput=  4.18 GB/s doc_throughput=  6621 docs/s instructions=     1569211 cycles=      482478 branch_miss=    1310 cache_miss=      10 cache_ref=      7448 items=         1 avg_time=    152289 ns]
find_tweet<yyjson>/manual_time                            847111 ns       932791 ns          887           9.703k           1.26322G             189        27.259k    1.59664M              2.52827           2.0003k       3.19377G          2.82416M                    4.47204                     1.76881            2.0003k    7.57216k   631.515k       710.957M/s    322.776   19.3056k   1.74256M         2.75933   1.18048k/s 2.05706G/s     2.82483M               4.47309                1.62108          1       1.18048k/s [BEST: throughput=  1.26 GB/s doc_throughput=  2000 docs/s instructions=     2824163 cycles=     1596643 branch_miss=    9703 cache_miss=     189 cache_ref=     27259 items=         1 avg_time=    847110 ns]
find_tweet<yyjson_insitu>/manual_time                     571375 ns       635885 ns         1237           6.811k           1.52679G          1.475k        13.032k     1.3158M              2.08357          2.41767k       3.18117G          2.82382M                     4.4715                     2.14608           2.41767k    7.30714k   631.515k       1054.05M/s    7.39531   4.53181k   1.42512M         2.25667   1.75016k/s 2.49419G/s     2.82408M               4.47191                1.98165          1       1.75016k/s [BEST: throughput=  1.53 GB/s doc_throughput=  2417 docs/s instructions=     2823817 cycles=     1315803 branch_miss=    6811 cache_miss=    1475 cache_ref=     13032 items=         1 avg_time=    571374 ns]
find_tweet<sajson>/manual_time                            593867 ns       663622 ns          881           9.975k           1072.49M               0        12.865k    1.88015M               2.9772          1.69829k       3.19303G          5.88887M                    9.32499                     3.13213           1.69829k    10.4233k   631.515k       1014.13M/s    3.83087   12.6908k   1.89458M         3.00005   1.68388k/s 3.19024G/s     5.88887M               9.32499                3.10828          1       1.68388k/s [BEST: throughput=  1.07 GB/s doc_throughput=  1698 docs/s instructions=     5888871 cycles=     1880147 branch_miss=    9975 cache_miss=       0 cache_ref=     12865 items=         1 avg_time=    593866 ns]
find_tweet<rapidjson>/manual_time                        1887728 ns      1955936 ns          374          27.104k           387.492M             506        21.811k    5.20346M              8.23965           613.591        3.1928G          12.9885M                    20.5673                     2.49614            613.591    26.8339k   631.515k       319.039M/s     451.34   8.25804k   5.35855M         8.48522    529.737/s 2.83862G/s     12.9894M               20.5686                2.42405          1        529.737/s [BEST: throughput=  0.39 GB/s doc_throughput=   613 docs/s instructions=    12988549 cycles=     5203461 branch_miss=   27104 cache_miss=     506 cache_ref=     21811 items=         1 avg_time=   1887727 ns]
find_tweet<rapidjson_insitu>/manual_time                 1383916 ns      1450586 ns          534          24.375k           505.094M             118        13.808k    3.99198M              6.32128           799.813       3.19284G          9.71721M                    15.3871                     2.43418            799.813    24.4565k   631.515k       435.185M/s   1.22879k   7.58552k   4.08518M         6.46885    722.587/s  2.9519G/s     9.71773M                15.388                2.37878          1        722.587/s [BEST: throughput=  0.51 GB/s doc_throughput=   799 docs/s instructions=     9717209 cycles=     3991980 branch_miss=   24375 cache_miss=     118 cache_ref=     13808 items=         1 avg_time=   1383915 ns]
find_tweet<nlohmann_json>/manual_time                    7282334 ns      7371550 ns          100          89.012k           93.0229M              65        75.971k    21.6488M              34.2807           147.301       3.18889G           56.555M                    89.5545                     2.61239            147.301    105.171k   631.515k       82.7015M/s      46.81   82.6823k   23.2236M         36.7745    137.319/s 3.18904G/s     55.2041M               87.4154                2.37707          1        137.319/s [BEST: throughput=  0.09 GB/s doc_throughput=   147 docs/s instructions=    56555016 cycles=    21648789 branch_miss=   89012 cache_miss=      65 cache_ref=     75971 items=         1 avg_time=   7282334 ns]
top_tweet<simdjson_dom>/manual_time                       318032 ns       397777 ns         2202           4.152k           2.00417G               0        32.448k    1006.39k              1.59361           3.1736k       3.19387G          2.96449M                    4.69426                     2.94568            3.1736k    4.30731k   631.515k       1.84932G/s   0.139419     32.59k   1014.75k         1.60685   3.14434k/s 3.19072G/s      2.9645M               4.69426                 2.9214          1       3.14434k/s [BEST: throughput=  2.00 GB/s doc_throughput=  3173 docs/s instructions=     2964495 cycles=     1006388 branch_miss=    4152 cache_miss=       0 cache_ref=     32448 items=         1 avg_time=    318032 ns]
top_tweet<simdjson_ondemand>/manual_time                  224734 ns       291701 ns         3115           2.301k           2.82948G               0         8.613k    713.007k              1.12904          4.48047k        3.1946G          2.19171M                    3.47056                      3.0739           4.48047k    2.37952k   631.515k       2.61707G/s  0.0279294   8.65249k   717.183k         1.13565   4.44971k/s 3.19126G/s     2.19171M               3.47056                  3.056          1       4.44971k/s [BEST: throughput=  2.83 GB/s doc_throughput=  4480 docs/s instructions=     2191712 cycles=      713007 branch_miss=    2301 cache_miss=       0 cache_ref=      8613 items=         1 avg_time=    224733 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time     217800 ns       285458 ns         3215           2.238k           2.92537G               2         9.645k    689.587k              1.09196          4.63231k       3.19438G          2.21895M                    3.51369                     3.21779           4.63231k    2.35274k   631.515k       2.70039G/s    1.01089   9.63489k   695.067k         1.10063   4.59137k/s 3.19132G/s     2.21895M               3.51369                3.19242          1       4.59137k/s [BEST: throughput=  2.93 GB/s doc_throughput=  4632 docs/s instructions=     2218946 cycles=      689587 branch_miss=    2238 cache_miss=       2 cache_ref=      9645 items=         1 avg_time=    217799 ns]
top_tweet<yyjson>/manual_time                             857746 ns       947550 ns          892           9.996k           1.24671G             226        27.439k    1.61772M              2.56166          1.97415k       3.19363G          2.84502M                    4.50507                     1.75865           1.97415k    7.66857k   631.515k       702.142M/s    400.025   22.2555k   1.77558M         2.81161   1.16585k/s 2.07005G/s      2.8455M               4.50584                1.60258          1       1.16585k/s [BEST: throughput=  1.25 GB/s doc_throughput=  1974 docs/s instructions=     2845018 cycles=     1617724 branch_miss=    9996 cache_miss=     226 cache_ref=     27439 items=         1 avg_time=    857746 ns]
top_tweet<yyjson_insitu>/manual_time                      580834 ns       652329 ns         1216               7k           1.50856G          1.307k        13.157k    1.33153M              2.10847           2.3888k       3.18075G          2.84491M                     4.5049                     2.13657            2.3888k    7.42001k   631.515k       1036.89M/s    51.7434   7.45064k    1.4551M         2.30414   1.72166k/s 2.50518G/s     2.84517M               4.50531                1.95531          1       1.72166k/s [BEST: throughput=  1.51 GB/s doc_throughput=  2388 docs/s instructions=     2844909 cycles=     1331530 branch_miss=    7000 cache_miss=    1307 cache_ref=     13157 items=         1 avg_time=    580834 ns]
top_tweet<sajson>/manual_time                             597582 ns       671650 ns         1170          10.063k           1065.34M               0        13.516k    1.89272M              2.99711          1.68697k       3.19296G          5.91604M                    9.36802                     3.12568           1.68697k    10.4625k   631.515k       1007.83M/s    1.79915   13.4786k   1.90636M          3.0187   1.67341k/s 3.19012G/s     5.91604M               9.36802                3.10332          1       1.67341k/s [BEST: throughput=  1.07 GB/s doc_throughput=  1686 docs/s instructions=     5916043 cycles=     1892723 branch_miss=   10063 cache_miss=       0 cache_ref=     13516 items=         1 avg_time=    597581 ns]
top_tweet<rapidjson>/manual_time                         1896321 ns      1969601 ns          372          26.824k           386.854M             754        22.405k     5.2121M              8.25332            612.58       3.19283G          13.0391M                    20.6474                     2.50171             612.58    26.9727k   631.515k       317.594M/s    548.887   10.2869k   5.38589M         8.52853    527.337/s 2.84018G/s     13.0401M               20.6488                2.42115          1        527.337/s [BEST: throughput=  0.39 GB/s doc_throughput=   612 docs/s instructions=    13039126 cycles=     5212095 branch_miss=   26824 cache_miss=     754 cache_ref=     22405 items=         1 avg_time=   1896321 ns]
top_tweet<rapidjson_insitu>/manual_time                  1393373 ns      1465472 ns          528          24.258k           503.065M             113        14.314k    4.00822M              6.34699             796.6       3.19295G          9.75913M                    15.4535                     2.43478              796.6    24.5464k   631.515k       432.231M/s   1.33013k   9.64467k   4.11603M          6.5177    717.683/s   2.954G/s     9.75965M               15.4543                2.37113          1        717.683/s [BEST: throughput=  0.50 GB/s doc_throughput=   796 docs/s instructions=     9759129 cycles=     4008220 branch_miss=   24258 cache_miss=     113 cache_ref=     14314 items=         1 avg_time=   1393373 ns]
top_tweet<nlohmann_json>/manual_time                    10125766 ns     10218406 ns           69         176.817k           62.9385M              24       163.025k     32.006M              50.6813           99.6627        3.1898G           77.974M                    123.471                     2.43623            99.6627    183.348k   631.515k       59.4779M/s    71.2609   163.313k   32.2919M          51.134     98.758/s 3.18908G/s     78.3471M               124.062                2.42622          1         98.758/s [BEST: throughput=  0.06 GB/s doc_throughput=    99 docs/s instructions=    77974036 cycles=    32005994 branch_miss=  176817 cache_miss=      24 cache_ref=    163025 items=         1 avg_time=  10125765 ns]
