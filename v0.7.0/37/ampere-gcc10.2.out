run_benchmark: v0.8.0~1 /home/jkeiser/simdjson_benchmark_results/v0.7.0/37/skylake-gcc10.2.json 
git reset --hard v0.8.0~1
HEAD is now at 1005c62e It seems that we export too many targets. (#1385)
cmake ..
-- The CXX compiler identification is GNU 10.2.0
-- The C compiler identification is GNU 10.2.0
-- Check for working CXX compiler: /usr/bin/g++-10
-- Check for working CXX compiler: /usr/bin/g++-10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/gcc-10
-- Check for working C compiler: /usr/bin/gcc-10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- No build type selected, default to Release
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found Threads: TRUE  
-- Looking for fork
-- Looking for fork - found
-- Looking for wait
-- Looking for wait - found
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Found Git: /usr/bin/git (found version "2.27.0") 
-- git Version: v0.2.1-1005c62e
-- Version: 0.2.1
-- Performing Test HAVE_CXX_FLAG_STD_CXX11
-- Performing Test HAVE_CXX_FLAG_STD_CXX11 - Success
-- Performing Test HAVE_CXX_FLAG_WALL
-- Performing Test HAVE_CXX_FLAG_WALL - Success
-- Performing Test HAVE_CXX_FLAG_WEXTRA
-- Performing Test HAVE_CXX_FLAG_WEXTRA - Success
-- Performing Test HAVE_CXX_FLAG_WSHADOW
-- Performing Test HAVE_CXX_FLAG_WSHADOW - Success
-- Performing Test HAVE_CXX_FLAG_WERROR
-- Performing Test HAVE_CXX_FLAG_WERROR - Success
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32
-- Performing Test HAVE_CXX_FLAG_WSHORTEN_64_TO_32 - Failed
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_FSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED_DECLARATIONS - Success
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED
-- Performing Test HAVE_CXX_FLAG_WNO_DEPRECATED - Success
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING
-- Performing Test HAVE_CXX_FLAG_WSTRICT_ALIASING - Success
-- Performing Test HAVE_CXX_FLAG_WD654
-- Performing Test HAVE_CXX_FLAG_WD654 - Failed
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY
-- Performing Test HAVE_CXX_FLAG_WTHREAD_SAFETY - Failed
-- Performing Test HAVE_CXX_FLAG_COVERAGE
-- Performing Test HAVE_CXX_FLAG_COVERAGE - Success
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Performing Test USE_BOOST_JSON
-- Performing Test USE_BOOST_JSON - Failed
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Found Python3: /usr/bin/python3.8 (found version "3.8.6") found components: Interpreter 
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
make[1]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[2]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target benchmark
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[  0%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_api_internal.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_name.cc.o
[ 10%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/benchmark_runner.cc.o
[ 20%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/colorprint.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/complexity.cc.o
[ 30%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/console_reporter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/counter.cc.o
[ 40%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/json_reporter.cc.o
[ 50%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/reporter.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sleep.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/statistics.cc.o
[ 60%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/string_util.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/sysinfo.cc.o
[ 70%] Building CXX object _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/timers.cc.o
[ 80%] Linking CXX static library libbenchmark.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target benchmark
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target generated-data
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Generating utf-8.json, escape.json, 0-structurals.json, 7-structurals.json, 15-structurals.json, 23-structurals.json
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/utf-8-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/escape-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/0-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/7-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/15-structurals-miss.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-full.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals.json ...
Writing /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/23-structurals-miss.json ...
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target generated-data
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target simdjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building CXX object src/CMakeFiles/simdjson.dir/simdjson.cpp.o
[ 80%] Linking CXX shared library ../libsimdjson.so
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Built target simdjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target yyjson
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 80%] Building C object dependencies/CMakeFiles/yyjson.dir/.cache/yyjson/src/yyjson.c.o
[ 90%] Linking C static library libyyjson.a
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[ 90%] Built target yyjson
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
Scanning dependencies of target bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[3]: Entering directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Building CXX object benchmark/CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o
[100%] Linking CXX executable bench_ondemand
make[3]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
[100%] Built target bench_ondemand
make[2]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
make[1]: Leaving directory '/home/jkeiser/simdjson_benchmark_results/simdjson/build'
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/37/skylake-gcc10.2.json --benchmark_out_format=json
2021-01-23 05:05:58
Running benchmark/bench_ondemand
Run on (32 X 3300 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x32)
  L1 Instruction 32 KiB (x32)
  L2 Unified 256 KiB (x16)
Load Average: 1.02, 1.05, 1.01
simdjson::dom implementation:      arm64
simdjson::ondemand implementation: arm64
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                                                      Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second

partial_tweets<simdjson_dom>/manual_time                 1578001 ns      1646679 ns          444          17.145k           401.114M         25.873k       904.656k    5.03997M              7.98076           635.161       3.20119G          3.92138M                    6.20949                    0.778057           63.5161k    17.2984k   631.515k        381.66M/s   25.8797k   905.395k   5.04601M         7.99033    633.713/s 3.19772G/s     3.92138M               6.20949               0.777126        100       63.3713k/s [BEST: throughput=  0.40 GB/s doc_throughput=   635 docs/s instructions=     3921383 cycles=     5039968 branch_miss=   17145 cache_miss=   25873 cache_ref=    904656 items=       100 avg_time=   1578001 ns]
partial_tweets<simdjson_ondemand>/manual_time            1069254 ns      1138153 ns          655           6.946k           592.002M         22.771k       402.756k    3.41523M              5.40799           937.432       3.20155G          2.75756M                    4.36658                    0.807431           93.7432k    7.11296k   631.515k       563.252M/s   22.7715k   403.091k   3.41973M         5.41511    935.231/s 3.19823G/s     2.75756M               4.36658                0.80637        100       93.5231k/s [BEST: throughput=  0.59 GB/s doc_throughput=   937 docs/s instructions=     2757562 cycles=     3415229 branch_miss=    6946 cache_miss=   22771 cache_ref=    402756 items=       100 avg_time=   1069254 ns]
partial_tweets<yyjson>/manual_time                       1242146 ns      1313876 ns          566          47.939k           574.587M         24.359k       1.49073M     3.5193M              5.57279           909.855       3.20206G          3.54892M                    5.61968                     1.00841           90.9855k    47.9539k   631.515k       484.854M/s   24.3896k   1.49164M   3.75242M         5.94193    805.058/s 3.02091G/s     3.54899M                5.6198               0.945787        100       80.5058k/s [BEST: throughput=  0.57 GB/s doc_throughput=   909 docs/s instructions=     3548915 cycles=     3519303 branch_miss=   47939 cache_miss=   24359 cache_ref=   1490731 items=       100 avg_time=   1242146 ns]
partial_tweets<yyjson_insitu>/manual_time                1164760 ns      1238076 ns          605          47.963k           597.856M         14.502k       1.33211M    3.38253M              5.35621           946.702       3.20225G          3.45008M                    5.46317                     1.01997           94.6702k    48.1389k   631.515k       517.068M/s   14.5556k   1.33271M   3.61609M         5.72606    858.546/s 3.10458G/s     3.45022M               5.46341                0.95413        100       85.8546k/s [BEST: throughput=  0.60 GB/s doc_throughput=   946 docs/s instructions=     3450075 cycles=     3382530 branch_miss=   47963 cache_miss=   14502 cache_ref=   1332111 items=       100 avg_time=   1164759 ns]
partial_tweets<sajson>/manual_time                       1486290 ns      1557497 ns          471          68.939k           426.116M         12.738k       1.87563M     4.7447M               7.5132           674.752       3.20149G          5.31239M                    8.41213                     1.11965           67.4752k    69.3056k   631.515k        405.21M/s   12.7372k   1.87659M   4.75306M         7.52644    672.816/s 3.19794G/s     5.31239M               8.41213                1.11768        100       67.2816k/s [BEST: throughput=  0.43 GB/s doc_throughput=   674 docs/s instructions=     5312387 cycles=     4744700 branch_miss=   68939 cache_miss=   12738 cache_ref=   1875634 items=       100 avg_time=   1486289 ns]
partial_tweets<rapidjson>/manual_time                    2800523 ns      2873726 ns          250          75.262k           232.102M         12.944k       6.26056M    8.70883M              13.7904           367.531       3.20077G          13.3636M                    21.1612                     1.53449           36.7531k    75.1227k   631.515k       215.053M/s   13.2043k   6.26548M   8.75118M         13.8574    357.076/s 3.12484G/s     13.3642M               21.1621                1.52713        100       35.7076k/s [BEST: throughput=  0.23 GB/s doc_throughput=   367 docs/s instructions=    13363605 cycles=     8708827 branch_miss=   75262 cache_miss=   12944 cache_ref=   6260558 items=       100 avg_time=   2800523 ns]
partial_tweets<rapidjson_insitu>/manual_time             2141153 ns      2214755 ns          328          59.382k            303.63M         13.768k       3.42883M    6.65753M              10.5422           480.796       3.20091G          9.76607M                    15.4645                     1.46692           48.0796k    59.7025k   631.515k       281.278M/s   13.9257k   3.43169M   6.69695M         10.6046    467.038/s 3.12773G/s     9.76653M               15.4652                1.45836        100       46.7038k/s [BEST: throughput=  0.30 GB/s doc_throughput=   480 docs/s instructions=     9766074 cycles=     6657533 branch_miss=   59382 cache_miss=   13768 cache_ref=   3428829 items=       100 avg_time=   2141152 ns]
partial_tweets<nlohmann_json>/manual_time               17117080 ns     17213044 ns           41          370.45k           39.7065M        196.845k        38.686M    50.8638M              80.5425            62.875       3.19806G          68.9838M                    109.235                     1.35625            6.2875k    385.863k   631.515k       35.1847M/s    251.61k   38.7594M   54.7157M          86.642    58.4212/s 3.19656G/s     68.9364M                109.16                 1.2599        100       5.84212k/s [BEST: throughput=  0.04 GB/s doc_throughput=    62 docs/s instructions=    68983799 cycles=    50863801 branch_miss=  370450 cache_miss=  196845 cache_ref=  38685994 items=       100 avg_time=  17117079 ns]
Creating a source file spanning 44921 KB 
large_random<simdjson_dom>/manual_time                 311375331 ns    314987368 ns            2         1.92316M           147.731M        3.98179M       246.812M    995.477M              21.6414           3.21163       3.19711G          1.10647G                    24.0544                      1.1115           3.21163M    1.92288M   45.9988M       140.884M/s   3.98181M    246.81M   995.518M         21.6423    3.21156/s 3.19717G/s     1.10647G               24.0544                1.11145      1000k       3.21156M/s [BEST: throughput=  0.15 GB/s doc_throughput=     3 docs/s instructions=  1106473018 cycles=   995477011 branch_miss= 1923156 cache_miss= 3981789 cache_ref= 246812022 items=   1000000 avg_time= 311375331 ns]
large_random<simdjson_ondemand>/manual_time            182703134 ns    186304890 ns            4         1.17491M           251.817M        2.31715M       134.427M    584.045M               12.697           5.47443       3.19731G          689.959M                    14.9995                     1.18134           5.47443M    1.17483M   45.9988M       240.105M/s   2.31716M   134.427M   584.052M         12.6971    5.47336/s 3.19673G/s     689.959M               14.9995                1.18133      1000k       5.47336M/s [BEST: throughput=  0.25 GB/s doc_throughput=     5 docs/s instructions=   689958569 cycles=   584045437 branch_miss= 1174909 cache_miss= 2317146 cache_ref= 134427157 items=   1000000 avg_time= 182703134 ns]
large_random<simdjson_ondemand_unordered>/manual_time  185461380 ns    189062568 ns            4         1.20602M           248.049M        2.31717M       138.383M    592.852M              12.8884           5.39252       3.19697G          694.959M                    15.1082                     1.17223           5.39252M     1.2069M   45.9988M       236.534M/s   2.31714M   138.383M   592.867M         12.8888    5.39196/s 3.19671G/s     694.959M               15.1082                 1.1722      1000k       5.39196M/s [BEST: throughput=  0.25 GB/s doc_throughput=     5 docs/s instructions=   694958569 cycles=   592852194 branch_miss= 1206017 cache_miss= 2317171 cache_ref= 138383429 items=   1000000 avg_time= 185461380 ns]
large_random<yyjson>/manual_time                       203968618 ns    207576438 ns            3         1.61453M           225.547M        4.91354M       235.252M    627.405M              13.6396           4.90332       3.07636G          908.191M                    19.7438                     1.44754           4.90332M    1.61465M   45.9988M       215.072M/s   4.91361M   235.251M   627.423M           13.64    4.90271/s 3.07608G/s     908.191M               19.7438                1.44749      1000k       4.90271M/s [BEST: throughput=  0.23 GB/s doc_throughput=     4 docs/s instructions=   908191184 cycles=   627404788 branch_miss= 1614534 cache_miss= 4913539 cache_ref= 235252392 items=   1000000 avg_time= 203968618 ns]
large_random<yyjson_insitu>/manual_time                198019612 ns    201630084 ns            4         1.61462M           232.333M        4.19682M       223.735M    615.117M              13.3725           5.05086       3.10687G          901.004M                    19.5876                     1.46477           5.05086M     1.6161M   45.9988M       221.533M/s    4.1968M   223.754M   615.213M         13.3745       5.05/s 3.10683G/s     901.004M               19.5876                1.46454      1000k          5.05M/s [BEST: throughput=  0.23 GB/s doc_throughput=     5 docs/s instructions=   901003849 cycles=   615117499 branch_miss= 1614621 cache_miss= 4196825 cache_ref= 223735378 items=   1000000 avg_time= 198019611 ns]
large_random<sajson>/manual_time                       170199796 ns    173812334 ns            4          1.6573M            282.15M         3.4433M       222.108M    521.061M              11.3277           6.13387       3.19612G          955.996M                    20.7831                     1.83471           6.13387M    1.65912M   45.9988M       257.743M/s   3.44331M   222.113M   544.017M         11.8268    5.87545/s 3.19635G/s     955.996M               20.7831                1.75729      1000k       5.87545M/s [BEST: throughput=  0.28 GB/s doc_throughput=     6 docs/s instructions=   955995639 cycles=   521061125 branch_miss= 1657299 cache_miss= 3443296 cache_ref= 222108390 items=   1000000 avg_time= 170199796 ns]
large_random<rapidjson>/manual_time                    351535130 ns    355158680 ns            2          1.9884M           131.136M         4.9557M       755.776M    1094.79M              23.8005           2.85086        3.1211G          1.65551G                    35.9902                     1.51217           2.85086M    1.95603M   45.9988M       124.789M/s   4.95611M   755.776M   1094.93M         23.8035    2.84467/s 3.11472G/s     1.65551G               35.9904                1.51197      1000k       2.84467M/s [BEST: throughput=  0.13 GB/s doc_throughput=     2 docs/s instructions=  1655507325 cycles=  1094792762 branch_miss= 1988397 cache_miss= 4955696 cache_ref= 755776011 items=   1000000 avg_time= 351535130 ns]
large_random<rapidjson_lossless>/manual_time           391632608 ns    395247858 ns            2         2.32404M           117.666M        4.95578M       953.227M    1.22292G              26.5859           2.55803       3.12827G          1.97048G                    42.8377                     1.61129           2.55803M    2.31832M   45.9988M       112.013M/s   4.95622M   953.235M   1.22295G         26.5865    2.55341/s 3.12269G/s     1.97049G               42.8378                1.61126      1000k       2.55341M/s [BEST: throughput=  0.12 GB/s doc_throughput=     2 docs/s instructions=  1970483093 cycles=  1222920971 branch_miss= 2324044 cache_miss= 4955781 cache_ref= 953226875 items=   1000000 avg_time= 391632608 ns]
large_random<rapidjson_insitu>/manual_time             329379110 ns    332992046 ns            2         2.15328M            139.98M        5.67135M       734.615M    1024.47M              22.2718           3.04312       3.11759G          1.55051G                    33.7076                     1.51347           3.04312M    2.16399M   45.9988M       133.183M/s    5.6718M   734.623M    1024.7M         22.2766    3.03602/s 3.11099G/s     1.55051G               33.7077                1.51314      1000k       3.03602M/s [BEST: throughput=  0.14 GB/s doc_throughput=     3 docs/s instructions=  1550507166 cycles=  1024474118 branch_miss= 2153284 cache_miss= 5671351 cache_ref= 734614544 items=   1000000 avg_time= 329379110 ns]
large_random<nlohmann_json>/manual_time               2674591176 ns   2631906746 ns            1         12.0987M           17.1984M        27.6301M       5.81528G    8.39904G              182.593          0.373889       3.14031G          12.0941G                    262.922                     1.43994           373.889k    12.0987M   45.9988M       16.4017M/s   27.6301M   5.81528G   8.39904G         182.593   0.373889/s 3.14031G/s     12.0941G               262.922                1.43994      1000k       373.889k/s [BEST: throughput=  0.02 GB/s doc_throughput=     0 docs/s instructions= 12094073064 cycles=  8399038525 branch_miss=12098662 cache_miss=27630125 cache_ref=5815283735 items=   1000000 avg_time=2674591176 ns]
Creating a source file spanning 134087 KB 
kostya<simdjson_dom>/manual_time                       379647258 ns    396817102 ns            2         1.10385M           361.673M         6.9459M       246.877M    1.21341G              8.83735           2.63409       3.19623G          1.14604G                    8.34671                     0.94448           1.38102M    1.10352M   137.305M        344.91M/s   6.94599M   246.878M   1.21358G         8.83854    2.63402/s 3.19659G/s     1.14604G               8.34671               0.944353   524.288k       1.38099M/s [BEST: throughput=  0.36 GB/s doc_throughput=     2 docs/s instructions=  1146044372 cycles=  1213412939 branch_miss= 1103847 cache_miss= 6945901 cache_ref= 246877342 items=    524288 avg_time= 379647258 ns]
kostya<simdjson_ondemand>/manual_time                  259028222 ns    276596934 ns            3         1.25786M           530.115M        5.28185M       137.909M    828.032M               6.0306           3.86085       3.19691G          796.596M                    5.80166                    0.962036            2.0242M    1.25618M   137.305M       505.521M/s   5.28189M   137.903M   828.003M         6.03039    3.86058/s 3.19657G/s     796.596M               5.80166               0.962069   524.288k       2.02406M/s [BEST: throughput=  0.53 GB/s doc_throughput=     3 docs/s instructions=   796596293 cycles=   828031706 branch_miss= 1257861 cache_miss= 5281853 cache_ref= 137908733 items=    524288 avg_time= 259028221 ns]
kostya<yyjson>/manual_time                             295582504 ns    313556635 ns            2         1040.41k           464.659M        7.98944M       344.722M    903.806M              6.58247           3.38414        3.0586G          1052.15M                    7.66288                     1.16414           1.77426M    1052.36k   137.305M       443.004M/s   7.98904M   344.748M   903.888M         6.58307    3.38315/s 3.05799G/s     1052.15M               7.66288                1.16403   524.288k       1.77375M/s [BEST: throughput=  0.46 GB/s doc_throughput=     3 docs/s instructions=  1052152116 cycles=   903805812 branch_miss= 1040415 cache_miss= 7989436 cache_ref= 344722367 items=    524288 avg_time= 295582503 ns]
kostya<yyjson_insitu>/manual_time                      278258146 ns    295821150 ns            3         1059.14k           494.868M        5.84937M        310.44M    865.726M              6.30513           3.60415       3.12021G           1030.7M                    7.50663                     1.19056           1.88961M    1052.75k   137.305M       470.585M/s   5.85077M   310.427M   868.311M         6.32396    3.59379/s 3.12052G/s      1030.7M               7.50663                1.18702   524.288k       1.88418M/s [BEST: throughput=  0.49 GB/s doc_throughput=     3 docs/s instructions=  1030698181 cycles=   865726249 branch_miss= 1059136 cache_miss= 5849372 cache_ref= 310440023 items=    524288 avg_time= 278258146 ns]
kostya<sajson>/manual_time                             402811766 ns    419289479 ns            2         7.32399M           340.998M        4.64217M        424.95M    1.28734G              9.37576           2.48351       3.19711G          1.38919G                    10.1176                     1.07912           1.30207M    7.32886M   137.305M       325.076M/s   4.64221M   425.003M   1.28774G         9.37866    2.48255/s 3.19687G/s     1.38919G               10.1176                1.07879   524.288k       1.30157M/s [BEST: throughput=  0.34 GB/s doc_throughput=     2 docs/s instructions=  1389192347 cycles=  1287339018 branch_miss= 7323990 cache_miss= 4642172 cache_ref= 424950441 items=    524288 avg_time= 402811766 ns]
kostya<rapidjson>/manual_time                          559665973 ns    577073335 ns            1          7.3297M           245.334M        5.38934M       973.169M    1.75532G              12.7841           1.78678       3.13637G          2.37304G                     17.283                     1.35191           936.787k     7.3297M   137.305M       233.969M/s   5.38934M   973.169M   1.75532G         12.7841    1.78678/s 3.13637G/s     2.37304G                17.283                1.35191   524.288k       936.787k/s [BEST: throughput=  0.25 GB/s doc_throughput=     1 docs/s instructions=  2373037236 cycles=  1755320646 branch_miss= 7329704 cache_miss= 5389342 cache_ref= 973168826 items=    524288 avg_time= 559665973 ns]
kostya<rapidjson_lossless>/manual_time                 585773448 ns    602966270 ns            1         6.85078M           234.399M        5.38698M       1089.69M    1.83866G              13.3911           1.70714       3.13886G          2.55706G                    18.6232                     1.39072           895.035k    6.85078M   137.305M       223.541M/s   5.38698M   1089.69M   1.83866G         13.3911    1.70714/s 3.13886G/s     2.55706G               18.6232                1.39072   524.288k       895.035k/s [BEST: throughput=  0.23 GB/s doc_throughput=     1 docs/s instructions=  2557055680 cycles=  1838658097 branch_miss= 6850780 cache_miss= 5386982 cache_ref=1089686531 items=    524288 avg_time= 585773448 ns]
kostya<rapidjson_insitu>/manual_time                   543763070 ns    561870803 ns            1         6.74095M           252.509M        6.36059M       863.381M    1.70429G              12.4124           1.83904       3.13425G          2.17212G                    15.8197                      1.2745           964.185k    6.74095M   137.305M       240.811M/s   6.36059M   863.381M   1.70429G         12.4124    1.83904/s 3.13425G/s     2.17212G               15.8197                 1.2745   524.288k       964.185k/s [BEST: throughput=  0.25 GB/s doc_throughput=     1 docs/s instructions=  2172119047 cycles=  1704288496 branch_miss= 6740948 cache_miss= 6360587 cache_ref= 863380725 items=    524288 avg_time= 543763070 ns]
kostya<nlohmann_json>/manual_time                     4271879671 ns   4291062777 ns            1          25.396M           32.1416M        38.7693M       7.85417G    13.6568G              99.4634          0.234089       3.19691G          15.0753G                    109.794                     1.10387            122.73k     25.396M   137.305M       30.6526M/s   38.7693M   7.85417G   13.6568G         99.4634   0.234089/s 3.19691G/s     15.0753G               109.794                1.10387   524.288k        122.73k/s [BEST: throughput=  0.03 GB/s doc_throughput=     0 docs/s instructions= 15075318543 cycles= 13656815450 branch_miss=25395993 cache_miss=38769310 cache_ref=7854174257 items=    524288 avg_time=4271879671 ns]
distinct_user_id<simdjson_dom>/manual_time               1566020 ns      1649355 ns          447          16.732k           404.361M          26.46k       890.168k    4.99953M              7.91672           640.303       3.20121G          3.85168M                    6.09911                    0.770409           73.6349k    17.0032k   631.515k        384.58M/s   26.4589k   890.319k   5.00723M         7.92892    638.561/s 3.19742G/s     3.85168M               6.09911               0.769224        115       73.4345k/s [BEST: throughput=  0.40 GB/s doc_throughput=   640 docs/s instructions=     3851681 cycles=     4999526 branch_miss=   16732 cache_miss=   26460 cache_ref=    890168 items=       115 avg_time=   1566020 ns]
distinct_user_id<simdjson_ondemand>/manual_time          1058444 ns      1142573 ns          661           6.828k            598.02M         22.421k        400.58k    3.38108M              5.35392           946.961       3.20175G          2.73848M                    4.33637                    0.809942             108.9k    6.95623k   631.515k       569.005M/s   22.4265k   400.807k   3.38519M         5.36042    944.783/s 3.19827G/s     2.73848M               4.33636                0.80896        115        108.65k/s [BEST: throughput=  0.60 GB/s doc_throughput=   946 docs/s instructions=     2738482 cycles=     3381083 branch_miss=    6828 cache_miss=   22421 cache_ref=    400580 items=       115 avg_time=   1058443 ns]
distinct_user_id<yyjson>/manual_time                     1192141 ns      1278641 ns          607          47.684k           574.854M         24.185k        1.4769M    3.47226M               5.4983           910.278       3.16072G          3.51486M                    5.56576                     1.01227           104.682k    47.5536k   631.515k       505.192M/s   24.2017k   1.47722M   3.68757M         5.83925    838.827/s 3.09323G/s     3.51474M               5.56556               0.953131        115       96.4651k/s [BEST: throughput=  0.57 GB/s doc_throughput=   910 docs/s instructions=     3514864 cycles=     3472259 branch_miss=   47684 cache_miss=   24185 cache_ref=   1476902 items=       115 avg_time=   1192140 ns]
distinct_user_id<yyjson_insitu>/manual_time              1146313 ns      1234608 ns          612          47.608k           607.688M         14.321k       1.31741M    3.32824M              5.27025           962.269       3.20267G          3.41587M                    5.40901                     1.02633           110.661k    47.5488k   631.515k       525.389M/s   14.3201k   1.31795M   3.55488M         5.62913    872.362/s 3.10114G/s     3.41602M               5.40924               0.960938        115       100.322k/s [BEST: throughput=  0.61 GB/s doc_throughput=   962 docs/s instructions=     3415871 cycles=     3328244 branch_miss=   47608 cache_miss=   14321 cache_ref=   1317414 items=       115 avg_time=   1146312 ns]
distinct_user_id<sajson>/manual_time                     1471928 ns      1557957 ns          475          69.102k           430.179M         12.844k       1.86021M    4.69951M              7.44164           681.186       3.20124G          5.24709M                    8.30873                     1.11652           78.3364k    69.2713k   631.515k       409.164M/s   12.8252k   1.86133M    4.7068M         7.45319    679.381/s 3.19771G/s     5.24709M               8.30874                1.11479        115       78.1288k/s [BEST: throughput=  0.43 GB/s doc_throughput=   681 docs/s instructions=     5247090 cycles=     4699505 branch_miss=   69102 cache_miss=   12844 cache_ref=   1860209 items=       115 avg_time=   1471928 ns]
distinct_user_id<rapidjson>/manual_time                  2788321 ns      2876987 ns          251          74.958k           232.637M         13.711k        6.2514M    8.68869M              13.7585            368.38       3.20074G          13.3286M                    21.1057                     1.53402           42.3637k    75.0569k   631.515k       215.994M/s   13.9899k   6.25746M   8.73098M         13.8255    358.639/s 3.13127G/s     13.3291M               21.1066                1.52665        115       41.2435k/s [BEST: throughput=  0.23 GB/s doc_throughput=   368 docs/s instructions=    13328597 cycles=     8688692 branch_miss=   74958 cache_miss=   13711 cache_ref=   6251399 items=       115 avg_time=   2788320 ns]
distinct_user_id<rapidjson_insitu>/manual_time           2126012 ns      2216731 ns          334          59.729k           305.684M         14.167k       3.42005M     6.6129M              10.4715           484.048       3.20097G           9.7293M                    15.4063                     1.47126           55.6656k    59.6583k   631.515k       283.281M/s   14.3341k   3.42016M   6.64878M         10.5283    470.364/s 3.12735G/s     9.72978M                15.407                1.46339        115       54.0919k/s [BEST: throughput=  0.31 GB/s doc_throughput=   484 docs/s instructions=     9729302 cycles=     6612904 branch_miss=   59729 cache_miss=   14167 cache_ref=   3420050 items=       115 avg_time=   2126011 ns]
distinct_user_id<nlohmann_json>/manual_time             15985926 ns     16080057 ns           44         335.685k           42.8185M        161.596k       36.3633M    47.1354M              74.6386           67.8028       3.19591G          64.3683M                    101.927                      1.3656           7.79732k    347.609k   631.515k       37.6744M/s   217.413k   35.8175M   51.1008M         80.9178     62.555/s 3.19661G/s     62.7939M               99.4338                1.22883        115       7.19383k/s [BEST: throughput=  0.04 GB/s doc_throughput=    67 docs/s instructions=    64368274 cycles=    47135400 branch_miss=  335685 cache_miss=  161596 cache_ref=  36363289 items=       115 avg_time=  15985925 ns]
find_tweet<simdjson_dom>/manual_time                     1518834 ns      1606365 ns          461          16.496k           416.847M         23.476k       873.689k    4.84972M              7.67949           660.074       3.20117G          3.76236M                    5.95767                    0.775789            660.074    16.7416k   631.515k       396.528M/s   23.5054k   874.562k   4.85676M         7.69064      658.4/s 3.19769G/s     3.76236M               5.95767               0.774664          1          658.4/s [BEST: throughput=  0.42 GB/s doc_throughput=   660 docs/s instructions=     3762357 cycles=     4849716 branch_miss=   16496 cache_miss=   23476 cache_ref=    873689 items=         1 avg_time=   1518834 ns]
find_tweet<simdjson_ondemand>/manual_time                 915890 ns      1003833 ns          764           4.033k           690.944M         11.561k       194.085k    2.92666M              4.63435           1094.11       3.20207G          2.05905M                    3.26049                     0.70355            1094.11    4.12916k   631.515k       657.567M/s   11.5602k   194.109k   2.92932M         4.63857    1091.83/s 3.19834G/s     2.05905M               3.26049               0.702909          1        1091.83/s [BEST: throughput=  0.69 GB/s doc_throughput=  1094 docs/s instructions=     2059051 cycles=     2926659 branch_miss=    4033 cache_miss=   11561 cache_ref=    194085 items=         1 avg_time=    915890 ns]
find_tweet<yyjson>/manual_time                           1184871 ns      1277417 ns          459          47.644k           602.943M         21.685k       1.45973M    3.35353M               5.3103           954.757       3.20181G           3.4593M                    5.47777                     1.03154            954.757    47.4069k   631.515k       508.291M/s   21.7155k   1.46059M   3.57188M         5.65604    843.974/s 3.01457G/s     3.45952M               5.47813               0.968545          1        843.974/s [BEST: throughput=  0.60 GB/s doc_throughput=   954 docs/s instructions=     3459297 cycles=     3353534 branch_miss=   47644 cache_miss=   21685 cache_ref=   1459728 items=         1 avg_time=   1184870 ns]
find_tweet<yyjson_insitu>/manual_time                    1108267 ns      1201212 ns          634          47.941k           625.738M         11.786k        1.3015M    3.23145M              5.11699           990.851       3.20189G          3.36039M                    5.32116                      1.0399            990.851    47.4836k   631.515k       543.425M/s   11.8037k   1.30122M    3.4348M         5.43899     902.31/s 3.09925G/s     3.36046M               5.32127               0.978357          1         902.31/s [BEST: throughput=  0.63 GB/s doc_throughput=   990 docs/s instructions=     3360390 cycles=     3231453 branch_miss=   47941 cache_miss=   11786 cache_ref=   1301500 items=         1 avg_time=   1108266 ns]
find_tweet<sajson>/manual_time                           1427215 ns      1520373 ns          490          68.748k           443.623M         10.181k       1.83924M    4.55707M              7.21609           702.475       3.20123G          5.16187M                    8.17378                     1.13272            702.475     69.093k   631.515k       421.982M/s   10.1803k   1.83986M   4.56399M         7.22705    700.665/s 3.19783G/s     5.16187M               8.17379                  1.131          1        700.665/s [BEST: throughput=  0.44 GB/s doc_throughput=   702 docs/s instructions=     5161867 cycles=     4557070 branch_miss=   68748 cache_miss=   10181 cache_ref=   1839238 items=         1 avg_time=   1427215 ns]
find_tweet<rapidjson>/manual_time                        2756646 ns      2852388 ns          254          74.912k           235.389M         11.018k       6.24792M    8.58662M              13.5969           372.737       3.20055G          13.2836M                    21.0346                     1.54702            372.737    75.0613k   631.515k       218.475M/s   11.2303k   6.24872M   8.63141M         13.6678     362.76/s 3.13113G/s     13.2845M               21.0359                1.53909          1         362.76/s [BEST: throughput=  0.24 GB/s doc_throughput=   372 docs/s instructions=    13283649 cycles=     8586615 branch_miss=   74912 cache_miss=   11018 cache_ref=   6247922 items=         1 avg_time=   2756646 ns]
find_tweet<rapidjson_insitu>/manual_time                 2095197 ns      2193334 ns          339          59.596k           309.408M         10.836k        3.4067M    6.53282M              10.3447           489.946       3.20073G          9.68526M                    15.3365                     1.48255            489.946    59.4938k   631.515k       287.448M/s   11.0063k   3.40679M   6.55028M         10.3723    477.282/s 3.12633G/s     9.68575M               15.3373                1.47868          1        477.282/s [BEST: throughput=  0.31 GB/s doc_throughput=   489 docs/s instructions=     9685260 cycles=     6532820 branch_miss=   59596 cache_miss=   10836 cache_ref=   3406698 items=         1 avg_time=   2095196 ns]
find_tweet<nlohmann_json>/manual_time                   13005714 ns     13107724 ns           55          256.85k           53.0362M         88.658k        30.983M     38.073M              60.2884           83.9825       3.19747G          54.4235M                    86.1792                     1.42945            83.9825    272.276k   631.515k       46.3073M/s   139.009k   30.4411M   41.5737M         65.8317    76.8893/s 3.19657G/s     52.8595M               83.7027                1.27146          1        76.8893/s [BEST: throughput=  0.05 GB/s doc_throughput=    83 docs/s instructions=    54423474 cycles=    38073040 branch_miss=  256850 cache_miss=   88658 cache_ref=  30983008 items=         1 avg_time=  13005714 ns]
top_tweet<simdjson_dom>/manual_time                      1552565 ns      1653647 ns          451          16.886k           407.726M         25.575k       881.652k    4.95803M              7.85101           645.632       3.20106G          3.80075M                    6.01846                    0.766583            645.632    17.0713k   631.515k       387.913M/s   25.5803k   882.059k   4.96447M         7.86121    644.095/s 3.19759G/s     3.80074M               6.01845               0.765588          1        644.095/s [BEST: throughput=  0.41 GB/s doc_throughput=   645 docs/s instructions=     3800745 cycles=     4958033 branch_miss=   16886 cache_miss=   25575 cache_ref=    881652 items=         1 avg_time=   1552565 ns]
top_tweet<simdjson_ondemand>/manual_time                 1055078 ns      1158774 ns          664           6.585k           599.989M          22.46k         380.1k    3.36986M              5.33616           950.079       3.20164G          2.70591M                    4.28478                    0.802971            950.079    6.69775k   631.515k        570.82M/s   22.4613k   380.344k   3.37445M         5.34342    947.797/s 3.19829G/s     2.70591M               4.28479               0.801881          1        947.797/s [BEST: throughput=  0.60 GB/s doc_throughput=   950 docs/s instructions=     2705905 cycles=     3369865 branch_miss=    6585 cache_miss=   22460 cache_ref=    380100 items=         1 avg_time=   1055077 ns]
top_tweet<simdjson_ondemand_forward_only>/manual_time    1069393 ns      1176391 ns          655           6.707k           591.954M         22.723k       393.933k    3.41559M              5.40857           937.355       3.20162G          2.73439M                    4.32989                    0.800562            937.355    6.85176k   631.515k       563.179M/s   22.7204k   394.219k   3.41993M         5.41544     935.11/s 3.19801G/s     2.73439M               4.32989               0.799546          1         935.11/s [BEST: throughput=  0.59 GB/s doc_throughput=   937 docs/s instructions=     2734392 cycles=     3415592 branch_miss=    6707 cache_miss=   22723 cache_ref=    393933 items=         1 avg_time=   1069392 ns]
top_tweet<yyjson>/manual_time                            1206789 ns      1317472 ns          583          47.805k           591.104M         23.417k       1.46726M     3.4207M              5.41666            936.01       3.20181G          3.48273M                    5.51488                     1.01813             936.01    47.7139k   631.515k       499.059M/s   23.3826k    1.4683M   3.64278M         5.76832    828.645/s 3.01857G/s     3.48294M               5.51522               0.956122          1        828.645/s [BEST: throughput=  0.59 GB/s doc_throughput=   936 docs/s instructions=     3482730 cycles=     3420705 branch_miss=   47805 cache_miss=   23417 cache_ref=   1467263 items=         1 avg_time=   1206789 ns]
top_tweet<yyjson_insitu>/manual_time                     1128749 ns      1241999 ns          621          47.653k           616.895M         13.484k       1.30835M    3.27815M              5.19093            976.85       3.20226G          3.38373M                    5.35812                     1.03221             976.85    47.6861k   631.515k       533.564M/s   13.4962k   1.30888M   3.50108M         5.54394    885.937/s 3.10174G/s     3.38388M               5.35836               0.966525          1        885.937/s [BEST: throughput=  0.62 GB/s doc_throughput=   976 docs/s instructions=     3383734 cycles=     3278151 branch_miss=   47653 cache_miss=   13484 cache_ref=   1308355 items=         1 avg_time=   1128748 ns]
top_tweet<sajson>/manual_time                            1446492 ns      1559461 ns          484          68.761k           437.801M         11.777k       1.84734M    4.61768M              7.31206           693.254       3.20122G          5.18707M                     8.2137                     1.12331            693.254    69.1169k   631.515k       416.359M/s   11.7887k   1.84876M   4.62557M         7.32455    691.328/s 3.19778G/s     5.18707M                8.2137                1.12139          1        691.328/s [BEST: throughput=  0.44 GB/s doc_throughput=   693 docs/s instructions=     5187073 cycles=     4617677 branch_miss=   68761 cache_miss=   11777 cache_ref=   1847341 items=         1 avg_time=   1446492 ns]
top_tweet<rapidjson>/manual_time                         2792211 ns      2911340 ns          252            74.8k           231.493M         12.909k         6.234M    8.68902M               13.759           366.567       3.18511G          13.3181M                    21.0892                     1.53275            366.567    75.2056k   631.515k       215.693M/s   13.1242k   6.24071M   8.74301M         13.8445    358.139/s 3.13121G/s     13.3187M                 21.09                1.52335          1        358.139/s [BEST: throughput=  0.23 GB/s doc_throughput=   366 docs/s instructions=    13318119 cycles=     8689020 branch_miss=   74800 cache_miss=   12909 cache_ref=   6233996 items=         1 avg_time=   2792211 ns]
top_tweet<rapidjson_insitu>/manual_time                  2117879 ns      2239679 ns          336          59.615k            306.72M         13.039k       3.41643M    6.59044M              10.4359           485.689        3.2009G          9.71715M                    15.3871                     1.47443            485.689    59.6576k   631.515k       284.369M/s   13.2477k   3.41681M   6.62029M         10.4832     472.17/s 3.12591G/s     9.71763M               15.3878                1.46786          1         472.17/s [BEST: throughput=  0.31 GB/s doc_throughput=   485 docs/s instructions=     9717154 cycles=     6590437 branch_miss=   59615 cache_miss=   13039 cache_ref=   3416428 items=         1 avg_time=   2117879 ns]
top_tweet<nlohmann_json>/manual_time                    18614613 ns     18740207 ns           38         427.978k           34.0001M        340.085k         42.31M    59.3721M              94.0154           53.8389       3.19653G          76.4338M                    121.032                     1.28737            53.8389    431.104k   631.515k       32.3541M/s   338.155k   42.3808M   59.5022M         94.2213    53.7212/s 3.19653G/s     76.6111M               121.313                1.28753          1        53.7212/s [BEST: throughput=  0.03 GB/s doc_throughput=    53 docs/s instructions=    76433817 cycles=    59372131 branch_miss=  427978 cache_miss=  340085 cache_ref=  42310037 items=         1 avg_time=  18614613 ns]
