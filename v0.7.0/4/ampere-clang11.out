run_benchmark: v0.8.0~34 /home/jkeiser/simdjson_benchmark_results/v0.7.0/4/ampere-clang11.json -DCMAKE_BUILD_TYPE=Release
git reset --hard v0.8.0~34
HEAD is now at 9a404bdc Reenabling the optimized kernels (main branch). (#1344)
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- git Version: v0.2.1-9a404bdc
-- Version: 0.2.1
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES -- failed to compile
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
make -f CMakeFiles/Makefile2 bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 10
make -f CMakeFiles/Makefile2 benchmark/CMakeFiles/bench_ondemand.dir/all
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/DependInfo.cmake --color=
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build
make[3]: Nothing to be done for '_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build'.
[ 80%] Built target benchmark
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/CMakeFiles/generated-data.dir/DependInfo.cmake --color=
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/build
make[3]: Nothing to be done for 'jsonexamples/generated/CMakeFiles/generated-data.dir/build'.
[ 80%] Built target generated-data
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/src/CMakeFiles/simdjson.dir/DependInfo.cmake --color=
Scanning dependencies of target simdjson
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/clang++-11  -DSIMDJSON_THREADS_ENABLED=1 -Dsimdjson_EXPORTS -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/src  -O3 -DNDEBUG -fPIC   -pthread -fPIC -Werror -Wall -Wextra -Weffc++ -Wsign-compare -Wshadow -Wwrite-strings -Wpointer-arith -Winit-self -Wconversion -Wno-sign-conversion -std=c++17 -o CMakeFiles/simdjson.dir/simdjson.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/src/simdjson.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/simdjson.dir/link.txt --verbose=1
/usr/bin/clang++-11 -fPIC -O3 -DNDEBUG  -shared -Wl,-soname,libsimdjson.so.6 -o ../libsimdjson.so.6.0.0 CMakeFiles/simdjson.dir/simdjson.cpp.o  -pthread 
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_symlink_library ../libsimdjson.so.6.0.0 ../libsimdjson.so.6 ../libsimdjson.so
[ 90%] Built target simdjson
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark/CMakeFiles/bench_ondemand.dir/DependInfo.cmake --color=
Scanning dependencies of target bench_ondemand
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/clang++-11  -DSIMDJSON_BENCHMARK_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/\" -DSIMDJSON_MINEFIELD_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/minefield/\" -DSIMDJSON_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/\" -DSIMDJSON_THREADS_ENABLED=1 -DSIMDJSON_USING_LIBRARY=1 -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/. -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/linux -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -O3 -DNDEBUG   -pthread -std=c++17 -o CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/bench_ondemand.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/cmake -E cmake_link_script CMakeFiles/bench_ondemand.dir/link.txt --verbose=1
/usr/bin/clang++-11  -O3 -DNDEBUG   CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o  -o bench_ondemand  -Wl,-rpath,/home/jkeiser/simdjson_benchmark_results/simdjson/build ../libsimdjson.so.6.0.0 ../_deps/google_benchmarks/src/libbenchmark.a -pthread /usr/lib/aarch64-linux-gnu/librt.so 
[100%] Built target bench_ondemand
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 0
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/4/ampere-clang11.json --benchmark_out_format=json
2021-01-24 23:24:23
Running benchmark/bench_ondemand
Run on (32 X 3300 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x32)
  L1 Instruction 32 KiB (x32)
  L2 Unified 256 KiB (x16)
Load Average: 1.00, 0.78, 0.77
On Demand implementation: arm64
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                         Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PartialTweets<OnDemand>     1085478 ns      1085490 ns          645          11.313k           597.178M         22.885k       386.498k    3.38484M              5.35988           945.627        3.2008G          2.59743M                    4.11301                     0.76737           94.5627k     11.922k   631.515k       554.828M/s   22.9096k   387.491k   3.39727M         5.37955    921.243/s 3.12971G/s     2.59743M               4.11301               0.764564        100       92.1243k/s [best: throughput=  0.60 GB/s doc_throughput=   945 docs/s instructions=     2597428 cycles=     3384843 branch_miss=   11313 cache_miss=   22885 cache_ref=    386498 items=       100 avg_time=   1062381 ns]
PartialTweets<Dom>          1574430 ns      1574447 ns          445          13.378k           408.271M         25.936k       958.056k    4.95113M              7.84008           646.494       3.20088G          3.95042M                    6.25546                    0.797882           64.6494k    13.5947k   631.515k       382.521M/s   25.9421k   958.783k   4.95771M          7.8505    635.143/s 3.14886G/s     3.95042M               6.25546               0.796823        100       63.5143k/s [best: throughput=  0.41 GB/s doc_throughput=   646 docs/s instructions=     3950417 cycles=     4951130 branch_miss=   13378 cache_miss=   25936 cache_ref=    958056 items=       100 avg_time=   1550506 ns]
Creating a source file spanning 44921 KB 
LargeRandom<Dom>          311145245 ns    311148612 ns            2         1.95056M           147.947M        3.98162M       232.957M    994.066M              21.6107           3.21632       3.19724G          1040.92M                    22.6292                     1.04713           3.21632M    1.95098M   45.9988M       140.987M/s   3.98164M   232.957M   994.542M          21.621     3.2139/s 3.19636G/s     1040.92M               22.6292                1.04663      1000k        3.2139M/s [best: throughput=  0.15 GB/s doc_throughput=     3 docs/s instructions=  1040915659 cycles=   994066377 branch_miss= 1950558 cache_miss= 3981620 cache_ref= 232956585 items=   1000000 avg_time= 311087256 ns]
LargeRandomSum<Dom>       307194135 ns    307197346 ns            2         1.95271M           149.777M        3.98072M       230.962M    981.882M              21.3458           3.25611       3.19711G          1039.92M                    22.6075                      1.0591           3.25611M    1.95205M   45.9988M         142.8M/s   3.98071M   230.958M    981.88M         21.3458    3.25524/s 3.19625G/s     1039.92M               22.6075                1.05911      1000k       3.25524M/s [best: throughput=  0.15 GB/s doc_throughput=     3 docs/s instructions=  1039915656 cycles=   981881743 branch_miss= 1952709 cache_miss= 3980724 cache_ref= 230962428 items=   1000000 avg_time= 307139925 ns]
LargeRandom<OnDemand>     198199901 ns    198187029 ns            4         1.18439M           232.187M        2.31753M       106.185M     633.44M              13.7708           5.04767        3.1974G          613.774M                    13.3433                    0.968953           5.04767M    1.18401M   45.9988M       221.346M/s   2.31755M   106.185M   633.389M         13.7697    5.04574/s 3.19591G/s     613.774M               13.3433               0.969032      1000k       5.04574M/s [best: throughput=  0.23 GB/s doc_throughput=     5 docs/s instructions=   613773891 cycles=   633440146 branch_miss= 1184392 cache_miss= 2317531 cache_ref= 106184600 items=   1000000 avg_time= 198149412 ns]
LargeRandomSum<OnDemand>  198818688 ns    198816746 ns            4         1.20387M           231.433M        2.31637M       106.098M    635.498M              13.8155           5.03129       3.19738G          618.774M                     13.452                    0.973683           5.03129M    1.20405M   45.9988M       220.645M/s   2.31637M   106.099M   635.491M         13.8154    5.02976/s 3.19637G/s     618.774M                13.452               0.973694      1000k       5.02976M/s [best: throughput=  0.23 GB/s doc_throughput=     5 docs/s instructions=   618773884 cycles=   635498013 branch_miss= 1203867 cache_miss= 2316369 cache_ref= 106098150 items=   1000000 avg_time= 198765693 ns]
Creating a source file spanning 134087 KB 
Kostya<Dom>               377371713 ns    377366724 ns            2         881.867k           363.999M        6.95503M       249.393M    1.20572G              8.78133           2.65102       3.19639G           1.1314G                    8.24004                    0.938359            1.3899M    881.201k   137.305M       346.995M/s   6.95494M   249.391M   1.20611G          8.7842    2.64994/s 3.19613G/s      1.1314G               8.24004               0.938053   524.288k       1.38933M/s [best: throughput=  0.36 GB/s doc_throughput=     2 docs/s instructions=  1131399139 cycles=  1205721085 branch_miss=  881867 cache_miss= 6955031 cache_ref= 249393114 items=    524288 avg_time= 377309525 ns]
KostyaSum<Dom>            375786131 ns    375782069 ns            2         881.642k           365.498M        6.95366M       248.341M    1.20094G              8.74654           2.66194       3.19684G          1.13087G                    8.23623                    0.941655           1.39562M    881.783k   137.305M       348.458M/s   6.95369M   248.343M   1.20102G         8.74706    2.66112/s 3.19604G/s     1.13087G               8.23623               0.941599   524.288k       1.39519M/s [best: throughput=  0.37 GB/s doc_throughput=     2 docs/s instructions=  1130874850 cycles=  1200943799 branch_miss=  881642 cache_miss= 6953664 cache_ref= 248341118 items=    524288 avg_time= 375722176 ns]
Kostya<OnDemand>          256771829 ns    256774535 ns            3         1.13773M           535.324M        5.28216M       114.983M    820.024M              5.97228           3.89879        3.1971G          747.021M                    5.44059                    0.910974           2.04409M    1.15809M   137.305M       509.958M/s   5.28218M   115.065M   820.633M         5.97672    3.89447/s 3.19593G/s     747.021M               5.44059               0.910298   524.288k       2.04182M/s [best: throughput=  0.54 GB/s doc_throughput=     3 docs/s instructions=   747020513 cycles=   820024114 branch_miss= 1137731 cache_miss= 5282157 cache_ref= 114982917 items=    524288 avg_time= 256713504 ns]
KostyaSum<OnDemand>       256734400 ns    256732127 ns            3         1.13931M           535.805M        5.28102M       114.873M    819.054M              5.96522            3.9023       3.19619G          749.118M                    5.45587                    0.914613           2.04593M    1.23958M   137.305M       510.042M/s   5.28102M   115.187M   820.486M         5.97565    3.89511/s 3.19588G/s     749.118M               5.45587               0.913017   524.288k       2.04216M/s [best: throughput=  0.54 GB/s doc_throughput=     3 docs/s instructions=   749117613 cycles=   819053871 branch_miss= 1139314 cache_miss= 5281020 cache_ref= 114873329 items=    524288 avg_time= 256678208 ns]
DistinctUserID<Dom>         1583941 ns      1583934 ns          439          13.426k           410.595M         26.558k       948.864k    4.92279M              7.79521           650.174       3.20067G          3.88742M                     6.1557                    0.789677             74.77k    13.4881k   631.515k        380.23M/s    26.571k   950.671k   4.97473M         7.87746     631.34/s 3.14075G/s     3.88742M                6.1557               0.781432        115        72.604k/s [best: throughput=  0.41 GB/s doc_throughput=   650 docs/s instructions=     3887418 cycles=     4922792 branch_miss=   13426 cache_miss=   26558 cache_ref=    948864 items=       115 avg_time=   1555905 ns]
On Demand implementation: arm64
DistinctUserID<OnDemand>    1086128 ns      1086125 ns          644          12.709k           599.496M         22.656k       369.122k    3.37197M               5.3395           949.298       3.20101G          2.59046M                    4.10197                    0.768232           109.169k    12.7873k   631.515k       554.503M/s   22.6476k   370.019k   3.37995M         5.35214    920.704/s 3.11194G/s     2.59046M               4.10197               0.766418        115       105.881k/s [best: throughput=  0.60 GB/s doc_throughput=   949 docs/s instructions=     2590458 cycles=     3371973 branch_miss=   12709 cache_miss=   22656 cache_ref=    369122 items=       115 avg_time=   1056954 ns]
FindTweet<Dom>              1522738 ns      1522755 ns          453          13.039k           423.764M         23.469k       928.579k    4.76993M              7.55315           671.028       3.20076G          3.78856M                    5.99917                     0.79426            671.028    13.1678k   631.515k       395.507M/s   23.4826k   929.025k   4.77486M         7.56096    656.705/s 3.13567G/s     3.78856M               5.99916                0.79344          1        656.705/s [best: throughput=  0.42 GB/s doc_throughput=   671 docs/s instructions=     3788563 cycles=     4769929 branch_miss=   13039 cache_miss=   23469 cache_ref=    928579 items=         1 avg_time=   1493295 ns]
On Demand implementation: arm64
FindTweet<OnDemand>          935125 ns       935124 ns          749           4.654k           699.051M          11.56k       225.558k    2.89205M              4.57955          1.10694k       3.20134G          2.10274M                    3.32967                    0.727074           1.10694k    4.86223k   631.515k       644.042M/s    11.558k   226.224k   2.89719M         4.58769    1069.38/s 3.09819G/s     2.10274M               3.32967               0.725783          1        1069.38/s [best: throughput=  0.70 GB/s doc_throughput=  1106 docs/s instructions=     2102738 cycles=     2892054 branch_miss=    4654 cache_miss=   11560 cache_ref=    225558 items=         1 avg_time=    906020 ns]
