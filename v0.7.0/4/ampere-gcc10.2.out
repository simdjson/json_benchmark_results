run_benchmark: v0.8.0~34 /home/jkeiser/simdjson_benchmark_results/v0.7.0/4/ampere-gcc10.2.json -DCMAKE_BUILD_TYPE=Release
git reset --hard v0.8.0~34
HEAD is now at 9a404bdc Reenabling the optimized kernels (main branch). (#1344)
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- git Version: v0.2.1-9a404bdc
-- Version: 0.2.1
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
make -f CMakeFiles/Makefile2 bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 10
make -f CMakeFiles/Makefile2 benchmark/CMakeFiles/bench_ondemand.dir/all
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/DependInfo.cmake --color=
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build
make[3]: Nothing to be done for '_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build'.
[ 80%] Built target benchmark
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/CMakeFiles/generated-data.dir/DependInfo.cmake --color=
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/build
make[3]: Nothing to be done for 'jsonexamples/generated/CMakeFiles/generated-data.dir/build'.
[ 80%] Built target generated-data
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/src/CMakeFiles/simdjson.dir/DependInfo.cmake --color=
Scanning dependencies of target simdjson
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/g++-10  -DSIMDJSON_THREADS_ENABLED=1 -Dsimdjson_EXPORTS -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/src  -O3 -DNDEBUG -fPIC   -pthread -fPIC -Werror -Wall -Wextra -Weffc++ -Wsign-compare -Wshadow -Wwrite-strings -Wpointer-arith -Winit-self -Wconversion -Wno-sign-conversion -std=c++17 -o CMakeFiles/simdjson.dir/simdjson.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/src/simdjson.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/simdjson.dir/link.txt --verbose=1
/usr/bin/g++-10 -fPIC -O3 -DNDEBUG  -shared -Wl,-soname,libsimdjson.so.6 -o ../libsimdjson.so.6.0.0 CMakeFiles/simdjson.dir/simdjson.cpp.o  -pthread 
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_symlink_library ../libsimdjson.so.6.0.0 ../libsimdjson.so.6 ../libsimdjson.so
[ 90%] Built target simdjson
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark/CMakeFiles/bench_ondemand.dir/DependInfo.cmake --color=
Scanning dependencies of target bench_ondemand
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/g++-10  -DSIMDJSON_BENCHMARK_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/\" -DSIMDJSON_MINEFIELD_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/minefield/\" -DSIMDJSON_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/\" -DSIMDJSON_THREADS_ENABLED=1 -DSIMDJSON_USING_LIBRARY=1 -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/. -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/linux -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -O3 -DNDEBUG   -pthread -std=c++17 -o CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/bench_ondemand.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/cmake -E cmake_link_script CMakeFiles/bench_ondemand.dir/link.txt --verbose=1
/usr/bin/g++-10  -O3 -DNDEBUG   CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o  -o bench_ondemand  -Wl,-rpath,/home/jkeiser/simdjson_benchmark_results/simdjson/build ../libsimdjson.so.6.0.0 ../_deps/google_benchmarks/src/libbenchmark.a -pthread /usr/lib/aarch64-linux-gnu/librt.so 
[100%] Built target bench_ondemand
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 0
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/4/ampere-gcc10.2.json --benchmark_out_format=json
2021-01-24 23:32:58
Running benchmark/bench_ondemand
Run on (32 X 3300 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x32)
  L1 Instruction 32 KiB (x32)
  L2 Unified 256 KiB (x16)
Load Average: 1.03, 1.00, 0.91
On Demand implementation: arm64
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                         Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PartialTweets<OnDemand>     1091379 ns      1091392 ns          641           6.948k           592.324M         22.764k       400.946k     3.4127M              5.40399           937.941       3.20091G          2.74889M                    4.35285                    0.805488           93.7941k    7.07401k   631.515k       551.827M/s   22.7781k   401.186k   3.41668M         5.41029    916.261/s 3.13057G/s     2.74889M               4.35285                0.80455        100       91.6261k/s [best: throughput=  0.59 GB/s doc_throughput=   937 docs/s instructions=     2748888 cycles=     3412700 branch_miss=    6948 cache_miss=   22764 cache_ref=    400946 items=       100 avg_time=   1068496 ns]
PartialTweets<Dom>          1604346 ns      1604363 ns          436          17.372k           400.667M         25.927k       904.856k    5.04484M              7.98847           634.453       3.20072G          3.92203M                    6.21051                    0.777435           63.4453k    17.6266k   631.515k       375.389M/s   25.9283k   905.592k   5.05257M         8.00071      623.3/s 3.14927G/s     3.92204M               6.21052               0.776245        100         62.33k/s [best: throughput=  0.40 GB/s doc_throughput=   634 docs/s instructions=     3922033 cycles=     5044840 branch_miss=   17372 cache_miss=   25927 cache_ref=    904856 items=       100 avg_time=   1580171 ns]
Creating a source file spanning 44921 KB 
LargeRandom<Dom>          309882925 ns    309876446 ns            2         1.90877M           148.477M        3.97989M       245.727M    990.449M              21.5321           3.22785       3.19702G          1099.47M                    23.9022                     1.11008           3.22785M    1.90879M   45.9988M       141.566M/s   3.97988M   245.727M   990.447M          21.532    3.22709/s 3.19626G/s     1099.47M               23.9022                1.11008      1000k       3.22709M/s [best: throughput=  0.15 GB/s doc_throughput=     3 docs/s instructions=  1099472988 cycles=   990448802 branch_miss= 1908770 cache_miss= 3979893 cache_ref= 245727336 items=   1000000 avg_time= 309824214 ns]
LargeRandomSum<Dom>       313312996 ns    313308557 ns            2         1.90929M           146.849M        3.97983M       242.712M    1001.52M              21.7727           3.19245       3.19729G          1.10647G                    24.0544                      1.1048           3.19245M    1.90923M   45.9988M       140.015M/s   3.97982M   242.711M   1001.43M         21.7708    3.19174/s 3.19631G/s     1.10647G               24.0544                1.10489      1000k       3.19174M/s [best: throughput=  0.15 GB/s doc_throughput=     3 docs/s instructions=  1106473006 cycles=  1001516757 branch_miss= 1909285 cache_miss= 3979828 cache_ref= 242712343 items=   1000000 avg_time= 313256875 ns]
LargeRandom<OnDemand>     182151577 ns    182149690 ns            4         1.20823M           252.665M        2.31816M       133.482M    582.131M              12.6554           5.49286       3.19756G          678.959M                    14.7604                     1.16633           5.49286M    1.20836M   45.9988M       240.834M/s    2.3185M   133.483M   582.161M          12.656    5.48999/s 3.19606G/s     678.959M               14.7604                1.16627      1000k       5.48999M/s [best: throughput=  0.25 GB/s doc_throughput=     5 docs/s instructions=   678959080 cycles=   582130827 branch_miss= 1208235 cache_miss= 2318159 cache_ref= 133482241 items=   1000000 avg_time= 182100716 ns]
LargeRandomSum<OnDemand>  176115068 ns    176113512 ns            4         1.16863M           261.299M        2.31608M       109.424M    562.794M               12.235           5.68056       3.19698G          649.959M                    14.1299                     1.15488           5.68056M    1.16879M   45.9988M       249.089M/s   2.31604M   109.424M   562.834M         12.2359    5.67816/s 3.19586G/s     649.959M               14.1299                 1.1548      1000k       5.67816M/s [best: throughput=  0.26 GB/s doc_throughput=     5 docs/s instructions=   649958502 cycles=   562793654 branch_miss= 1168634 cache_miss= 2316081 cache_ref= 109423770 items=   1000000 avg_time= 176065852 ns]
Creating a source file spanning 134087 KB 
Kostya<Dom>               382336501 ns    382333446 ns            2         1098.24k           359.213M        6.94583M       246.875M    1.22178G              8.89829           2.61617       3.19638G          1.14657G                    8.35052                    0.938442           1.37163M    1097.95k   137.305M       342.487M/s   6.94585M   246.876M   1.22203G          8.9001    2.61552/s 3.19624G/s     1.14657G               8.35052               0.938251   524.288k       1.37128M/s [best: throughput=  0.36 GB/s doc_throughput=     2 docs/s instructions=  1146568695 cycles=  1221779414 branch_miss= 1098238 cache_miss= 6945829 cache_ref= 246875306 items=    524288 avg_time= 382279678 ns]
KostyaSum<Dom>            382443421 ns    382447402 ns            2         1099.05k            359.16M        6.93886M       245.286M    1.22215G              8.90097           2.61579       3.19688G          1.14971G                    8.37343                    0.940732           1.37143M    1098.28k   137.305M       342.385M/s   6.93372M   245.285M   1.22244G         8.90314    2.61474/s 3.19637G/s     1.14971G               8.37343               0.940504   524.288k       1.37088M/s [best: throughput=  0.36 GB/s doc_throughput=     2 docs/s instructions=  1149714434 cycles=  1222148142 branch_miss= 1099050 cache_miss= 6938856 cache_ref= 245285961 items=    524288 avg_time= 382383944 ns]
Kostya<OnDemand>          256662757 ns    256660075 ns            3         1.14403M           535.198M        5.28116M       132.524M    820.103M              5.97286           3.89788       3.19666G          789.781M                    5.75202                    0.963026           2.04361M     1.1446M   137.305M       510.185M/s   5.28112M   132.525M   820.216M         5.97368     3.8962/s 3.19573G/s     789.781M               5.75202               0.962894   524.288k       2.04273M/s [best: throughput=  0.54 GB/s doc_throughput=     3 docs/s instructions=   789780783 cycles=   820103023 branch_miss= 1144027 cache_miss= 5281159 cache_ref= 132524395 items=    524288 avg_time= 256608676 ns]
KostyaSum<OnDemand>       257450963 ns    257448927 ns            3         1088.99k           534.988M        5.28095M       130.256M     820.53M              5.97597           3.89635       3.19707G          789.257M                     5.7482                    0.961886           2.04281M     1.1646M   137.305M       508.622M/s    5.2803M   130.481M   822.761M         5.99221    3.88427/s 3.19582G/s     789.257M                5.7482               0.959278   524.288k       2.03647M/s [best: throughput=  0.53 GB/s doc_throughput=     3 docs/s instructions=   789256510 cycles=   820530094 branch_miss= 1088990 cache_miss= 5280947 cache_ref= 130255577 items=    524288 avg_time= 257394393 ns]
DistinctUserID<Dom>         1600593 ns      1600560 ns          438          17.624k           403.271M         26.585k       895.815k    5.01217M              7.93674           638.577       3.20066G          3.86113M                    6.11408                    0.770351           73.4363k    17.5999k   631.515k       376.281M/s   26.5833k   892.278k   5.02849M         7.96258    624.782/s 3.14171G/s     3.86114M               6.11408               0.767852        115       71.8499k/s [best: throughput=  0.40 GB/s doc_throughput=   638 docs/s instructions=     3861134 cycles=     5012173 branch_miss=   17624 cache_miss=   26585 cache_ref=    895815 items=       115 avg_time=   1572769 ns]
On Demand implementation: arm64
DistinctUserID<OnDemand>    1080272 ns      1080272 ns          649           7.121k           601.629M          22.42k        376.82k    3.35998M               5.3205           952.675       3.20096G          2.68648M                    4.25403                    0.799554           109.558k    7.35901k   631.515k       557.507M/s   22.4198k    377.29k   3.36562M         5.32944    925.693/s 3.11553G/s     2.68648M               4.25403               0.798213        115       106.455k/s [best: throughput=  0.60 GB/s doc_throughput=   952 docs/s instructions=     2686483 cycles=     3359976 branch_miss=    7121 cache_miss=   22420 cache_ref=    376820 items=       115 avg_time=   1052472 ns]
FindTweet<Dom>              1555411 ns      1555428 ns          451          17.104k           415.718M         23.483k       876.477k    4.86285M              7.70029           658.288       3.20115G          3.76283M                    5.95843                    0.773792            658.288    17.1179k   631.515k       387.199M/s   23.4852k   872.647k   4.87887M         7.72566     642.91/s 3.13667G/s     3.76283M               5.95842                0.77125          1         642.91/s [best: throughput=  0.42 GB/s doc_throughput=   658 docs/s instructions=     3762835 cycles=     4862848 branch_miss=   17104 cache_miss=   23483 cache_ref=    876477 items=         1 avg_time=   1525785 ns]
On Demand implementation: arm64
FindTweet<OnDemand>          944547 ns       944557 ns          741           4.029k           691.111M         11.559k       194.701k     2.9254M              4.63235           1094.37       3.20146G          2.06107M                     3.2637                    0.704545            1094.37    4.13525k   631.515k       637.611M/s   11.5596k   194.758k   2.92812M         4.63666     1058.7/s     3.1G/s     2.06108M                3.2637                0.70389          1         1058.7/s [best: throughput=  0.69 GB/s doc_throughput=  1094 docs/s instructions=     2061073 cycles=     2925396 branch_miss=    4029 cache_miss=   11559 cache_ref=    194701 items=         1 avg_time=    915514 ns]
