run_benchmark: v0.8.0~36 /home/jkeiser/simdjson_benchmark_results/v0.7.0/2/skylake-gcc10.2.json -DCMAKE_BUILD_TYPE=Release
git reset --hard v0.8.0~36
HEAD is now at 6b02b065 Merge pull request #1330 from simdjson/jkeiser/depth-tracking
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- git Version: v0.2.1-6b02b065
-- Version: 0.2.1
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
make -f CMakeFiles/Makefile2 bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 10
make -f CMakeFiles/Makefile2 benchmark/CMakeFiles/bench_ondemand.dir/all
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/DependInfo.cmake --color=
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build
make[3]: Nothing to be done for '_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build'.
[ 80%] Built target benchmark
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/CMakeFiles/generated-data.dir/DependInfo.cmake --color=
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/build
make[3]: Nothing to be done for 'jsonexamples/generated/CMakeFiles/generated-data.dir/build'.
[ 80%] Built target generated-data
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/src/CMakeFiles/simdjson.dir/DependInfo.cmake --color=
Scanning dependencies of target simdjson
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/g++-10  -DSIMDJSON_THREADS_ENABLED=1 -Dsimdjson_EXPORTS -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/src  -O3 -DNDEBUG -fPIC   -pthread -fPIC -Werror -Wall -Wextra -Weffc++ -Wsign-compare -Wshadow -Wwrite-strings -Wpointer-arith -Winit-self -Wconversion -Wno-sign-conversion -std=c++17 -o CMakeFiles/simdjson.dir/simdjson.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/src/simdjson.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/simdjson.dir/link.txt --verbose=1
/usr/bin/g++-10 -fPIC -O3 -DNDEBUG  -shared -Wl,-soname,libsimdjson.so.6 -o ../libsimdjson.so.6.0.0 CMakeFiles/simdjson.dir/simdjson.cpp.o  -pthread 
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_symlink_library ../libsimdjson.so.6.0.0 ../libsimdjson.so.6 ../libsimdjson.so
[ 90%] Built target simdjson
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark/CMakeFiles/bench_ondemand.dir/DependInfo.cmake --color=
Scanning dependencies of target bench_ondemand
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/g++-10  -DSIMDJSON_BENCHMARK_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/\" -DSIMDJSON_MINEFIELD_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/minefield/\" -DSIMDJSON_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/\" -DSIMDJSON_THREADS_ENABLED=1 -DSIMDJSON_USING_LIBRARY=1 -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/. -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/linux -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -O3 -DNDEBUG   -pthread -std=c++17 -o CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/bench_ondemand.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/cmake -E cmake_link_script CMakeFiles/bench_ondemand.dir/link.txt --verbose=1
/usr/bin/g++-10  -O3 -DNDEBUG   CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o  -o bench_ondemand  -Wl,-rpath,/home/jkeiser/simdjson_benchmark_results/simdjson/build ../libsimdjson.so.6.0.0 ../_deps/google_benchmarks/src/libbenchmark.a -pthread /usr/lib/x86_64-linux-gnu/librt.so 
[100%] Built target bench_ondemand
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 0
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/2/skylake-gcc10.2.json --benchmark_out_format=json
2021-01-25 01:24:18
Running benchmark/bench_ondemand
Run on (4 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 256 KiB (x4)
  L3 Unified 8192 KiB (x1)
Load Average: 1.00, 0.76, 0.50
On Demand implementation: fallback
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                         Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PartialTweets<OnDemand>     1129256 ns      1129258 ns          620          32.277k            566.38M               0        59.919k    4.11621M              6.51799           896.859       3.69165G          10.6701M                     16.896                     2.59221           89.6859k    32.7365k   631.515k       533.323M/s    13.7935   59.8745k    4.1363M          6.5498    885.537/s 3.66285G/s     10.6701M                16.896                2.57961        100       88.5537k/s [best: throughput=  0.57 GB/s doc_throughput=   896 docs/s instructions=    10670057 cycles=     4116206 branch_miss=   32277 cache_miss=       0 cache_ref=     59919 items=       100 avg_time=   1121123 ns]
PartialTweets<Dom>           271188 ns       271190 ns         2577           3.863k           2.41512G               0        93.147k    965.415k              1.52873          3.82433k       3.69206G           2.9625M                    4.69109                     3.06862           382.433k    3.98841k   631.515k       2.16875G/s   0.024059   93.2914k   970.529k         1.53683   3.68745k/s 3.57878G/s      2.9625M               4.69109                3.05246        100       368.745k/s [best: throughput=  2.42 GB/s doc_throughput=  3824 docs/s instructions=     2962496 cycles=      965415 branch_miss=    3863 cache_miss=       0 cache_ref=     93147 items=       100 avg_time=    263017 ns]
Creating a source file spanning 44921 KB 
LargeRandom<Dom>           88166272 ns     88165520 ns            8         929.085k           522.767M        10.8091M       15.3947M    324.588M              7.05644           11.3648       3.68888G          974.113M                    21.1769                     3.00108           11.3648M    924.884k   45.9988M       497.562M/s   10.8343M   15.3917M   325.151M         7.06868    11.3423/s 3.68796G/s     974.113M               21.1769                2.99588      1000k       11.3423M/s [best: throughput=  0.52 GB/s doc_throughput=    11 docs/s instructions=   974112687 cycles=   324587694 branch_miss=  929085 cache_miss=10809106 cache_ref=  15394731 items=   1000000 avg_time=  88152064 ns]
LargeRandomSum<Dom>        88124339 ns     88108331 ns            8          928.38k           523.382M        10.2561M        14.548M    324.197M              7.04794           11.3782       3.68876G          979.113M                    21.2856                     3.02012           11.3782M     925.67k   45.9988M       497.885M/s    10.274M   14.5492M   324.885M          7.0629    11.3497/s 3.68733G/s     979.113M               21.2856                3.01372      1000k       11.3497M/s [best: throughput=  0.52 GB/s doc_throughput=    11 docs/s instructions=   979112703 cycles=   324196522 branch_miss=  928380 cache_miss=10256148 cache_ref=  14548042 items=   1000000 avg_time=  88110312 ns]
LargeRandom<OnDemand>     129885587 ns    129884660 ns            5         2.39317M           354.238M        5.71066M       8.07043M     478.88M              10.4107           7.70102       3.68786G          1.25797G                     27.348                     2.62691           7.70102M     2.3914M   45.9988M       337.745M/s   5.74133M   8.07029M   479.079M          10.415    7.69914/s 3.68849G/s     1.25797G                27.348                2.62582      1000k       7.69914M/s [best: throughput=  0.35 GB/s doc_throughput=     7 docs/s instructions=  1257973686 cycles=   478879706 branch_miss= 2393169 cache_miss= 5710657 cache_ref=   8070433 items=   1000000 avg_time= 129870663 ns]
LargeRandomSum<OnDemand>  127168675 ns    127167784 ns            6          2.3903M           362.436M        5.05835M       7.20636M    468.178M              10.1781           7.87925       3.68889G          1.22397G                    26.6088                     2.61433           7.87925M    2.38133M   45.9988M        344.96M/s   5.08358M   7.20576M   468.497M          10.185    7.86363/s 3.68409G/s     1.22397G               26.6088                2.61255      1000k       7.86363M/s [best: throughput=  0.36 GB/s doc_throughput=     7 docs/s instructions=  1223973680 cycles=   468177865 branch_miss= 2390301 cache_miss= 5058349 cache_ref=   7206365 items=   1000000 avg_time= 127154664 ns]
Creating a source file spanning 134087 KB 
Kostya<Dom>                84051733 ns     84049408 ns            8         462.027k           1.63659G        15.4602M       22.0971M     309.43M              2.25359           11.9194       3.68822G          944.977M                    6.88232                     3.05393            6.2492M    461.691k   137.305M       1.52143G/s   15.5027M    22.126M   309.941M         2.25732    11.8978/s  3.6876G/s     944.977M               6.88232                3.04889   524.288k       6.23785M/s [best: throughput=  1.64 GB/s doc_throughput=    11 docs/s instructions=   944977189 cycles=   309429676 branch_miss=  462027 cache_miss=15460188 cache_ref=  22097086 items=    524288 avg_time=  84037295 ns]
KostyaSum<Dom>             83510835 ns     83507724 ns            8         460.289k             1.647G        15.1413M       21.5697M    307.536M               2.2398           11.9952       3.68896G          947.599M                    6.90141                     3.08126           6.28895M    459.974k   137.305M        1.5313G/s   15.1832M   21.6327M   307.934M          2.2427    11.9749/s  3.6875G/s     947.599M               6.90141                3.07727   524.288k       6.27832M/s [best: throughput=  1.65 GB/s doc_throughput=    11 docs/s instructions=   947598642 cycles=   307536250 branch_miss=  460289 cache_miss=15141326 cache_ref=  21569666 items=    524288 avg_time=  83496642 ns]
Kostya<OnDemand>          296945217 ns    296947023 ns            2         3.31912M           462.426M         10.313M       14.1396M    1095.31M              7.97724           3.36788       3.68888G          2.86185G                     20.843                     2.61281           1.76574M    3.31913M   137.305M       440.968M/s   10.2603M   14.1413M   1095.42M           7.978     3.3676/s 3.68894G/s     2.86185G                20.843                2.61256   524.288k       1.76559M/s [best: throughput=  0.46 GB/s doc_throughput=     3 docs/s instructions=  2861852786 cycles=  1095314836 branch_miss= 3319119 cache_miss=10313012 cache_ref=  14139602 items=    524288 avg_time= 296925348 ns]
KostyaSum<OnDemand>       297596576 ns    297598373 ns            2         3.32732M           461.463M        9.93914M       13.6888M    1097.57M              7.99369           3.36086       3.68879G          2.85923G                    20.8239                     2.60505           1.76206M    3.32685M   137.305M       440.003M/s   9.96509M   13.6901M   1097.72M         7.99473    3.36023/s 3.68858G/s     2.85923G               20.8239                2.60471   524.288k       1.76173M/s [best: throughput=  0.46 GB/s doc_throughput=     3 docs/s instructions=  2859231358 cycles=  1097573827 branch_miss= 3327321 cache_miss= 9939139 cache_ref=  13688830 items=    524288 avg_time= 297577929 ns]
DistinctUserID<Dom>          269288 ns       269283 ns         2600           4.142k           2.43514G               0        94.208k    957.495k              1.51619          3.85603k       3.69213G          2.91303M                    4.61276                     3.04234           443.444k    4.30521k   631.515k       2.18411G/s    6.50423   94.3472k   962.985k         1.52488   3.71357k/s 3.57611G/s     2.91303M               4.61276                  3.025        115        427.06k/s [best: throughput=  2.44 GB/s doc_throughput=  3856 docs/s instructions=     2913030 cycles=      957495 branch_miss=    4142 cache_miss=       0 cache_ref=     94208 items=       115 avg_time=    260998 ns]
On Demand implementation: fallback
DistinctUserID<OnDemand>    1107257 ns      1107028 ns          632          32.038k           577.463M               0        57.418k     4.0371M              6.39272           914.409       3.69156G          10.3373M                    16.3691                     2.56059           105.157k    32.4059k   631.515k       544.033M/s    3.10127    57.549k   4.05411M         6.41966     903.32/s 3.66216G/s     10.3373M               16.3691                2.54984        115       103.882k/s [best: throughput=  0.58 GB/s doc_throughput=   914 docs/s instructions=    10337340 cycles=     4037098 branch_miss=   32038 cache_miss=       0 cache_ref=     57418 items=       115 avg_time=   1099144 ns]
FindTweet<Dom>               255575 ns       255571 ns         2740           3.693k           2.56884G               0        83.791k    907.622k              1.43721          4.06774k       3.69197G          2.82292M                    4.47008                     3.11024           4.06774k    3.86975k   631.515k        2.3013G/s       0.25   83.7385k   912.871k         1.44553   3.91281k/s 3.57189G/s     2.82292M               4.47008                3.09236          1       3.91281k/s [best: throughput=  2.57 GB/s doc_throughput=  4067 docs/s instructions=     2822922 cycles=      907622 branch_miss=    3693 cache_miss=       0 cache_ref=     83791 items=         1 avg_time=    247376 ns]
On Demand implementation: fallback
FindTweet<OnDemand>         1047746 ns      1047551 ns          668          31.133k           611.497M               0        31.312k    3.81238M              6.03688           968.302       3.69154G          9.73182M                    15.4103                     2.55269            968.302    31.7375k   631.515k       574.921M/s         26   31.2959k   3.83508M         6.07282    954.607/s 3.66099G/s     9.73182M               15.4103                2.53758          1        954.607/s [best: throughput=  0.61 GB/s doc_throughput=   968 docs/s instructions=     9731823 cycles=     3812382 branch_miss=   31133 cache_miss=       0 cache_ref=     31312 items=         1 avg_time=   1039622 ns]
