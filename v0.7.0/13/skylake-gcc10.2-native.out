run_benchmark: v0.8.0~25 /home/jkeiser/simdjson_benchmark_results/v0.7.0/13/skylake-gcc10.2-native.json -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-march=native
git reset --hard v0.8.0~25
HEAD is now at 158a3c53 Merge pull request #1351 from simdjson/jkeiser/unordered-lookup
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-march=native -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- git Version: v0.2.1-158a3c53
-- Version: 0.2.1
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
make -f CMakeFiles/Makefile2 bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 8
make -f CMakeFiles/Makefile2 benchmark/CMakeFiles/bench_ondemand.dir/all
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/DependInfo.cmake --color=
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build
make[3]: Nothing to be done for '_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build'.
[ 87%] Built target benchmark
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/CMakeFiles/generated-data.dir/DependInfo.cmake --color=
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/build
make[3]: Nothing to be done for 'jsonexamples/generated/CMakeFiles/generated-data.dir/build'.
[ 87%] Built target generated-data
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/src/CMakeFiles/simdjson.dir/DependInfo.cmake --color=
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/build
make[3]: Nothing to be done for 'src/CMakeFiles/simdjson.dir/build'.
[ 87%] Built target simdjson
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark/CMakeFiles/bench_ondemand.dir/DependInfo.cmake --color=
Scanning dependencies of target bench_ondemand
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/g++-10  -DSIMDJSON_BENCHMARK_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/\" -DSIMDJSON_MINEFIELD_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/minefield/\" -DSIMDJSON_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/\" -DSIMDJSON_THREADS_ENABLED=1 -DSIMDJSON_USING_LIBRARY=1 -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/. -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/linux -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -march=native -O3 -DNDEBUG   -pthread -std=c++17 -o CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/bench_ondemand.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/cmake -E cmake_link_script CMakeFiles/bench_ondemand.dir/link.txt --verbose=1
/usr/bin/g++-10  -march=native -O3 -DNDEBUG   CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o  -o bench_ondemand  -Wl,-rpath,/home/jkeiser/simdjson_benchmark_results/simdjson/build ../libsimdjson.so.6.0.0 ../_deps/google_benchmarks/src/libbenchmark.a -pthread /usr/lib/x86_64-linux-gnu/librt.so 
[100%] Built target bench_ondemand
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 0
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/13/skylake-gcc10.2-native.json --benchmark_out_format=json
2021-01-24 21:19:59
Running benchmark/bench_ondemand
Run on (4 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 256 KiB (x4)
  L3 Unified 8192 KiB (x1)
Load Average: 1.00, 1.00, 1.00
On Demand implementation: haswell
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                               Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PartialTweets<OnDemand>            189937 ns       189938 ns         3681           1.601k           3.49614G               0        58.258k    667.021k              1.05622          5.53612k       3.69271G          2.14687M                    3.39955                     3.21859           553.612k    1.73972k   631.515k        3.0965G/s  0.0116816   58.1936k   671.564k         1.06342   5.26487k/s  3.5357G/s     2.14687M               3.39955                3.19682        100       526.487k/s [best: throughput=  3.50 GB/s doc_throughput=  5536 docs/s instructions=     2146868 cycles=      667021 branch_miss=    1601 cache_miss=       0 cache_ref=     58258 items=       100 avg_time=    181968 ns]
PartialTweets<Dom>                 269521 ns       269519 ns         2599           3.683k           2.42996G               0        92.301k    959.554k              1.51945          3.84783k        3.6922G          2.91501M                    4.61589                     3.03788           384.783k    3.78786k   631.515k        2.1822G/s  0.0100038   92.3628k   964.489k         1.52726   3.71031k/s 3.57856G/s     2.91501M               4.61589                3.02233        100       371.031k/s [best: throughput=  2.43 GB/s doc_throughput=  3847 docs/s instructions=     2915006 cycles=      959554 branch_miss=    3683 cache_miss=       0 cache_ref=     92301 items=       100 avg_time=    261362 ns]
Creating a source file spanning 44921 KB 
LargeRandom<Dom>                 92023509 ns     92024076 ns            8         861.891k           501.334M        11.0308M       15.6138M    338.459M              7.35799           10.8988       3.68881G          972.675M                    21.1457                     2.87384           10.8988M    862.742k   45.9988M         476.7M/s   11.0528M   15.6146M   339.404M         7.37854    10.8667/s 3.68821G/s     972.675M               21.1457                2.86583      1000k       10.8667M/s [best: throughput=  0.50 GB/s doc_throughput=    10 docs/s instructions=   972674943 cycles=   338458542 branch_miss=  861891 cache_miss=11030801 cache_ref=  15613757 items=   1000000 avg_time=  92008844 ns]
LargeRandom<OnDemand>            58278012 ns     58277543 ns           12         863.821k            790.03M        5.59081M        8.0872M    214.786M              4.66938            17.175       3.68895G          644.053M                    14.0015                     2.99858            17.175M     864.61k   45.9988M        752.74M/s   5.65432M   8.08883M   214.923M         4.67237    17.1593/s 3.68793G/s     644.053M               14.0015                2.99666      1000k       17.1593M/s [best: throughput=  0.79 GB/s doc_throughput=    17 docs/s instructions=   644052562 cycles=   214785555 branch_miss=  863821 cache_miss= 5590814 cache_ref=   8087204 items=   1000000 avg_time=  58264926 ns]
LargeRandom<OnDemandUnordered>   62549675 ns     62550057 ns           11         876.051k           736.203M        5.63569M       8.09218M    230.495M               5.0109           16.0048       3.68904G          648.053M                    14.0885                     2.81157           16.0048M     876.48k   45.9988M       701.324M/s   5.69688M   8.09338M   230.678M         5.01487    15.9872/s 3.68789G/s     648.053M               14.0885                2.80934      1000k       15.9872M/s [best: throughput=  0.74 GB/s doc_throughput=    16 docs/s instructions=   648052565 cycles=   230495069 branch_miss=  876051 cache_miss= 5635687 cache_ref=   8092181 items=   1000000 avg_time=  62536789 ns]
Creating a source file spanning 134087 KB 
Kostya<Dom>                      86192688 ns     86193233 ns            8         444.633k           1.59563G        15.9728M       22.6219M    317.444M              2.31196           11.6211       3.68904G          937.516M                    6.82798                     2.95333           6.09279M    444.708k   137.305M       1.48359G/s   16.0026M   22.6658M   317.878M         2.31512    11.6018/s 3.68797G/s     937.516M               6.82798                 2.9493   524.288k        6.0827M/s [best: throughput=  1.60 GB/s doc_throughput=    11 docs/s instructions=   937516412 cycles=   317443966 branch_miss=  444633 cache_miss=15972764 cache_ref=  22621892 items=    524288 avg_time=  86178021 ns]
KostyaSum<Dom>                   86150347 ns     86150877 ns            8          445.12k           1.59963G        15.8212M       22.1583M    316.559M              2.30552           11.6502       3.68798G          940.138M                    6.84708                     2.96986           6.10806M    444.946k   137.305M       1.48432G/s   15.7649M   22.1665M   317.733M         2.31407    11.6075/s  3.6881G/s     940.138M               6.84708                 2.9589   524.288k        6.0857M/s [best: throughput=  1.60 GB/s doc_throughput=    11 docs/s instructions=   940137868 cycles=   316559161 branch_miss=  445120 cache_miss=15821202 cache_ref=  22158328 items=    524288 avg_time=  86135434 ns]
Kostya<OnDemand>                 63485095 ns     63485489 ns           11         456.876k           2.16549G        10.1646M       14.2339M    233.905M              1.70354           15.7714         3.689G          687.627M                    5.00803                     2.93978           8.26876M    457.191k   137.305M       2.01424G/s   10.2272M   14.2344M   234.126M         1.70515    15.7516/s 3.68787G/s     687.627M               5.00803                2.93699   524.288k       8.25839M/s [best: throughput=  2.17 GB/s doc_throughput=    15 docs/s instructions=   687627124 cycles=   233904505 branch_miss=  456876 cache_miss=10164581 cache_ref=  14233896 items=    524288 avg_time=  63471364 ns]
KostyaSum<OnDemand>              62728117 ns     62728495 ns           11         459.031k           2.19502G        9.84818M       13.7551M    230.741M               1.6805           15.9864       3.68873G          684.481M                    4.98512                     2.96645            8.3815M    459.099k   137.305M       2.03855G/s    9.8825M   13.7572M   231.335M         1.68482    15.9417/s 3.68787G/s     684.481M               4.98512                2.95883   524.288k       8.35805M/s [best: throughput=  2.20 GB/s doc_throughput=    15 docs/s instructions=   684481394 cycles=   230741188 branch_miss=  459031 cache_miss= 9848182 cache_ref=  13755052 items=    524288 avg_time=  62714252 ns]
DistinctUserID<Dom>                266054 ns       266052 ns         2580           3.927k           2.46373G               0        93.965k    946.419k              1.49865           3.9013k       3.69226G          2.86553M                    4.53755                     3.02776           448.649k    4.12111k   631.515k       2.21064G/s    1.73217   94.0419k   951.787k         1.50715   3.75866k/s 3.57745G/s     2.86553M               4.53756                3.01069        115       432.246k/s [best: throughput=  2.46 GB/s doc_throughput=  3901 docs/s instructions=     2865534 cycles=      946419 branch_miss=    3927 cache_miss=       0 cache_ref=     93965 items=       115 avg_time=    257921 ns]
On Demand implementation: haswell
DistinctUserID<OnDemand>           184743 ns       184744 ns         3862           1.675k           3.60275G               0         56.87k    647.254k              1.02492          5.70493k       3.69254G          2.11376M                    3.34713                     3.26574           656.067k    1.79497k   631.515k       3.18356G/s   0.105127   56.8633k   652.494k         1.03322   5.41289k/s 3.53188G/s     2.11376M               3.34713                3.23951        115       622.483k/s [best: throughput=  3.60 GB/s doc_throughput=  5704 docs/s instructions=     2113763 cycles=      647254 branch_miss=    1675 cache_miss=       0 cache_ref=     56870 items=       115 avg_time=    176800 ns]
FindTweet<Dom>                     256649 ns       256651 ns         2767           3.489k            2.5563G               0        83.801k    912.137k              1.44436          4.04788k       3.69222G          2.77501M                    4.39422                     3.04232           4.04788k    3.61778k   631.515k       2.29161G/s    3.03289   83.7209k   917.005k         1.45207   3.89635k/s 3.57297G/s     2.77501M               4.39422                3.02617          1       3.89635k/s [best: throughput=  2.56 GB/s doc_throughput=  4047 docs/s instructions=     2775014 cycles=      912137 branch_miss=    3489 cache_miss=       0 cache_ref=     83801 items=         1 avg_time=    248494 ns]
On Demand implementation: haswell
FindTweet<OnDemand>                127049 ns       127050 ns         5539              685           5.32237G               0        29.943k    438.223k             0.693923          8.42794k       3.69332G          1.48077M                    2.34479                     3.37903           8.42794k     721.005   631.515k       4.62922G/s  0.0433291   29.8918k   439.557k        0.696036    7.8709k/s 3.45971G/s     1.48077M               2.34479                3.36877          1        7.8709k/s [best: throughput=  5.32 GB/s doc_throughput=  8427 docs/s instructions=     1480767 cycles=      438223 branch_miss=     685 cache_miss=       0 cache_ref=     29943 items=         1 avg_time=    119082 ns]
