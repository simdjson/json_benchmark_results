run_benchmark: v0.8.0~26 /home/jkeiser/simdjson_benchmark_results/v0.7.0/12/ampere-gcc10.2.json -DCMAKE_BUILD_TYPE=Release
git reset --hard v0.8.0~26
HEAD is now at 93807bf2 Merge pull request #1352 from simdjson/jkeiser/assert-test-release
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- git Version: v0.2.1-93807bf2
-- Version: 0.2.1
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
make -f CMakeFiles/Makefile2 bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 11
make -f CMakeFiles/Makefile2 benchmark/CMakeFiles/bench_ondemand.dir/all
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/DependInfo.cmake --color=
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build
make[3]: Nothing to be done for '_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build'.
[ 72%] Built target benchmark
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/CMakeFiles/generated-data.dir/DependInfo.cmake --color=
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/build
make[3]: Nothing to be done for 'jsonexamples/generated/CMakeFiles/generated-data.dir/build'.
[ 81%] Built target generated-data
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/src/CMakeFiles/simdjson.dir/DependInfo.cmake --color=
Scanning dependencies of target simdjson
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/g++-10  -DSIMDJSON_THREADS_ENABLED=1 -Dsimdjson_EXPORTS -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/src  -O3 -DNDEBUG -fPIC   -pthread -fPIC -Werror -Wall -Wextra -Weffc++ -Wsign-compare -Wshadow -Wwrite-strings -Wpointer-arith -Winit-self -Wconversion -Wno-sign-conversion -std=c++17 -o CMakeFiles/simdjson.dir/simdjson.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/src/simdjson.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/simdjson.dir/link.txt --verbose=1
/usr/bin/g++-10 -fPIC -O3 -DNDEBUG  -shared -Wl,-soname,libsimdjson.so.6 -o ../libsimdjson.so.6.0.0 CMakeFiles/simdjson.dir/simdjson.cpp.o  -pthread 
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_symlink_library ../libsimdjson.so.6.0.0 ../libsimdjson.so.6 ../libsimdjson.so
[ 90%] Built target simdjson
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark/CMakeFiles/bench_ondemand.dir/DependInfo.cmake --color=
Scanning dependencies of target bench_ondemand
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/g++-10  -DSIMDJSON_BENCHMARK_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/\" -DSIMDJSON_MINEFIELD_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/minefield/\" -DSIMDJSON_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/\" -DSIMDJSON_THREADS_ENABLED=1 -DSIMDJSON_USING_LIBRARY=1 -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/. -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/linux -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -O3 -DNDEBUG   -pthread -std=c++17 -o CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/bench_ondemand.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/cmake -E cmake_link_script CMakeFiles/bench_ondemand.dir/link.txt --verbose=1
/usr/bin/g++-10  -O3 -DNDEBUG   CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o  -o bench_ondemand  -Wl,-rpath,/home/jkeiser/simdjson_benchmark_results/simdjson/build ../libsimdjson.so.6.0.0 ../_deps/google_benchmarks/src/libbenchmark.a -pthread /usr/lib/aarch64-linux-gnu/librt.so 
[100%] Built target bench_ondemand
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 0
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/12/ampere-gcc10.2.json --benchmark_out_format=json
2021-01-25 01:15:09
Running benchmark/bench_ondemand
Run on (32 X 3300 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x32)
  L1 Instruction 32 KiB (x32)
  L2 Unified 256 KiB (x16)
Load Average: 1.00, 1.00, 1.00
On Demand implementation: arm64
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                         Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PartialTweets<OnDemand>     1092497 ns      1092509 ns          641           6.932k           592.213M         22.746k       403.816k    3.41341M              5.40512           937.765       3.20098G          2.76245M                    4.37432                    0.809292           93.7765k    7.07635k   631.515k       551.263M/s   22.7611k   404.271k   3.41795M          5.4123    915.324/s 3.12853G/s     2.76245M               4.37432               0.808219        100       91.5324k/s [best: throughput=  0.59 GB/s doc_throughput=   937 docs/s instructions=     2762448 cycles=     3413412 branch_miss=    6932 cache_miss=   22746 cache_ref=    403816 items=       100 avg_time=   1068902 ns]
PartialTweets<Dom>          1608612 ns      1608629 ns          435          17.424k           400.447M         25.947k       906.911k    5.04801M               7.9935           634.105       3.20097G          3.92204M                    6.21052                    0.776947           63.4105k    17.7641k   631.515k       374.393M/s   25.9352k    905.61k   5.06591M         8.02183    621.647/s 3.14921G/s     3.92204M               6.21052               0.774202        100       62.1647k/s [best: throughput=  0.40 GB/s doc_throughput=   634 docs/s instructions=     3922037 cycles=     5048013 branch_miss=   17424 cache_miss=   25947 cache_ref=    906911 items=       100 avg_time=   1584259 ns]
Creating a source file spanning 44921 KB 
LargeRandom<Dom>          309649096 ns    309652112 ns            2         1.90957M           148.595M        3.98052M       245.747M    989.708M               21.516            3.2304       3.19715G          1099.47M                    23.9022                     1.11091            3.2304M     1.9099M   45.9988M       141.668M/s    3.9805M   245.748M    989.81M         21.5182    3.22943/s 3.19652G/s     1099.47M               23.9022                1.11079      1000k       3.22943M/s [best: throughput=  0.15 GB/s doc_throughput=     3 docs/s instructions=  1099472990 cycles=   989707701 branch_miss= 1909571 cache_miss= 3980524 cache_ref= 245747065 items=   1000000 avg_time= 309588263 ns]
LargeRandomSum<Dom>       312942980 ns    312935857 ns            2         1.90856M           147.027M         3.9801M       242.719M     1000.1M              21.7418           3.19633       3.19664G          1.10647G                    24.0544                     1.10636           3.19633M    1.90943M   45.9988M       140.182M/s   3.98009M   242.721M   1000.26M         21.7455    3.19554/s 3.19639G/s     1.10647G               24.0544                1.10618      1000k       3.19554M/s [best: throughput=  0.15 GB/s doc_throughput=     3 docs/s instructions=  1106473004 cycles=  1000097670 branch_miss= 1908558 cache_miss= 3980098 cache_ref= 242718841 items=   1000000 avg_time= 312885069 ns]
LargeRandom<OnDemand>     186955823 ns    186949084 ns            4         1.19089M           246.163M        2.31741M       149.431M    597.517M              12.9899           5.35151       3.19762G          712.959M                    15.4995                      1.1932           5.35151M    1.18996M   45.9988M       234.651M/s   2.31744M    149.43M   597.517M         12.9899    5.34905/s 3.19615G/s     712.959M               15.4995                 1.1932      1000k       5.34905M/s [best: throughput=  0.25 GB/s doc_throughput=     5 docs/s instructions=   712959090 cycles=   597517488 branch_miss= 1190892 cache_miss= 2317405 cache_ref= 149431342 items=   1000000 avg_time= 186902917 ns]
LargeRandomSum<OnDemand>  184302103 ns    184299184 ns            4         1.20888M           249.694M        2.31715M       130.426M    589.057M              12.8059           5.42828       3.19757G          684.959M                    14.8908                     1.16281           5.42828M    1.20897M   45.9988M       238.025M/s   2.31721M   130.427M    589.07M         12.8062    5.42596/s 3.19627G/s     684.959M               14.8908                1.16278      1000k       5.42596M/s [best: throughput=  0.25 GB/s doc_throughput=     5 docs/s instructions=   684959073 cycles=   589056812 branch_miss= 1208880 cache_miss= 2317146 cache_ref= 130426294 items=   1000000 avg_time= 184249670 ns]
Creating a source file spanning 134087 KB 
Kostya<Dom>               382234572 ns    382230424 ns            2         1.11071M           359.326M        6.94884M       246.904M    1.22161G              8.89707           2.61699       3.19695G          1.14657G                    8.35052                     0.93857           1.37206M    1.11079M   137.305M       342.579M/s    6.9491M   246.907M   1.22171G         8.89777    2.61622/s 3.19626G/s     1.14657G               8.35052               0.938496   524.288k       1.37165M/s [best: throughput=  0.36 GB/s doc_throughput=     2 docs/s instructions=  1146568697 cycles=  1221612659 branch_miss= 1110711 cache_miss= 6948844 cache_ref= 246904358 items=    524288 avg_time= 382173306 ns]
KostyaSum<Dom>            382155195 ns    382149769 ns            2         1099.52k           359.477M        6.94752M       245.291M    1.22116G              8.89379           2.61809       3.19711G          1.14971G                    8.37343                    0.941492           1.37263M    1099.71k   137.305M       342.652M/s   6.94749M   245.292M   1.22143G         8.89575    2.61678/s 3.19621G/s     1.14971G               8.37343               0.941284   524.288k       1.37194M/s [best: throughput=  0.36 GB/s doc_throughput=     2 docs/s instructions=  1149714436 cycles=  1221161846 branch_miss= 1099516 cache_miss= 6947516 cache_ref= 245291303 items=    524288 avg_time= 382091562 ns]
Kostya<OnDemand>          262979303 ns    262982083 ns            3         1.86149M           522.879M        5.28289M       139.421M    839.508M              6.11418           3.80816       3.19698G          795.548M                    5.79402                    0.947636           1.99657M    1.93254M   137.305M       497.921M/s   5.28286M   139.501M   840.571M         6.12193    3.80254/s 3.19631G/s     795.548M               5.79402               0.946438   524.288k       1.99363M/s [best: throughput=  0.52 GB/s doc_throughput=     3 docs/s instructions=   795547959 cycles=   839507759 branch_miss= 1861488 cache_miss= 5282890 cache_ref= 139420884 items=    524288 avg_time= 262920362 ns]
KostyaSum<OnDemand>       259469506 ns    259466283 ns            3          1.2857M           530.101M        5.28246M       136.168M     828.04M              6.03066           3.86076       3.19686G          795.548M                    5.79402                     0.96076           2.02415M     1.3364M   137.305M       504.668M/s   5.28249M   136.338M   829.289M         6.03976    3.85407/s 3.19613G/s     795.548M               5.79402               0.959313   524.288k       2.02064M/s [best: throughput=  0.53 GB/s doc_throughput=     3 docs/s instructions=   795547968 cycles=   828040365 branch_miss= 1285702 cache_miss= 5282462 cache_ref= 136168459 items=    524288 avg_time= 259410225 ns]
DistinctUserID<Dom>         1604827 ns      1604820 ns          436          17.683k           401.965M          26.59k       895.079k    5.02891M              7.96324           636.508       3.20094G          3.86113M                    6.11408                    0.767788           73.1985k    17.7666k   631.515k       375.282M/s   26.5929k   892.016k   5.04342M         7.98623    623.123/s 3.14267G/s     3.86114M               6.11408               0.765578        115       71.6591k/s [best: throughput=  0.40 GB/s doc_throughput=   636 docs/s instructions=     3861134 cycles=     5028907 branch_miss=   17683 cache_miss=   26590 cache_ref=    895079 items=       115 avg_time=   1577259 ns]
On Demand implementation: arm64
DistinctUserID<OnDemand>    1083476 ns      1083487 ns          647           7.057k           600.294M         22.441k       384.216k    3.36756M              5.33252           950.561       3.20108G          2.70945M                    4.29039                    0.804572           109.315k    7.35431k   631.515k       555.853M/s   22.4349k   385.188k   3.37638M         5.34647    922.946/s 3.11621G/s     2.70944M               4.29039               0.802471        115       106.139k/s [best: throughput=  0.60 GB/s doc_throughput=   950 docs/s instructions=     2709447 cycles=     3367564 branch_miss=    7057 cache_miss=   22441 cache_ref=    384216 items=       115 avg_time=   1055795 ns]
FindTweet<Dom>              1559620 ns      1559637 ns          451          17.263k           413.564M         23.502k       874.275k    4.88791M              7.73998           654.877       3.20098G          3.76283M                    5.95843                    0.769824            654.877    17.2902k   631.515k       386.154M/s   23.4945k   872.368k   4.89449M          7.7504    641.175/s 3.13823G/s     3.76283M               5.95842               0.768789          1        641.175/s [best: throughput=  0.41 GB/s doc_throughput=   654 docs/s instructions=     3762835 cycles=     4887914 branch_miss=   17263 cache_miss=   23502 cache_ref=    874275 items=         1 avg_time=   1530451 ns]
On Demand implementation: arm64
FindTweet<OnDemand>          944265 ns       944275 ns          741           3.972k           691.212M         11.574k       194.915k    2.92509M              4.63187           1094.53        3.2016G          2.06153M                    3.26442                    0.704774            1094.53    4.09091k   631.515k       637.801M/s   11.5672k   194.862k   2.92786M         4.63625    1059.01/s 3.10064G/s     2.06153M               3.26442               0.704108          1        1059.01/s [best: throughput=  0.69 GB/s doc_throughput=  1094 docs/s instructions=     2061531 cycles=     2925094 branch_miss=    3972 cache_miss=   11574 cache_ref=    194915 items=         1 avg_time=    915431 ns]
