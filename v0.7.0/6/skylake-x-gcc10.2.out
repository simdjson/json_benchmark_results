run_benchmark: v0.8.0~32 /home/jkeiser/simdjson_benchmark_results/v0.7.0/6/skylake-x-gcc10.2.json -DCMAKE_BUILD_TYPE=Release
git reset --hard v0.8.0~32
HEAD is now at c90ee572 This might make the fuzzer error debuggable. (#1345)
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- Failed to find LLVM FileCheck
-- git Version: v0.2.1-c90ee572
-- Version: 0.2.1
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
make -f CMakeFiles/Makefile2 bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 10
make -f CMakeFiles/Makefile2 benchmark/CMakeFiles/bench_ondemand.dir/all
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/DependInfo.cmake --color=
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build
make[3]: Nothing to be done for '_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build'.
[ 80%] Built target benchmark
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/CMakeFiles/generated-data.dir/DependInfo.cmake --color=
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/build
make[3]: Nothing to be done for 'jsonexamples/generated/CMakeFiles/generated-data.dir/build'.
[ 80%] Built target generated-data
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/src/CMakeFiles/simdjson.dir/DependInfo.cmake --color=
Scanning dependencies of target simdjson
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/g++-10  -DSIMDJSON_THREADS_ENABLED=1 -Dsimdjson_EXPORTS -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/src  -O3 -DNDEBUG -fPIC   -pthread -fPIC -Werror -Wall -Wextra -Weffc++ -Wsign-compare -Wshadow -Wwrite-strings -Wpointer-arith -Winit-self -Wconversion -Wno-sign-conversion -std=c++17 -o CMakeFiles/simdjson.dir/simdjson.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/src/simdjson.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/simdjson.dir/link.txt --verbose=1
/usr/bin/g++-10 -fPIC -O3 -DNDEBUG  -shared -Wl,-soname,libsimdjson.so.6 -o ../libsimdjson.so.6.0.0 CMakeFiles/simdjson.dir/simdjson.cpp.o  -pthread 
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_symlink_library ../libsimdjson.so.6.0.0 ../libsimdjson.so.6 ../libsimdjson.so
[ 90%] Built target simdjson
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark/CMakeFiles/bench_ondemand.dir/DependInfo.cmake --color=
Scanning dependencies of target bench_ondemand
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/g++-10  -DSIMDJSON_BENCHMARK_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/\" -DSIMDJSON_MINEFIELD_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/minefield/\" -DSIMDJSON_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/\" -DSIMDJSON_THREADS_ENABLED=1 -DSIMDJSON_USING_LIBRARY=1 -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/. -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/linux -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -O3 -DNDEBUG   -pthread -std=c++17 -o CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/bench_ondemand.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/cmake -E cmake_link_script CMakeFiles/bench_ondemand.dir/link.txt --verbose=1
/usr/bin/g++-10  -O3 -DNDEBUG   CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o  -o bench_ondemand  -Wl,-rpath,/home/jkeiser/simdjson_benchmark_results/simdjson/build ../libsimdjson.so.6.0.0 ../_deps/google_benchmarks/src/libbenchmark.a -pthread /usr/lib/x86_64-linux-gnu/librt.so 
[100%] Built target bench_ondemand
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 0
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/6/skylake-x-gcc10.2.json --benchmark_out_format=json
2021-01-24 23:53:56
Running benchmark/bench_ondemand
Run on (4 X 3200 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x4)
  L1 Instruction 32 KiB (x4)
  L2 Unified 1024 KiB (x4)
  L3 Unified 8448 KiB (x1)
Load Average: 1.00, 1.00, 1.00
***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.
On Demand implementation: fallback
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                         Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PartialTweets<OnDemand>     1317451 ns      1317440 ns          531          32.861k           488.097M               1         5.844k    4.13089M              6.54123           772.898       3.19275G          10.6701M                     16.896                       2.583           77.2898k    33.4167k   631.515k       457.144M/s    1.77966   5.94173k   4.15482M         6.57914    759.048/s 3.15371G/s     10.6701M                16.896                2.56812        100       75.9048k/s [best: throughput=  0.49 GB/s doc_throughput=   772 docs/s instructions=    10670065 cycles=     4130886 branch_miss=   32861 cache_miss=       1 cache_ref=      5844 items=       100 avg_time=   1302320 ns]
PartialTweets<Dom>           321087 ns       321075 ns         2177           3.902k           2.08918G               1        31.449k    965.208k               1.5284           3.3082k        3.1931G           2.9625M                    4.69111                     3.06929            330.82k     4.0462k   631.515k        1.8318G/s    1.93569   31.6439k   971.387k         1.53819   3.11454k/s 3.02542G/s      2.9625M               4.69111                3.04977        100       311.454k/s [best: throughput=  2.09 GB/s doc_throughput=  3308 docs/s instructions=     2962504 cycles=      965208 branch_miss=    3902 cache_miss=       1 cache_ref=     31449 items=       100 avg_time=    304515 ns]
Creating a source file spanning 44921 KB 
LargeRandom<Dom>           98770442 ns     98767341 ns            7           877.7k           466.657M        6.74347M       6.89626M    314.294M              6.83266            10.145       3.18851G          974.113M                    21.1769                     3.09937            10.145M    875.258k   45.9988M       444.153M/s   6.80163M    6.8957M   314.821M         6.84412    10.1248/s  3.1875G/s     974.113M               21.1769                3.09418      1000k       10.1248M/s [best: throughput=  0.47 GB/s doc_throughput=    10 docs/s instructions=   974112698 cycles=   314293829 branch_miss=  877700 cache_miss= 6743467 cache_ref=   6896258 items=   1000000 avg_time=  98743321 ns]
LargeRandomSum<Dom>        98410487 ns     98409622 ns            7         878.268k            468.33M        6.37869M       6.51992M    313.186M              6.80858           10.1814       3.18866G          979.113M                    21.2856                      3.1263           10.1814M    876.006k   45.9988M       445.768M/s   6.43392M   6.51991M   313.673M         6.81917    10.1616/s 3.18743G/s     979.113M               21.2856                3.12144      1000k       10.1616M/s [best: throughput=  0.47 GB/s doc_throughput=    10 docs/s instructions=   979112710 cycles=   313186145 branch_miss=  878268 cache_miss= 6378693 cache_ref=   6519924 items=   1000000 avg_time=  98383653 ns]
LargeRandom<OnDemand>     147560258 ns    147555869 ns            5          2.3884M            312.18M         3.5447M       3.57312M    469.937M              10.2163            6.7867       3.18932G          1.25797G                     27.348                      2.6769            6.7867M    2.39606M   45.9988M       297.297M/s   3.52808M   3.57323M   470.496M         10.2284    6.77709/s 3.18859G/s     1.25797G                27.348                2.67372      1000k       6.77709M/s [best: throughput=  0.31 GB/s doc_throughput=     6 docs/s instructions=  1257973698 cycles=   469937198 branch_miss= 2388395 cache_miss= 3544701 cache_ref=   3573120 items=   1000000 avg_time= 147532072 ns]
LargeRandomSum<OnDemand>  144224981 ns    144223629 ns            5         2.37551M           319.699M        3.13419M       3.19685M    458.897M              9.97629           6.95015        3.1894G          1.22397G                    26.6088                     2.66721           6.95015M    2.38461M   45.9988M       304.165M/s   3.14891M    3.1968M   459.888M         9.99784    6.93368/s 3.18872G/s     1.22397G               26.6088                2.66146      1000k       6.93368M/s [best: throughput=  0.32 GB/s doc_throughput=     6 docs/s instructions=  1223973691 cycles=   458896906 branch_miss= 2375507 cache_miss= 3134192 cache_ref=   3196851 items=   1000000 avg_time= 144196032 ns]
Creating a source file spanning 134087 KB 
Kostya<Dom>                95821407 ns     95817821 ns            7         479.936k           1.43577G        10.2414M       10.3171M    304.883M              2.22048           10.4568       3.18811G          944.977M                    6.88232                     3.09947           5.48238M    479.686k   137.305M       1.33457G/s   10.2279M   10.3166M   305.365M         2.22399    10.4365/s 3.18693G/s     944.977M               6.88232                3.09458   524.288k       5.47172M/s [best: throughput=  1.44 GB/s doc_throughput=    10 docs/s instructions=   944977199 cycles=   304883332 branch_miss=  479936 cache_miss=10241367 cache_ref=  10317063 items=    524288 avg_time=  95792382 ns]
KostyaSum<Dom>             94950365 ns     94949511 ns            7         480.391k           1.44855G        10.0015M       10.1197M      302.2M              2.20094           10.5499       3.18817G          947.599M                    6.90141                     3.13567           5.53117M    481.203k   137.305M       1.34677G/s   10.0279M   10.1196M   302.611M         2.20393    10.5319/s 3.18708G/s     947.599M               6.90141                3.13141   524.288k       5.52176M/s [best: throughput=  1.45 GB/s doc_throughput=    10 docs/s instructions=   947598652 cycles=   302199688 branch_miss=  480391 cache_miss=10001532 cache_ref=  10119727 items=    524288 avg_time=  94920762 ns]
Kostya<OnDemand>          340458855 ns    340449131 ns            2         3.36899M           403.392M        6.43652M         6.472M    1085.62M              7.90661           2.93793       3.18947G          2.86185G                     20.843                     2.63615           1.54032M    3.37231M   137.305M       384.622M/s   6.44797M   6.47204M   1085.75M         7.90755     2.9373/s 3.18916G/s     2.86185G                20.843                2.63584   524.288k       1.53999M/s [best: throughput=  0.40 GB/s doc_throughput=     2 docs/s instructions=  2861852805 cycles=  1085617647 branch_miss= 3368991 cache_miss= 6436516 cache_ref=   6471999 items=    524288 avg_time= 340424277 ns]
KostyaSum<OnDemand>       340892270 ns    340881703 ns            2         3.33419M           402.858M        6.23245M       6.27427M    1087.07M              7.91717           2.93403       3.18949G          2.85923G                    20.8239                     2.63023           1.53828M    3.33499M   137.305M       384.134M/s    6.2435M   6.27428M   1087.14M         7.91772    2.93357/s 3.18921G/s     2.85923G               20.8239                2.63004   524.288k       1.53804M/s [best: throughput=  0.40 GB/s doc_throughput=     2 docs/s instructions=  2859231374 cycles=  1087066971 branch_miss= 3334191 cache_miss= 6232452 cache_ref=   6274266 items=    524288 avg_time= 340855978 ns]
DistinctUserID<Dom>          320301 ns       320290 ns         2186           4.216k           2.10973G               4        32.087k     955.91k              1.51368          3.34075k       3.19346G          2.91304M                    4.61278                      3.0474           384.186k     4.3686k   631.515k       1.83629G/s    4.03522   32.1473k   962.698k         1.52443   3.12217k/s 3.00571G/s     2.91304M               4.61278                3.02591        115       359.049k/s [best: throughput=  2.11 GB/s doc_throughput=  3340 docs/s instructions=     2913038 cycles=      955910 branch_miss=    4216 cache_miss=       4 cache_ref=     32087 items=       115 avg_time=    301766 ns]
On Demand implementation: fallback
DistinctUserID<OnDemand>    1291488 ns      1291452 ns          541          32.246k           499.043M               0         4.947k    4.04024M               6.3977           790.231       3.19273G          10.3373M                    16.3691                     2.55859           90.8766k    33.0382k   631.515k       466.343M/s   0.504621   5.19644k   4.06705M         6.44015    774.322/s 3.14921G/s     10.3373M               16.3691                2.54173        115       89.0471k/s [best: throughput=  0.50 GB/s doc_throughput=   790 docs/s instructions=    10337348 cycles=     4040245 branch_miss=   32246 cache_miss=       0 cache_ref=      4947 items=       115 avg_time=   1274795 ns]
FindTweet<Dom>               302591 ns       302584 ns         2310           3.751k           2.24454G               0        27.017k    898.546k              1.42284          3.55422k       3.19363G          2.82293M                    4.47009                     3.14166           3.55422k    3.88293k   631.515k       1.94374G/s   0.921212   27.0923k   904.554k         1.43236   3.30487k/s 2.98943G/s     2.82293M               4.47009                 3.1208          1       3.30487k/s [best: throughput=  2.24 GB/s doc_throughput=  3554 docs/s instructions=     2822930 cycles=      898546 branch_miss=    3751 cache_miss=       0 cache_ref=     27017 items=         1 avg_time=    283543 ns]
On Demand implementation: fallback
FindTweet<OnDemand>         1221811 ns      1221801 ns          573          31.591k           527.312M               0         3.116k    3.82366M              6.05474           834.996       3.19274G          9.73183M                    15.4103                     2.54516            834.996    32.0926k   631.515k       492.928M/s   0.382199   3.25864k   3.84394M         6.08686    818.464/s 3.14613G/s     9.73183M               15.4103                2.53173          1        818.464/s [best: throughput=  0.53 GB/s doc_throughput=   834 docs/s instructions=     9731831 cycles=     3823658 branch_miss=   31591 cache_miss=       0 cache_ref=      3116 items=         1 avg_time=   1204815 ns]
