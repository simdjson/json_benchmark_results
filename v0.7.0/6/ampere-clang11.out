run_benchmark: v0.8.0~32 /home/jkeiser/simdjson_benchmark_results/v0.7.0/6/ampere-clang11.json -DCMAKE_BUILD_TYPE=Release
git reset --hard v0.8.0~32
HEAD is now at c90ee572 This might make the fuzzer error debuggable. (#1345)
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- git Version: v0.2.1-c90ee572
-- Version: 0.2.1
-- Performing Test HAVE_THREAD_SAFETY_ATTRIBUTES -- failed to compile
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
make -f CMakeFiles/Makefile2 bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 10
make -f CMakeFiles/Makefile2 benchmark/CMakeFiles/bench_ondemand.dir/all
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/DependInfo.cmake --color=
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build
make[3]: Nothing to be done for '_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build'.
[ 80%] Built target benchmark
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/CMakeFiles/generated-data.dir/DependInfo.cmake --color=
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/build
make[3]: Nothing to be done for 'jsonexamples/generated/CMakeFiles/generated-data.dir/build'.
[ 80%] Built target generated-data
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/src/CMakeFiles/simdjson.dir/DependInfo.cmake --color=
Scanning dependencies of target simdjson
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/clang++-11  -DSIMDJSON_THREADS_ENABLED=1 -Dsimdjson_EXPORTS -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/src  -O3 -DNDEBUG -fPIC   -pthread -fPIC -Werror -Wall -Wextra -Weffc++ -Wsign-compare -Wshadow -Wwrite-strings -Wpointer-arith -Winit-self -Wconversion -Wno-sign-conversion -std=c++17 -o CMakeFiles/simdjson.dir/simdjson.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/src/simdjson.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/simdjson.dir/link.txt --verbose=1
/usr/bin/clang++-11 -fPIC -O3 -DNDEBUG  -shared -Wl,-soname,libsimdjson.so.6 -o ../libsimdjson.so.6.0.0 CMakeFiles/simdjson.dir/simdjson.cpp.o  -pthread 
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_symlink_library ../libsimdjson.so.6.0.0 ../libsimdjson.so.6 ../libsimdjson.so
[ 90%] Built target simdjson
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark/CMakeFiles/bench_ondemand.dir/DependInfo.cmake --color=
Scanning dependencies of target bench_ondemand
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/clang++-11  -DSIMDJSON_BENCHMARK_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/\" -DSIMDJSON_MINEFIELD_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/minefield/\" -DSIMDJSON_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/\" -DSIMDJSON_THREADS_ENABLED=1 -DSIMDJSON_USING_LIBRARY=1 -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/. -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/linux -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -O3 -DNDEBUG   -pthread -std=c++17 -o CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/bench_ondemand.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/cmake -E cmake_link_script CMakeFiles/bench_ondemand.dir/link.txt --verbose=1
/usr/bin/clang++-11  -O3 -DNDEBUG   CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o  -o bench_ondemand  -Wl,-rpath,/home/jkeiser/simdjson_benchmark_results/simdjson/build ../libsimdjson.so.6.0.0 ../_deps/google_benchmarks/src/libbenchmark.a -pthread /usr/lib/aarch64-linux-gnu/librt.so 
[100%] Built target bench_ondemand
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 0
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/6/ampere-clang11.json --benchmark_out_format=json
2021-01-24 23:22:17
Running benchmark/bench_ondemand
Run on (32 X 3300 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x32)
  L1 Instruction 32 KiB (x32)
  L2 Unified 256 KiB (x16)
Load Average: 1.01, 0.66, 0.74
On Demand implementation: arm64
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                         Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PartialTweets<OnDemand>     1086027 ns      1086039 ns          644          11.525k           596.827M         22.888k       386.623k    3.38729M              5.36375           945.071       3.20123G          2.59743M                    4.11301                    0.766816           94.5071k    11.8488k   631.515k       554.547M/s   22.9111k   387.658k   3.39749M         5.37991    920.777/s 3.12834G/s     2.59743M               4.11301               0.764513        100       92.0777k/s [best: throughput=  0.60 GB/s doc_throughput=   945 docs/s instructions=     2597428 cycles=     3387290 branch_miss=   11525 cache_miss=   22888 cache_ref=    386623 items=       100 avg_time=   1062366 ns]
PartialTweets<Dom>          1600245 ns      1600239 ns          437          13.625k           404.793M         25.948k       959.336k    4.99334M              7.90692           640.987       3.20067G          3.95042M                    6.25546                    0.791137           64.0987k    13.5765k   631.515k       376.356M/s   25.9439k   961.026k   5.03762M         7.97704    624.907/s 3.14804G/s     3.95041M               6.25546               0.784183        100       62.4907k/s [best: throughput=  0.40 GB/s doc_throughput=   640 docs/s instructions=     3950417 cycles=     4993340 branch_miss=   13625 cache_miss=   25948 cache_ref=    959336 items=       100 avg_time=   1575517 ns]
Creating a source file spanning 44921 KB 
LargeRandom<Dom>          310691583 ns    310694901 ns            2         1.95313M           148.331M        3.98266M       232.973M    991.432M              21.5534           3.22468       3.19705G          1040.92M                    22.6292                     1.04991           3.22468M      1.952M   45.9988M       141.193M/s   3.98249M   232.969M   993.127M         21.5903    3.21859/s 3.19647G/s     1040.92M               22.6292                1.04812      1000k       3.21859M/s [best: throughput=  0.15 GB/s doc_throughput=     3 docs/s instructions=  1040915657 cycles=   991431612 branch_miss= 1953130 cache_miss= 3982661 cache_ref= 232973237 items=   1000000 avg_time= 310634361 ns]
LargeRandomSum<Dom>       306622797 ns    306625779 ns            2         1.95113M           150.085M        3.98142M       230.966M    979.861M              21.3019           3.26281        3.1971G          1039.92M                    22.6075                     1.06129           3.26281M    1.95164M   45.9988M       143.066M/s    3.9814M   230.968M   980.149M         21.3082     3.2613/s 3.19657G/s     1039.92M               22.6075                1.06098      1000k        3.2613M/s [best: throughput=  0.15 GB/s doc_throughput=     3 docs/s instructions=  1039915658 cycles=   979860897 branch_miss= 1951129 cache_miss= 3981424 cache_ref= 230966298 items=   1000000 avg_time= 306565341 ns]
LargeRandom<OnDemand>     198185895 ns    198188106 ns            4         1.18361M           232.196M        2.31769M       106.185M     633.36M              13.7691           5.04787       3.19712G          613.774M                    13.3433                    0.969076           5.04787M     1.1835M   45.9988M       221.345M/s    2.3177M   106.184M   633.424M         13.7704    5.04571/s 3.19607G/s     613.774M               13.3433               0.968979      1000k       5.04571M/s [best: throughput=  0.23 GB/s doc_throughput=     5 docs/s instructions=   613773887 cycles=   633359818 branch_miss= 1183608 cache_miss= 2317688 cache_ref= 106185369 items=   1000000 avg_time= 198135706 ns]
LargeRandomSum<OnDemand>  198809021 ns    198811106 ns            4         1.20368M           231.471M        2.31656M       106.099M    635.466M              13.8148            5.0321       3.19773G          618.774M                     13.452                    0.973733            5.0321M    1.20402M   45.9988M       220.651M/s   2.31656M   106.099M   635.486M         13.8153     5.0299/s 3.19643G/s     618.774M                13.452               0.973702      1000k        5.0299M/s [best: throughput=  0.23 GB/s doc_throughput=     5 docs/s instructions=   618773884 cycles=   635465803 branch_miss= 1203678 cache_miss= 2316562 cache_ref= 106099349 items=   1000000 avg_time= 198755321 ns]
Creating a source file spanning 134087 KB 
Kostya<Dom>               377045228 ns    377049313 ns            2          880.87k           364.302M        6.95432M       249.387M    1.20488G              8.77524           2.65323       3.19683G           1.1314G                    8.24004                    0.939011           1.39106M     880.28k   137.305M       347.287M/s   6.95432M   249.385M   1.20517G         8.77731    2.65217/s 3.19631G/s      1.1314G               8.24004                0.93879   524.288k        1.3905M/s [best: throughput=  0.36 GB/s doc_throughput=     2 docs/s instructions=  1131399139 cycles=  1204883679 branch_miss=  880870 cache_miss= 6954325 cache_ref= 249387110 items=    524288 avg_time= 376983172 ns]
KostyaSum<Dom>            375454914 ns    375449235 ns            2         881.566k            365.89M        6.95323M       248.341M    1.19972G              8.73765            2.6648       3.19702G          1.13087G                    8.23623                    0.942613           1.39712M    881.087k   137.305M       348.767M/s   6.95322M    248.34M   1.19988G         8.73882    2.66348/s 3.19586G/s     1.13087G               8.23623               0.942487   524.288k       1.39643M/s [best: throughput=  0.37 GB/s doc_throughput=     2 docs/s instructions=  1130874850 cycles=  1199723290 branch_miss=  881566 cache_miss= 6953232 cache_ref= 248340933 items=    524288 avg_time= 375393136 ns]
Kostya<OnDemand>          256438463 ns    256434423 ns            3          1070.4k           536.332M        5.28201M       114.861M    818.348M              5.96007           3.90613       3.19658G          747.021M                    5.44059                     0.91284           2.04794M     1.1196M   137.305M       510.634M/s   5.28202M   114.951M   819.558M         5.96889    3.89963/s 3.19597G/s     747.021M               5.44059               0.911492   524.288k       2.04453M/s [best: throughput=  0.54 GB/s doc_throughput=     3 docs/s instructions=   747020513 cycles=   818347671 branch_miss= 1070403 cache_miss= 5282010 cache_ref= 114860900 items=    524288 avg_time= 256380974 ns]
KostyaSum<OnDemand>       257017523 ns    257015268 ns            3         1.16566M           535.724M        5.28167M       114.883M     819.22M              5.96643           3.90171       3.19636G          749.118M                    5.45587                    0.914428           2.04562M    1.23099M   137.305M        509.48M/s   5.28162M   115.125M   821.343M         5.98189    3.89082/s  3.1957G/s     749.118M               5.45587               0.912064   524.288k       2.03991M/s [best: throughput=  0.54 GB/s doc_throughput=     3 docs/s instructions=   749117609 cycles=   819220233 branch_miss= 1165659 cache_miss= 5281672 cache_ref= 114882651 items=    524288 avg_time= 256958856 ns]
DistinctUserID<Dom>         1582849 ns      1582840 ns          442          13.579k           408.095M          26.58k       948.851k     4.9532M              7.84336           646.216       3.20084G          3.88741M                     6.1557                    0.784829           74.3148k    13.5169k   631.515k       380.493M/s   26.5691k   949.715k   4.97033M         7.87048    631.776/s 3.14013G/s     3.88742M                6.1557               0.782125        115       72.6542k/s [best: throughput=  0.41 GB/s doc_throughput=   646 docs/s instructions=     3887414 cycles=     4953199 branch_miss=   13579 cache_miss=   26580 cache_ref=    948851 items=       115 avg_time=   1554469 ns]
On Demand implementation: arm64
DistinctUserID<OnDemand>    1087300 ns      1087299 ns          643          12.244k           598.953M         22.554k       368.232k    3.37515M              5.34452           948.438       3.20112G          2.59045M                    4.10197                    0.767508            109.07k    12.6143k   631.515k       553.904M/s   22.5752k   369.649k   3.38444M         5.35924     919.71/s 3.11271G/s     2.59046M               4.10197               0.765402        115       105.767k/s [best: throughput=  0.60 GB/s doc_throughput=   948 docs/s instructions=     2590454 cycles=     3375147 branch_miss=   12244 cache_miss=   22554 cache_ref=    368232 items=       115 avg_time=   1058322 ns]
FindTweet<Dom>              1534936 ns      1534953 ns          456           13.11k           420.367M         23.497k       928.518k    4.77955M              7.56838           665.649        3.1815G          3.78856M                    5.99917                    0.792661            665.649    13.1166k   631.515k       392.364M/s   23.4877k   929.696k   4.81422M         7.62329    651.486/s  3.1364G/s     3.78856M               5.99916               0.786952          1        651.486/s [best: throughput=  0.42 GB/s doc_throughput=   665 docs/s instructions=     3788563 cycles=     4779548 branch_miss=   13110 cache_miss=   23497 cache_ref=    928518 items=         1 avg_time=   1505594 ns]
On Demand implementation: arm64
FindTweet<OnDemand>          933566 ns       933576 ns          750           4.683k           700.187M         11.555k       225.824k    2.88723M              4.57191          1.10874k       3.20119G          2.10274M                    3.32967                    0.728289           1.10874k    4.92099k   631.515k        645.11M/s   11.5592k   226.355k   2.89272M          4.5806    1071.15/s 3.09853G/s     2.10274M               3.32967               0.726907          1        1071.15/s [best: throughput=  0.70 GB/s doc_throughput=  1108 docs/s instructions=     2102738 cycles=     2887229 branch_miss=    4683 cache_miss=   11555 cache_ref=    225824 items=         1 avg_time=    904542 ns]
