run_benchmark: v0.8.0~32 /home/jkeiser/simdjson_benchmark_results/v0.7.0/6/ampere-gcc10.2.json -DCMAKE_BUILD_TYPE=Release
git reset --hard v0.8.0~32
HEAD is now at c90ee572 This might make the fuzzer error debuggable. (#1345)
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
-- The simdjson repository appears to be standalone.
-- By default, we attempt to build everything.
-- Building a dynamic library.
-- Library output directory: /home/jkeiser/simdjson_benchmark_results/simdjson/build
-- Importing google_benchmarks (google/benchmark@8982e1e)
-- git Version: v0.2.1-c90ee572
-- Version: 0.2.1
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Importing cjson (DaveGamble/cJSON@c69134d)
-- Importing fastjson (mikeando/fastjson@485f994)
-- Importing gason (vivkin/gason@7aee524)
-- Importing jsmn (zserge/jsmn@18e9fe4)
-- Importing json (nlohmann/json@v3.9.1)
-- Importing json11 (dropbox/json11@ec4e452)
-- Importing rapidjson (Tencent/rapidjson@b32cd94)
-- Importing sajson (chadaustin/sajson@2dcfd35)
-- Importing ujson4c (esnme/ujson4c@e14f3fd)
-- Importing yyjson (ibireme/yyjson@aa33ec5)
-- Importing cxxopts (jarro2783/cxxopts@794c975)
-- cxxopts version 2.2.0
-- We have cxxopts as a dependency and we are buiding the tools (e.g., json2json).
-- Git is available and it is recent. We are enabling checkperf targets.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jkeiser/simdjson_benchmark_results/simdjson/build
make bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
make -f CMakeFiles/Makefile2 bench_ondemand
/usr/bin/cmake -S/home/jkeiser/simdjson_benchmark_results/simdjson -B/home/jkeiser/simdjson_benchmark_results/simdjson/build --check-build-system CMakeFiles/Makefile.cmake 0
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 10
make -f CMakeFiles/Makefile2 benchmark/CMakeFiles/bench_ondemand.dir/all
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/DependInfo.cmake --color=
make -f _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build.make _deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build
make[3]: Nothing to be done for '_deps/google_benchmarks/src/CMakeFiles/benchmark.dir/build'.
[ 80%] Built target benchmark
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated /home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/generated/CMakeFiles/generated-data.dir/DependInfo.cmake --color=
make -f jsonexamples/generated/CMakeFiles/generated-data.dir/build.make jsonexamples/generated/CMakeFiles/generated-data.dir/build
make[3]: Nothing to be done for 'jsonexamples/generated/CMakeFiles/generated-data.dir/build'.
[ 80%] Built target generated-data
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/src /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/src /home/jkeiser/simdjson_benchmark_results/simdjson/build/src/CMakeFiles/simdjson.dir/DependInfo.cmake --color=
Scanning dependencies of target simdjson
make -f src/CMakeFiles/simdjson.dir/build.make src/CMakeFiles/simdjson.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/g++-10  -DSIMDJSON_THREADS_ENABLED=1 -Dsimdjson_EXPORTS -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/src  -O3 -DNDEBUG -fPIC   -pthread -fPIC -Werror -Wall -Wextra -Weffc++ -Wsign-compare -Wshadow -Wwrite-strings -Wpointer-arith -Winit-self -Wconversion -Wno-sign-conversion -std=c++17 -o CMakeFiles/simdjson.dir/simdjson.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/src/simdjson.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/simdjson.dir/link.txt --verbose=1
/usr/bin/g++-10 -fPIC -O3 -DNDEBUG  -shared -Wl,-soname,libsimdjson.so.6 -o ../libsimdjson.so.6.0.0 CMakeFiles/simdjson.dir/simdjson.cpp.o  -pthread 
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/src && /usr/bin/cmake -E cmake_symlink_library ../libsimdjson.so.6.0.0 ../libsimdjson.so.6 ../libsimdjson.so
[ 90%] Built target simdjson
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/depend
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build && /usr/bin/cmake -E cmake_depends "Unix Makefiles" /home/jkeiser/simdjson_benchmark_results/simdjson /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark/CMakeFiles/bench_ondemand.dir/DependInfo.cmake --color=
Scanning dependencies of target bench_ondemand
make -f benchmark/CMakeFiles/bench_ondemand.dir/build.make benchmark/CMakeFiles/bench_ondemand.dir/build
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/g++-10  -DSIMDJSON_BENCHMARK_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/build/jsonexamples/\" -DSIMDJSON_MINEFIELD_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/minefield/\" -DSIMDJSON_TEST_DATA_DIR=\"/home/jkeiser/simdjson_benchmark_results/simdjson/jsonchecker/\" -DSIMDJSON_THREADS_ENABLED=1 -DSIMDJSON_USING_LIBRARY=1 -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/. -I/home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/linux -I/home/jkeiser/simdjson_benchmark_results/simdjson/include -I/home/jkeiser/simdjson_benchmark_results/simdjson/dependencies/.cache/google_benchmarks/src/../include  -O3 -DNDEBUG   -pthread -std=c++17 -o CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o -c /home/jkeiser/simdjson_benchmark_results/simdjson/benchmark/bench_ondemand.cpp
cd /home/jkeiser/simdjson_benchmark_results/simdjson/build/benchmark && /usr/bin/cmake -E cmake_link_script CMakeFiles/bench_ondemand.dir/link.txt --verbose=1
/usr/bin/g++-10  -O3 -DNDEBUG   CMakeFiles/bench_ondemand.dir/bench_ondemand.cpp.o  -o bench_ondemand  -Wl,-rpath,/home/jkeiser/simdjson_benchmark_results/simdjson/build ../libsimdjson.so.6.0.0 ../_deps/google_benchmarks/src/libbenchmark.a -pthread /usr/lib/aarch64-linux-gnu/librt.so 
[100%] Built target bench_ondemand
/usr/bin/cmake -E cmake_progress_start /home/jkeiser/simdjson_benchmark_results/simdjson/build/CMakeFiles 0
benchmark/bench_ondemand --benchmark_counters_tabular=true --benchmark_out=/home/jkeiser/simdjson_benchmark_results/v0.7.0/6/ampere-gcc10.2.json --benchmark_out_format=json
2021-01-24 23:31:13
Running benchmark/bench_ondemand
Run on (32 X 3300 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x32)
  L1 Instruction 32 KiB (x32)
  L2 Unified 256 KiB (x16)
Load Average: 1.01, 0.98, 0.88
On Demand implementation: arm64
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Benchmark                         Time             CPU   Iterations best_branch_miss best_bytes_per_sec best_cache_miss best_cache_ref best_cycles best_cycles_per_byte best_docs_per_sec best_frequency best_instructions best_instructions_per_byte best_instructions_per_cycle best_items_per_sec branch_miss      bytes bytes_per_second cache_miss  cache_ref     cycles cycles_per_byte docs_per_sec  frequency instructions instructions_per_byte instructions_per_cycle      items items_per_second
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PartialTweets<OnDemand>     1091408 ns      1091420 ns          641           6.996k           592.225M         22.773k       401.134k    3.41326M              5.40487           937.785        3.2009G          2.74889M                    4.35285                    0.805357           93.7785k    7.07897k   631.515k       551.813M/s   22.7748k   401.274k   3.41664M         5.41023    916.238/s 3.13045G/s     2.74889M               4.35285                0.80456        100       91.6238k/s [best: throughput=  0.59 GB/s doc_throughput=   937 docs/s instructions=     2748892 cycles=     3413258 branch_miss=    6996 cache_miss=   22773 cache_ref=    401134 items=       100 avg_time=   1068509 ns]
PartialTweets<Dom>          1611867 ns      1611860 ns          435          17.504k           399.861M         25.955k       906.084k    5.05483M               8.0043           633.177        3.2006G          3.92204M                    6.21052                    0.775898           63.3177k    17.5276k   631.515k       373.643M/s   25.9519k    900.87k   5.07645M         8.03853    620.401/s 3.14944G/s     3.92204M               6.21052               0.772594        100       62.0401k/s [best: throughput=  0.40 GB/s doc_throughput=   633 docs/s instructions=     3922037 cycles=     5054833 branch_miss=   17504 cache_miss=   25955 cache_ref=    906084 items=       100 avg_time=   1587829 ns]
Creating a source file spanning 44921 KB 
LargeRandom<Dom>          309626072 ns    309628979 ns            2         1.90882M           148.589M        3.97987M       245.731M    989.636M              21.5144           3.23028       3.19681G          1099.47M                    23.9022                     1.11099           3.23028M    1.90929M   45.9988M       141.679M/s   3.97986M   245.733M   989.696M         21.5157    3.22967/s 3.19639G/s     1099.47M               23.9022                1.11092      1000k       3.22967M/s [best: throughput=  0.15 GB/s doc_throughput=     3 docs/s instructions=  1099472988 cycles=   989636459 branch_miss= 1908816 cache_miss= 3979869 cache_ref= 245731160 items=   1000000 avg_time= 309571583 ns]
LargeRandomSum<Dom>       313209309 ns    313203412 ns            2         1.90917M            146.92M        3.97978M        242.71M    1000.86M              21.7584             3.194       3.19674G          1.10647G                    24.0544                     1.10552             3.194M    1.90941M   45.9988M       140.062M/s   3.97978M   242.711M   1001.11M         21.7639    3.19281/s 3.19637G/s     1.10647G               24.0544                1.10524      1000k       3.19281M/s [best: throughput=  0.15 GB/s doc_throughput=     3 docs/s instructions=  1106473004 cycles=  1000858922 branch_miss= 1909171 cache_miss= 3979785 cache_ref= 242710303 items=   1000000 avg_time= 313153443 ns]
LargeRandom<OnDemand>     182153737 ns    182150273 ns            4         1.20821M           252.625M        2.31827M        133.48M    582.144M              12.6556             5.492       3.19713G          678.959M                    14.7604                     1.16631             5.492M    1.20826M   45.9988M       240.833M/s   2.31811M    133.48M   582.191M         12.6567    5.48997/s 3.19621G/s     678.959M               14.7604                1.16621      1000k       5.48997M/s [best: throughput=  0.25 GB/s doc_throughput=     5 docs/s instructions=   678959078 cycles=   582144224 branch_miss= 1208214 cache_miss= 2318272 cache_ref= 133480354 items=   1000000 avg_time= 182103905 ns]
LargeRandomSum<OnDemand>  176090280 ns    176092034 ns            4          1.1687M           261.332M        2.31709M       109.429M    562.818M              12.2355           5.68127       3.19752G          649.959M                    14.1299                     1.15483           5.68127M    1.16907M   45.9988M       249.119M/s   2.31709M   109.429M    562.84M          12.236    5.67885/s 3.19629G/s     649.959M               14.1299                1.15478      1000k       5.67885M/s [best: throughput=  0.26 GB/s doc_throughput=     5 docs/s instructions=   649958502 cycles=   562818116 branch_miss= 1168705 cache_miss= 2317089 cache_ref= 109429082 items=   1000000 avg_time= 176036847 ns]
Creating a source file spanning 134087 KB 
Kostya<Dom>               382267979 ns    382262324 ns            2         1099.84k           359.261M        6.94605M       246.877M    1.22154G              8.89658           2.61652        3.1962G          1.14657G                    8.35052                    0.938622           1.37181M    1099.04k   137.305M       342.551M/s   6.94607M   246.877M   1.22173G          8.8979      2.616/s 3.19604G/s     1.14657G               8.35052               0.938482   524.288k       1.37154M/s [best: throughput=  0.36 GB/s doc_throughput=     2 docs/s instructions=  1146568697 cycles=  1221544858 branch_miss= 1099835 cache_miss= 6946050 cache_ref= 246876870 items=    524288 avg_time= 382206868 ns]
KostyaSum<Dom>            382085047 ns    382080790 ns            2         1097.55k           359.433M        6.94538M       245.274M    1.22108G              8.89316           2.61777        3.1965G          1.14971G                    8.37343                    0.941559           1.37247M    1098.17k   137.305M       342.714M/s   6.94567M   245.274M   1.22116G         8.89374    2.61725/s 3.19607G/s     1.14971G               8.37343               0.941497   524.288k       1.37219M/s [best: throughput=  0.36 GB/s doc_throughput=     2 docs/s instructions=  1149714432 cycles=  1221075521 branch_miss= 1097546 cache_miss= 6945376 cache_ref= 245274224 items=    524288 avg_time= 382024659 ns]
Kostya<OnDemand>          256616751 ns    256613179 ns            3         1.14443M           535.239M        5.28102M       132.516M    820.112M              5.97293           3.89818       3.19694G          789.781M                    5.75202                    0.963015           2.04377M    1.14456M   137.305M       510.279M/s   5.28105M   132.517M   820.144M         5.97316    3.89692/s 3.19603G/s     789.781M               5.75202               0.962978   524.288k       2.04311M/s [best: throughput=  0.54 GB/s doc_throughput=     3 docs/s instructions=   789780785 cycles=   820112467 branch_miss= 1144428 cache_miss= 5281018 cache_ref= 132516151 items=    524288 avg_time= 256562062 ns]
KostyaSum<OnDemand>       257300409 ns    257303105 ns            3         1.15962M           533.864M        5.28171M       130.441M    822.306M               5.9889           3.88816       3.19726G          789.257M                     5.7482                    0.959809           2.03852M    1.15986M   137.305M        508.91M/s   5.28176M   130.442M   822.399M         5.98958    3.88647/s 3.19623G/s     789.257M                5.7482                 0.9597   524.288k       2.03763M/s [best: throughput=  0.53 GB/s doc_throughput=     3 docs/s instructions=   789256508 cycles=   822305992 branch_miss= 1159620 cache_miss= 5281706 cache_ref= 130440930 items=    524288 avg_time= 257244039 ns]
DistinctUserID<Dom>         1604371 ns      1604388 ns          438          17.626k           402.768M         26.595k       894.991k    5.01845M              7.94669            637.78       3.20067G          3.86114M                    6.11409                    0.769388           73.3447k    17.6333k   631.515k       375.383M/s   26.6062k    889.33k   5.04205M         7.98406    623.291/s 3.14266G/s     3.86114M               6.11408               0.765786        115       71.6784k/s [best: throughput=  0.40 GB/s doc_throughput=   637 docs/s instructions=     3861138 cycles=     5018454 branch_miss=   17626 cache_miss=   26595 cache_ref=    894991 items=       115 avg_time=   1576961 ns]
On Demand implementation: arm64
DistinctUserID<OnDemand>    1080255 ns      1080267 ns          649           7.254k            601.08M         22.419k       377.158k    3.36304M              5.32536           951.807       3.20097G          2.68649M                    4.25404                    0.798826           109.458k    7.38705k   631.515k        557.51M/s   22.4253k   377.422k    3.3669M         5.33147    925.698/s 3.11673G/s     2.68649M               4.25403                0.79791        115       106.455k/s [best: throughput=  0.60 GB/s doc_throughput=   951 docs/s instructions=     2686487 cycles=     3363043 branch_miss=    7254 cache_miss=   22419 cache_ref=    377158 items=       115 avg_time=   1052905 ns]
FindTweet<Dom>              1559986 ns      1559979 ns          450          17.032k           414.095M         23.518k       871.721k    4.88151M              7.72984           655.717       3.20089G          3.76283M                    5.95843                    0.770835            655.717    17.1824k   631.515k       386.069M/s   23.5192k   869.426k   4.89605M         7.75286    641.034/s 3.13853G/s     3.76283M               5.95842               0.768545          1        641.034/s [best: throughput=  0.41 GB/s doc_throughput=   655 docs/s instructions=     3762835 cycles=     4881507 branch_miss=   17032 cache_miss=   23518 cache_ref=    871721 items=         1 avg_time=   1531262 ns]
On Demand implementation: arm64
FindTweet<OnDemand>          944275 ns       944285 ns          741           4.069k            690.96M         11.561k        194.69k    2.92607M              4.63342           1094.13        3.2015G          2.06107M                     3.2637                    0.704382            1094.13    4.13333k   631.515k       637.794M/s   11.5623k     194.8k   2.92832M         4.63698       1059/s  3.1011G/s     2.06108M                3.2637               0.703841          1           1059/s [best: throughput=  0.69 GB/s doc_throughput=  1094 docs/s instructions=     2061073 cycles=     2926072 branch_miss=    4069 cache_miss=   11561 cache_ref=    194690 items=         1 avg_time=    915619 ns]
